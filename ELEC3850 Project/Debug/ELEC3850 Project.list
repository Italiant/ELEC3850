
ELEC3850 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a134  0800a134  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a13c  0800a13c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009af4  200001ec  0800a330  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009ce0  0800a330  00029ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e021  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e80  00000000  00000000  0003e23d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001858  00000000  00000000  000420c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016a0  00000000  00000000  00043918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002654f  00000000  00000000  00044fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000163b6  00000000  00000000  0006b507  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d59ee  00000000  00000000  000818bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001572ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a1c  00000000  00000000  00157328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a068 	.word	0x0800a068

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a068 	.word	0x0800a068

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fd37 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f008 f900 	bl	80087b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd4f 	bl	8001086 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fd17 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000011c 	.word	0x2000011c
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000218 	.word	0x20000218

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000218 	.word	0x20000218

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f008 f89e 	bl	8008808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa40 	bl	8000b80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000746:	2b01      	cmp	r3, #1
 8000748:	d101      	bne.n	800074e <HAL_ADC_Start_DMA+0x1e>
 800074a:	2302      	movs	r3, #2
 800074c:	e0cc      	b.n	80008e8 <HAL_ADC_Start_DMA+0x1b8>
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2201      	movs	r2, #1
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b01      	cmp	r3, #1
 8000762:	d018      	beq.n	8000796 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f042 0201 	orr.w	r2, r2, #1
 8000772:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000774:	4b5e      	ldr	r3, [pc, #376]	; (80008f0 <HAL_ADC_Start_DMA+0x1c0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a5e      	ldr	r2, [pc, #376]	; (80008f4 <HAL_ADC_Start_DMA+0x1c4>)
 800077a:	fba2 2303 	umull	r2, r3, r2, r3
 800077e:	0c9a      	lsrs	r2, r3, #18
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000788:	e002      	b.n	8000790 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	3b01      	subs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f9      	bne.n	800078a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	f040 80a0 	bne.w	80008e6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d007      	beq.n	80007d8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007e4:	d106      	bne.n	80007f4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f023 0206 	bic.w	r2, r3, #6
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44
 80007f2:	e002      	b.n	80007fa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2200      	movs	r2, #0
 80007f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000802:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <HAL_ADC_Start_DMA+0x1c8>)
 8000804:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080a:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <HAL_ADC_Start_DMA+0x1cc>)
 800080c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000812:	4a3b      	ldr	r2, [pc, #236]	; (8000900 <HAL_ADC_Start_DMA+0x1d0>)
 8000814:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081a:	4a3a      	ldr	r2, [pc, #232]	; (8000904 <HAL_ADC_Start_DMA+0x1d4>)
 800081c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000826:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000836:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000846:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	334c      	adds	r3, #76	; 0x4c
 8000852:	4619      	mov	r1, r3
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f000 fcd0 	bl	80011fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 031f 	and.w	r3, r3, #31
 8000864:	2b00      	cmp	r3, #0
 8000866:	d12a      	bne.n	80008be <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <HAL_ADC_Start_DMA+0x1d8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d015      	beq.n	800089e <HAL_ADC_Start_DMA+0x16e>
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a25      	ldr	r2, [pc, #148]	; (800090c <HAL_ADC_Start_DMA+0x1dc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d105      	bne.n	8000888 <HAL_ADC_Start_DMA+0x158>
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <HAL_ADC_Start_DMA+0x1c8>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00a      	beq.n	800089e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a20      	ldr	r2, [pc, #128]	; (8000910 <HAL_ADC_Start_DMA+0x1e0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d129      	bne.n	80008e6 <HAL_ADC_Start_DMA+0x1b6>
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_ADC_Start_DMA+0x1c8>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d823      	bhi.n	80008e6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d11c      	bne.n	80008e6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	e013      	b.n	80008e6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <HAL_ADC_Start_DMA+0x1d8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d10e      	bne.n	80008e6 <HAL_ADC_Start_DMA+0x1b6>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d107      	bne.n	80008e6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000011c 	.word	0x2000011c
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	40012300 	.word	0x40012300
 80008fc:	08000d79 	.word	0x08000d79
 8000900:	08000e33 	.word	0x08000e33
 8000904:	08000e4f 	.word	0x08000e4f
 8000908:	40012000 	.word	0x40012000
 800090c:	40012100 	.word	0x40012100
 8000910:	40012200 	.word	0x40012200

08000914 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000950:	2b01      	cmp	r3, #1
 8000952:	d101      	bne.n	8000958 <HAL_ADC_ConfigChannel+0x1c>
 8000954:	2302      	movs	r3, #2
 8000956:	e105      	b.n	8000b64 <HAL_ADC_ConfigChannel+0x228>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b09      	cmp	r3, #9
 8000966:	d925      	bls.n	80009b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68d9      	ldr	r1, [r3, #12]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	b29b      	uxth	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	3b1e      	subs	r3, #30
 800097e:	2207      	movs	r2, #7
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43da      	mvns	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	400a      	ands	r2, r1
 800098c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	68d9      	ldr	r1, [r3, #12]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	4603      	mov	r3, r0
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4403      	add	r3, r0
 80009a6:	3b1e      	subs	r3, #30
 80009a8:	409a      	lsls	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	430a      	orrs	r2, r1
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	e022      	b.n	80009fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6919      	ldr	r1, [r3, #16]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	2207      	movs	r2, #7
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	400a      	ands	r2, r1
 80009d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6919      	ldr	r1, [r3, #16]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689a      	ldr	r2, [r3, #8]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4403      	add	r3, r0
 80009f0:	409a      	lsls	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d824      	bhi.n	8000a4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	3b05      	subs	r3, #5
 8000a14:	221f      	movs	r2, #31
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	400a      	ands	r2, r1
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	3b05      	subs	r3, #5
 8000a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
 8000a4a:	e04c      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b0c      	cmp	r3, #12
 8000a52:	d824      	bhi.n	8000a9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	3b23      	subs	r3, #35	; 0x23
 8000a66:	221f      	movs	r2, #31
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43da      	mvns	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	400a      	ands	r2, r1
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3b23      	subs	r3, #35	; 0x23
 8000a90:	fa00 f203 	lsl.w	r2, r0, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a9c:	e023      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	3b41      	subs	r3, #65	; 0x41
 8000ab0:	221f      	movs	r2, #31
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	400a      	ands	r2, r1
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	3b41      	subs	r3, #65	; 0x41
 8000ada:	fa00 f203 	lsl.w	r2, r0, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <HAL_ADC_ConfigChannel+0x234>)
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <HAL_ADC_ConfigChannel+0x238>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d109      	bne.n	8000b08 <HAL_ADC_ConfigChannel+0x1cc>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b12      	cmp	r3, #18
 8000afa:	d105      	bne.n	8000b08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_ADC_ConfigChannel+0x238>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d123      	bne.n	8000b5a <HAL_ADC_ConfigChannel+0x21e>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b10      	cmp	r3, #16
 8000b18:	d003      	beq.n	8000b22 <HAL_ADC_ConfigChannel+0x1e6>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b11      	cmp	r3, #17
 8000b20:	d11b      	bne.n	8000b5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d111      	bne.n	8000b5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_ADC_ConfigChannel+0x23c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_ADC_ConfigChannel+0x240>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	0c9a      	lsrs	r2, r3, #18
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b4c:	e002      	b.n	8000b54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f9      	bne.n	8000b4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40012300 	.word	0x40012300
 8000b74:	40012000 	.word	0x40012000
 8000b78:	2000011c 	.word	0x2000011c
 8000b7c:	431bde83 	.word	0x431bde83

08000b80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b88:	4b79      	ldr	r3, [pc, #484]	; (8000d70 <ADC_Init+0x1f0>)
 8000b8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6859      	ldr	r1, [r3, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	021a      	lsls	r2, r3, #8
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6899      	ldr	r1, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68da      	ldr	r2, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c12:	4a58      	ldr	r2, [pc, #352]	; (8000d74 <ADC_Init+0x1f4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d022      	beq.n	8000c5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6899      	ldr	r1, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6899      	ldr	r1, [r3, #8]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	e00f      	b.n	8000c7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0202 	bic.w	r2, r2, #2
 8000c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6899      	ldr	r1, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e1b      	ldrb	r3, [r3, #24]
 8000c98:	005a      	lsls	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d01b      	beq.n	8000ce4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6859      	ldr	r1, [r3, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	035a      	lsls	r2, r3, #13
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	e007      	b.n	8000cf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	051a      	lsls	r2, r3, #20
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6899      	ldr	r1, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d36:	025a      	lsls	r2, r3, #9
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6899      	ldr	r1, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	029a      	lsls	r2, r3, #10
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	609a      	str	r2, [r3, #8]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	40012300 	.word	0x40012300
 8000d74:	0f000001 	.word	0x0f000001

08000d78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d13c      	bne.n	8000e0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d12b      	bne.n	8000e04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d127      	bne.n	8000e04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d119      	bne.n	8000e04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0220 	bic.w	r2, r2, #32
 8000dde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f043 0201 	orr.w	r2, r3, #1
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f007 f8c9 	bl	8007f9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000e0a:	e00e      	b.n	8000e2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff fd85 	bl	8000928 <HAL_ADC_ErrorCallback>
}
 8000e1e:	e004      	b.n	8000e2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	4798      	blx	r3
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fd67 	bl	8000914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f043 0204 	orr.w	r2, r3, #4
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff fd5a 	bl	8000928 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff29 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff3e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff31 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff face 	bl	800064c <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e099      	b.n	80011f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	e00f      	b.n	80010fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010de:	f7ff fab5 	bl	800064c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d908      	bls.n	80010fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2220      	movs	r2, #32
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e078      	b.n	80011f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e8      	bne.n	80010de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_DMA_Init+0x158>)
 8001118:	4013      	ands	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800112a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	2b04      	cmp	r3, #4
 8001156:	d107      	bne.n	8001168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4313      	orrs	r3, r2
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f023 0307 	bic.w	r3, r3, #7
 800117e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4313      	orrs	r3, r2
 8001188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	2b04      	cmp	r3, #4
 8001190:	d117      	bne.n	80011c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00e      	beq.n	80011c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fa77 	bl	8001698 <DMA_CheckFifoParam>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2240      	movs	r2, #64	; 0x40
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011be:	2301      	movs	r3, #1
 80011c0:	e016      	b.n	80011f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa2e 	bl	800162c <DMA_CalcBaseAndBitshift>
 80011d0:	4603      	mov	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d8:	223f      	movs	r2, #63	; 0x3f
 80011da:	409a      	lsls	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	f010803f 	.word	0xf010803f

080011fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_DMA_Start_IT+0x26>
 800121e:	2302      	movs	r3, #2
 8001220:	e048      	b.n	80012b4 <HAL_DMA_Start_IT+0xb8>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d137      	bne.n	80012a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 f9c0 	bl	80015d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	223f      	movs	r2, #63	; 0x3f
 8001256:	409a      	lsls	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0216 	orr.w	r2, r2, #22
 800126a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0208 	orr.w	r2, r2, #8
 8001292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e005      	b.n	80012b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80012ae:	2302      	movs	r3, #2
 80012b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012c8:	4b92      	ldr	r3, [pc, #584]	; (8001514 <HAL_DMA_IRQHandler+0x258>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a92      	ldr	r2, [pc, #584]	; (8001518 <HAL_DMA_IRQHandler+0x25c>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0a9b      	lsrs	r3, r3, #10
 80012d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	2208      	movs	r2, #8
 80012e8:	409a      	lsls	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d01a      	beq.n	8001328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0204 	bic.w	r2, r2, #4
 800130e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2208      	movs	r2, #8
 8001316:	409a      	lsls	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2201      	movs	r2, #1
 800132e:	409a      	lsls	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d012      	beq.n	800135e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	2201      	movs	r2, #1
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0202 	orr.w	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2204      	movs	r2, #4
 8001364:	409a      	lsls	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d012      	beq.n	8001394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00b      	beq.n	8001394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2204      	movs	r2, #4
 8001382:	409a      	lsls	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2210      	movs	r2, #16
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d043      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d03c      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b6:	2210      	movs	r2, #16
 80013b8:	409a      	lsls	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d018      	beq.n	80013fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d108      	bne.n	80013ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d024      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
 80013ea:	e01f      	b.n	800142c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01b      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
 80013fc:	e016      	b.n	800142c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0208 	bic.w	r2, r2, #8
 800141a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	2220      	movs	r2, #32
 8001432:	409a      	lsls	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 808e 	beq.w	800155a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8086 	beq.w	800155a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2220      	movs	r2, #32
 8001454:	409a      	lsls	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	d136      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0216 	bic.w	r2, r2, #22
 8001474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <HAL_DMA_IRQHandler+0x1da>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0208 	bic.w	r2, r2, #8
 80014a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	223f      	movs	r2, #63	; 0x3f
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d07d      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
        }
        return;
 80014d2:	e078      	b.n	80015c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01c      	beq.n	800151c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d108      	bne.n	8001502 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d030      	beq.n	800155a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
 8001500:	e02b      	b.n	800155a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d027      	beq.n	800155a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	4798      	blx	r3
 8001512:	e022      	b.n	800155a <HAL_DMA_IRQHandler+0x29e>
 8001514:	2000011c 	.word	0x2000011c
 8001518:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0210 	bic.w	r2, r2, #16
 8001538:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155e:	2b00      	cmp	r3, #0
 8001560:	d032      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d022      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3301      	adds	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	429a      	cmp	r2, r3
 8001590:	d307      	bcc.n	80015a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f2      	bne.n	8001586 <HAL_DMA_IRQHandler+0x2ca>
 80015a0:	e000      	b.n	80015a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
 80015c4:	e000      	b.n	80015c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015c6:	bf00      	nop
    }
  }
}
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop

080015d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b40      	cmp	r3, #64	; 0x40
 80015fc:	d108      	bne.n	8001610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800160e:	e007      	b.n	8001620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3b10      	subs	r3, #16
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <DMA_CalcBaseAndBitshift+0x64>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <DMA_CalcBaseAndBitshift+0x68>)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d909      	bls.n	800166e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	659a      	str	r2, [r3, #88]	; 0x58
 800166c:	e007      	b.n	800167e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001676:	f023 0303 	bic.w	r3, r3, #3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	aaaaaaab 	.word	0xaaaaaaab
 8001694:	0800a0e0 	.word	0x0800a0e0

08001698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d11f      	bne.n	80016f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d855      	bhi.n	8001764 <DMA_CheckFifoParam+0xcc>
 80016b8:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <DMA_CheckFifoParam+0x28>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016e3 	.word	0x080016e3
 80016c8:	080016d1 	.word	0x080016d1
 80016cc:	08001765 	.word	0x08001765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d045      	beq.n	8001768 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e0:	e042      	b.n	8001768 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ea:	d13f      	bne.n	800176c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f0:	e03c      	b.n	800176c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fa:	d121      	bne.n	8001740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d836      	bhi.n	8001770 <DMA_CheckFifoParam+0xd8>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <DMA_CheckFifoParam+0x70>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	0800171f 	.word	0x0800171f
 8001710:	08001719 	.word	0x08001719
 8001714:	08001731 	.word	0x08001731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
      break;
 800171c:	e02f      	b.n	800177e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800172e:	e021      	b.n	8001774 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001738:	d11e      	bne.n	8001778 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800173e:	e01b      	b.n	8001778 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d902      	bls.n	800174c <DMA_CheckFifoParam+0xb4>
 8001746:	2b03      	cmp	r3, #3
 8001748:	d003      	beq.n	8001752 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800174a:	e018      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
      break;
 8001750:	e015      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00e      	beq.n	800177c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
      break;
 8001762:	e00b      	b.n	800177c <DMA_CheckFifoParam+0xe4>
      break;
 8001764:	bf00      	nop
 8001766:	e00a      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 8001768:	bf00      	nop
 800176a:	e008      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 800176c:	bf00      	nop
 800176e:	e006      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 8001770:	bf00      	nop
 8001772:	e004      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 8001774:	bf00      	nop
 8001776:	e002      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;   
 8001778:	bf00      	nop
 800177a:	e000      	b.n	800177e <DMA_CheckFifoParam+0xe6>
      break;
 800177c:	bf00      	nop
    }
  } 
  
  return status; 
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	e16b      	b.n	8001a80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	f040 815a 	bne.w	8001a7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x4a>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d123      	bne.n	800181e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	69b9      	ldr	r1, [r7, #24]
 800181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0203 	and.w	r2, r3, #3
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d00b      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001866:	2b11      	cmp	r3, #17
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b12      	cmp	r3, #18
 8001870:	d130      	bne.n	80018d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80b4 	beq.w	8001a7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b5f      	ldr	r3, [pc, #380]	; (8001a94 <HAL_GPIO_Init+0x308>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a5e      	ldr	r2, [pc, #376]	; (8001a94 <HAL_GPIO_Init+0x308>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <HAL_GPIO_Init+0x308>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192e:	4a5a      	ldr	r2, [pc, #360]	; (8001a98 <HAL_GPIO_Init+0x30c>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <HAL_GPIO_Init+0x310>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d02b      	beq.n	80019b2 <HAL_GPIO_Init+0x226>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a50      	ldr	r2, [pc, #320]	; (8001aa0 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d025      	beq.n	80019ae <HAL_GPIO_Init+0x222>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01f      	beq.n	80019aa <HAL_GPIO_Init+0x21e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d019      	beq.n	80019a6 <HAL_GPIO_Init+0x21a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0x216>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_GPIO_Init+0x324>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d00d      	beq.n	800199e <HAL_GPIO_Init+0x212>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4b      	ldr	r2, [pc, #300]	; (8001ab4 <HAL_GPIO_Init+0x328>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d007      	beq.n	800199a <HAL_GPIO_Init+0x20e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4a      	ldr	r2, [pc, #296]	; (8001ab8 <HAL_GPIO_Init+0x32c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_GPIO_Init+0x20a>
 8001992:	2307      	movs	r3, #7
 8001994:	e00e      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 8001996:	2308      	movs	r3, #8
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 800199a:	2306      	movs	r3, #6
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 800199e:	2305      	movs	r3, #5
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x228>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4934      	ldr	r1, [pc, #208]	; (8001a98 <HAL_GPIO_Init+0x30c>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_GPIO_Init+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_GPIO_Init+0x330>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019fc:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_GPIO_Init+0x330>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f ae90 	bls.w	80017a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3724      	adds	r7, #36	; 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	887b      	ldrh	r3, [r7, #2]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	401a      	ands	r2, r3
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d104      	bne.n	8001b46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	041a      	lsls	r2, r3, #16
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f806 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e10f      	b.n	8001dd2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f006 fe96 	bl	80088f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be4:	f002 fb36 	bl	8004254 <HAL_RCC_GetPCLK1Freq>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a7b      	ldr	r2, [pc, #492]	; (8001ddc <HAL_I2C_Init+0x23c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d807      	bhi.n	8001c04 <HAL_I2C_Init+0x64>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_I2C_Init+0x240>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e006      	b.n	8001c12 <HAL_I2C_Init+0x72>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a77      	ldr	r2, [pc, #476]	; (8001de4 <HAL_I2C_Init+0x244>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	bf94      	ite	ls
 8001c0c:	2301      	movls	r3, #1
 8001c0e:	2300      	movhi	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0db      	b.n	8001dd2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a72      	ldr	r2, [pc, #456]	; (8001de8 <HAL_I2C_Init+0x248>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0c9b      	lsrs	r3, r3, #18
 8001c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a64      	ldr	r2, [pc, #400]	; (8001ddc <HAL_I2C_Init+0x23c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d802      	bhi.n	8001c54 <HAL_I2C_Init+0xb4>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	e009      	b.n	8001c68 <HAL_I2C_Init+0xc8>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a63      	ldr	r2, [pc, #396]	; (8001dec <HAL_I2C_Init+0x24c>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	3301      	adds	r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4956      	ldr	r1, [pc, #344]	; (8001ddc <HAL_I2C_Init+0x23c>)
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d80d      	bhi.n	8001ca4 <HAL_I2C_Init+0x104>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	bf38      	it	cc
 8001ca0:	2304      	movcc	r3, #4
 8001ca2:	e04f      	b.n	8001d44 <HAL_I2C_Init+0x1a4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_I2C_Init+0x130>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e58      	subs	r0, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e012      	b.n	8001cf6 <HAL_I2C_Init+0x156>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	0099      	lsls	r1, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Init+0x15e>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e022      	b.n	8001d44 <HAL_I2C_Init+0x1a4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10e      	bne.n	8001d24 <HAL_I2C_Init+0x184>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1e58      	subs	r0, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	440b      	add	r3, r1
 8001d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d22:	e00f      	b.n	8001d44 <HAL_I2C_Init+0x1a4>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	0099      	lsls	r1, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	6809      	ldr	r1, [r1, #0]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6911      	ldr	r1, [r2, #16]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68d2      	ldr	r2, [r2, #12]
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	000186a0 	.word	0x000186a0
 8001de0:	001e847f 	.word	0x001e847f
 8001de4:	003d08ff 	.word	0x003d08ff
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	10624dd3 	.word	0x10624dd3

08001df0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e128      	b.n	8002054 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a90      	ldr	r2, [pc, #576]	; (800205c <HAL_I2S_Init+0x26c>)
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f006 fdb3 	bl	8008988 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e38:	f023 030f 	bic.w	r3, r3, #15
 8001e3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2202      	movs	r2, #2
 8001e44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d060      	beq.n	8001f10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e56:	2310      	movs	r3, #16
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e001      	b.n	8001e60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d802      	bhi.n	8001e6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f002 fae6 	bl	8004440 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e74:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7e:	d125      	bne.n	8001ecc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e01f      	b.n	8001eea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	3305      	adds	r3, #5
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e00e      	b.n	8001eea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	3305      	adds	r3, #5
 8001ee8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <HAL_I2S_Init+0x270>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e003      	b.n	8001f18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d902      	bls.n	8001f24 <HAL_I2S_Init+0x134>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d907      	bls.n	8001f34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f043 0210 	orr.w	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e08f      	b.n	8002054 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	ea42 0103 	orr.w	r1, r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6851      	ldr	r1, [r2, #4]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	68d2      	ldr	r2, [r2, #12]
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6992      	ldr	r2, [r2, #24]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d161      	bne.n	8002044 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a38      	ldr	r2, [pc, #224]	; (8002064 <HAL_I2S_Init+0x274>)
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a37      	ldr	r2, [pc, #220]	; (8002068 <HAL_I2S_Init+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2S_Init+0x1a4>
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_I2S_Init+0x27c>)
 8001f92:	e001      	b.n	8001f98 <HAL_I2S_Init+0x1a8>
 8001f94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4932      	ldr	r1, [pc, #200]	; (8002068 <HAL_I2S_Init+0x278>)
 8001fa0:	428a      	cmp	r2, r1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2S_Init+0x1b8>
 8001fa4:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_I2S_Init+0x27c>)
 8001fa6:	e001      	b.n	8001fac <HAL_I2S_Init+0x1bc>
 8001fa8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001fac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fb0:	f023 030f 	bic.w	r3, r3, #15
 8001fb4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_I2S_Init+0x278>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2S_Init+0x1d4>
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_I2S_Init+0x27c>)
 8001fc2:	e001      	b.n	8001fc8 <HAL_I2S_Init+0x1d8>
 8001fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc8:	2202      	movs	r2, #2
 8001fca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <HAL_I2S_Init+0x278>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_I2S_Init+0x1ea>
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_I2S_Init+0x27c>)
 8001fd8:	e001      	b.n	8001fde <HAL_I2S_Init+0x1ee>
 8001fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fea:	d003      	beq.n	8001ff4 <HAL_I2S_Init+0x204>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e001      	b.n	8002000 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	b299      	uxth	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002016:	4303      	orrs	r3, r0
 8002018:	b29b      	uxth	r3, r3
 800201a:	430b      	orrs	r3, r1
 800201c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800201e:	4313      	orrs	r3, r2
 8002020:	b29a      	uxth	r2, r3
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	4313      	orrs	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800202c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_I2S_Init+0x278>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_I2S_Init+0x24c>
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_I2S_Init+0x27c>)
 800203a:	e001      	b.n	8002040 <HAL_I2S_Init+0x250>
 800203c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002040:	897a      	ldrh	r2, [r7, #10]
 8002042:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	08002167 	.word	0x08002167
 8002060:	cccccccd 	.word	0xcccccccd
 8002064:	0800227d 	.word	0x0800227d
 8002068:	40003800 	.word	0x40003800
 800206c:	40003400 	.word	0x40003400

08002070 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c9a      	adds	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ffb8 	bl	8002070 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	b292      	uxth	r2, r2
 800211c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	1c9a      	adds	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10e      	bne.n	800215e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800214e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff93 	bl	8002084 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b04      	cmp	r3, #4
 8002180:	d13a      	bne.n	80021f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d109      	bne.n	80021a0 <I2S_IRQHandler+0x3a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d102      	bne.n	80021a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffb4 	bl	8002108 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d126      	bne.n	80021f8 <I2S_IRQHandler+0x92>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d11f      	bne.n	80021f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f043 0202 	orr.w	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff50 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b03      	cmp	r3, #3
 8002202:	d136      	bne.n	8002272 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d109      	bne.n	8002222 <I2S_IRQHandler+0xbc>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d102      	bne.n	8002222 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff45 	bl	80020ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b08      	cmp	r3, #8
 800222a:	d122      	bne.n	8002272 <I2S_IRQHandler+0x10c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d11b      	bne.n	8002272 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002248:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff13 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4aa2      	ldr	r2, [pc, #648]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002296:	4ba2      	ldr	r3, [pc, #648]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002298:	e001      	b.n	800229e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800229a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a9b      	ldr	r2, [pc, #620]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80022b4:	4b9a      	ldr	r3, [pc, #616]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022b6:	e001      	b.n	80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80022b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c8:	d004      	beq.n	80022d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8099 	bne.w	8002406 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f925 	bl	8002538 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9c8 	bl	8002698 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b40      	cmp	r3, #64	; 0x40
 8002310:	d13a      	bne.n	8002388 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d035      	beq.n	8002388 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7e      	ldr	r2, [pc, #504]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002326:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002328:	e001      	b.n	800232e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800232a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4979      	ldr	r1, [pc, #484]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002336:	428b      	cmp	r3, r1
 8002338:	d101      	bne.n	800233e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800233a:	4b79      	ldr	r3, [pc, #484]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800233c:	e001      	b.n	8002342 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800233e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002342:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002346:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002356:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fe88 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b08      	cmp	r3, #8
 8002390:	f040 80be 	bne.w	8002510 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80b8 	beq.w	8002510 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a59      	ldr	r2, [pc, #356]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80023ba:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023bc:	e001      	b.n	80023c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80023be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4954      	ldr	r1, [pc, #336]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ca:	428b      	cmp	r3, r1
 80023cc:	d101      	bne.n	80023d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023d0:	e001      	b.n	80023d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80023d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fe4a 	bl	8002098 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002404:	e084      	b.n	8002510 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8be 	bl	800259c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8fd 	bl	8002634 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d12f      	bne.n	80024a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d02a      	beq.n	80024a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800245c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2e      	ldr	r2, [pc, #184]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800246a:	e001      	b.n	8002470 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800246c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4929      	ldr	r1, [pc, #164]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d101      	bne.n	8002480 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800247e:	e001      	b.n	8002484 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002488:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fdfa 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d131      	bne.n	8002512 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d02c      	beq.n	8002512 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024c4:	e001      	b.n	80024ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80024c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4912      	ldr	r1, [pc, #72]	; (800251c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024d2:	428b      	cmp	r3, r1
 80024d4:	d101      	bne.n	80024da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024d8:	e001      	b.n	80024de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80024da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f043 0204 	orr.w	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff fdc5 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800250e:	e000      	b.n	8002512 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002510:	bf00      	nop
}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40003800 	.word	0x40003800
 8002520:	40003400 	.word	0x40003400

08002524 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c99      	adds	r1, r3, #2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6251      	str	r1, [r2, #36]	; 0x24
 800254a:	881a      	ldrh	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d113      	bne.n	8002592 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002578:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ffc9 	bl	8002524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	1c99      	adds	r1, r3, #2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6251      	str	r1, [r2, #36]	; 0x24
 80025ae:	8819      	ldrh	r1, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <I2SEx_TxISR_I2SExt+0x90>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <I2SEx_TxISR_I2SExt+0x22>
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <I2SEx_TxISR_I2SExt+0x94>)
 80025bc:	e001      	b.n	80025c2 <I2SEx_TxISR_I2SExt+0x26>
 80025be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025c2:	460a      	mov	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d121      	bne.n	8002622 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <I2SEx_TxISR_I2SExt+0x90>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <I2SEx_TxISR_I2SExt+0x50>
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <I2SEx_TxISR_I2SExt+0x94>)
 80025ea:	e001      	b.n	80025f0 <I2SEx_TxISR_I2SExt+0x54>
 80025ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	490d      	ldr	r1, [pc, #52]	; (800262c <I2SEx_TxISR_I2SExt+0x90>)
 80025f8:	428b      	cmp	r3, r1
 80025fa:	d101      	bne.n	8002600 <I2SEx_TxISR_I2SExt+0x64>
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <I2SEx_TxISR_I2SExt+0x94>)
 80025fe:	e001      	b.n	8002604 <I2SEx_TxISR_I2SExt+0x68>
 8002600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002604:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002608:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff81 	bl	8002524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40003800 	.word	0x40003800
 8002630:	40003400 	.word	0x40003400

08002634 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68d8      	ldr	r0, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	1c99      	adds	r1, r3, #2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800264c:	b282      	uxth	r2, r0
 800264e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d113      	bne.n	8002690 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002676:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff4a 	bl	8002524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <I2SEx_RxISR_I2SExt+0x90>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <I2SEx_RxISR_I2SExt+0x16>
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <I2SEx_RxISR_I2SExt+0x94>)
 80026ac:	e001      	b.n	80026b2 <I2SEx_RxISR_I2SExt+0x1a>
 80026ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026b2:	68d8      	ldr	r0, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	1c99      	adds	r1, r3, #2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80026be:	b282      	uxth	r2, r0
 80026c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d121      	bne.n	800271e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <I2SEx_RxISR_I2SExt+0x90>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <I2SEx_RxISR_I2SExt+0x50>
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <I2SEx_RxISR_I2SExt+0x94>)
 80026e6:	e001      	b.n	80026ec <I2SEx_RxISR_I2SExt+0x54>
 80026e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	490d      	ldr	r1, [pc, #52]	; (8002728 <I2SEx_RxISR_I2SExt+0x90>)
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d101      	bne.n	80026fc <I2SEx_RxISR_I2SExt+0x64>
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <I2SEx_RxISR_I2SExt+0x94>)
 80026fa:	e001      	b.n	8002700 <I2SEx_RxISR_I2SExt+0x68>
 80026fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002700:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002704:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff03 	bl	8002524 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40003800 	.word	0x40003800
 800272c:	40003400 	.word	0x40003400

08002730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002732:	b08f      	sub	sp, #60	; 0x3c
 8002734:	af0a      	add	r7, sp, #40	; 0x28
 8002736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e10f      	b.n	8002962 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f006 fbf5 	bl	8008f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2203      	movs	r2, #3
 8002766:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 ff14 	bl	80055ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	687e      	ldr	r6, [r7, #4]
 800278e:	466d      	mov	r5, sp
 8002790:	f106 0410 	add.w	r4, r6, #16
 8002794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027a4:	1d33      	adds	r3, r6, #4
 80027a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	f002 fdeb 	bl	8005384 <USB_CoreInit>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0d0      	b.n	8002962 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 ff02 	bl	80055d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e04a      	b.n	8002868 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	333d      	adds	r3, #61	; 0x3d
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	333c      	adds	r3, #60	; 0x3c
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	b298      	uxth	r0, r3
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3342      	adds	r3, #66	; 0x42
 800280e:	4602      	mov	r2, r0
 8002810:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	333f      	adds	r3, #63	; 0x3f
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3344      	adds	r3, #68	; 0x44
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3348      	adds	r3, #72	; 0x48
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3350      	adds	r3, #80	; 0x50
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3301      	adds	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d3af      	bcc.n	80027d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e044      	b.n	8002902 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3301      	adds	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d3b5      	bcc.n	8002878 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	687e      	ldr	r6, [r7, #4]
 8002914:	466d      	mov	r5, sp
 8002916:	f106 0410 	add.w	r4, r6, #16
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002926:	e885 0003 	stmia.w	r5, {r0, r1}
 800292a:	1d33      	adds	r3, r6, #4
 800292c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292e:	6838      	ldr	r0, [r7, #0]
 8002930:	f002 fe78 	bl	8005624 <USB_DevInit>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00d      	b.n	8002962 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fe6d 	bl	800663a <USB_DevDisconnect>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800296a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_PCD_Start+0x1c>
 8002982:	2302      	movs	r3, #2
 8002984:	e020      	b.n	80029c8 <HAL_PCD_Start+0x5e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	2b01      	cmp	r3, #1
 8002994:	d109      	bne.n	80029aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fe2b 	bl	800660a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fde7 	bl	800558c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08d      	sub	sp, #52	; 0x34
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fed2 	bl	8006790 <USB_GetMode>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 838e 	bne.w	8003110 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fe36 	bl	800666a <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8384 	beq.w	800310e <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fe2d 	bl	800666a <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d107      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f002 0202 	and.w	r2, r2, #2
 8002a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fe1b 	bl	800666a <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a3e:	d17b      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fe21 	bl	8006690 <USB_ReadDevAllOutEpInterrupt>
 8002a4e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a50:	e06f      	b.n	8002b32 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d064      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fe46 	bl	80066f8 <USB_ReadDevOutEPInterrupt>
 8002a6c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a84:	461a      	mov	r2, r3
 8002a86:	2301      	movs	r3, #1
 8002a88:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fe0d 	bl	80036ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 ff0c 	bl	80038bc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2310      	movs	r3, #16
 8002ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d015      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d108      	bne.n	8002af6 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aee:	461a      	mov	r2, r3
 8002af0:	2101      	movs	r1, #1
 8002af2:	f003 fe91 	bl	8006818 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b02:	461a      	mov	r2, r3
 8002b04:	2320      	movs	r3, #32
 8002b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	3301      	adds	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d18c      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fd94 	bl	800666a <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b4c:	f040 80c4 	bne.w	8002cd8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fdb5 	bl	80066c4 <USB_ReadDevAllInEpInterrupt>
 8002b5a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b60:	e0b6      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ab 	beq.w	8002cc4 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fddb 	bl	8006734 <USB_ReadDevInEPInterrupt>
 8002b7e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d05b      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	2201      	movs	r2, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69f9      	ldr	r1, [r7, #28]
 8002ba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002baa:	4013      	ands	r3, r2
 8002bac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d11b      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3348      	adds	r3, #72	; 0x48
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4403      	add	r3, r0
 8002be8:	3344      	adds	r3, #68	; 0x44
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4419      	add	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4403      	add	r3, r0
 8002bfc:	3348      	adds	r3, #72	; 0x48
 8002bfe:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f006 fa2f 	bl	800906a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d116      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d113      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x272>
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3350      	adds	r3, #80	; 0x50
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	f003 fdeb 	bl	8006818 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c74:	461a      	mov	r2, r3
 8002c76:	2310      	movs	r3, #16
 8002c78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c90:	461a      	mov	r2, r3
 8002c92:	2340      	movs	r3, #64	; 0x40
 8002c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cac:	461a      	mov	r2, r3
 8002cae:	2302      	movs	r3, #2
 8002cb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fc67 	bl	8003592 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f47f af45 	bne.w	8002b62 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fcc4 	bl	800666a <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cec:	d122      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d14:	2100      	movs	r1, #0
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fe88 	bl	8003a2c <HAL_PCDEx_LPM_Callback>
 8002d1c:	e002      	b.n	8002d24 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f006 fa1a 	bl	8009158 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fc96 	bl	800666a <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d112      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f006 f9d6 	bl	800910c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d6e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fc78 	bl	800666a <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	f040 80a7 	bne.w	8002ed6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2110      	movs	r1, #16
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fdb0 	bl	8005908 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dac:	e036      	b.n	8002e1c <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	0151      	lsls	r1, r2, #5
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002de0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002df4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	3301      	adds	r3, #1
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3c3      	bcc.n	8002dae <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e52:	f043 030b 	orr.w	r3, r3, #11
 8002e56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e68:	f043 030b 	orr.w	r3, r3, #11
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	e015      	b.n	8002e9c <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f043 030b 	orr.w	r3, r3, #11
 8002e9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f003 fca9 	bl	8006818 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fbc5 	bl	800666a <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eea:	d124      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fc5b 	bl	80067ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fd65 	bl	80059ca <USB_GetDevSpeed>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	f001 f996 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8002f10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f002 fa94 	bl	8005448 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f006 f8ca 	bl	80090ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fb95 	bl	800666a <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d161      	bne.n	800300e <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0210 	bic.w	r2, r2, #16
 8002f58:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	0c5b      	lsrs	r3, r3, #17
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d124      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d035      	beq.n	8002ffe <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6a38      	ldr	r0, [r7, #32]
 8002fa6:	f003 fa0d 	bl	80063c4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc8:	441a      	add	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	619a      	str	r2, [r3, #24]
 8002fce:	e016      	b.n	8002ffe <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	0c5b      	lsrs	r3, r3, #17
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	2b06      	cmp	r3, #6
 8002fda:	d110      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6a38      	ldr	r0, [r7, #32]
 8002fe8:	f003 f9ec 	bl	80063c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0210 	orr.w	r2, r2, #16
 800300c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 fb29 	bl	800666a <USB_ReadInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b08      	cmp	r3, #8
 8003020:	d10a      	bne.n	8003038 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f006 f83b 	bl	800909e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 0208 	and.w	r2, r2, #8
 8003036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fb14 	bl	800666a <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304c:	d10f      	bne.n	800306e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f006 f89d 	bl	8009198 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800306c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f003 faf9 	bl	800666a <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003082:	d10f      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f006 f870 	bl	8009174 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fade 	bl	800666a <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d10a      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f006 f87e 	bl	80091bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fac8 	bl	800666a <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d115      	bne.n	8003110 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f006 f86e 	bl	80091d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	e000      	b.n	8003110 <HAL_PCD_IRQHandler+0x740>
      return;
 800310e:	bf00      	nop
    }
  }
}
 8003110:	3734      	adds	r7, #52	; 0x34
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}

08003116 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_PCD_SetAddress+0x1a>
 800312c:	2302      	movs	r3, #2
 800312e:	e013      	b.n	8003158 <HAL_PCD_SetAddress+0x42>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f003 fa38 	bl	80065be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	70fb      	strb	r3, [r7, #3]
 8003172:	460b      	mov	r3, r1
 8003174:	803b      	strh	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800317e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003182:	2b00      	cmp	r3, #0
 8003184:	da0f      	bge.n	80031a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	3338      	adds	r3, #56	; 0x38
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	705a      	strb	r2, [r3, #1]
 80031a4:	e00f      	b.n	80031c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 020f 	and.w	r2, r3, #15
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	3304      	adds	r3, #4
 80031be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031d2:	883a      	ldrh	r2, [r7, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	78ba      	ldrb	r2, [r7, #2]
 80031dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d102      	bne.n	80031fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_PCD_EP_Open+0xaa>
 8003206:	2302      	movs	r3, #2
 8003208:	e00e      	b.n	8003228 <HAL_PCD_EP_Open+0xc8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fbfb 	bl	8005a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003226:	7afb      	ldrb	r3, [r7, #11]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003240:	2b00      	cmp	r3, #0
 8003242:	da0f      	bge.n	8003264 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	3338      	adds	r3, #56	; 0x38
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	3304      	adds	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	705a      	strb	r2, [r3, #1]
 8003262:	e00f      	b.n	8003284 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	3304      	adds	r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_PCD_EP_Close+0x6e>
 800329a:	2302      	movs	r3, #2
 800329c:	e00e      	b.n	80032bc <HAL_PCD_EP_Close+0x8c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fc39 	bl	8005b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2200      	movs	r2, #0
 8003304:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	b2da      	uxtb	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003320:	7afb      	ldrb	r3, [r7, #11]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	f002 febc 	bl	80060b4 <USB_EP0StartXfer>
 800333c:	e008      	b.n	8003350 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	6979      	ldr	r1, [r7, #20]
 800334c:	f002 fc6e 	bl	8005c2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800337c:	681b      	ldr	r3, [r3, #0]
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	460b      	mov	r3, r1
 8003398:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339a:	7afb      	ldrb	r3, [r7, #11]
 800339c:	f003 020f 	and.w	r2, r3, #15
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	3338      	adds	r3, #56	; 0x38
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2201      	movs	r2, #1
 80033c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6979      	ldr	r1, [r7, #20]
 80033fc:	f002 fe5a 	bl	80060b4 <USB_EP0StartXfer>
 8003400:	e008      	b.n	8003414 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6979      	ldr	r1, [r7, #20]
 8003410:	f002 fc0c 	bl	8005c2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d901      	bls.n	800343c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e050      	b.n	80034de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800343c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003440:	2b00      	cmp	r3, #0
 8003442:	da0f      	bge.n	8003464 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	f003 020f 	and.w	r2, r3, #15
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	3338      	adds	r3, #56	; 0x38
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	3304      	adds	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	705a      	strb	r2, [r3, #1]
 8003462:	e00d      	b.n	8003480 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_PCD_EP_SetStall+0x82>
 800349c:	2302      	movs	r3, #2
 800349e:	e01e      	b.n	80034de <HAL_PCD_EP_SetStall+0xc0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 ffb1 	bl	8006416 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	b2d9      	uxtb	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034ce:	461a      	mov	r2, r3
 80034d0:	f003 f9a2 	bl	8006818 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d901      	bls.n	8003504 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e042      	b.n	800358a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003508:	2b00      	cmp	r3, #0
 800350a:	da0f      	bge.n	800352c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 020f 	and.w	r2, r3, #15
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	3338      	adds	r3, #56	; 0x38
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	705a      	strb	r2, [r3, #1]
 800352a:	e00f      	b.n	800354c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_PCD_EP_ClrStall+0x86>
 8003568:	2302      	movs	r3, #2
 800356a:	e00e      	b.n	800358a <HAL_PCD_EP_ClrStall+0xa4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68f9      	ldr	r1, [r7, #12]
 800357a:	4618      	mov	r0, r3
 800357c:	f002 ffb9 	bl	80064f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b08a      	sub	sp, #40	; 0x28
 8003596:	af02      	add	r7, sp, #8
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	3338      	adds	r3, #56	; 0x38
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d901      	bls.n	80035ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06c      	b.n	80036a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d902      	bls.n	80035e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3303      	adds	r3, #3
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ee:	e02b      	b.n	8003648 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	429a      	cmp	r2, r3
 8003604:	d902      	bls.n	800360c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3303      	adds	r3, #3
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68d9      	ldr	r1, [r3, #12]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003624:	b2db      	uxtb	r3, r3
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4603      	mov	r3, r0
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f002 fe95 	bl	800635a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	441a      	add	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	441a      	add	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	b29b      	uxth	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	429a      	cmp	r2, r3
 800365c:	d809      	bhi.n	8003672 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003666:	429a      	cmp	r2, r3
 8003668:	d203      	bcs.n	8003672 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1be      	bne.n	80035f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	429a      	cmp	r2, r3
 800367c:	d811      	bhi.n	80036a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	2201      	movs	r2, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	43db      	mvns	r3, r3
 8003698:	6939      	ldr	r1, [r7, #16]
 800369a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800369e:	4013      	ands	r3, r2
 80036a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	333c      	adds	r3, #60	; 0x3c
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	f040 80b3 	bne.w	800384a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d028      	beq.n	8003740 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a70      	ldr	r2, [pc, #448]	; (80038b4 <PCD_EP_OutXfrComplete_int+0x208>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d90e      	bls.n	8003714 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370c:	461a      	mov	r2, r3
 800370e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003712:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f005 fc7b 	bl	8009010 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003724:	461a      	mov	r2, r3
 8003726:	2101      	movs	r1, #1
 8003728:	f003 f876 	bl	8006818 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003738:	461a      	mov	r2, r3
 800373a:	2308      	movs	r3, #8
 800373c:	6093      	str	r3, [r2, #8]
 800373e:	e0b3      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003756:	461a      	mov	r2, r3
 8003758:	2320      	movs	r3, #32
 800375a:	6093      	str	r3, [r2, #8]
 800375c:	e0a4      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	f040 809f 	bne.w	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a51      	ldr	r2, [pc, #324]	; (80038b4 <PCD_EP_OutXfrComplete_int+0x208>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d90f      	bls.n	8003792 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003788:	461a      	mov	r2, r3
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e08a      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037a4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	0159      	lsls	r1, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037b8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4403      	add	r3, r0
 80037c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037cc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4403      	add	r3, r0
 80037f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4419      	add	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4403      	add	r3, r0
 8003806:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800380a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f005 fc0e 	bl	8009034 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d144      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d138      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003840:	461a      	mov	r2, r3
 8003842:	2101      	movs	r1, #1
 8003844:	f002 ffe8 	bl	8006818 <USB_EP0_OutStart>
 8003848:	e02e      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d124      	bne.n	800389c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003868:	461a      	mov	r2, r3
 800386a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	e01a      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	2320      	movs	r3, #32
 800388c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f005 fbcd 	bl	8009034 <HAL_PCD_DataOutStageCallback>
 800389a:	e005      	b.n	80038a8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f005 fbc6 	bl	8009034 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	4f54300a 	.word	0x4f54300a
 80038b8:	4f54310a 	.word	0x4f54310a

080038bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	333c      	adds	r3, #60	; 0x3c
 80038d4:	3304      	adds	r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d113      	bne.n	800391a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <PCD_EP_OutSetupPacket_int+0xb8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d922      	bls.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01d      	beq.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	461a      	mov	r2, r3
 8003912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003916:	6093      	str	r3, [r2, #8]
 8003918:	e012      	b.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <PCD_EP_OutSetupPacket_int+0xbc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10e      	bne.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f005 fb65 	bl	8009010 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <PCD_EP_OutSetupPacket_int+0xb8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d90c      	bls.n	8003968 <PCD_EP_OutSetupPacket_int+0xac>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d108      	bne.n	8003968 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	f002 ff58 	bl	8006818 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	4f54300a 	.word	0x4f54300a
 8003978:	4f54310a 	.word	0x4f54310a

0800397c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
 8003988:	4613      	mov	r3, r2
 800398a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800399a:	883b      	ldrh	r3, [r7, #0]
 800399c:	0419      	lsls	r1, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
 80039a8:	e028      	b.n	80039fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4413      	add	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e00d      	b.n	80039da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	3340      	adds	r3, #64	; 0x40
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	3301      	adds	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	3b01      	subs	r3, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3ec      	bcc.n	80039be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039e4:	883b      	ldrh	r3, [r7, #0]
 80039e6:	0418      	lsls	r0, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4302      	orrs	r2, r0
 80039f4:	3340      	adds	r3, #64	; 0x40
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e22d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a62:	4ba3      	ldr	r3, [pc, #652]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4ba0      	ldr	r3, [pc, #640]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b9d      	ldr	r3, [pc, #628]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b99      	ldr	r3, [pc, #612]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e208      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b91      	ldr	r3, [pc, #580]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a90      	ldr	r2, [pc, #576]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b8b      	ldr	r3, [pc, #556]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a8a      	ldr	r2, [pc, #552]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a87      	ldr	r2, [pc, #540]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b84      	ldr	r3, [pc, #528]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a83      	ldr	r2, [pc, #524]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b81      	ldr	r3, [pc, #516]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fc fda6 	bl	800064c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fc fda2 	bl	800064c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1cd      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b76      	ldr	r3, [pc, #472]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fc fd92 	bl	800064c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fc fd8e 	bl	800064c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1b9      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b5c      	ldr	r3, [pc, #368]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e18d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4952      	ldr	r1, [pc, #328]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b4f      	ldr	r3, [pc, #316]	; (8003cf4 <HAL_RCC_OscConfig+0x2b0>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fc fd47 	bl	800064c <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fc fd43 	bl	800064c <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e16e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4940      	ldr	r1, [pc, #256]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCC_OscConfig+0x2b0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fc fd26 	bl	800064c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fc fd22 	bl	800064c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e14d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d030      	beq.n	8003c90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <HAL_RCC_OscConfig+0x2b4>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fc fd06 	bl	800064c <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fc fd02 	bl	800064c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e12d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
 8003c62:	e015      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c64:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCC_OscConfig+0x2b4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fc fcef 	bl	800064c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fc fceb 	bl	800064c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e116      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a0 	beq.w	8003dde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x2b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d121      	bne.n	8003d1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCC_OscConfig+0x2b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_RCC_OscConfig+0x2b8>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce6:	f7fc fcb1 	bl	800064c <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	e011      	b.n	8003d12 <HAL_RCC_OscConfig+0x2ce>
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	42470000 	.word	0x42470000
 8003cf8:	42470e80 	.word	0x42470e80
 8003cfc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d00:	f7fc fca4 	bl	800064c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0cf      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2f0>
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a65      	ldr	r2, [pc, #404]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
 8003d32:	e01c      	b.n	8003d6e <HAL_RCC_OscConfig+0x32a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d10c      	bne.n	8003d56 <HAL_RCC_OscConfig+0x312>
 8003d3c:	4b60      	ldr	r3, [pc, #384]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	4a5f      	ldr	r2, [pc, #380]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	6713      	str	r3, [r2, #112]	; 0x70
 8003d48:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	4a5c      	ldr	r2, [pc, #368]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	; 0x70
 8003d54:	e00b      	b.n	8003d6e <HAL_RCC_OscConfig+0x32a>
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a59      	ldr	r2, [pc, #356]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d015      	beq.n	8003da2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fc fc69 	bl	800064c <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fc fc65 	bl	800064c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e08e      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ee      	beq.n	8003d7e <HAL_RCC_OscConfig+0x33a>
 8003da0:	e014      	b.n	8003dcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fc fc53 	bl	800064c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fc fc4f 	bl	800064c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e078      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc0:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ee      	bne.n	8003daa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d064      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d05c      	beq.n	8003eac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d141      	bne.n	8003e7e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fc fc24 	bl	800064c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fc fc20 	bl	800064c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e04b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	491d      	ldr	r1, [pc, #116]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fc fbf9 	bl	800064c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fc fbf5 	bl	800064c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e020      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x41a>
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_RCC_OscConfig+0x480>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fc fbe2 	bl	800064c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fc fbde 	bl	800064c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCC_OscConfig+0x47c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x448>
 8003eaa:	e001      	b.n	8003eb0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470060 	.word	0x42470060

08003ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0ca      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003edc:	4b67      	ldr	r3, [pc, #412]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d90c      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b64      	ldr	r3, [pc, #400]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b6      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b58      	ldr	r3, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a57      	ldr	r2, [pc, #348]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	4b52      	ldr	r3, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4a51      	ldr	r2, [pc, #324]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	494c      	ldr	r1, [pc, #304]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d044      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b46      	ldr	r3, [pc, #280]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d119      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07d      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06d      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e065      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4933      	ldr	r1, [pc, #204]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fc fb48 	bl	800064c <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fc fb44 	bl	800064c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e04d      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d20c      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_ClockConfig+0x1b4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e030      	b.n	8004072 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b18      	ldr	r3, [pc, #96]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4915      	ldr	r1, [pc, #84]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490d      	ldr	r1, [pc, #52]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404e:	f000 f81d 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	fa21 f303 	lsr.w	r3, r1, r3
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fc faaa 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	0800a0e8 	.word	0x0800a0e8
 8004088:	2000011c 	.word	0x2000011c

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	2300      	movs	r3, #0
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d007      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x32>
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x38>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 80b4 	bne.w	8004220 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040ba:	60bb      	str	r3, [r7, #8]
       break;
 80040bc:	e0b3      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040be:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040c0:	60bb      	str	r3, [r7, #8]
      break;
 80040c2:	e0b0      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c4:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ce:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04a      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b55      	ldr	r3, [pc, #340]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	f04f 0400 	mov.w	r4, #0
 80040e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea03 0501 	and.w	r5, r3, r1
 80040f0:	ea04 0602 	and.w	r6, r4, r2
 80040f4:	4629      	mov	r1, r5
 80040f6:	4632      	mov	r2, r6
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	0154      	lsls	r4, r2, #5
 8004102:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004106:	014b      	lsls	r3, r1, #5
 8004108:	4619      	mov	r1, r3
 800410a:	4622      	mov	r2, r4
 800410c:	1b49      	subs	r1, r1, r5
 800410e:	eb62 0206 	sbc.w	r2, r2, r6
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	f04f 0400 	mov.w	r4, #0
 800411a:	0194      	lsls	r4, r2, #6
 800411c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004120:	018b      	lsls	r3, r1, #6
 8004122:	1a5b      	subs	r3, r3, r1
 8004124:	eb64 0402 	sbc.w	r4, r4, r2
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	00e2      	lsls	r2, r4, #3
 8004132:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004136:	00d9      	lsls	r1, r3, #3
 8004138:	460b      	mov	r3, r1
 800413a:	4614      	mov	r4, r2
 800413c:	195b      	adds	r3, r3, r5
 800413e:	eb44 0406 	adc.w	r4, r4, r6
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	0262      	lsls	r2, r4, #9
 800414c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004150:	0259      	lsls	r1, r3, #9
 8004152:	460b      	mov	r3, r1
 8004154:	4614      	mov	r4, r2
 8004156:	4618      	mov	r0, r3
 8004158:	4621      	mov	r1, r4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f04f 0400 	mov.w	r4, #0
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc f88c 	bl	8000280 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e049      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004170:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	ea03 0501 	and.w	r5, r3, r1
 8004186:	ea04 0602 	and.w	r6, r4, r2
 800418a:	4629      	mov	r1, r5
 800418c:	4632      	mov	r2, r6
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	f04f 0400 	mov.w	r4, #0
 8004196:	0154      	lsls	r4, r2, #5
 8004198:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800419c:	014b      	lsls	r3, r1, #5
 800419e:	4619      	mov	r1, r3
 80041a0:	4622      	mov	r2, r4
 80041a2:	1b49      	subs	r1, r1, r5
 80041a4:	eb62 0206 	sbc.w	r2, r2, r6
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	0194      	lsls	r4, r2, #6
 80041b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041b6:	018b      	lsls	r3, r1, #6
 80041b8:	1a5b      	subs	r3, r3, r1
 80041ba:	eb64 0402 	sbc.w	r4, r4, r2
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	00e2      	lsls	r2, r4, #3
 80041c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041cc:	00d9      	lsls	r1, r3, #3
 80041ce:	460b      	mov	r3, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	195b      	adds	r3, r3, r5
 80041d4:	eb44 0406 	adc.w	r4, r4, r6
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	02a2      	lsls	r2, r4, #10
 80041e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041e6:	0299      	lsls	r1, r3, #10
 80041e8:	460b      	mov	r3, r1
 80041ea:	4614      	mov	r4, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	4621      	mov	r1, r4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f04f 0400 	mov.w	r4, #0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	f7fc f841 	bl	8000280 <__aeabi_uldivmod>
 80041fe:	4603      	mov	r3, r0
 8004200:	460c      	mov	r4, r1
 8004202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	60bb      	str	r3, [r7, #8]
      break;
 800421e:	e002      	b.n	8004226 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004222:	60bb      	str	r3, [r7, #8]
      break;
 8004224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004226:	68bb      	ldr	r3, [r7, #8]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	00f42400 	.word	0x00f42400
 8004238:	007a1200 	.word	0x007a1200

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <HAL_RCC_GetHCLKFreq+0x14>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2000011c 	.word	0x2000011c

08004254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004258:	f7ff fff0 	bl	800423c <HAL_RCC_GetHCLKFreq>
 800425c:	4601      	mov	r1, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0a9b      	lsrs	r3, r3, #10
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4a03      	ldr	r2, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	0800a0f8 	.word	0x0800a0f8

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d035      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042a4:	4b62      	ldr	r3, [pc, #392]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042aa:	f7fc f9cf 	bl	800064c <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042b2:	f7fc f9cb 	bl	800064c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0b0      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c4:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	019a      	lsls	r2, r3, #6
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	071b      	lsls	r3, r3, #28
 80042dc:	4955      	ldr	r1, [pc, #340]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042e4:	4b52      	ldr	r3, [pc, #328]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fc f9af 	bl	800064c <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042f2:	f7fc f9ab 	bl	800064c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e090      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004304:	4b4b      	ldr	r3, [pc, #300]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8083 	beq.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b44      	ldr	r3, [pc, #272]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a43      	ldr	r2, [pc, #268]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004346:	f7fc f981 	bl	800064c <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fc f97d 	bl	800064c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e062      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004360:	4b35      	ldr	r3, [pc, #212]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004374:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	429a      	cmp	r2, r3
 8004388:	d028      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800438a:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004392:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439a:	4b28      	ldr	r3, [pc, #160]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d114      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fc f94b 	bl	800064c <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fc f947 	bl	800064c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e02a      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ee      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d10d      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fe:	490d      	ldr	r1, [pc, #52]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004410:	6093      	str	r3, [r2, #8]
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	4905      	ldr	r1, [pc, #20]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	42470068 	.word	0x42470068
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470e40 	.word	0x42470e40

08004440 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d13d      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004466:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800446e:	2b01      	cmp	r3, #1
 8004470:	d12f      	bne.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004474:	617b      	str	r3, [r7, #20]
          break;
 8004476:	e02f      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d108      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448e:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e007      	b.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004498:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	099b      	lsrs	r3, r3, #6
 80044b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c2:	0f1b      	lsrs	r3, r3, #28
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	617b      	str	r3, [r7, #20]
          break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
          break;
 80044d6:	bf00      	nop
        }
      }
      break;
 80044d8:	bf00      	nop
    }
  }
  return frequency;
 80044da:	697b      	ldr	r3, [r7, #20]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40023800 	.word	0x40023800
 80044ec:	00bb8000 	.word	0x00bb8000
 80044f0:	007a1200 	.word	0x007a1200
 80044f4:	00f42400 	.word	0x00f42400

080044f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e056      	b.n	80045b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f004 fa97 	bl	8008a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	f003 0104 	and.w	r1, r3, #4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01d      	b.n	800460e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f004 fa7e 	bl	8008ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f000 fb58 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d007      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e01d      	b.n	80046ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f815 	bl	80046b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 fb09 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdd4 	bl	8005288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <HAL_TIM_PWM_Start+0x74>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_TIM_PWM_Start+0x2c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a14      	ldr	r2, [pc, #80]	; (8004740 <HAL_TIM_PWM_Start+0x78>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x30>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <HAL_TIM_PWM_Start+0x32>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b06      	cmp	r3, #6
 800471e:	d007      	beq.n	8004730 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0202 	mvn.w	r2, #2
 8004770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa75 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa67 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa78 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0204 	mvn.w	r2, #4
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa4b 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa3d 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa4e 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0208 	mvn.w	r2, #8
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa21 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa13 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fa24 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b10      	cmp	r3, #16
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0210 	mvn.w	r2, #16
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2208      	movs	r2, #8
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9f7 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9e9 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f9fa 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0201 	mvn.w	r2, #1
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9c3 	bl	8004c4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b80      	cmp	r3, #128	; 0x80
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fd3e 	bl	8005370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9bf 	bl	8004c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b20      	cmp	r3, #32
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0220 	mvn.w	r2, #32
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fd08 	bl	800535c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800496a:	2302      	movs	r3, #2
 800496c:	e0b4      	b.n	8004ad8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	f200 809f 	bhi.w	8004ac4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049c1 	.word	0x080049c1
 8004990:	08004ac5 	.word	0x08004ac5
 8004994:	08004ac5 	.word	0x08004ac5
 8004998:	08004ac5 	.word	0x08004ac5
 800499c:	08004a01 	.word	0x08004a01
 80049a0:	08004ac5 	.word	0x08004ac5
 80049a4:	08004ac5 	.word	0x08004ac5
 80049a8:	08004ac5 	.word	0x08004ac5
 80049ac:	08004a43 	.word	0x08004a43
 80049b0:	08004ac5 	.word	0x08004ac5
 80049b4:	08004ac5 	.word	0x08004ac5
 80049b8:	08004ac5 	.word	0x08004ac5
 80049bc:	08004a83 	.word	0x08004a83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fa14 	bl	8004df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0208 	orr.w	r2, r2, #8
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0204 	bic.w	r2, r2, #4
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	619a      	str	r2, [r3, #24]
      break;
 80049fe:	e062      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa64 	bl	8004ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6999      	ldr	r1, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	619a      	str	r2, [r3, #24]
      break;
 8004a40:	e041      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fab9 	bl	8004fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0208 	orr.w	r2, r2, #8
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0204 	bic.w	r2, r2, #4
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	61da      	str	r2, [r3, #28]
      break;
 8004a80:	e021      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fb0d 	bl	80050a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69d9      	ldr	r1, [r3, #28]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	021a      	lsls	r2, r3, #8
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	61da      	str	r2, [r3, #28]
      break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ac4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_ConfigClockSource+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e0a6      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x166>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d067      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0x120>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d80b      	bhi.n	8004b4c <HAL_TIM_ConfigClockSource+0x6c>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d073      	beq.n	8004c20 <HAL_TIM_ConfigClockSource+0x140>
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d802      	bhi.n	8004b42 <HAL_TIM_ConfigClockSource+0x62>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d06f      	beq.n	8004c20 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b40:	e078      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d06c      	beq.n	8004c20 <HAL_TIM_ConfigClockSource+0x140>
 8004b46:	2b30      	cmp	r3, #48	; 0x30
 8004b48:	d06a      	beq.n	8004c20 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004b4a:	e073      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b4c:	2b70      	cmp	r3, #112	; 0x70
 8004b4e:	d00d      	beq.n	8004b6c <HAL_TIM_ConfigClockSource+0x8c>
 8004b50:	2b70      	cmp	r3, #112	; 0x70
 8004b52:	d804      	bhi.n	8004b5e <HAL_TIM_ConfigClockSource+0x7e>
 8004b54:	2b50      	cmp	r3, #80	; 0x50
 8004b56:	d033      	beq.n	8004bc0 <HAL_TIM_ConfigClockSource+0xe0>
 8004b58:	2b60      	cmp	r3, #96	; 0x60
 8004b5a:	d041      	beq.n	8004be0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004b5c:	e06a      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	d066      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x152>
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b68:	d017      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004b6a:	e063      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f000 fb64 	bl	8005248 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	609a      	str	r2, [r3, #8]
      break;
 8004b98:	e04c      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6899      	ldr	r1, [r3, #8]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f000 fb4d 	bl	8005248 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bbc:	609a      	str	r2, [r3, #8]
      break;
 8004bbe:	e039      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f000 fac1 	bl	8005154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2150      	movs	r1, #80	; 0x50
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fb1a 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004bde:	e029      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f000 fae0 	bl	80051b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2160      	movs	r1, #96	; 0x60
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fb0a 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004bfe:	e019      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6859      	ldr	r1, [r3, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f000 faa1 	bl	8005154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2140      	movs	r1, #64	; 0x40
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fafa 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004c1e:	e009      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f000 faf1 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004c30:	e000      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d00f      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3d      	ldr	r2, [pc, #244]	; (8004dcc <TIM_Base_SetConfig+0x118>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3c      	ldr	r2, [pc, #240]	; (8004dd0 <TIM_Base_SetConfig+0x11c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3b      	ldr	r2, [pc, #236]	; (8004dd4 <TIM_Base_SetConfig+0x120>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <TIM_Base_SetConfig+0x124>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d108      	bne.n	8004d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d02b      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d14:	d027      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2c      	ldr	r2, [pc, #176]	; (8004dcc <TIM_Base_SetConfig+0x118>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d023      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2b      	ldr	r2, [pc, #172]	; (8004dd0 <TIM_Base_SetConfig+0x11c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01f      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2a      	ldr	r2, [pc, #168]	; (8004dd4 <TIM_Base_SetConfig+0x120>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01b      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a29      	ldr	r2, [pc, #164]	; (8004dd8 <TIM_Base_SetConfig+0x124>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d017      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <TIM_Base_SetConfig+0x128>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <TIM_Base_SetConfig+0x12c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <TIM_Base_SetConfig+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <TIM_Base_SetConfig+0x134>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a24      	ldr	r2, [pc, #144]	; (8004dec <TIM_Base_SetConfig+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a23      	ldr	r2, [pc, #140]	; (8004df0 <TIM_Base_SetConfig+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <TIM_Base_SetConfig+0x114>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0xf8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <TIM_Base_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d103      	bne.n	8004db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	615a      	str	r2, [r3, #20]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40014400 	.word	0x40014400
 8004de4:	40014800 	.word	0x40014800
 8004de8:	40001800 	.word	0x40001800
 8004dec:	40001c00 	.word	0x40001c00
 8004df0:	40002000 	.word	0x40002000

08004df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0201 	bic.w	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0303 	bic.w	r3, r3, #3
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 0302 	bic.w	r3, r3, #2
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <TIM_OC1_SetConfig+0xd8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC1_SetConfig+0x64>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <TIM_OC1_SetConfig+0xdc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10c      	bne.n	8004e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0308 	bic.w	r3, r3, #8
 8004e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <TIM_OC1_SetConfig+0xd8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC1_SetConfig+0x8e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <TIM_OC1_SetConfig+0xdc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d111      	bne.n	8004ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40010400 	.word	0x40010400

08004ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0210 	bic.w	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0320 	bic.w	r3, r3, #32
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <TIM_OC2_SetConfig+0xe4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC2_SetConfig+0x68>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <TIM_OC2_SetConfig+0xe8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10d      	bne.n	8004f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <TIM_OC2_SetConfig+0xe4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC2_SetConfig+0x94>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <TIM_OC2_SetConfig+0xe8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d113      	bne.n	8004f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	021b      	lsls	r3, r3, #8
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a21      	ldr	r2, [pc, #132]	; (80050a0 <TIM_OC3_SetConfig+0xe0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC3_SetConfig+0x66>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <TIM_OC3_SetConfig+0xe4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10d      	bne.n	8005042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <TIM_OC3_SetConfig+0xe0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC3_SetConfig+0x92>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <TIM_OC3_SetConfig+0xe4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d113      	bne.n	800507a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40010400 	.word	0x40010400

080050a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	031b      	lsls	r3, r3, #12
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <TIM_OC4_SetConfig+0xa4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC4_SetConfig+0x68>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a11      	ldr	r2, [pc, #68]	; (8005150 <TIM_OC4_SetConfig+0xa8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d109      	bne.n	8005124 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400

08005154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 030a 	bic.w	r3, r3, #10
 8005190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0210 	bic.w	r2, r3, #16
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	f043 0307 	orr.w	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	021a      	lsls	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	431a      	orrs	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1a      	ldr	r2, [r3, #32]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e032      	b.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	f107 001c 	add.w	r0, r7, #28
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d122      	bne.n	80053e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 fa7c 	bl	80068d4 <USB_CoreReset>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]
 80053e0:	e01a      	b.n	8005418 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fa70 	bl	80068d4 <USB_CoreReset>
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
 800540a:	e005      	b.n	8005418 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10b      	bne.n	8005436 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f043 0206 	orr.w	r2, r3, #6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005442:	b004      	add	sp, #16
 8005444:	4770      	bx	lr
	...

08005448 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d165      	bne.n	8005528 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a41      	ldr	r2, [pc, #260]	; (8005564 <USB_SetTurnaroundTime+0x11c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d906      	bls.n	8005472 <USB_SetTurnaroundTime+0x2a>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a40      	ldr	r2, [pc, #256]	; (8005568 <USB_SetTurnaroundTime+0x120>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d802      	bhi.n	8005472 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800546c:	230f      	movs	r3, #15
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e062      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4a3c      	ldr	r2, [pc, #240]	; (8005568 <USB_SetTurnaroundTime+0x120>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d906      	bls.n	8005488 <USB_SetTurnaroundTime+0x40>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4a3b      	ldr	r2, [pc, #236]	; (800556c <USB_SetTurnaroundTime+0x124>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d802      	bhi.n	8005488 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005482:	230e      	movs	r3, #14
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	e057      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a38      	ldr	r2, [pc, #224]	; (800556c <USB_SetTurnaroundTime+0x124>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d906      	bls.n	800549e <USB_SetTurnaroundTime+0x56>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a37      	ldr	r2, [pc, #220]	; (8005570 <USB_SetTurnaroundTime+0x128>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d802      	bhi.n	800549e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005498:	230d      	movs	r3, #13
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e04c      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a33      	ldr	r2, [pc, #204]	; (8005570 <USB_SetTurnaroundTime+0x128>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d906      	bls.n	80054b4 <USB_SetTurnaroundTime+0x6c>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a32      	ldr	r2, [pc, #200]	; (8005574 <USB_SetTurnaroundTime+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d802      	bhi.n	80054b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054ae:	230c      	movs	r3, #12
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e041      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a2f      	ldr	r2, [pc, #188]	; (8005574 <USB_SetTurnaroundTime+0x12c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d906      	bls.n	80054ca <USB_SetTurnaroundTime+0x82>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a2e      	ldr	r2, [pc, #184]	; (8005578 <USB_SetTurnaroundTime+0x130>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d802      	bhi.n	80054ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054c4:	230b      	movs	r3, #11
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e036      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <USB_SetTurnaroundTime+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d906      	bls.n	80054e0 <USB_SetTurnaroundTime+0x98>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a29      	ldr	r2, [pc, #164]	; (800557c <USB_SetTurnaroundTime+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d802      	bhi.n	80054e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054da:	230a      	movs	r3, #10
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e02b      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a26      	ldr	r2, [pc, #152]	; (800557c <USB_SetTurnaroundTime+0x134>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d906      	bls.n	80054f6 <USB_SetTurnaroundTime+0xae>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <USB_SetTurnaroundTime+0x138>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d802      	bhi.n	80054f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054f0:	2309      	movs	r3, #9
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e020      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4a21      	ldr	r2, [pc, #132]	; (8005580 <USB_SetTurnaroundTime+0x138>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d906      	bls.n	800550c <USB_SetTurnaroundTime+0xc4>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a20      	ldr	r2, [pc, #128]	; (8005584 <USB_SetTurnaroundTime+0x13c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d802      	bhi.n	800550c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005506:	2308      	movs	r3, #8
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e015      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <USB_SetTurnaroundTime+0x13c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d906      	bls.n	8005522 <USB_SetTurnaroundTime+0xda>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <USB_SetTurnaroundTime+0x140>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d802      	bhi.n	8005522 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800551c:	2307      	movs	r3, #7
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e00a      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005522:	2306      	movs	r3, #6
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e007      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800552e:	2309      	movs	r3, #9
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e001      	b.n	8005538 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005534:	2309      	movs	r3, #9
 8005536:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	029b      	lsls	r3, r3, #10
 800554c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	00d8acbf 	.word	0x00d8acbf
 8005568:	00e4e1bf 	.word	0x00e4e1bf
 800556c:	00f423ff 	.word	0x00f423ff
 8005570:	0106737f 	.word	0x0106737f
 8005574:	011a499f 	.word	0x011a499f
 8005578:	01312cff 	.word	0x01312cff
 800557c:	014ca43f 	.word	0x014ca43f
 8005580:	016e35ff 	.word	0x016e35ff
 8005584:	01a6ab1f 	.word	0x01a6ab1f
 8005588:	01e847ff 	.word	0x01e847ff

0800558c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d106      	bne.n	80055fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	e00b      	b.n	8005614 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	e001      	b.n	8005614 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e003      	b.n	800561c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005614:	2032      	movs	r0, #50	; 0x32
 8005616:	f7fb f825 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005624:	b084      	sub	sp, #16
 8005626:	b580      	push	{r7, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	e009      	b.n	8005658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	3340      	adds	r3, #64	; 0x40
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b0e      	cmp	r3, #14
 800565c:	d9f2      	bls.n	8005644 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d112      	bne.n	800568a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
 8005688:	e00b      	b.n	80056a2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	4619      	mov	r1, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	461a      	mov	r2, r3
 80056be:	680b      	ldr	r3, [r1, #0]
 80056c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10c      	bne.n	80056e2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056ce:	2100      	movs	r1, #0
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f961 	bl	8005998 <USB_SetDevSpeed>
 80056d6:	e008      	b.n	80056ea <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056d8:	2101      	movs	r1, #1
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f95c 	bl	8005998 <USB_SetDevSpeed>
 80056e0:	e003      	b.n	80056ea <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056e2:	2103      	movs	r1, #3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f957 	bl	8005998 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056ea:	2110      	movs	r1, #16
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f90b 	bl	8005908 <USB_FlushTxFifo>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f929 	bl	8005954 <USB_FlushRxFifo>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	461a      	mov	r2, r3
 8005720:	2300      	movs	r3, #0
 8005722:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	461a      	mov	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e043      	b.n	80057be <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574c:	d118      	bne.n	8005780 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005760:	461a      	mov	r2, r3
 8005762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e013      	b.n	8005792 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	461a      	mov	r2, r3
 8005778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e008      	b.n	8005792 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3b7      	bcc.n	8005736 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e043      	b.n	8005854 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e2:	d118      	bne.n	8005816 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e013      	b.n	8005828 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	461a      	mov	r2, r3
 800580e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e008      	b.n	8005828 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800584c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3301      	adds	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3b7      	bcc.n	80057cc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800586e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	2b01      	cmp	r3, #1
 8005874:	d111      	bne.n	800589a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	461a      	mov	r2, r3
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <USB_DevInit+0x2dc>)
 8005880:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	f043 0303 	orr.w	r3, r3, #3
 8005898:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 0210 	orr.w	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <USB_DevInit+0x2e0>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f043 0208 	orr.w	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d107      	bne.n	80058ee <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058e6:	f043 0304 	orr.w	r3, r3, #4
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058fa:	b004      	add	sp, #16
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	00800100 	.word	0x00800100
 8005904:	803c3800 	.word	0x803c3800

08005908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <USB_FlushTxFifo+0x48>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e006      	b.n	8005942 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b20      	cmp	r3, #32
 800593e:	d0f0      	beq.n	8005922 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	00030d40 	.word	0x00030d40

08005954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2210      	movs	r2, #16
 8005964:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <USB_FlushRxFifo+0x40>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e006      	b.n	8005986 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b10      	cmp	r3, #16
 8005982:	d0f0      	beq.n	8005966 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	00030d40 	.word	0x00030d40

08005998 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b087      	sub	sp, #28
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0306 	and.w	r3, r3, #6
 80059e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]
 80059ee:	e00a      	b.n	8005a06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d002      	beq.n	80059fc <USB_GetDevSpeed+0x32>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d102      	bne.n	8005a02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059fc:	2302      	movs	r3, #2
 80059fe:	75fb      	strb	r3, [r7, #23]
 8005a00:	e001      	b.n	8005a06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a02:	230f      	movs	r3, #15
 8005a04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d13a      	bne.n	8005aa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d155      	bne.n	8005b14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	78db      	ldrb	r3, [r3, #3]
 8005a82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	059b      	lsls	r3, r3, #22
 8005a8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e036      	b.n	8005b14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d11a      	bne.n	8005b14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	78db      	ldrb	r3, [r3, #3]
 8005af8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005afa:	430b      	orrs	r3, r1
 8005afc:	4313      	orrs	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d135      	bne.n	8005bac <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2101      	movs	r1, #1
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b60:	4013      	ands	r3, r2
 8005b62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	2101      	movs	r1, #1
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4013      	ands	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	0159      	lsls	r1, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	440b      	add	r3, r1
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <USB_DeactivateEndpoint+0x100>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
 8005baa:	e034      	b.n	8005c16 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	041b      	lsls	r3, r3, #16
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bcc:	4013      	ands	r3, r2
 8005bce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f303 	lsl.w	r3, r1, r3
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	43db      	mvns	r3, r3
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	0159      	lsls	r1, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	440b      	add	r3, r1
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <USB_DeactivateEndpoint+0x104>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	ec337800 	.word	0xec337800
 8005c28:	eff37800 	.word	0xeff37800

08005c2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	4613      	mov	r3, r2
 8005c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f040 815c 	bne.w	8005f06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d132      	bne.n	8005cbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	0cdb      	lsrs	r3, r3, #19
 8005cb6:	04db      	lsls	r3, r3, #19
 8005cb8:	6113      	str	r3, [r2, #16]
 8005cba:	e074      	b.n	8005da6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	0cdb      	lsrs	r3, r3, #19
 8005cd8:	04db      	lsls	r3, r3, #19
 8005cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6959      	ldr	r1, [r3, #20]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	440b      	add	r3, r1
 8005d18:	1e59      	subs	r1, r3, #1
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d22:	04d9      	lsls	r1, r3, #19
 8005d24:	4b9d      	ldr	r3, [pc, #628]	; (8005f9c <USB_EPStartXfer+0x370>)
 8005d26:	400b      	ands	r3, r1
 8005d28:	69b9      	ldr	r1, [r7, #24]
 8005d2a:	0148      	lsls	r0, r1, #5
 8005d2c:	69f9      	ldr	r1, [r7, #28]
 8005d2e:	4401      	add	r1, r0
 8005d30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d34:	4313      	orrs	r3, r2
 8005d36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	0148      	lsls	r0, r1, #5
 8005d52:	69f9      	ldr	r1, [r7, #28]
 8005d54:	4401      	add	r1, r0
 8005d56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	78db      	ldrb	r3, [r3, #3]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d11f      	bne.n	8005da6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005da4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d14b      	bne.n	8005e44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	78db      	ldrb	r3, [r3, #3]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d128      	bne.n	8005e22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d110      	bne.n	8005e02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e00f      	b.n	8005e22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e12f      	b.n	80060a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	78db      	ldrb	r3, [r3, #3]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d015      	beq.n	8005e98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8117 	beq.w	80060a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	2101      	movs	r1, #1
 8005e88:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8c:	69f9      	ldr	r1, [r7, #28]
 8005e8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e92:	4313      	orrs	r3, r2
 8005e94:	634b      	str	r3, [r1, #52]	; 0x34
 8005e96:	e105      	b.n	80060a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d110      	bne.n	8005eca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e00f      	b.n	8005eea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68d9      	ldr	r1, [r3, #12]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	b298      	uxth	r0, r3
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4603      	mov	r3, r0
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa2b 	bl	800635a <USB_WritePacket>
 8005f04:	e0ce      	b.n	80060a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f20:	0cdb      	lsrs	r3, r3, #19
 8005f22:	04db      	lsls	r3, r3, #19
 8005f24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d126      	bne.n	8005fa0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f68:	69b9      	ldr	r1, [r7, #24]
 8005f6a:	0148      	lsls	r0, r1, #5
 8005f6c:	69f9      	ldr	r1, [r7, #28]
 8005f6e:	4401      	add	r1, r0
 8005f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f74:	4313      	orrs	r3, r2
 8005f76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f96:	6113      	str	r3, [r2, #16]
 8005f98:	e036      	b.n	8006008 <USB_EPStartXfer+0x3dc>
 8005f9a:	bf00      	nop
 8005f9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4413      	add	r3, r2
 8005faa:	1e5a      	subs	r2, r3, #1
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	8afb      	ldrh	r3, [r7, #22]
 8005fc6:	04d9      	lsls	r1, r3, #19
 8005fc8:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <USB_EPStartXfer+0x484>)
 8005fca:	400b      	ands	r3, r1
 8005fcc:	69b9      	ldr	r1, [r7, #24]
 8005fce:	0148      	lsls	r0, r1, #5
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	8af9      	ldrh	r1, [r7, #22]
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	0148      	lsls	r0, r1, #5
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	4401      	add	r1, r0
 8006000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006004:	4313      	orrs	r3, r2
 8006006:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10d      	bne.n	800602a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	68d9      	ldr	r1, [r3, #12]
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	460a      	mov	r2, r1
 8006028:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	78db      	ldrb	r3, [r3, #3]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d128      	bne.n	8006084 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d110      	bne.n	8006064 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e00f      	b.n	8006084 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006082:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	1ff80000 	.word	0x1ff80000

080060b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	f040 80cd 	bne.w	8006270 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d132      	bne.n	8006144 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006120:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613c:	0cdb      	lsrs	r3, r3, #19
 800613e:	04db      	lsls	r3, r3, #19
 8006140:	6113      	str	r3, [r2, #16]
 8006142:	e04e      	b.n	80061e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	0cdb      	lsrs	r3, r3, #19
 8006160:	04db      	lsls	r3, r3, #19
 8006162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006182:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006186:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d2:	6939      	ldr	r1, [r7, #16]
 80061d4:	0148      	lsls	r0, r1, #5
 80061d6:	6979      	ldr	r1, [r7, #20]
 80061d8:	4401      	add	r1, r0
 80061da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061de:	4313      	orrs	r3, r2
 80061e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d11e      	bne.n	8006226 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e092      	b.n	800634c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006244:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d07e      	beq.n	800634c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	2101      	movs	r1, #1
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800626a:	4313      	orrs	r3, r2
 800626c:	634b      	str	r3, [r1, #52]	; 0x34
 800626e:	e06d      	b.n	800634c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628a:	0cdb      	lsrs	r3, r3, #19
 800628c:	04db      	lsls	r3, r3, #19
 800628e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fa:	6939      	ldr	r1, [r7, #16]
 80062fc:	0148      	lsls	r0, r1, #5
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	4401      	add	r1, r0
 8006302:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006306:	4313      	orrs	r3, r2
 8006308:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10d      	bne.n	800632c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	68d9      	ldr	r1, [r3, #12]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	460a      	mov	r2, r1
 800632a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800634a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800635a:	b480      	push	{r7}
 800635c:	b089      	sub	sp, #36	; 0x24
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	4611      	mov	r1, r2
 8006366:	461a      	mov	r2, r3
 8006368:	460b      	mov	r3, r1
 800636a:	71fb      	strb	r3, [r7, #7]
 800636c:	4613      	mov	r3, r2
 800636e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006378:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11a      	bne.n	80063b6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006380:	88bb      	ldrh	r3, [r7, #4]
 8006382:	3303      	adds	r3, #3
 8006384:	089b      	lsrs	r3, r3, #2
 8006386:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006388:	2300      	movs	r3, #0
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	e00f      	b.n	80063ae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	031a      	lsls	r2, r3, #12
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639a:	461a      	mov	r2, r3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3304      	adds	r3, #4
 80063a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d3eb      	bcc.n	800638e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3724      	adds	r7, #36	; 0x24
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	; 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	3303      	adds	r3, #3
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80063e2:	2300      	movs	r3, #0
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e00b      	b.n	8006400 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	3304      	adds	r3, #4
 80063f8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	3301      	adds	r3, #1
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3ef      	bcc.n	80063e8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006408:	69fb      	ldr	r3, [r7, #28]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3724      	adds	r7, #36	; 0x24
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d12c      	bne.n	800648c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	db12      	blt.n	800646a <USB_EPSetStall+0x54>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00f      	beq.n	800646a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	440a      	add	r2, r1
 8006460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006468:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	e02b      	b.n	80064e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	db12      	blt.n	80064c4 <USB_EPSetStall+0xae>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d128      	bne.n	8006560 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800652c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	78db      	ldrb	r3, [r3, #3]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d003      	beq.n	800653e <USB_EPClearStall+0x4c>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	78db      	ldrb	r3, [r3, #3]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d138      	bne.n	80065b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e027      	b.n	80065b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800657e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	78db      	ldrb	r3, [r3, #3]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d003      	beq.n	8006590 <USB_EPClearStall+0x9e>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	78db      	ldrb	r3, [r3, #3]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d10f      	bne.n	80065b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006624:	f023 0302 	bic.w	r3, r3, #2
 8006628:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800662a:	2003      	movs	r0, #3
 800662c:	f7fa f81a 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800665a:	2003      	movs	r0, #3
 800665c:	f7fa f802 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4013      	ands	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006682:	68fb      	ldr	r3, [r7, #12]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	0c1b      	lsrs	r3, r3, #16
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4013      	ands	r3, r2
 80066e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	b29b      	uxth	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	4013      	ands	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006726:	68bb      	ldr	r3, [r7, #8]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006756:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
 8006764:	01db      	lsls	r3, r3, #7
 8006766:	b2db      	uxtb	r3, r3
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4013      	ands	r3, r2
 8006780:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006782:	68bb      	ldr	r3, [r7, #8]
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f003 0301 	and.w	r3, r3, #1
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067ca:	f023 0307 	bic.w	r3, r3, #7
 80067ce:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 0306 	and.w	r3, r3, #6
 80067dc:	2b04      	cmp	r3, #4
 80067de:	d109      	bne.n	80067f4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ee:	f043 0303 	orr.w	r3, r3, #3
 80067f2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006806:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	460b      	mov	r3, r1
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	333c      	adds	r3, #60	; 0x3c
 800682e:	3304      	adds	r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <USB_EP0_OutStart+0xb8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d90a      	bls.n	8006852 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800684c:	d101      	bne.n	8006852 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	e037      	b.n	80068c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006858:	461a      	mov	r2, r3
 800685a:	2300      	movs	r3, #0
 800685c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006880:	f043 0318 	orr.w	r3, r3, #24
 8006884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006894:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006898:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d10f      	bne.n	80068c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	461a      	mov	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80068be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	4f54300a 	.word	0x4f54300a

080068d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a13      	ldr	r2, [pc, #76]	; (8006938 <USB_CoreReset+0x64>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e01b      	b.n	800692a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	daf2      	bge.n	80068e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <USB_CoreReset+0x64>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e006      	b.n	800692a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d0f0      	beq.n	800690a <USB_CoreReset+0x36>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	00030d40 	.word	0x00030d40

0800693c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	7c1b      	ldrb	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d115      	bne.n	8006980 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006958:	2202      	movs	r2, #2
 800695a:	2181      	movs	r1, #129	; 0x81
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 fcb0 	bl	80092c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800696c:	2202      	movs	r2, #2
 800696e:	2101      	movs	r1, #1
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f002 fca6 	bl	80092c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800697e:	e012      	b.n	80069a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	2202      	movs	r2, #2
 8006984:	2181      	movs	r1, #129	; 0x81
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f002 fc9b 	bl	80092c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	2202      	movs	r2, #2
 8006996:	2101      	movs	r1, #1
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f002 fc92 	bl	80092c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069a6:	2308      	movs	r3, #8
 80069a8:	2203      	movs	r2, #3
 80069aa:	2182      	movs	r1, #130	; 0x82
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 fc88 	bl	80092c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80069b8:	f44f 708e 	mov.w	r0, #284	; 0x11c
 80069bc:	f002 ff36 	bl	800982c <malloc>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d102      	bne.n	80069da <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	e026      	b.n	8006a28 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    hcdc->RxState = 0U;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7c1b      	ldrb	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a0e:	2101      	movs	r1, #1
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f002 fd47 	bl	80094a4 <USBD_LL_PrepareReceive>
 8006a16:	e007      	b.n	8006a28 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006a1e:	2340      	movs	r3, #64	; 0x40
 8006a20:	2101      	movs	r1, #1
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f002 fd3e 	bl	80094a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a42:	2181      	movs	r1, #129	; 0x81
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f002 fc62 	bl	800930e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a50:	2101      	movs	r1, #1
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 fc5b 	bl	800930e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a60:	2182      	movs	r1, #130	; 0x82
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f002 fc53 	bl	800930e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00e      	beq.n	8006a96 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 fed7 	bl	800983c <free>
    pdev->pClassData = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ab0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d039      	beq.n	8006b3e <USBD_CDC_Setup+0x9e>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d17c      	bne.n	8006bc8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d029      	beq.n	8006b2a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	b25b      	sxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	da11      	bge.n	8006b04 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006aec:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	88d2      	ldrh	r2, [r2, #6]
 8006af2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006af4:	6939      	ldr	r1, [r7, #16]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	88db      	ldrh	r3, [r3, #6]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f9c9 	bl	8007e94 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006b02:	e068      	b.n	8006bd6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785a      	ldrb	r2, [r3, #1]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b1a:	6939      	ldr	r1, [r7, #16]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	88db      	ldrh	r3, [r3, #6]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 f9e4 	bl	8007ef0 <USBD_CtlPrepareRx>
    break;
 8006b28:	e055      	b.n	8006bd6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	7850      	ldrb	r0, [r2, #1]
 8006b36:	2200      	movs	r2, #0
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	4798      	blx	r3
    break;
 8006b3c:	e04b      	b.n	8006bd6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b0a      	cmp	r3, #10
 8006b44:	d017      	beq.n	8006b76 <USBD_CDC_Setup+0xd6>
 8006b46:	2b0b      	cmp	r3, #11
 8006b48:	d029      	beq.n	8006b9e <USBD_CDC_Setup+0xfe>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d133      	bne.n	8006bb6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d107      	bne.n	8006b68 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f997 	bl	8007e94 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006b66:	e02e      	b.n	8006bc6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 f927 	bl	8007dbe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]
      break;
 8006b74:	e027      	b.n	8006bc6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d107      	bne.n	8006b90 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006b80:	f107 030f 	add.w	r3, r7, #15
 8006b84:	2201      	movs	r2, #1
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f983 	bl	8007e94 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006b8e:	e01a      	b.n	8006bc6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 f913 	bl	8007dbe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b9c:	e013      	b.n	8006bc6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d00d      	beq.n	8006bc4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 f907 	bl	8007dbe <USBD_CtlError>
			  ret = USBD_FAIL;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006bb4:	e006      	b.n	8006bc4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f900 	bl	8007dbe <USBD_CtlError>
      ret = USBD_FAIL;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc2:	e000      	b.n	8006bc6 <USBD_CDC_Setup+0x126>
      break;
 8006bc4:	bf00      	nop
    }
    break;
 8006bc6:	e006      	b.n	8006bd6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 f8f7 	bl	8007dbe <USBD_CtlError>
    ret = USBD_FAIL;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	75fb      	strb	r3, [r7, #23]
    break;
 8006bd4:	bf00      	nop
  }

  return ret;
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bf2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006bfa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d03a      	beq.n	8006c7c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	331c      	adds	r3, #28
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d029      	beq.n	8006c70 <USBD_CDC_DataIn+0x90>
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	331c      	adds	r3, #28
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	78f9      	ldrb	r1, [r7, #3]
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	460b      	mov	r3, r1
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	1a5b      	subs	r3, r3, r1
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4403      	add	r3, r0
 8006c3c:	3344      	adds	r3, #68	; 0x44
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c44:	fb03 f301 	mul.w	r3, r3, r1
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d110      	bne.n	8006c70 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	331c      	adds	r3, #28
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006c62:	78f9      	ldrb	r1, [r7, #3]
 8006c64:	2300      	movs	r3, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 fbf8 	bl	800945e <USBD_LL_Transmit>
 8006c6e:	e003      	b.n	8006c78 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
    return USBD_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e000      	b.n	8006c7e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c7c:	2302      	movs	r3, #2
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f002 fc23 	bl	80094ea <USBD_LL_GetRxDataSize>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4798      	blx	r3

    return USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006cd2:	2302      	movs	r3, #2
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cea:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d015      	beq.n	8006d22 <USBD_CDC_EP0_RxReady+0x46>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006cfc:	2bff      	cmp	r3, #255	; 0xff
 8006cfe:	d010      	beq.n	8006d22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f892 0100 	ldrb.w	r0, [r2, #256]	; 0x100
                                                      (uint8_t *)(void *)hcdc->data,
 8006d0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f892 2101 	ldrb.w	r2, [r2, #257]	; 0x101
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d16:	b292      	uxth	r2, r2
 8006d18:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22ff      	movs	r2, #255	; 0xff
 8006d1e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  }
  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2243      	movs	r2, #67	; 0x43
 8006d38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d3a:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20000090 	.word	0x20000090

08006d4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2243      	movs	r2, #67	; 0x43
 8006d58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d5a:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	2000004c 	.word	0x2000004c

08006d6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2243      	movs	r2, #67	; 0x43
 8006d78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	200000d4 	.word	0x200000d4

08006d8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	220a      	movs	r2, #10
 8006d98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d9a:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	20000008 	.word	0x20000008

08006dac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006db6:	2302      	movs	r3, #2
 8006db8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	4613      	mov	r3, r2
 8006de6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006dee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  hcdc->TxLength = length;
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e44:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01c      	beq.n	8006e8a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d115      	bne.n	8006e86 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
                       (uint16_t)hcdc->TxLength);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2181      	movs	r1, #129	; 0x81
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f002 faee 	bl	800945e <USBD_LL_Transmit>

      return USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	e002      	b.n	8006e8c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006e8a:	2302      	movs	r3, #2
  }
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d017      	beq.n	8006ede <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f002 faee 	bl	80094a4 <USBD_LL_PrepareReceive>
 8006ec8:	e007      	b.n	8006eda <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f002 fae5 	bl	80094a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006efc:	2302      	movs	r3, #2
 8006efe:	e01a      	b.n	8006f36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	79fa      	ldrb	r2, [r7, #7]
 8006f2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f002 f960 	bl	80091f4 <USBD_LL_Init>

  return USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
 8006f5e:	e001      	b.n	8006f64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f60:	2302      	movs	r3, #2
 8006f62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f002 f986 	bl	800928c <USBD_LL_Start>

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006fac:	2302      	movs	r3, #2
 8006fae:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fe94 	bl	8007d44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2b01      	cmp	r3, #1
 800703e:	d00c      	beq.n	800705a <USBD_LL_SetupStage+0x56>
 8007040:	2b01      	cmp	r3, #1
 8007042:	d302      	bcc.n	800704a <USBD_LL_SetupStage+0x46>
 8007044:	2b02      	cmp	r3, #2
 8007046:	d010      	beq.n	800706a <USBD_LL_SetupStage+0x66>
 8007048:	e017      	b.n	800707a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa04 	bl	8007460 <USBD_StdDevReq>
    break;
 8007058:	e01a      	b.n	8007090 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa66 	bl	8007534 <USBD_StdItfReq>
    break;
 8007068:	e012      	b.n	8007090 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 faa4 	bl	80075c0 <USBD_StdEPReq>
    break;
 8007078:	e00a      	b.n	8007090 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007080:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007084:	b2db      	uxtb	r3, r3
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f002 f95f 	bl	800934c <USBD_LL_StallEP>
    break;
 800708e:	bf00      	nop
  }

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	460b      	mov	r3, r1
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d14b      	bne.n	8007146 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80070b4:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d134      	bne.n	800712a <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d919      	bls.n	8007100 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d203      	bcs.n	80070ee <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	e002      	b.n	80070f4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 ff17 	bl	8007f2c <USBD_CtlContinueRx>
 80070fe:	e038      	b.n	8007172 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007112:	2b03      	cmp	r3, #3
 8007114:	d105      	bne.n	8007122 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 ff14 	bl	8007f50 <USBD_CtlSendStatus>
 8007128:	e023      	b.n	8007172 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007130:	2b05      	cmp	r3, #5
 8007132:	d11e      	bne.n	8007172 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f002 f904 	bl	800934c <USBD_LL_StallEP>
 8007144:	e015      	b.n	8007172 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00d      	beq.n	800716e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007158:	2b03      	cmp	r3, #3
 800715a:	d108      	bne.n	800716e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	7afa      	ldrb	r2, [r7, #11]
 8007166:	4611      	mov	r1, r2
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	4798      	blx	r3
 800716c:	e001      	b.n	8007172 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800716e:	2302      	movs	r3, #2
 8007170:	e000      	b.n	8007174 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	460b      	mov	r3, r1
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d17f      	bne.n	8007290 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3314      	adds	r3, #20
 8007194:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800719c:	2b02      	cmp	r3, #2
 800719e:	d15c      	bne.n	800725a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d915      	bls.n	80071d8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	1ad2      	subs	r2, r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fe81 	bl	8007ecc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071ca:	2300      	movs	r3, #0
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f002 f967 	bl	80094a4 <USBD_LL_PrepareReceive>
 80071d6:	e04e      	b.n	8007276 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	6912      	ldr	r2, [r2, #16]
 80071e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e4:	fb02 f201 	mul.w	r2, r2, r1
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11c      	bne.n	8007228 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d316      	bcc.n	8007228 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007204:	429a      	cmp	r2, r3
 8007206:	d20f      	bcs.n	8007228 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007208:	2200      	movs	r2, #0
 800720a:	2100      	movs	r1, #0
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fe5d 	bl	8007ecc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800721a:	2300      	movs	r3, #0
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f002 f93f 	bl	80094a4 <USBD_LL_PrepareReceive>
 8007226:	e026      	b.n	8007276 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800723a:	2b03      	cmp	r3, #3
 800723c:	d105      	bne.n	800724a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f002 f87d 	bl	800934c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fe8f 	bl	8007f76 <USBD_CtlReceiveStatus>
 8007258:	e00d      	b.n	8007276 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007260:	2b04      	cmp	r3, #4
 8007262:	d004      	beq.n	800726e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800726e:	2180      	movs	r1, #128	; 0x80
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f002 f86b 	bl	800934c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800727c:	2b01      	cmp	r3, #1
 800727e:	d11d      	bne.n	80072bc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff fe82 	bl	8006f8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800728e:	e015      	b.n	80072bc <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00d      	beq.n	80072b8 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d108      	bne.n	80072b8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	7afa      	ldrb	r2, [r7, #11]
 80072b0:	4611      	mov	r1, r2
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	4798      	blx	r3
 80072b6:	e001      	b.n	80072bc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	e000      	b.n	80072be <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	2200      	movs	r2, #0
 80072d2:	2100      	movs	r1, #0
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fff4 	bl	80092c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2240      	movs	r2, #64	; 0x40
 80072e6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072ea:	2340      	movs	r3, #64	; 0x40
 80072ec:	2200      	movs	r2, #0
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 ffe6 	bl	80092c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2240      	movs	r2, #64	; 0x40
 8007300:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6852      	ldr	r2, [r2, #4]
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	4611      	mov	r1, r2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
  }

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	78fa      	ldrb	r2, [r7, #3]
 8007358:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2204      	movs	r2, #4
 8007380:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d10b      	bne.n	80073de <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6852      	ldr	r2, [r2, #4]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	4611      	mov	r1, r2
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007476:	2b20      	cmp	r3, #32
 8007478:	d004      	beq.n	8007484 <USBD_StdDevReq+0x24>
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d002      	beq.n	8007484 <USBD_StdDevReq+0x24>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d008      	beq.n	8007494 <USBD_StdDevReq+0x34>
 8007482:	e04c      	b.n	800751e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
    break;
 8007492:	e049      	b.n	8007528 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b09      	cmp	r3, #9
 800749a:	d83a      	bhi.n	8007512 <USBD_StdDevReq+0xb2>
 800749c:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <USBD_StdDevReq+0x44>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074f5 	.word	0x080074f5
 80074a8:	08007509 	.word	0x08007509
 80074ac:	08007513 	.word	0x08007513
 80074b0:	080074ff 	.word	0x080074ff
 80074b4:	08007513 	.word	0x08007513
 80074b8:	080074d7 	.word	0x080074d7
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	08007513 	.word	0x08007513
 80074c4:	080074eb 	.word	0x080074eb
 80074c8:	080074e1 	.word	0x080074e1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f9d2 	bl	8007878 <USBD_GetDescriptor>
      break;
 80074d4:	e022      	b.n	800751c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fac7 	bl	8007a6c <USBD_SetAddress>
      break;
 80074de:	e01d      	b.n	800751c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fb04 	bl	8007af0 <USBD_SetConfig>
      break;
 80074e8:	e018      	b.n	800751c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fb8d 	bl	8007c0c <USBD_GetConfig>
      break;
 80074f2:	e013      	b.n	800751c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fbbc 	bl	8007c74 <USBD_GetStatus>
      break;
 80074fc:	e00e      	b.n	800751c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80074fe:	6839      	ldr	r1, [r7, #0]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fbea 	bl	8007cda <USBD_SetFeature>
      break;
 8007506:	e009      	b.n	800751c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fbf9 	bl	8007d02 <USBD_ClrFeature>
      break;
 8007510:	e004      	b.n	800751c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc52 	bl	8007dbe <USBD_CtlError>
      break;
 800751a:	bf00      	nop
    }
    break;
 800751c:	e004      	b.n	8007528 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fc4c 	bl	8007dbe <USBD_CtlError>
    break;
 8007526:	bf00      	nop
  }

  return ret;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop

08007534 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800754a:	2b20      	cmp	r3, #32
 800754c:	d003      	beq.n	8007556 <USBD_StdItfReq+0x22>
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d001      	beq.n	8007556 <USBD_StdItfReq+0x22>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d12a      	bne.n	80075ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800755c:	3b01      	subs	r3, #1
 800755e:	2b02      	cmp	r3, #2
 8007560:	d81d      	bhi.n	800759e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	889b      	ldrh	r3, [r3, #4]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d813      	bhi.n	8007594 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	4798      	blx	r3
 800757a:	4603      	mov	r3, r0
 800757c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	88db      	ldrh	r3, [r3, #6]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d110      	bne.n	80075a8 <USBD_StdItfReq+0x74>
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10d      	bne.n	80075a8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fcdf 	bl	8007f50 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007592:	e009      	b.n	80075a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fc11 	bl	8007dbe <USBD_CtlError>
      break;
 800759c:	e004      	b.n	80075a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc0c 	bl	8007dbe <USBD_CtlError>
      break;
 80075a6:	e000      	b.n	80075aa <USBD_StdItfReq+0x76>
      break;
 80075a8:	bf00      	nop
    }
    break;
 80075aa:	e004      	b.n	80075b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fc05 	bl	8007dbe <USBD_CtlError>
    break;
 80075b4:	bf00      	nop
  }

  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	889b      	ldrh	r3, [r3, #4]
 80075d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d004      	beq.n	80075ea <USBD_StdEPReq+0x2a>
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d002      	beq.n	80075ea <USBD_StdEPReq+0x2a>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <USBD_StdEPReq+0x3a>
 80075e8:	e13b      	b.n	8007862 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
    break;
 80075f8:	e138      	b.n	800786c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007602:	2b20      	cmp	r3, #32
 8007604:	d10a      	bne.n	800761c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	e128      	b.n	800786e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d03e      	beq.n	80076a2 <USBD_StdEPReq+0xe2>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d002      	beq.n	800762e <USBD_StdEPReq+0x6e>
 8007628:	2b00      	cmp	r3, #0
 800762a:	d070      	beq.n	800770e <USBD_StdEPReq+0x14e>
 800762c:	e113      	b.n	8007856 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007634:	2b02      	cmp	r3, #2
 8007636:	d002      	beq.n	800763e <USBD_StdEPReq+0x7e>
 8007638:	2b03      	cmp	r3, #3
 800763a:	d015      	beq.n	8007668 <USBD_StdEPReq+0xa8>
 800763c:	e02b      	b.n	8007696 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00c      	beq.n	800765e <USBD_StdEPReq+0x9e>
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	d009      	beq.n	800765e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 fe7c 	bl	800934c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007654:	2180      	movs	r1, #128	; 0x80
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fe78 	bl	800934c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800765c:	e020      	b.n	80076a0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fbac 	bl	8007dbe <USBD_CtlError>
        break;
 8007666:	e01b      	b.n	80076a0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10e      	bne.n	800768e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <USBD_StdEPReq+0xce>
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b80      	cmp	r3, #128	; 0x80
 800767a:	d008      	beq.n	800768e <USBD_StdEPReq+0xce>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 fe5f 	bl	800934c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fc5e 	bl	8007f50 <USBD_CtlSendStatus>

        break;
 8007694:	e004      	b.n	80076a0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fb90 	bl	8007dbe <USBD_CtlError>
        break;
 800769e:	bf00      	nop
      }
      break;
 80076a0:	e0de      	b.n	8007860 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d002      	beq.n	80076b2 <USBD_StdEPReq+0xf2>
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d015      	beq.n	80076dc <USBD_StdEPReq+0x11c>
 80076b0:	e026      	b.n	8007700 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00c      	beq.n	80076d2 <USBD_StdEPReq+0x112>
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d009      	beq.n	80076d2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fe42 	bl	800934c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fe3e 	bl	800934c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80076d0:	e01c      	b.n	800770c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fb72 	bl	8007dbe <USBD_CtlError>
        break;
 80076da:	e017      	b.n	800770c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	885b      	ldrh	r3, [r3, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d112      	bne.n	800770a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fe49 	bl	800938a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fc29 	bl	8007f50 <USBD_CtlSendStatus>
        }
        break;
 80076fe:	e004      	b.n	800770a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fb5b 	bl	8007dbe <USBD_CtlError>
        break;
 8007708:	e000      	b.n	800770c <USBD_StdEPReq+0x14c>
        break;
 800770a:	bf00      	nop
      }
      break;
 800770c:	e0a8      	b.n	8007860 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007714:	2b02      	cmp	r3, #2
 8007716:	d002      	beq.n	800771e <USBD_StdEPReq+0x15e>
 8007718:	2b03      	cmp	r3, #3
 800771a:	d031      	beq.n	8007780 <USBD_StdEPReq+0x1c0>
 800771c:	e095      	b.n	800784a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <USBD_StdEPReq+0x174>
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b80      	cmp	r3, #128	; 0x80
 8007728:	d004      	beq.n	8007734 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fb46 	bl	8007dbe <USBD_CtlError>
          break;
 8007732:	e08f      	b.n	8007854 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	da0b      	bge.n	8007754 <USBD_StdEPReq+0x194>
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	3310      	adds	r3, #16
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4413      	add	r3, r2
 8007750:	3304      	adds	r3, #4
 8007752:	e00a      	b.n	800776a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2202      	movs	r2, #2
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fb8b 	bl	8007e94 <USBD_CtlSendData>
          break;
 800777e:	e069      	b.n	8007854 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	da11      	bge.n	80077ac <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	f003 020f 	and.w	r2, r3, #15
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	3318      	adds	r3, #24
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d117      	bne.n	80077d2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb0a 	bl	8007dbe <USBD_CtlError>
            break;
 80077aa:	e053      	b.n	8007854 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	f003 020f 	and.w	r2, r3, #15
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 faf7 	bl	8007dbe <USBD_CtlError>
            break;
 80077d0:	e040      	b.n	8007854 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da0b      	bge.n	80077f2 <USBD_StdEPReq+0x232>
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	3310      	adds	r3, #16
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	3304      	adds	r3, #4
 80077f0:	e00a      	b.n	8007808 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <USBD_StdEPReq+0x256>
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d103      	bne.n	800781e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	e00e      	b.n	800783c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fdd0 	bl	80093c8 <USBD_LL_IsStallEP>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	e002      	b.n	800783c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2202      	movs	r2, #2
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fb26 	bl	8007e94 <USBD_CtlSendData>
          break;
 8007848:	e004      	b.n	8007854 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fab6 	bl	8007dbe <USBD_CtlError>
        break;
 8007852:	bf00      	nop
      }
      break;
 8007854:	e004      	b.n	8007860 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fab0 	bl	8007dbe <USBD_CtlError>
      break;
 800785e:	bf00      	nop
    }
    break;
 8007860:	e004      	b.n	800786c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 faaa 	bl	8007dbe <USBD_CtlError>
    break;
 800786a:	bf00      	nop
  }

  return ret;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	2b06      	cmp	r3, #6
 800788e:	f200 80c9 	bhi.w	8007a24 <USBD_GetDescriptor+0x1ac>
 8007892:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <USBD_GetDescriptor+0x20>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078cd 	.word	0x080078cd
 80078a0:	0800790d 	.word	0x0800790d
 80078a4:	08007a25 	.word	0x08007a25
 80078a8:	08007a25 	.word	0x08007a25
 80078ac:	080079d1 	.word	0x080079d1
 80078b0:	080079f7 	.word	0x080079f7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 010a 	add.w	r1, r7, #10
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
    break;
 80078ca:	e0b0      	b.n	8007a2e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7c1b      	ldrb	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10d      	bne.n	80078f0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	f107 020a 	add.w	r2, r7, #10
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	2202      	movs	r2, #2
 80078ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80078ee:	e09e      	b.n	8007a2e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	f107 020a 	add.w	r2, r7, #10
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	2202      	movs	r2, #2
 8007908:	701a      	strb	r2, [r3, #0]
    break;
 800790a:	e090      	b.n	8007a2e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	885b      	ldrh	r3, [r3, #2]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b05      	cmp	r3, #5
 8007914:	d856      	bhi.n	80079c4 <USBD_GetDescriptor+0x14c>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <USBD_GetDescriptor+0xa4>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007935 	.word	0x08007935
 8007920:	0800794d 	.word	0x0800794d
 8007924:	08007965 	.word	0x08007965
 8007928:	0800797d 	.word	0x0800797d
 800792c:	08007995 	.word	0x08007995
 8007930:	080079ad 	.word	0x080079ad
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	7c12      	ldrb	r2, [r2, #16]
 8007940:	f107 010a 	add.w	r1, r7, #10
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
 8007948:	60f8      	str	r0, [r7, #12]
      break;
 800794a:	e040      	b.n	80079ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 010a 	add.w	r1, r7, #10
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
      break;
 8007962:	e034      	b.n	80079ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7c12      	ldrb	r2, [r2, #16]
 8007970:	f107 010a 	add.w	r1, r7, #10
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	60f8      	str	r0, [r7, #12]
      break;
 800797a:	e028      	b.n	80079ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 010a 	add.w	r1, r7, #10
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
      break;
 8007992:	e01c      	b.n	80079ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	7c12      	ldrb	r2, [r2, #16]
 80079a0:	f107 010a 	add.w	r1, r7, #10
 80079a4:	4610      	mov	r0, r2
 80079a6:	4798      	blx	r3
 80079a8:	60f8      	str	r0, [r7, #12]
      break;
 80079aa:	e010      	b.n	80079ce <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 010a 	add.w	r1, r7, #10
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
      break;
 80079c2:	e004      	b.n	80079ce <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9f9 	bl	8007dbe <USBD_CtlError>
      return;
 80079cc:	e04b      	b.n	8007a66 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80079ce:	e02e      	b.n	8007a2e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7c1b      	ldrb	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	f107 020a 	add.w	r2, r7, #10
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	60f8      	str	r0, [r7, #12]
      break;
 80079ea:	e020      	b.n	8007a2e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9e5 	bl	8007dbe <USBD_CtlError>
      return;
 80079f4:	e037      	b.n	8007a66 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7c1b      	ldrb	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10d      	bne.n	8007a1a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	f107 020a 	add.w	r2, r7, #10
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4798      	blx	r3
 8007a0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	3301      	adds	r3, #1
 8007a14:	2207      	movs	r2, #7
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	e009      	b.n	8007a2e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f9ce 	bl	8007dbe <USBD_CtlError>
      return;
 8007a22:	e020      	b.n	8007a66 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9c9 	bl	8007dbe <USBD_CtlError>
    return;
 8007a2c:	e01b      	b.n	8007a66 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007a2e:	897b      	ldrh	r3, [r7, #10]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d011      	beq.n	8007a58 <USBD_GetDescriptor+0x1e0>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	88db      	ldrh	r3, [r3, #6]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	88da      	ldrh	r2, [r3, #6]
 8007a40:	897b      	ldrh	r3, [r7, #10]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	bf28      	it	cs
 8007a46:	4613      	movcs	r3, r2
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007a4c:	897b      	ldrh	r3, [r7, #10]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68f9      	ldr	r1, [r7, #12]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa1e 	bl	8007e94 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fa75 	bl	8007f50 <USBD_CtlSendStatus>
  }
}
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	889b      	ldrh	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d130      	bne.n	8007ae0 <USBD_SetAddress+0x74>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d12c      	bne.n	8007ae0 <USBD_SetAddress+0x74>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	885b      	ldrh	r3, [r3, #2]
 8007a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a8c:	d828      	bhi.n	8007ae0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	885b      	ldrh	r3, [r3, #2]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d104      	bne.n	8007aae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f989 	bl	8007dbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aac:	e01c      	b.n	8007ae8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	7bfa      	ldrb	r2, [r7, #15]
 8007ab2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fcb0 	bl	8009420 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fa45 	bl	8007f50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad4:	e008      	b.n	8007ae8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ade:	e003      	b.n	8007ae8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f96b 	bl	8007dbe <USBD_CtlError>
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	4b41      	ldr	r3, [pc, #260]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b04:	4b40      	ldr	r3, [pc, #256]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d904      	bls.n	8007b16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f955 	bl	8007dbe <USBD_CtlError>
 8007b14:	e075      	b.n	8007c02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d002      	beq.n	8007b26 <USBD_SetConfig+0x36>
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d023      	beq.n	8007b6c <USBD_SetConfig+0x7c>
 8007b24:	e062      	b.n	8007bec <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007b26:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01a      	beq.n	8007b64 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007b2e:	4b36      	ldr	r3, [pc, #216]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b40:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fa2a 	bl	8006fa0 <USBD_SetClassConfig>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d104      	bne.n	8007b5c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f932 	bl	8007dbe <USBD_CtlError>
          return;
 8007b5a:	e052      	b.n	8007c02 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f9f7 	bl	8007f50 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007b62:	e04e      	b.n	8007c02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9f3 	bl	8007f50 <USBD_CtlSendStatus>
      break;
 8007b6a:	e04a      	b.n	8007c02 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b6c:	4b26      	ldr	r3, [pc, #152]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d112      	bne.n	8007b9a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007b7c:	4b22      	ldr	r3, [pc, #136]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b86:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fa26 	bl	8006fde <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9dc 	bl	8007f50 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007b98:	e033      	b.n	8007c02 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <USBD_SetConfig+0x118>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d01d      	beq.n	8007be4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fa14 	bl	8006fde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bb6:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <USBD_SetConfig+0x118>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <USBD_SetConfig+0x118>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff f9ea 	bl	8006fa0 <USBD_SetClassConfig>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d104      	bne.n	8007bdc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f8f2 	bl	8007dbe <USBD_CtlError>
          return;
 8007bda:	e012      	b.n	8007c02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f9b7 	bl	8007f50 <USBD_CtlSendStatus>
      break;
 8007be2:	e00e      	b.n	8007c02 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f9b3 	bl	8007f50 <USBD_CtlSendStatus>
      break;
 8007bea:	e00a      	b.n	8007c02 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8e5 	bl	8007dbe <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <USBD_SetConfig+0x118>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff f9ef 	bl	8006fde <USBD_ClrClassConfig>
      break;
 8007c00:	bf00      	nop
    }
  }
}
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000208 	.word	0x20000208

08007c0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d004      	beq.n	8007c28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f8cc 	bl	8007dbe <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007c26:	e021      	b.n	8007c6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	db17      	blt.n	8007c62 <USBD_GetConfig+0x56>
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	dd02      	ble.n	8007c3c <USBD_GetConfig+0x30>
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d00b      	beq.n	8007c52 <USBD_GetConfig+0x46>
 8007c3a:	e012      	b.n	8007c62 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3308      	adds	r3, #8
 8007c46:	2201      	movs	r2, #1
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f922 	bl	8007e94 <USBD_CtlSendData>
      break;
 8007c50:	e00c      	b.n	8007c6c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2201      	movs	r2, #1
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f91a 	bl	8007e94 <USBD_CtlSendData>
      break;
 8007c60:	e004      	b.n	8007c6c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8aa 	bl	8007dbe <USBD_CtlError>
      break;
 8007c6a:	bf00      	nop
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c84:	3b01      	subs	r3, #1
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d81e      	bhi.n	8007cc8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	88db      	ldrh	r3, [r3, #6]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d004      	beq.n	8007c9c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f892 	bl	8007dbe <USBD_CtlError>
      break;
 8007c9a:	e01a      	b.n	8007cd2 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f043 0202 	orr.w	r2, r3, #2
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8e7 	bl	8007e94 <USBD_CtlSendData>
    break;
 8007cc6:	e004      	b.n	8007cd2 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f877 	bl	8007dbe <USBD_CtlError>
    break;
 8007cd0:	bf00      	nop
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	885b      	ldrh	r3, [r3, #2]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d106      	bne.n	8007cfa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f92b 	bl	8007f50 <USBD_CtlSendStatus>
  }

}
 8007cfa:	bf00      	nop
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d12:	3b01      	subs	r3, #1
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d80b      	bhi.n	8007d30 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	885b      	ldrh	r3, [r3, #2]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d10c      	bne.n	8007d3a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f911 	bl	8007f50 <USBD_CtlSendStatus>
    }
    break;
 8007d2e:	e004      	b.n	8007d3a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f843 	bl	8007dbe <USBD_CtlError>
    break;
 8007d38:	e000      	b.n	8007d3c <USBD_ClrFeature+0x3a>
    break;
 8007d3a:	bf00      	nop
  }
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	785a      	ldrb	r2, [r3, #1]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	3302      	adds	r3, #2
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	3303      	adds	r3, #3
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	3305      	adds	r3, #5
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	4413      	add	r3, r2
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	3306      	adds	r3, #6
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	3307      	adds	r3, #7
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	4413      	add	r3, r2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	80da      	strh	r2, [r3, #6]

}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fabe 	bl	800934c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 faba 	bl	800934c <USBD_LL_StallEP>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d032      	beq.n	8007e5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f834 	bl	8007e64 <USBD_GetLen>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	3301      	adds	r3, #1
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	75fa      	strb	r2, [r7, #23]
 8007e10:	461a      	mov	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	4413      	add	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7812      	ldrb	r2, [r2, #0]
 8007e1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	75fa      	strb	r2, [r7, #23]
 8007e22:	461a      	mov	r2, r3
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	4413      	add	r3, r2
 8007e28:	2203      	movs	r2, #3
 8007e2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e2c:	e012      	b.n	8007e54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	60fa      	str	r2, [r7, #12]
 8007e34:	7dfa      	ldrb	r2, [r7, #23]
 8007e36:	1c51      	adds	r1, r2, #1
 8007e38:	75f9      	strb	r1, [r7, #23]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	440a      	add	r2, r1
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	75fa      	strb	r2, [r7, #23]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e8      	bne.n	8007e2e <USBD_GetString+0x4e>
    }
  }
}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007e70:	e005      	b.n	8007e7e <USBD_GetLen+0x1a>
    {
        len++;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	3301      	adds	r3, #1
 8007e76:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f5      	bne.n	8007e72 <USBD_GetLen+0xe>
    }

    return len;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f001 face 	bl	800945e <USBD_LL_Transmit>

  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	2100      	movs	r1, #0
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f001 fabc 	bl	800945e <USBD_LL_Transmit>

  return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2203      	movs	r2, #3
 8007f02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007f06:	88fa      	ldrh	r2, [r7, #6]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007f0e:	88fa      	ldrh	r2, [r7, #6]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fac1 	bl	80094a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f001 faaf 	bl	80094a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f60:	2300      	movs	r3, #0
 8007f62:	2200      	movs	r2, #0
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fa79 	bl	800945e <USBD_LL_Transmit>

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2205      	movs	r2, #5
 8007f82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007f86:	2300      	movs	r3, #0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fa89 	bl	80094a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
	g_ADCValue = g_ADCBuffer[0];
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <HAL_ADC_ConvCpltCallback+0x20>)
 8007faa:	6013      	str	r3, [r2, #0]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20000398 	.word	0x20000398
 8007fbc:	20000118 	.word	0x20000118

08007fc0 <user_pwm_setvalue>:


void user_pwm_setvalue(uint16_t value)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	; 0x28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.Pulse = value;
 8007fca:	88fb      	ldrh	r3, [r7, #6]
 8007fcc:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4808      	ldr	r0, [pc, #32]	; (8008000 <user_pwm_setvalue+0x40>)
 8007fe0:	f7fc fcb8 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <user_pwm_setvalue+0x2e>
	{
		Error_Handler();
 8007fea:	f000 fbdd 	bl	80087a8 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8007fee:	2100      	movs	r1, #0
 8007ff0:	4803      	ldr	r0, [pc, #12]	; (8008000 <user_pwm_setvalue+0x40>)
 8007ff2:	f7fc fb69 	bl	80046c8 <HAL_TIM_PWM_Start>
}
 8007ff6:	bf00      	nop
 8007ff8:	3728      	adds	r7, #40	; 0x28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	2000021c 	.word	0x2000021c

08008004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800800a:	f7f8 fab9 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800800e:	f000 f879 	bl	8008104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008012:	f000 fac1 	bl	8008598 <MX_GPIO_Init>
  MX_DMA_Init();
 8008016:	f000 fa9f 	bl	8008558 <MX_DMA_Init>
  MX_I2C1_Init();
 800801a:	f000 f945 	bl	80082a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800801e:	f000 f971 	bl	8008304 <MX_I2S3_Init>
  MX_SPI1_Init();
 8008022:	f000 f99f 	bl	8008364 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8008026:	f000 fe99 	bl	8008d5c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800802a:	f000 f9d1 	bl	80083d0 <MX_TIM3_Init>
  MX_ADC1_Init();
 800802e:	f000 f8eb 	bl	8008208 <MX_ADC1_Init>
  MX_TIM4_Init();
 8008032:	f000 fa19 	bl	8008468 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8008036:	482b      	ldr	r0, [pc, #172]	; (80080e4 <main+0xe0>)
 8008038:	f7fc faed 	bl	8004616 <HAL_TIM_Base_Start_IT>

  //PWM signals
  uint8_t pwm_value=0, step;
 800803c:	2300      	movs	r3, #0
 800803e:	75fb      	strb	r3, [r7, #23]

  int g_MeasurementNumber=1;
 8008040:	2301      	movs	r3, #1
 8008042:	613b      	str	r3, [r7, #16]
  HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, ADC_BUFFER_LENGTH);
 8008044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008048:	4927      	ldr	r1, [pc, #156]	; (80080e8 <main+0xe4>)
 800804a:	4828      	ldr	r0, [pc, #160]	; (80080ec <main+0xe8>)
 800804c:	f7f8 fb70 	bl	8000730 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t HiMsg[] = "plez work\r\n";
 8008050:	4a27      	ldr	r2, [pc, #156]	; (80080f0 <main+0xec>)
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	ca07      	ldmia	r2, {r0, r1, r2}
 8008056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  CDC_Transmit_FS(HiMsg, strlen(HiMsg));
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	4618      	mov	r0, r3
 800805e:	f7f8 f8b7 	bl	80001d0 <strlen>
 8008062:	4602      	mov	r2, r0
 8008064:	1d3b      	adds	r3, r7, #4
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f000 ff49 	bl	8008f00 <CDC_Transmit_FS>
	  HAL_Delay(200);
 800806e:	20c8      	movs	r0, #200	; 0xc8
 8008070:	f7f8 faf8 	bl	8000664 <HAL_Delay>

	  sprintf(HiMsg, "volt %d\r\n", g_ADCValue);
 8008074:	4b1f      	ldr	r3, [pc, #124]	; (80080f4 <main+0xf0>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	491f      	ldr	r1, [pc, #124]	; (80080f8 <main+0xf4>)
 800807c:	4618      	mov	r0, r3
 800807e:	f001 fca5 	bl	80099cc <siprintf>
	  CDC_Transmit_FS(HiMsg, strlen(HiMsg));
 8008082:	1d3b      	adds	r3, r7, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7f8 f8a3 	bl	80001d0 <strlen>
 800808a:	4602      	mov	r2, r0
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f000 ff35 	bl	8008f00 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8008096:	2064      	movs	r0, #100	; 0x64
 8008098:	f7f8 fae4 	bl	8000664 <HAL_Delay>

	  if(pwm_value == 0) step = 50;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <main+0xa2>
 80080a2:	2332      	movs	r3, #50	; 0x32
 80080a4:	75bb      	strb	r3, [r7, #22]
	  if(pwm_value == 500) step = -50;
	  pwm_value += step;
 80080a6:	7dfa      	ldrb	r2, [r7, #23]
 80080a8:	7dbb      	ldrb	r3, [r7, #22]
 80080aa:	4413      	add	r3, r2
 80080ac:	75fb      	strb	r3, [r7, #23]
	  user_pwm_setvalue(pwm_value);
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff ff84 	bl	8007fc0 <user_pwm_setvalue>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80080b8:	2101      	movs	r1, #1
 80080ba:	4810      	ldr	r0, [pc, #64]	; (80080fc <main+0xf8>)
 80080bc:	f7f9 fd00 	bl	8001ac0 <HAL_GPIO_ReadPin>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d006      	beq.n	80080d4 <main+0xd0>
		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80080c6:	2201      	movs	r2, #1
 80080c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080cc:	480c      	ldr	r0, [pc, #48]	; (8008100 <main+0xfc>)
 80080ce:	f7f9 fd0f 	bl	8001af0 <HAL_GPIO_WritePin>
 80080d2:	e7bd      	b.n	8008050 <main+0x4c>
	  } else {
		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80080d4:	2200      	movs	r2, #0
 80080d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080da:	4809      	ldr	r0, [pc, #36]	; (8008100 <main+0xfc>)
 80080dc:	f7f9 fd08 	bl	8001af0 <HAL_GPIO_WritePin>
  {
 80080e0:	e7b6      	b.n	8008050 <main+0x4c>
 80080e2:	bf00      	nop
 80080e4:	200002b0 	.word	0x200002b0
 80080e8:	20000398 	.word	0x20000398
 80080ec:	200002f0 	.word	0x200002f0
 80080f0:	0800a08c 	.word	0x0800a08c
 80080f4:	20000118 	.word	0x20000118
 80080f8:	0800a080 	.word	0x0800a080
 80080fc:	40020000 	.word	0x40020000
 8008100:	40020c00 	.word	0x40020c00

08008104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b098      	sub	sp, #96	; 0x60
 8008108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800810a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800810e:	2230      	movs	r2, #48	; 0x30
 8008110:	2100      	movs	r1, #0
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fb9a 	bl	800984c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008118:	f107 031c 	add.w	r3, r7, #28
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	605a      	str	r2, [r3, #4]
 8008122:	609a      	str	r2, [r3, #8]
 8008124:	60da      	str	r2, [r3, #12]
 8008126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	609a      	str	r2, [r3, #8]
 8008134:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	60bb      	str	r3, [r7, #8]
 800813a:	4b31      	ldr	r3, [pc, #196]	; (8008200 <SystemClock_Config+0xfc>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	4a30      	ldr	r2, [pc, #192]	; (8008200 <SystemClock_Config+0xfc>)
 8008140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008144:	6413      	str	r3, [r2, #64]	; 0x40
 8008146:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <SystemClock_Config+0xfc>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800814e:	60bb      	str	r3, [r7, #8]
 8008150:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <SystemClock_Config+0x100>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2a      	ldr	r2, [pc, #168]	; (8008204 <SystemClock_Config+0x100>)
 800815c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	4b28      	ldr	r3, [pc, #160]	; (8008204 <SystemClock_Config+0x100>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800816a:	607b      	str	r3, [r7, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800816e:	2301      	movs	r3, #1
 8008170:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008176:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008178:	2302      	movs	r3, #2
 800817a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800817c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008180:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008182:	2308      	movs	r3, #8
 8008184:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008186:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800818a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800818c:	2302      	movs	r3, #2
 800818e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008190:	2307      	movs	r3, #7
 8008192:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008194:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008198:	4618      	mov	r0, r3
 800819a:	f7fb fc53 	bl	8003a44 <HAL_RCC_OscConfig>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80081a4:	f000 fb00 	bl	80087a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80081a8:	230f      	movs	r3, #15
 80081aa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80081ac:	2302      	movs	r3, #2
 80081ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80081b0:	2300      	movs	r3, #0
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80081b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80081b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80081ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80081c0:	f107 031c 	add.w	r3, r7, #28
 80081c4:	2105      	movs	r1, #5
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fb fe7e 	bl	8003ec8 <HAL_RCC_ClockConfig>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80081d2:	f000 fae9 	bl	80087a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80081d6:	2301      	movs	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80081da:	23c0      	movs	r3, #192	; 0xc0
 80081dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80081de:	2302      	movs	r3, #2
 80081e0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fc f848 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80081f2:	f000 fad9 	bl	80087a8 <Error_Handler>
  }
}
 80081f6:	bf00      	nop
 80081f8:	3760      	adds	r7, #96	; 0x60
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40023800 	.word	0x40023800
 8008204:	40007000 	.word	0x40007000

08008208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800820e:	463b      	mov	r3, r7
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <MX_ADC1_Init+0x98>)
 800821c:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <MX_ADC1_Init+0x9c>)
 800821e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008220:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008226:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008228:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <MX_ADC1_Init+0x98>)
 800822a:	2200      	movs	r2, #0
 800822c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800822e:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008230:	2200      	movs	r2, #0
 8008232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008234:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008236:	2201      	movs	r2, #1
 8008238:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <MX_ADC1_Init+0x98>)
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008242:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008244:	2200      	movs	r2, #0
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <MX_ADC1_Init+0x98>)
 800824a:	2200      	movs	r2, #0
 800824c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008250:	2200      	movs	r2, #0
 8008252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008254:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008256:	2201      	movs	r2, #1
 8008258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <MX_ADC1_Init+0x98>)
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = DISABLE;
 8008262:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <MX_ADC1_Init+0x98>)
 8008264:	2200      	movs	r2, #0
 8008266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008268:	480d      	ldr	r0, [pc, #52]	; (80082a0 <MX_ADC1_Init+0x98>)
 800826a:	f7f8 fa1d 	bl	80006a8 <HAL_ADC_Init>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008274:	f000 fa98 	bl	80087a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008278:	2301      	movs	r3, #1
 800827a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800827c:	2301      	movs	r3, #1
 800827e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008280:	2300      	movs	r3, #0
 8008282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008284:	463b      	mov	r3, r7
 8008286:	4619      	mov	r1, r3
 8008288:	4805      	ldr	r0, [pc, #20]	; (80082a0 <MX_ADC1_Init+0x98>)
 800828a:	f7f8 fb57 	bl	800093c <HAL_ADC_ConfigChannel>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008294:	f000 fa88 	bl	80087a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200002f0 	.word	0x200002f0
 80082a4:	40012000 	.word	0x40012000

080082a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80082ac:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082ae:	4a13      	ldr	r2, [pc, #76]	; (80082fc <MX_I2C1_Init+0x54>)
 80082b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80082b2:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082b4:	4a12      	ldr	r2, [pc, #72]	; (8008300 <MX_I2C1_Init+0x58>)
 80082b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80082b8:	4b0f      	ldr	r3, [pc, #60]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80082be:	4b0e      	ldr	r3, [pc, #56]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80082d8:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082da:	2200      	movs	r2, #0
 80082dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80082de:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80082e4:	4804      	ldr	r0, [pc, #16]	; (80082f8 <MX_I2C1_Init+0x50>)
 80082e6:	f7f9 fc5b 	bl	8001ba0 <HAL_I2C_Init>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80082f0:	f000 fa5a 	bl	80087a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80082f4:	bf00      	nop
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	2000025c 	.word	0x2000025c
 80082fc:	40005400 	.word	0x40005400
 8008300:	000186a0 	.word	0x000186a0

08008304 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008308:	4b13      	ldr	r3, [pc, #76]	; (8008358 <MX_I2S3_Init+0x54>)
 800830a:	4a14      	ldr	r2, [pc, #80]	; (800835c <MX_I2S3_Init+0x58>)
 800830c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800830e:	4b12      	ldr	r3, [pc, #72]	; (8008358 <MX_I2S3_Init+0x54>)
 8008310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008314:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008316:	4b10      	ldr	r3, [pc, #64]	; (8008358 <MX_I2S3_Init+0x54>)
 8008318:	2200      	movs	r2, #0
 800831a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800831c:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <MX_I2S3_Init+0x54>)
 800831e:	2200      	movs	r2, #0
 8008320:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008322:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <MX_I2S3_Init+0x54>)
 8008324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008328:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800832a:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <MX_I2S3_Init+0x54>)
 800832c:	4a0c      	ldr	r2, [pc, #48]	; (8008360 <MX_I2S3_Init+0x5c>)
 800832e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008330:	4b09      	ldr	r3, [pc, #36]	; (8008358 <MX_I2S3_Init+0x54>)
 8008332:	2200      	movs	r2, #0
 8008334:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008336:	4b08      	ldr	r3, [pc, #32]	; (8008358 <MX_I2S3_Init+0x54>)
 8008338:	2200      	movs	r2, #0
 800833a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <MX_I2S3_Init+0x54>)
 800833e:	2200      	movs	r2, #0
 8008340:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008342:	4805      	ldr	r0, [pc, #20]	; (8008358 <MX_I2S3_Init+0x54>)
 8008344:	f7f9 fd54 	bl	8001df0 <HAL_I2S_Init>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800834e:	f000 fa2b 	bl	80087a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200083f0 	.word	0x200083f0
 800835c:	40003c00 	.word	0x40003c00
 8008360:	00017700 	.word	0x00017700

08008364 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008368:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <MX_SPI1_Init+0x64>)
 800836a:	4a18      	ldr	r2, [pc, #96]	; (80083cc <MX_SPI1_Init+0x68>)
 800836c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <MX_SPI1_Init+0x64>)
 8008370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <MX_SPI1_Init+0x64>)
 8008378:	2200      	movs	r2, #0
 800837a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800837c:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <MX_SPI1_Init+0x64>)
 800837e:	2200      	movs	r2, #0
 8008380:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008382:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <MX_SPI1_Init+0x64>)
 8008384:	2200      	movs	r2, #0
 8008386:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008388:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <MX_SPI1_Init+0x64>)
 800838a:	2200      	movs	r2, #0
 800838c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800838e:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <MX_SPI1_Init+0x64>)
 8008390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008394:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <MX_SPI1_Init+0x64>)
 8008398:	2200      	movs	r2, #0
 800839a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800839c:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <MX_SPI1_Init+0x64>)
 800839e:	2200      	movs	r2, #0
 80083a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <MX_SPI1_Init+0x64>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083a8:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <MX_SPI1_Init+0x64>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80083ae:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <MX_SPI1_Init+0x64>)
 80083b0:	220a      	movs	r2, #10
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80083b4:	4804      	ldr	r0, [pc, #16]	; (80083c8 <MX_SPI1_Init+0x64>)
 80083b6:	f7fc f89f 	bl	80044f8 <HAL_SPI_Init>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80083c0:	f000 f9f2 	bl	80087a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80083c4:	bf00      	nop
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20008398 	.word	0x20008398
 80083cc:	40013000 	.word	0x40013000

080083d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	605a      	str	r2, [r3, #4]
 80083e0:	609a      	str	r2, [r3, #8]
 80083e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083e4:	463b      	mov	r3, r7
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80083ec:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <MX_TIM3_Init+0x90>)
 80083ee:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <MX_TIM3_Init+0x94>)
 80083f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80083f2:	4b1b      	ldr	r3, [pc, #108]	; (8008460 <MX_TIM3_Init+0x90>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083f8:	4b19      	ldr	r3, [pc, #100]	; (8008460 <MX_TIM3_Init+0x90>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80083fe:	4b18      	ldr	r3, [pc, #96]	; (8008460 <MX_TIM3_Init+0x90>)
 8008400:	2200      	movs	r2, #0
 8008402:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008404:	4b16      	ldr	r3, [pc, #88]	; (8008460 <MX_TIM3_Init+0x90>)
 8008406:	2200      	movs	r2, #0
 8008408:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <MX_TIM3_Init+0x90>)
 800840c:	2200      	movs	r2, #0
 800840e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008410:	4813      	ldr	r0, [pc, #76]	; (8008460 <MX_TIM3_Init+0x90>)
 8008412:	f7fc f8d5 	bl	80045c0 <HAL_TIM_Base_Init>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800841c:	f000 f9c4 	bl	80087a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	4619      	mov	r1, r3
 800842c:	480c      	ldr	r0, [pc, #48]	; (8008460 <MX_TIM3_Init+0x90>)
 800842e:	f7fc fb57 	bl	8004ae0 <HAL_TIM_ConfigClockSource>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8008438:	f000 f9b6 	bl	80087a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800843c:	2300      	movs	r3, #0
 800843e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008440:	2300      	movs	r3, #0
 8008442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008444:	463b      	mov	r3, r7
 8008446:	4619      	mov	r1, r3
 8008448:	4805      	ldr	r0, [pc, #20]	; (8008460 <MX_TIM3_Init+0x90>)
 800844a:	f7fc ff42 	bl	80052d2 <HAL_TIMEx_MasterConfigSynchronization>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8008454:	f000 f9a8 	bl	80087a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008458:	bf00      	nop
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	200002b0 	.word	0x200002b0
 8008464:	40000400 	.word	0x40000400

08008468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800846e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	605a      	str	r2, [r3, #4]
 8008478:	609a      	str	r2, [r3, #8]
 800847a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800847c:	f107 0320 	add.w	r3, r7, #32
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008486:	1d3b      	adds	r3, r7, #4
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	605a      	str	r2, [r3, #4]
 800848e:	609a      	str	r2, [r3, #8]
 8008490:	60da      	str	r2, [r3, #12]
 8008492:	611a      	str	r2, [r3, #16]
 8008494:	615a      	str	r2, [r3, #20]
 8008496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008498:	4b2d      	ldr	r3, [pc, #180]	; (8008550 <MX_TIM4_Init+0xe8>)
 800849a:	4a2e      	ldr	r2, [pc, #184]	; (8008554 <MX_TIM4_Init+0xec>)
 800849c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1080-1;
 800849e:	4b2c      	ldr	r3, [pc, #176]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084a0:	f240 4237 	movw	r2, #1079	; 0x437
 80084a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084a6:	4b2a      	ldr	r3, [pc, #168]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80084ac:	4b28      	ldr	r3, [pc, #160]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80084b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084b4:	4b26      	ldr	r3, [pc, #152]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084ba:	4b25      	ldr	r3, [pc, #148]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084bc:	2200      	movs	r2, #0
 80084be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80084c0:	4823      	ldr	r0, [pc, #140]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084c2:	f7fc f87d 	bl	80045c0 <HAL_TIM_Base_Init>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80084cc:	f000 f96c 	bl	80087a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80084d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084da:	4619      	mov	r1, r3
 80084dc:	481c      	ldr	r0, [pc, #112]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084de:	f7fc faff 	bl	8004ae0 <HAL_TIM_ConfigClockSource>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80084e8:	f000 f95e 	bl	80087a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80084ec:	4818      	ldr	r0, [pc, #96]	; (8008550 <MX_TIM4_Init+0xe8>)
 80084ee:	f7fc f8b6 	bl	800465e <HAL_TIM_PWM_Init>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80084f8:	f000 f956 	bl	80087a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084fc:	2300      	movs	r3, #0
 80084fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008500:	2300      	movs	r3, #0
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008504:	f107 0320 	add.w	r3, r7, #32
 8008508:	4619      	mov	r1, r3
 800850a:	4811      	ldr	r0, [pc, #68]	; (8008550 <MX_TIM4_Init+0xe8>)
 800850c:	f7fc fee1 	bl	80052d2 <HAL_TIMEx_MasterConfigSynchronization>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8008516:	f000 f947 	bl	80087a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800851a:	2360      	movs	r3, #96	; 0x60
 800851c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2399;
 800851e:	f640 135f 	movw	r3, #2399	; 0x95f
 8008522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800852c:	1d3b      	adds	r3, r7, #4
 800852e:	2200      	movs	r2, #0
 8008530:	4619      	mov	r1, r3
 8008532:	4807      	ldr	r0, [pc, #28]	; (8008550 <MX_TIM4_Init+0xe8>)
 8008534:	f7fc fa0e 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800853e:	f000 f933 	bl	80087a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8008542:	4803      	ldr	r0, [pc, #12]	; (8008550 <MX_TIM4_Init+0xe8>)
 8008544:	f000 fb0e 	bl	8008b64 <HAL_TIM_MspPostInit>

}
 8008548:	bf00      	nop
 800854a:	3738      	adds	r7, #56	; 0x38
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000021c 	.word	0x2000021c
 8008554:	40000800 	.word	0x40000800

08008558 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <MX_DMA_Init+0x3c>)
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	4a0b      	ldr	r2, [pc, #44]	; (8008594 <MX_DMA_Init+0x3c>)
 8008568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800856c:	6313      	str	r3, [r2, #48]	; 0x30
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <MX_DMA_Init+0x3c>)
 8008570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	2038      	movs	r0, #56	; 0x38
 8008580:	f7f8 fd57 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008584:	2038      	movs	r0, #56	; 0x38
 8008586:	f7f8 fd70 	bl	800106a <HAL_NVIC_EnableIRQ>

}
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40023800 	.word	0x40023800

08008598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08c      	sub	sp, #48	; 0x30
 800859c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800859e:	f107 031c 	add.w	r3, r7, #28
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	605a      	str	r2, [r3, #4]
 80085a8:	609a      	str	r2, [r3, #8]
 80085aa:	60da      	str	r2, [r3, #12]
 80085ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80085ae:	2300      	movs	r3, #0
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	4b75      	ldr	r3, [pc, #468]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	4a74      	ldr	r2, [pc, #464]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085b8:	f043 0310 	orr.w	r3, r3, #16
 80085bc:	6313      	str	r3, [r2, #48]	; 0x30
 80085be:	4b72      	ldr	r3, [pc, #456]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	f003 0310 	and.w	r3, r3, #16
 80085c6:	61bb      	str	r3, [r7, #24]
 80085c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ca:	2300      	movs	r3, #0
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	4b6e      	ldr	r3, [pc, #440]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	4a6d      	ldr	r2, [pc, #436]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	6313      	str	r3, [r2, #48]	; 0x30
 80085da:	4b6b      	ldr	r3, [pc, #428]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80085e6:	2300      	movs	r3, #0
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	4b67      	ldr	r3, [pc, #412]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	4a66      	ldr	r2, [pc, #408]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f4:	6313      	str	r3, [r2, #48]	; 0x30
 80085f6:	4b64      	ldr	r3, [pc, #400]	; (8008788 <MX_GPIO_Init+0x1f0>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	4b60      	ldr	r3, [pc, #384]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	4a5f      	ldr	r2, [pc, #380]	; (8008788 <MX_GPIO_Init+0x1f0>)
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	6313      	str	r3, [r2, #48]	; 0x30
 8008612:	4b5d      	ldr	r3, [pc, #372]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]
 8008622:	4b59      	ldr	r3, [pc, #356]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	4a58      	ldr	r2, [pc, #352]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008628:	f043 0302 	orr.w	r3, r3, #2
 800862c:	6313      	str	r3, [r2, #48]	; 0x30
 800862e:	4b56      	ldr	r3, [pc, #344]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	60bb      	str	r3, [r7, #8]
 8008638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	4b52      	ldr	r3, [pc, #328]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	4a51      	ldr	r2, [pc, #324]	; (8008788 <MX_GPIO_Init+0x1f0>)
 8008644:	f043 0308 	orr.w	r3, r3, #8
 8008648:	6313      	str	r3, [r2, #48]	; 0x30
 800864a:	4b4f      	ldr	r3, [pc, #316]	; (8008788 <MX_GPIO_Init+0x1f0>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	607b      	str	r3, [r7, #4]
 8008654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008656:	2200      	movs	r2, #0
 8008658:	2108      	movs	r1, #8
 800865a:	484c      	ldr	r0, [pc, #304]	; (800878c <MX_GPIO_Init+0x1f4>)
 800865c:	f7f9 fa48 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008660:	2201      	movs	r2, #1
 8008662:	2101      	movs	r1, #1
 8008664:	484a      	ldr	r0, [pc, #296]	; (8008790 <MX_GPIO_Init+0x1f8>)
 8008666:	f7f9 fa43 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800866a:	2200      	movs	r2, #0
 800866c:	f24e 0110 	movw	r1, #57360	; 0xe010
 8008670:	4848      	ldr	r0, [pc, #288]	; (8008794 <MX_GPIO_Init+0x1fc>)
 8008672:	f7f9 fa3d 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8008676:	2308      	movs	r3, #8
 8008678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800867a:	2301      	movs	r3, #1
 800867c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867e:	2300      	movs	r3, #0
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008682:	2300      	movs	r3, #0
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8008686:	f107 031c 	add.w	r3, r7, #28
 800868a:	4619      	mov	r1, r3
 800868c:	483f      	ldr	r0, [pc, #252]	; (800878c <MX_GPIO_Init+0x1f4>)
 800868e:	f7f9 f87d 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008692:	2301      	movs	r3, #1
 8008694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008696:	2301      	movs	r3, #1
 8008698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869a:	2300      	movs	r3, #0
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800869e:	2300      	movs	r3, #0
 80086a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80086a2:	f107 031c 	add.w	r3, r7, #28
 80086a6:	4619      	mov	r1, r3
 80086a8:	4839      	ldr	r0, [pc, #228]	; (8008790 <MX_GPIO_Init+0x1f8>)
 80086aa:	f7f9 f86f 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80086ae:	2308      	movs	r3, #8
 80086b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b2:	2302      	movs	r3, #2
 80086b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ba:	2300      	movs	r3, #0
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80086be:	2305      	movs	r3, #5
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80086c2:	f107 031c 	add.w	r3, r7, #28
 80086c6:	4619      	mov	r1, r3
 80086c8:	4831      	ldr	r0, [pc, #196]	; (8008790 <MX_GPIO_Init+0x1f8>)
 80086ca:	f7f9 f85f 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80086ce:	2301      	movs	r3, #1
 80086d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80086d2:	4b31      	ldr	r3, [pc, #196]	; (8008798 <MX_GPIO_Init+0x200>)
 80086d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80086da:	f107 031c 	add.w	r3, r7, #28
 80086de:	4619      	mov	r1, r3
 80086e0:	482e      	ldr	r0, [pc, #184]	; (800879c <MX_GPIO_Init+0x204>)
 80086e2:	f7f9 f853 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80086e6:	2304      	movs	r3, #4
 80086e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086ea:	2300      	movs	r3, #0
 80086ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80086f2:	f107 031c 	add.w	r3, r7, #28
 80086f6:	4619      	mov	r1, r3
 80086f8:	4829      	ldr	r0, [pc, #164]	; (80087a0 <MX_GPIO_Init+0x208>)
 80086fa:	f7f9 f847 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80086fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008704:	2302      	movs	r3, #2
 8008706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008708:	2300      	movs	r3, #0
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800870c:	2300      	movs	r3, #0
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008710:	2305      	movs	r3, #5
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008714:	f107 031c 	add.w	r3, r7, #28
 8008718:	4619      	mov	r1, r3
 800871a:	4821      	ldr	r0, [pc, #132]	; (80087a0 <MX_GPIO_Init+0x208>)
 800871c:	f7f9 f836 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8008720:	f24e 0310 	movw	r3, #57360	; 0xe010
 8008724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008726:	2301      	movs	r3, #1
 8008728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800872e:	2300      	movs	r3, #0
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008732:	f107 031c 	add.w	r3, r7, #28
 8008736:	4619      	mov	r1, r3
 8008738:	4816      	ldr	r0, [pc, #88]	; (8008794 <MX_GPIO_Init+0x1fc>)
 800873a:	f7f9 f827 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800873e:	2320      	movs	r3, #32
 8008740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008742:	2300      	movs	r3, #0
 8008744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008746:	2300      	movs	r3, #0
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800874a:	f107 031c 	add.w	r3, r7, #28
 800874e:	4619      	mov	r1, r3
 8008750:	4810      	ldr	r0, [pc, #64]	; (8008794 <MX_GPIO_Init+0x1fc>)
 8008752:	f7f9 f81b 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008756:	2302      	movs	r3, #2
 8008758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <MX_GPIO_Init+0x20c>)
 800875c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875e:	2300      	movs	r3, #0
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008762:	f107 031c 	add.w	r3, r7, #28
 8008766:	4619      	mov	r1, r3
 8008768:	4808      	ldr	r0, [pc, #32]	; (800878c <MX_GPIO_Init+0x1f4>)
 800876a:	f7f9 f80f 	bl	800178c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800876e:	2200      	movs	r2, #0
 8008770:	2100      	movs	r1, #0
 8008772:	2006      	movs	r0, #6
 8008774:	f7f8 fc5d 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008778:	2006      	movs	r0, #6
 800877a:	f7f8 fc76 	bl	800106a <HAL_NVIC_EnableIRQ>

}
 800877e:	bf00      	nop
 8008780:	3730      	adds	r7, #48	; 0x30
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40023800 	.word	0x40023800
 800878c:	40021000 	.word	0x40021000
 8008790:	40020800 	.word	0x40020800
 8008794:	40020c00 	.word	0x40020c00
 8008798:	10110000 	.word	0x10110000
 800879c:	40020000 	.word	0x40020000
 80087a0:	40020400 	.word	0x40020400
 80087a4:	10120000 	.word	0x10120000

080087a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80087ac:	bf00      	nop
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	4b10      	ldr	r3, [pc, #64]	; (8008804 <HAL_MspInit+0x4c>)
 80087c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c6:	4a0f      	ldr	r2, [pc, #60]	; (8008804 <HAL_MspInit+0x4c>)
 80087c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087cc:	6453      	str	r3, [r2, #68]	; 0x44
 80087ce:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <HAL_MspInit+0x4c>)
 80087d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d6:	607b      	str	r3, [r7, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087da:	2300      	movs	r3, #0
 80087dc:	603b      	str	r3, [r7, #0]
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <HAL_MspInit+0x4c>)
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	4a08      	ldr	r2, [pc, #32]	; (8008804 <HAL_MspInit+0x4c>)
 80087e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e8:	6413      	str	r3, [r2, #64]	; 0x40
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <HAL_MspInit+0x4c>)
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80087f6:	2007      	movs	r0, #7
 80087f8:	f7f8 fc10 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40023800 	.word	0x40023800

08008808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008810:	f107 0314 	add.w	r3, r7, #20
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	609a      	str	r2, [r3, #8]
 800881c:	60da      	str	r2, [r3, #12]
 800881e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a2f      	ldr	r2, [pc, #188]	; (80088e4 <HAL_ADC_MspInit+0xdc>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d157      	bne.n	80088da <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	4b2e      	ldr	r3, [pc, #184]	; (80088e8 <HAL_ADC_MspInit+0xe0>)
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	4a2d      	ldr	r2, [pc, #180]	; (80088e8 <HAL_ADC_MspInit+0xe0>)
 8008834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008838:	6453      	str	r3, [r2, #68]	; 0x44
 800883a:	4b2b      	ldr	r3, [pc, #172]	; (80088e8 <HAL_ADC_MspInit+0xe0>)
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	4b27      	ldr	r3, [pc, #156]	; (80088e8 <HAL_ADC_MspInit+0xe0>)
 800884c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884e:	4a26      	ldr	r2, [pc, #152]	; (80088e8 <HAL_ADC_MspInit+0xe0>)
 8008850:	f043 0301 	orr.w	r3, r3, #1
 8008854:	6313      	str	r3, [r2, #48]	; 0x30
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <HAL_ADC_MspInit+0xe0>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008862:	2302      	movs	r3, #2
 8008864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008866:	2303      	movs	r3, #3
 8008868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	4619      	mov	r1, r3
 8008874:	481d      	ldr	r0, [pc, #116]	; (80088ec <HAL_ADC_MspInit+0xe4>)
 8008876:	f7f8 ff89 	bl	800178c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800887a:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <HAL_ADC_MspInit+0xec>)
 800887e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 8008882:	2200      	movs	r2, #0
 8008884:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008886:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 8008888:	2200      	movs	r2, #0
 800888a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800888c:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 800888e:	2200      	movs	r2, #0
 8008890:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008892:	4b17      	ldr	r3, [pc, #92]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 8008894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008898:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800889a:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 800889c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80088a2:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80088a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80088aa:	4b11      	ldr	r3, [pc, #68]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088b8:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80088be:	480c      	ldr	r0, [pc, #48]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088c0:	f7f8 fbee 	bl	80010a0 <HAL_DMA_Init>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80088ca:	f7ff ff6d 	bl	80087a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a07      	ldr	r2, [pc, #28]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
 80088d4:	4a06      	ldr	r2, [pc, #24]	; (80088f0 <HAL_ADC_MspInit+0xe8>)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80088da:	bf00      	nop
 80088dc:	3728      	adds	r7, #40	; 0x28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	40012000 	.word	0x40012000
 80088e8:	40023800 	.word	0x40023800
 80088ec:	40020000 	.word	0x40020000
 80088f0:	20000338 	.word	0x20000338
 80088f4:	40026410 	.word	0x40026410

080088f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	; 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	609a      	str	r2, [r3, #8]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a19      	ldr	r2, [pc, #100]	; (800897c <HAL_I2C_MspInit+0x84>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d12c      	bne.n	8008974 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	4b18      	ldr	r3, [pc, #96]	; (8008980 <HAL_I2C_MspInit+0x88>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <HAL_I2C_MspInit+0x88>)
 8008924:	f043 0302 	orr.w	r3, r3, #2
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b15      	ldr	r3, [pc, #84]	; (8008980 <HAL_I2C_MspInit+0x88>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	613b      	str	r3, [r7, #16]
 8008934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008936:	f44f 7310 	mov.w	r3, #576	; 0x240
 800893a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800893c:	2312      	movs	r3, #18
 800893e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008940:	2301      	movs	r3, #1
 8008942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008944:	2300      	movs	r3, #0
 8008946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008948:	2304      	movs	r3, #4
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4619      	mov	r1, r3
 8008952:	480c      	ldr	r0, [pc, #48]	; (8008984 <HAL_I2C_MspInit+0x8c>)
 8008954:	f7f8 ff1a 	bl	800178c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <HAL_I2C_MspInit+0x88>)
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	4a07      	ldr	r2, [pc, #28]	; (8008980 <HAL_I2C_MspInit+0x88>)
 8008962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008966:	6413      	str	r3, [r2, #64]	; 0x40
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <HAL_I2C_MspInit+0x88>)
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008974:	bf00      	nop
 8008976:	3728      	adds	r7, #40	; 0x28
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	40005400 	.word	0x40005400
 8008980:	40023800 	.word	0x40023800
 8008984:	40020400 	.word	0x40020400

08008988 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	605a      	str	r2, [r3, #4]
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	60da      	str	r2, [r3, #12]
 800899e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a28      	ldr	r2, [pc, #160]	; (8008a48 <HAL_I2S_MspInit+0xc0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d14a      	bne.n	8008a40 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b8:	6413      	str	r3, [r2, #64]	; 0x40
 80089ba:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	4b20      	ldr	r3, [pc, #128]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	4a1f      	ldr	r2, [pc, #124]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	6313      	str	r3, [r2, #48]	; 0x30
 80089d6:	4b1d      	ldr	r3, [pc, #116]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	4a18      	ldr	r2, [pc, #96]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089ec:	f043 0304 	orr.w	r3, r3, #4
 80089f0:	6313      	str	r3, [r2, #48]	; 0x30
 80089f2:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <HAL_I2S_MspInit+0xc4>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	60bb      	str	r3, [r7, #8]
 80089fc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80089fe:	2310      	movs	r3, #16
 8008a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a02:	2302      	movs	r3, #2
 8008a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008a0e:	2306      	movs	r3, #6
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008a12:	f107 0314 	add.w	r3, r7, #20
 8008a16:	4619      	mov	r1, r3
 8008a18:	480d      	ldr	r0, [pc, #52]	; (8008a50 <HAL_I2S_MspInit+0xc8>)
 8008a1a:	f7f8 feb7 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008a1e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a24:	2302      	movs	r3, #2
 8008a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008a30:	2306      	movs	r3, #6
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a34:	f107 0314 	add.w	r3, r7, #20
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4806      	ldr	r0, [pc, #24]	; (8008a54 <HAL_I2S_MspInit+0xcc>)
 8008a3c:	f7f8 fea6 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008a40:	bf00      	nop
 8008a42:	3728      	adds	r7, #40	; 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40003c00 	.word	0x40003c00
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020000 	.word	0x40020000
 8008a54:	40020800 	.word	0x40020800

08008a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a60:	f107 0314 	add.w	r3, r7, #20
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	605a      	str	r2, [r3, #4]
 8008a6a:	609a      	str	r2, [r3, #8]
 8008a6c:	60da      	str	r2, [r3, #12]
 8008a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a19      	ldr	r2, [pc, #100]	; (8008adc <HAL_SPI_MspInit+0x84>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d12b      	bne.n	8008ad2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <HAL_SPI_MspInit+0x88>)
 8008a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a82:	4a17      	ldr	r2, [pc, #92]	; (8008ae0 <HAL_SPI_MspInit+0x88>)
 8008a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a88:	6453      	str	r3, [r2, #68]	; 0x44
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <HAL_SPI_MspInit+0x88>)
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <HAL_SPI_MspInit+0x88>)
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9e:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <HAL_SPI_MspInit+0x88>)
 8008aa0:	f043 0301 	orr.w	r3, r3, #1
 8008aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8008aa6:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <HAL_SPI_MspInit+0x88>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008ab2:	23e0      	movs	r3, #224	; 0xe0
 8008ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008ac2:	2305      	movs	r3, #5
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ac6:	f107 0314 	add.w	r3, r7, #20
 8008aca:	4619      	mov	r1, r3
 8008acc:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <HAL_SPI_MspInit+0x8c>)
 8008ace:	f7f8 fe5d 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008ad2:	bf00      	nop
 8008ad4:	3728      	adds	r7, #40	; 0x28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40013000 	.word	0x40013000
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40020000 	.word	0x40020000

08008ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <HAL_TIM_Base_MspInit+0x70>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d116      	bne.n	8008b28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <HAL_TIM_Base_MspInit+0x74>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <HAL_TIM_Base_MspInit+0x74>)
 8008b04:	f043 0302 	orr.w	r3, r3, #2
 8008b08:	6413      	str	r3, [r2, #64]	; 0x40
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <HAL_TIM_Base_MspInit+0x74>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008b16:	2200      	movs	r2, #0
 8008b18:	2100      	movs	r1, #0
 8008b1a:	201d      	movs	r0, #29
 8008b1c:	f7f8 fa89 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008b20:	201d      	movs	r0, #29
 8008b22:	f7f8 faa2 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008b26:	e012      	b.n	8008b4e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <HAL_TIM_Base_MspInit+0x78>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10d      	bne.n	8008b4e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008b32:	2300      	movs	r3, #0
 8008b34:	60bb      	str	r3, [r7, #8]
 8008b36:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <HAL_TIM_Base_MspInit+0x74>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	4a08      	ldr	r2, [pc, #32]	; (8008b5c <HAL_TIM_Base_MspInit+0x74>)
 8008b3c:	f043 0304 	orr.w	r3, r3, #4
 8008b40:	6413      	str	r3, [r2, #64]	; 0x40
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <HAL_TIM_Base_MspInit+0x74>)
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
}
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	40000400 	.word	0x40000400
 8008b5c:	40023800 	.word	0x40023800
 8008b60:	40000800 	.word	0x40000800

08008b64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	605a      	str	r2, [r3, #4]
 8008b76:	609a      	str	r2, [r3, #8]
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a12      	ldr	r2, [pc, #72]	; (8008bcc <HAL_TIM_MspPostInit+0x68>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d11e      	bne.n	8008bc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b86:	2300      	movs	r3, #0
 8008b88:	60bb      	str	r3, [r7, #8]
 8008b8a:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <HAL_TIM_MspPostInit+0x6c>)
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	4a10      	ldr	r2, [pc, #64]	; (8008bd0 <HAL_TIM_MspPostInit+0x6c>)
 8008b90:	f043 0308 	orr.w	r3, r3, #8
 8008b94:	6313      	str	r3, [r2, #48]	; 0x30
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <HAL_TIM_MspPostInit+0x6c>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	60bb      	str	r3, [r7, #8]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ba6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008bb8:	f107 030c 	add.w	r3, r7, #12
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4805      	ldr	r0, [pc, #20]	; (8008bd4 <HAL_TIM_MspPostInit+0x70>)
 8008bc0:	f7f8 fde4 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008bc4:	bf00      	nop
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	40000800 	.word	0x40000800
 8008bd0:	40023800 	.word	0x40023800
 8008bd4:	40020c00 	.word	0x40020c00

08008bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008bdc:	bf00      	nop
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008be6:	b480      	push	{r7}
 8008be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bea:	e7fe      	b.n	8008bea <HardFault_Handler+0x4>

08008bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bf0:	e7fe      	b.n	8008bf0 <MemManage_Handler+0x4>

08008bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bf6:	e7fe      	b.n	8008bf6 <BusFault_Handler+0x4>

08008bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bfc:	e7fe      	b.n	8008bfc <UsageFault_Handler+0x4>

08008bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c02:	bf00      	nop
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c1e:	bf00      	nop
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c2c:	f7f7 fcfa 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c30:	bf00      	nop
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8008c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c3c:	4803      	ldr	r0, [pc, #12]	; (8008c4c <EXTI0_IRQHandler+0x18>)
 8008c3e:	f7f8 ff70 	bl	8001b22 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008c42:	2001      	movs	r0, #1
 8008c44:	f7f8 ff88 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008c48:	bf00      	nop
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40020c00 	.word	0x40020c00

08008c50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8008c54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c58:	4803      	ldr	r0, [pc, #12]	; (8008c68 <TIM3_IRQHandler+0x18>)
 8008c5a:	f7f8 ff62 	bl	8001b22 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008c5e:	4803      	ldr	r0, [pc, #12]	; (8008c6c <TIM3_IRQHandler+0x1c>)
 8008c60:	f7fb fd70 	bl	8004744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008c64:	bf00      	nop
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40020c00 	.word	0x40020c00
 8008c6c:	200002b0 	.word	0x200002b0

08008c70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008c74:	4802      	ldr	r0, [pc, #8]	; (8008c80 <DMA2_Stream0_IRQHandler+0x10>)
 8008c76:	f7f8 fb21 	bl	80012bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008c7a:	bf00      	nop
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000338 	.word	0x20000338

08008c84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008c88:	4802      	ldr	r0, [pc, #8]	; (8008c94 <OTG_FS_IRQHandler+0x10>)
 8008c8a:	f7f9 fea1 	bl	80029d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008c8e:	bf00      	nop
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	200096d4 	.word	0x200096d4

08008c98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ca0:	4b11      	ldr	r3, [pc, #68]	; (8008ce8 <_sbrk+0x50>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d102      	bne.n	8008cae <_sbrk+0x16>
		heap_end = &end;
 8008ca8:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <_sbrk+0x50>)
 8008caa:	4a10      	ldr	r2, [pc, #64]	; (8008cec <_sbrk+0x54>)
 8008cac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008cae:	4b0e      	ldr	r3, [pc, #56]	; (8008ce8 <_sbrk+0x50>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <_sbrk+0x50>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	466a      	mov	r2, sp
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d907      	bls.n	8008cd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008cc2:	f000 fd89 	bl	80097d8 <__errno>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	230c      	movs	r3, #12
 8008cca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd0:	e006      	b.n	8008ce0 <_sbrk+0x48>
	}

	heap_end += incr;
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <_sbrk+0x50>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	4a03      	ldr	r2, [pc, #12]	; (8008ce8 <_sbrk+0x50>)
 8008cdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008cde:	68fb      	ldr	r3, [r7, #12]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	2000020c 	.word	0x2000020c
 8008cec:	20009ce0 	.word	0x20009ce0

08008cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008cf4:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <SystemInit+0x60>)
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfa:	4a15      	ldr	r2, [pc, #84]	; (8008d50 <SystemInit+0x60>)
 8008cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <SystemInit+0x64>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a12      	ldr	r2, [pc, #72]	; (8008d54 <SystemInit+0x64>)
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008d10:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <SystemInit+0x64>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008d16:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <SystemInit+0x64>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a0e      	ldr	r2, [pc, #56]	; (8008d54 <SystemInit+0x64>)
 8008d1c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008d26:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <SystemInit+0x64>)
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <SystemInit+0x68>)
 8008d2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <SystemInit+0x64>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <SystemInit+0x64>)
 8008d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008d38:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <SystemInit+0x64>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008d3e:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <SystemInit+0x60>)
 8008d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d44:	609a      	str	r2, [r3, #8]
#endif
}
 8008d46:	bf00      	nop
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	e000ed00 	.word	0xe000ed00
 8008d54:	40023800 	.word	0x40023800
 8008d58:	24003010 	.word	0x24003010

08008d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d60:	2200      	movs	r2, #0
 8008d62:	4912      	ldr	r1, [pc, #72]	; (8008dac <MX_USB_DEVICE_Init+0x50>)
 8008d64:	4812      	ldr	r0, [pc, #72]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d66:	f7fe f8bf 	bl	8006ee8 <USBD_Init>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d70:	f7ff fd1a 	bl	80087a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <MX_USB_DEVICE_Init+0x58>)
 8008d76:	480e      	ldr	r0, [pc, #56]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d78:	f7fe f8e1 	bl	8006f3e <USBD_RegisterClass>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d82:	f7ff fd11 	bl	80087a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d86:	490c      	ldr	r1, [pc, #48]	; (8008db8 <MX_USB_DEVICE_Init+0x5c>)
 8008d88:	4809      	ldr	r0, [pc, #36]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d8a:	f7fe f80f 	bl	8006dac <USBD_CDC_RegisterInterface>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d94:	f7ff fd08 	bl	80087a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d98:	4805      	ldr	r0, [pc, #20]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d9a:	f7fe f8ea 	bl	8006f72 <USBD_Start>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008da4:	f7ff fd00 	bl	80087a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20000138 	.word	0x20000138
 8008db0:	20008438 	.word	0x20008438
 8008db4:	20000014 	.word	0x20000014
 8008db8:	20000128 	.word	0x20000128

08008dbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4905      	ldr	r1, [pc, #20]	; (8008dd8 <CDC_Init_FS+0x1c>)
 8008dc4:	4805      	ldr	r0, [pc, #20]	; (8008ddc <CDC_Init_FS+0x20>)
 8008dc6:	f7fe f808 	bl	8006dda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dca:	4905      	ldr	r1, [pc, #20]	; (8008de0 <CDC_Init_FS+0x24>)
 8008dcc:	4803      	ldr	r0, [pc, #12]	; (8008ddc <CDC_Init_FS+0x20>)
 8008dce:	f7fe f81e 	bl	8006e0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20008ed4 	.word	0x20008ed4
 8008ddc:	20008438 	.word	0x20008438
 8008de0:	200086d4 	.word	0x200086d4

08008de4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008de8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
 8008e00:	4613      	mov	r3, r2
 8008e02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	2b23      	cmp	r3, #35	; 0x23
 8008e08:	d85c      	bhi.n	8008ec4 <CDC_Control_FS+0xd0>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <CDC_Control_FS+0x1c>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008ec5 	.word	0x08008ec5
 8008e14:	08008ec5 	.word	0x08008ec5
 8008e18:	08008ec5 	.word	0x08008ec5
 8008e1c:	08008ec5 	.word	0x08008ec5
 8008e20:	08008ec5 	.word	0x08008ec5
 8008e24:	08008ec5 	.word	0x08008ec5
 8008e28:	08008ec5 	.word	0x08008ec5
 8008e2c:	08008ec5 	.word	0x08008ec5
 8008e30:	08008ec5 	.word	0x08008ec5
 8008e34:	08008ec5 	.word	0x08008ec5
 8008e38:	08008ec5 	.word	0x08008ec5
 8008e3c:	08008ec5 	.word	0x08008ec5
 8008e40:	08008ec5 	.word	0x08008ec5
 8008e44:	08008ec5 	.word	0x08008ec5
 8008e48:	08008ec5 	.word	0x08008ec5
 8008e4c:	08008ec5 	.word	0x08008ec5
 8008e50:	08008ec5 	.word	0x08008ec5
 8008e54:	08008ec5 	.word	0x08008ec5
 8008e58:	08008ec5 	.word	0x08008ec5
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008ec5 	.word	0x08008ec5
 8008e64:	08008ec5 	.word	0x08008ec5
 8008e68:	08008ec5 	.word	0x08008ec5
 8008e6c:	08008ec5 	.word	0x08008ec5
 8008e70:	08008ec5 	.word	0x08008ec5
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008ec5 	.word	0x08008ec5
 8008e7c:	08008ec5 	.word	0x08008ec5
 8008e80:	08008ec5 	.word	0x08008ec5
 8008e84:	08008ec5 	.word	0x08008ec5
 8008e88:	08008ec5 	.word	0x08008ec5
 8008e8c:	08008ec5 	.word	0x08008ec5
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008eb3 	.word	0x08008eb3
 8008e98:	08008ec5 	.word	0x08008ec5
 8008e9c:	08008ec5 	.word	0x08008ec5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8008ea0:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <CDC_Control_FS+0xe0>)
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	6810      	ldr	r0, [r2, #0]
 8008ea6:	6018      	str	r0, [r3, #0]
 8008ea8:	8891      	ldrh	r1, [r2, #4]
 8008eaa:	7992      	ldrb	r2, [r2, #6]
 8008eac:	8099      	strh	r1, [r3, #4]
 8008eae:	719a      	strb	r2, [r3, #6]
    break;
 8008eb0:	e009      	b.n	8008ec6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <CDC_Control_FS+0xe0>)
 8008eb6:	6810      	ldr	r0, [r2, #0]
 8008eb8:	6018      	str	r0, [r3, #0]
 8008eba:	8891      	ldrh	r1, [r2, #4]
 8008ebc:	7992      	ldrb	r2, [r2, #6]
 8008ebe:	8099      	strh	r1, [r3, #4]
 8008ec0:	719a      	strb	r2, [r3, #6]
    break;
 8008ec2:	e000      	b.n	8008ec6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ec4:	bf00      	nop
  }

  return (USBD_OK);
 8008ec6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20000120 	.word	0x20000120

08008ed8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4805      	ldr	r0, [pc, #20]	; (8008efc <CDC_Receive_FS+0x24>)
 8008ee6:	f7fd ff92 	bl	8006e0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008eea:	4804      	ldr	r0, [pc, #16]	; (8008efc <CDC_Receive_FS+0x24>)
 8008eec:	f7fd ffd2 	bl	8006e94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ef0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20008438 	.word	0x20008438

08008f00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f10:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <CDC_Transmit_FS+0x48>)
 8008f12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e00b      	b.n	8008f3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f26:	887b      	ldrh	r3, [r7, #2]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	4806      	ldr	r0, [pc, #24]	; (8008f48 <CDC_Transmit_FS+0x48>)
 8008f2e:	f7fd ff54 	bl	8006dda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f32:	4805      	ldr	r0, [pc, #20]	; (8008f48 <CDC_Transmit_FS+0x48>)
 8008f34:	f7fd ff7f 	bl	8006e36 <USBD_CDC_TransmitPacket>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20008438 	.word	0x20008438

08008f4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08a      	sub	sp, #40	; 0x28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f54:	f107 0314 	add.w	r3, r7, #20
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	605a      	str	r2, [r3, #4]
 8008f5e:	609a      	str	r2, [r3, #8]
 8008f60:	60da      	str	r2, [r3, #12]
 8008f62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f6c:	d147      	bne.n	8008ffe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f6e:	2300      	movs	r3, #0
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	4b25      	ldr	r3, [pc, #148]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	4a24      	ldr	r2, [pc, #144]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008f78:	f043 0301 	orr.w	r3, r3, #1
 8008f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f7e:	4b22      	ldr	r3, [pc, #136]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	613b      	str	r3, [r7, #16]
 8008f88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f90:	2300      	movs	r3, #0
 8008f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f98:	f107 0314 	add.w	r3, r7, #20
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	481b      	ldr	r0, [pc, #108]	; (800900c <HAL_PCD_MspInit+0xc0>)
 8008fa0:	f7f8 fbf4 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008fa4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008faa:	2302      	movs	r3, #2
 8008fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008fb6:	230a      	movs	r3, #10
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fba:	f107 0314 	add.w	r3, r7, #20
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4812      	ldr	r0, [pc, #72]	; (800900c <HAL_PCD_MspInit+0xc0>)
 8008fc2:	f7f8 fbe3 	bl	800178c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008fc6:	4b10      	ldr	r3, [pc, #64]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	4a0f      	ldr	r2, [pc, #60]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	6353      	str	r3, [r2, #52]	; 0x34
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fda:	4a0b      	ldr	r2, [pc, #44]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8008fe2:	4b09      	ldr	r3, [pc, #36]	; (8009008 <HAL_PCD_MspInit+0xbc>)
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	2043      	movs	r0, #67	; 0x43
 8008ff4:	f7f8 f81d 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ff8:	2043      	movs	r0, #67	; 0x43
 8008ffa:	f7f8 f836 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ffe:	bf00      	nop
 8009000:	3728      	adds	r7, #40	; 0x28
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	40023800 	.word	0x40023800
 800900c:	40020000 	.word	0x40020000

08009010 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fd ffec 	bl	8007004 <USBD_LL_SetupStage>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	1a9b      	subs	r3, r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	4619      	mov	r1, r3
 800905e:	f7fe f81c 	bl	800709a <USBD_LL_DataOutStage>
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800907c:	78fa      	ldrb	r2, [r7, #3]
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	4613      	mov	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	3348      	adds	r3, #72	; 0x48
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	4619      	mov	r1, r3
 8009092:	f7fe f873 	bl	800717c <USBD_LL_DataInStage>
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe f981 	bl	80073b4 <USBD_LL_SOF>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090c2:	2301      	movs	r3, #1
 80090c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d102      	bne.n	80090d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
 80090d2:	e008      	b.n	80090e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d102      	bne.n	80090e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80090dc:	2301      	movs	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	e001      	b.n	80090e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80090e2:	f7ff fb61 	bl	80087a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ec:	7bfa      	ldrb	r2, [r7, #15]
 80090ee:	4611      	mov	r1, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe f929 	bl	8007348 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe f8e2 	bl	80072c6 <USBD_LL_Reset>
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe f924 	bl	8007368 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009132:	f043 0301 	orr.w	r3, r3, #1
 8009136:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009140:	4b04      	ldr	r3, [pc, #16]	; (8009154 <HAL_PCD_SuspendCallback+0x48>)
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	4a03      	ldr	r2, [pc, #12]	; (8009154 <HAL_PCD_SuspendCallback+0x48>)
 8009146:	f043 0306 	orr.w	r3, r3, #6
 800914a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	e000ed00 	.word	0xe000ed00

08009158 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe f913 	bl	8007392 <USBD_LL_Resume>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe f939 	bl	8007402 <USBD_LL_IsoOUTIncomplete>
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	4611      	mov	r1, r2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe f91a 	bl	80073e8 <USBD_LL_IsoINIncomplete>
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe f926 	bl	800741c <USBD_LL_DevConnected>
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe f923 	bl	8007432 <USBD_LL_DevDisconnected>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d13c      	bne.n	800927e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009204:	4a20      	ldr	r2, [pc, #128]	; (8009288 <USBD_LL_Init+0x94>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a1e      	ldr	r2, [pc, #120]	; (8009288 <USBD_LL_Init+0x94>)
 8009210:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009214:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <USBD_LL_Init+0x94>)
 8009216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800921a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800921c:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <USBD_LL_Init+0x94>)
 800921e:	2204      	movs	r2, #4
 8009220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009222:	4b19      	ldr	r3, [pc, #100]	; (8009288 <USBD_LL_Init+0x94>)
 8009224:	2202      	movs	r2, #2
 8009226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009228:	4b17      	ldr	r3, [pc, #92]	; (8009288 <USBD_LL_Init+0x94>)
 800922a:	2200      	movs	r2, #0
 800922c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800922e:	4b16      	ldr	r3, [pc, #88]	; (8009288 <USBD_LL_Init+0x94>)
 8009230:	2202      	movs	r2, #2
 8009232:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <USBD_LL_Init+0x94>)
 8009236:	2200      	movs	r2, #0
 8009238:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <USBD_LL_Init+0x94>)
 800923c:	2200      	movs	r2, #0
 800923e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009240:	4b11      	ldr	r3, [pc, #68]	; (8009288 <USBD_LL_Init+0x94>)
 8009242:	2200      	movs	r2, #0
 8009244:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009246:	4b10      	ldr	r3, [pc, #64]	; (8009288 <USBD_LL_Init+0x94>)
 8009248:	2200      	movs	r2, #0
 800924a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800924c:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <USBD_LL_Init+0x94>)
 800924e:	2200      	movs	r2, #0
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009252:	480d      	ldr	r0, [pc, #52]	; (8009288 <USBD_LL_Init+0x94>)
 8009254:	f7f9 fa6c 	bl	8002730 <HAL_PCD_Init>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800925e:	f7ff faa3 	bl	80087a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009262:	2180      	movs	r1, #128	; 0x80
 8009264:	4808      	ldr	r0, [pc, #32]	; (8009288 <USBD_LL_Init+0x94>)
 8009266:	f7fa fbd0 	bl	8003a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800926a:	2240      	movs	r2, #64	; 0x40
 800926c:	2100      	movs	r1, #0
 800926e:	4806      	ldr	r0, [pc, #24]	; (8009288 <USBD_LL_Init+0x94>)
 8009270:	f7fa fb84 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009274:	2280      	movs	r2, #128	; 0x80
 8009276:	2101      	movs	r1, #1
 8009278:	4803      	ldr	r0, [pc, #12]	; (8009288 <USBD_LL_Init+0x94>)
 800927a:	f7fa fb7f 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200096d4 	.word	0x200096d4

0800928c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f9 fb61 	bl	800296a <HAL_PCD_Start>
 80092a8:	4603      	mov	r3, r0
 80092aa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f92e 	bl	8009510 <USBD_Get_USB_Status>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	461a      	mov	r2, r3
 80092d0:	4603      	mov	r3, r0
 80092d2:	70fb      	strb	r3, [r7, #3]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70bb      	strb	r3, [r7, #2]
 80092d8:	4613      	mov	r3, r2
 80092da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80092ea:	78bb      	ldrb	r3, [r7, #2]
 80092ec:	883a      	ldrh	r2, [r7, #0]
 80092ee:	78f9      	ldrb	r1, [r7, #3]
 80092f0:	f7f9 ff36 	bl	8003160 <HAL_PCD_EP_Open>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f908 	bl	8009510 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f7f9 ff7f 	bl	8003230 <HAL_PCD_EP_Close>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 f8e9 	bl	8009510 <USBD_Get_USB_Status>
 800933e:	4603      	mov	r3, r0
 8009340:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009342:	7bbb      	ldrb	r3, [r7, #14]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	4611      	mov	r1, r2
 800936a:	4618      	mov	r0, r3
 800936c:	f7fa f857 	bl	800341e <HAL_PCD_EP_SetStall>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f8ca 	bl	8009510 <USBD_Get_USB_Status>
 800937c:	4603      	mov	r3, r0
 800937e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009380:	7bbb      	ldrb	r3, [r7, #14]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa f89c 	bl	80034e6 <HAL_PCD_EP_ClrStall>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f8ab 	bl	8009510 <USBD_Get_USB_Status>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80093be:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80093da:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80093dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	da0b      	bge.n	80093fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	4613      	mov	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	1a9b      	subs	r3, r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	333e      	adds	r3, #62	; 0x3e
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	e00b      	b.n	8009414 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009402:	68f9      	ldr	r1, [r7, #12]
 8009404:	4613      	mov	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	440b      	add	r3, r1
 800940e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009412:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7f9 fe69 	bl	8003116 <HAL_PCD_SetAddress>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 f860 	bl	8009510 <USBD_Get_USB_Status>
 8009450:	4603      	mov	r3, r0
 8009452:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009454:	7bbb      	ldrb	r3, [r7, #14]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	461a      	mov	r2, r3
 800946a:	460b      	mov	r3, r1
 800946c:	72fb      	strb	r3, [r7, #11]
 800946e:	4613      	mov	r3, r2
 8009470:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009480:	893b      	ldrh	r3, [r7, #8]
 8009482:	7af9      	ldrb	r1, [r7, #11]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f7f9 ff80 	bl	800338a <HAL_PCD_EP_Transmit>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f83d 	bl	8009510 <USBD_Get_USB_Status>
 8009496:	4603      	mov	r3, r0
 8009498:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800949a:	7dbb      	ldrb	r3, [r7, #22]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	461a      	mov	r2, r3
 80094b0:	460b      	mov	r3, r1
 80094b2:	72fb      	strb	r3, [r7, #11]
 80094b4:	4613      	mov	r3, r2
 80094b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80094c6:	893b      	ldrh	r3, [r7, #8]
 80094c8:	7af9      	ldrb	r1, [r7, #11]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	f7f9 fefa 	bl	80032c4 <HAL_PCD_EP_Receive>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f81a 	bl	8009510 <USBD_Get_USB_Status>
 80094dc:	4603      	mov	r3, r0
 80094de:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80094e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80094fc:	78fa      	ldrb	r2, [r7, #3]
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7f9 ff2a 	bl	800335a <HAL_PCD_EP_GetRxCount>
 8009506:	4603      	mov	r3, r0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	2b03      	cmp	r3, #3
 8009522:	d817      	bhi.n	8009554 <USBD_Get_USB_Status+0x44>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <USBD_Get_USB_Status+0x1c>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	0800953d 	.word	0x0800953d
 8009530:	08009543 	.word	0x08009543
 8009534:	08009549 	.word	0x08009549
 8009538:	0800954f 	.word	0x0800954f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
    break;
 8009540:	e00b      	b.n	800955a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009542:	2302      	movs	r3, #2
 8009544:	73fb      	strb	r3, [r7, #15]
    break;
 8009546:	e008      	b.n	800955a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009548:	2301      	movs	r3, #1
 800954a:	73fb      	strb	r3, [r7, #15]
    break;
 800954c:	e005      	b.n	800955a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800954e:	2302      	movs	r3, #2
 8009550:	73fb      	strb	r3, [r7, #15]
    break;
 8009552:	e002      	b.n	800955a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009554:	2302      	movs	r3, #2
 8009556:	73fb      	strb	r3, [r7, #15]
    break;
 8009558:	bf00      	nop
  }
  return usb_status;
 800955a:	7bfb      	ldrb	r3, [r7, #15]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2212      	movs	r2, #18
 8009578:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800957a:	4b03      	ldr	r3, [pc, #12]	; (8009588 <USBD_FS_DeviceDescriptor+0x20>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20000154 	.word	0x20000154

0800958c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2204      	movs	r2, #4
 800959c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800959e:	4b03      	ldr	r3, [pc, #12]	; (80095ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20000168 	.word	0x20000168

080095b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4907      	ldr	r1, [pc, #28]	; (80095e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80095c6:	4808      	ldr	r0, [pc, #32]	; (80095e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80095c8:	f7fe fc0a 	bl	8007de0 <USBD_GetString>
 80095cc:	e004      	b.n	80095d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4904      	ldr	r1, [pc, #16]	; (80095e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80095d2:	4805      	ldr	r0, [pc, #20]	; (80095e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80095d4:	f7fe fc04 	bl	8007de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20009adc 	.word	0x20009adc
 80095e8:	0800a098 	.word	0x0800a098

080095ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	4904      	ldr	r1, [pc, #16]	; (800960c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095fc:	4804      	ldr	r0, [pc, #16]	; (8009610 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095fe:	f7fe fbef 	bl	8007de0 <USBD_GetString>
  return USBD_StrDesc;
 8009602:	4b02      	ldr	r3, [pc, #8]	; (800960c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20009adc 	.word	0x20009adc
 8009610:	0800a0b0 	.word	0x0800a0b0

08009614 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	221a      	movs	r2, #26
 8009624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009626:	f000 f843 	bl	80096b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800962a:	4b02      	ldr	r3, [pc, #8]	; (8009634 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	2000016c 	.word	0x2000016c

08009638 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4907      	ldr	r1, [pc, #28]	; (800966c <USBD_FS_ConfigStrDescriptor+0x34>)
 800964e:	4808      	ldr	r0, [pc, #32]	; (8009670 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009650:	f7fe fbc6 	bl	8007de0 <USBD_GetString>
 8009654:	e004      	b.n	8009660 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	4904      	ldr	r1, [pc, #16]	; (800966c <USBD_FS_ConfigStrDescriptor+0x34>)
 800965a:	4805      	ldr	r0, [pc, #20]	; (8009670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800965c:	f7fe fbc0 	bl	8007de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009660:	4b02      	ldr	r3, [pc, #8]	; (800966c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20009adc 	.word	0x20009adc
 8009670:	0800a0c4 	.word	0x0800a0c4

08009674 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4907      	ldr	r1, [pc, #28]	; (80096a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800968a:	4808      	ldr	r0, [pc, #32]	; (80096ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800968c:	f7fe fba8 	bl	8007de0 <USBD_GetString>
 8009690:	e004      	b.n	800969c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4904      	ldr	r1, [pc, #16]	; (80096a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009696:	4805      	ldr	r0, [pc, #20]	; (80096ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009698:	f7fe fba2 	bl	8007de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20009adc 	.word	0x20009adc
 80096ac:	0800a0d0 	.word	0x0800a0d0

080096b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096b6:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <Get_SerialNum+0x44>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096bc:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <Get_SerialNum+0x48>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096c2:	4b0e      	ldr	r3, [pc, #56]	; (80096fc <Get_SerialNum+0x4c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096d6:	2208      	movs	r2, #8
 80096d8:	4909      	ldr	r1, [pc, #36]	; (8009700 <Get_SerialNum+0x50>)
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f814 	bl	8009708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096e0:	2204      	movs	r2, #4
 80096e2:	4908      	ldr	r1, [pc, #32]	; (8009704 <Get_SerialNum+0x54>)
 80096e4:	68b8      	ldr	r0, [r7, #8]
 80096e6:	f000 f80f 	bl	8009708 <IntToUnicode>
  }
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	1fff7a10 	.word	0x1fff7a10
 80096f8:	1fff7a14 	.word	0x1fff7a14
 80096fc:	1fff7a18 	.word	0x1fff7a18
 8009700:	2000016e 	.word	0x2000016e
 8009704:	2000017e 	.word	0x2000017e

08009708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
 800971e:	e027      	b.n	8009770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	0f1b      	lsrs	r3, r3, #28
 8009724:	2b09      	cmp	r3, #9
 8009726:	d80b      	bhi.n	8009740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	0f1b      	lsrs	r3, r3, #28
 800972c:	b2da      	uxtb	r2, r3
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	4619      	mov	r1, r3
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	440b      	add	r3, r1
 8009738:	3230      	adds	r2, #48	; 0x30
 800973a:	b2d2      	uxtb	r2, r2
 800973c:	701a      	strb	r2, [r3, #0]
 800973e:	e00a      	b.n	8009756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	0f1b      	lsrs	r3, r3, #28
 8009744:	b2da      	uxtb	r2, r3
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4619      	mov	r1, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	440b      	add	r3, r1
 8009750:	3237      	adds	r2, #55	; 0x37
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	3301      	adds	r3, #1
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	4413      	add	r3, r2
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	3301      	adds	r3, #1
 800976e:	75fb      	strb	r3, [r7, #23]
 8009770:	7dfa      	ldrb	r2, [r7, #23]
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	429a      	cmp	r2, r3
 8009776:	d3d3      	bcc.n	8009720 <IntToUnicode+0x18>
  }
}
 8009778:	bf00      	nop
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80097bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800978a:	e003      	b.n	8009794 <LoopCopyDataInit>

0800978c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800978e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009792:	3104      	adds	r1, #4

08009794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009794:	480b      	ldr	r0, [pc, #44]	; (80097c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009796:	4b0c      	ldr	r3, [pc, #48]	; (80097c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800979a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800979c:	d3f6      	bcc.n	800978c <CopyDataInit>
  ldr  r2, =_sbss
 800979e:	4a0b      	ldr	r2, [pc, #44]	; (80097cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80097a0:	e002      	b.n	80097a8 <LoopFillZerobss>

080097a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80097a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80097a4:	f842 3b04 	str.w	r3, [r2], #4

080097a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80097a8:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80097aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80097ac:	d3f9      	bcc.n	80097a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80097ae:	f7ff fa9f 	bl	8008cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80097b2:	f000 f817 	bl	80097e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80097b6:	f7fe fc25 	bl	8008004 <main>
  bx  lr    
 80097ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80097bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80097c0:	0800a144 	.word	0x0800a144
  ldr  r0, =_sdata
 80097c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80097c8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80097cc:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80097d0:	20009ce0 	.word	0x20009ce0

080097d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80097d4:	e7fe      	b.n	80097d4 <ADC_IRQHandler>
	...

080097d8 <__errno>:
 80097d8:	4b01      	ldr	r3, [pc, #4]	; (80097e0 <__errno+0x8>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	20000188 	.word	0x20000188

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4e0d      	ldr	r6, [pc, #52]	; (800981c <__libc_init_array+0x38>)
 80097e8:	4c0d      	ldr	r4, [pc, #52]	; (8009820 <__libc_init_array+0x3c>)
 80097ea:	1ba4      	subs	r4, r4, r6
 80097ec:	10a4      	asrs	r4, r4, #2
 80097ee:	2500      	movs	r5, #0
 80097f0:	42a5      	cmp	r5, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	4e0b      	ldr	r6, [pc, #44]	; (8009824 <__libc_init_array+0x40>)
 80097f6:	4c0c      	ldr	r4, [pc, #48]	; (8009828 <__libc_init_array+0x44>)
 80097f8:	f000 fc36 	bl	800a068 <_init>
 80097fc:	1ba4      	subs	r4, r4, r6
 80097fe:	10a4      	asrs	r4, r4, #2
 8009800:	2500      	movs	r5, #0
 8009802:	42a5      	cmp	r5, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800980c:	4798      	blx	r3
 800980e:	3501      	adds	r5, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009816:	4798      	blx	r3
 8009818:	3501      	adds	r5, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	0800a13c 	.word	0x0800a13c
 8009820:	0800a13c 	.word	0x0800a13c
 8009824:	0800a13c 	.word	0x0800a13c
 8009828:	0800a140 	.word	0x0800a140

0800982c <malloc>:
 800982c:	4b02      	ldr	r3, [pc, #8]	; (8009838 <malloc+0xc>)
 800982e:	4601      	mov	r1, r0
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	f000 b861 	b.w	80098f8 <_malloc_r>
 8009836:	bf00      	nop
 8009838:	20000188 	.word	0x20000188

0800983c <free>:
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <free+0xc>)
 800983e:	4601      	mov	r1, r0
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f000 b80b 	b.w	800985c <_free_r>
 8009846:	bf00      	nop
 8009848:	20000188 	.word	0x20000188

0800984c <memset>:
 800984c:	4402      	add	r2, r0
 800984e:	4603      	mov	r3, r0
 8009850:	4293      	cmp	r3, r2
 8009852:	d100      	bne.n	8009856 <memset+0xa>
 8009854:	4770      	bx	lr
 8009856:	f803 1b01 	strb.w	r1, [r3], #1
 800985a:	e7f9      	b.n	8009850 <memset+0x4>

0800985c <_free_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4605      	mov	r5, r0
 8009860:	2900      	cmp	r1, #0
 8009862:	d045      	beq.n	80098f0 <_free_r+0x94>
 8009864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009868:	1f0c      	subs	r4, r1, #4
 800986a:	2b00      	cmp	r3, #0
 800986c:	bfb8      	it	lt
 800986e:	18e4      	addlt	r4, r4, r3
 8009870:	f000 f8cc 	bl	8009a0c <__malloc_lock>
 8009874:	4a1f      	ldr	r2, [pc, #124]	; (80098f4 <_free_r+0x98>)
 8009876:	6813      	ldr	r3, [r2, #0]
 8009878:	4610      	mov	r0, r2
 800987a:	b933      	cbnz	r3, 800988a <_free_r+0x2e>
 800987c:	6063      	str	r3, [r4, #4]
 800987e:	6014      	str	r4, [r2, #0]
 8009880:	4628      	mov	r0, r5
 8009882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009886:	f000 b8c2 	b.w	8009a0e <__malloc_unlock>
 800988a:	42a3      	cmp	r3, r4
 800988c:	d90c      	bls.n	80098a8 <_free_r+0x4c>
 800988e:	6821      	ldr	r1, [r4, #0]
 8009890:	1862      	adds	r2, r4, r1
 8009892:	4293      	cmp	r3, r2
 8009894:	bf04      	itt	eq
 8009896:	681a      	ldreq	r2, [r3, #0]
 8009898:	685b      	ldreq	r3, [r3, #4]
 800989a:	6063      	str	r3, [r4, #4]
 800989c:	bf04      	itt	eq
 800989e:	1852      	addeq	r2, r2, r1
 80098a0:	6022      	streq	r2, [r4, #0]
 80098a2:	6004      	str	r4, [r0, #0]
 80098a4:	e7ec      	b.n	8009880 <_free_r+0x24>
 80098a6:	4613      	mov	r3, r2
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	b10a      	cbz	r2, 80098b0 <_free_r+0x54>
 80098ac:	42a2      	cmp	r2, r4
 80098ae:	d9fa      	bls.n	80098a6 <_free_r+0x4a>
 80098b0:	6819      	ldr	r1, [r3, #0]
 80098b2:	1858      	adds	r0, r3, r1
 80098b4:	42a0      	cmp	r0, r4
 80098b6:	d10b      	bne.n	80098d0 <_free_r+0x74>
 80098b8:	6820      	ldr	r0, [r4, #0]
 80098ba:	4401      	add	r1, r0
 80098bc:	1858      	adds	r0, r3, r1
 80098be:	4282      	cmp	r2, r0
 80098c0:	6019      	str	r1, [r3, #0]
 80098c2:	d1dd      	bne.n	8009880 <_free_r+0x24>
 80098c4:	6810      	ldr	r0, [r2, #0]
 80098c6:	6852      	ldr	r2, [r2, #4]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	4401      	add	r1, r0
 80098cc:	6019      	str	r1, [r3, #0]
 80098ce:	e7d7      	b.n	8009880 <_free_r+0x24>
 80098d0:	d902      	bls.n	80098d8 <_free_r+0x7c>
 80098d2:	230c      	movs	r3, #12
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	e7d3      	b.n	8009880 <_free_r+0x24>
 80098d8:	6820      	ldr	r0, [r4, #0]
 80098da:	1821      	adds	r1, r4, r0
 80098dc:	428a      	cmp	r2, r1
 80098de:	bf04      	itt	eq
 80098e0:	6811      	ldreq	r1, [r2, #0]
 80098e2:	6852      	ldreq	r2, [r2, #4]
 80098e4:	6062      	str	r2, [r4, #4]
 80098e6:	bf04      	itt	eq
 80098e8:	1809      	addeq	r1, r1, r0
 80098ea:	6021      	streq	r1, [r4, #0]
 80098ec:	605c      	str	r4, [r3, #4]
 80098ee:	e7c7      	b.n	8009880 <_free_r+0x24>
 80098f0:	bd38      	pop	{r3, r4, r5, pc}
 80098f2:	bf00      	nop
 80098f4:	20000210 	.word	0x20000210

080098f8 <_malloc_r>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	1ccd      	adds	r5, r1, #3
 80098fc:	f025 0503 	bic.w	r5, r5, #3
 8009900:	3508      	adds	r5, #8
 8009902:	2d0c      	cmp	r5, #12
 8009904:	bf38      	it	cc
 8009906:	250c      	movcc	r5, #12
 8009908:	2d00      	cmp	r5, #0
 800990a:	4606      	mov	r6, r0
 800990c:	db01      	blt.n	8009912 <_malloc_r+0x1a>
 800990e:	42a9      	cmp	r1, r5
 8009910:	d903      	bls.n	800991a <_malloc_r+0x22>
 8009912:	230c      	movs	r3, #12
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	2000      	movs	r0, #0
 8009918:	bd70      	pop	{r4, r5, r6, pc}
 800991a:	f000 f877 	bl	8009a0c <__malloc_lock>
 800991e:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <_malloc_r+0xac>)
 8009920:	6814      	ldr	r4, [r2, #0]
 8009922:	4621      	mov	r1, r4
 8009924:	b991      	cbnz	r1, 800994c <_malloc_r+0x54>
 8009926:	4c20      	ldr	r4, [pc, #128]	; (80099a8 <_malloc_r+0xb0>)
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	b91b      	cbnz	r3, 8009934 <_malloc_r+0x3c>
 800992c:	4630      	mov	r0, r6
 800992e:	f000 f83d 	bl	80099ac <_sbrk_r>
 8009932:	6020      	str	r0, [r4, #0]
 8009934:	4629      	mov	r1, r5
 8009936:	4630      	mov	r0, r6
 8009938:	f000 f838 	bl	80099ac <_sbrk_r>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d124      	bne.n	800998a <_malloc_r+0x92>
 8009940:	230c      	movs	r3, #12
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	4630      	mov	r0, r6
 8009946:	f000 f862 	bl	8009a0e <__malloc_unlock>
 800994a:	e7e4      	b.n	8009916 <_malloc_r+0x1e>
 800994c:	680b      	ldr	r3, [r1, #0]
 800994e:	1b5b      	subs	r3, r3, r5
 8009950:	d418      	bmi.n	8009984 <_malloc_r+0x8c>
 8009952:	2b0b      	cmp	r3, #11
 8009954:	d90f      	bls.n	8009976 <_malloc_r+0x7e>
 8009956:	600b      	str	r3, [r1, #0]
 8009958:	50cd      	str	r5, [r1, r3]
 800995a:	18cc      	adds	r4, r1, r3
 800995c:	4630      	mov	r0, r6
 800995e:	f000 f856 	bl	8009a0e <__malloc_unlock>
 8009962:	f104 000b 	add.w	r0, r4, #11
 8009966:	1d23      	adds	r3, r4, #4
 8009968:	f020 0007 	bic.w	r0, r0, #7
 800996c:	1ac3      	subs	r3, r0, r3
 800996e:	d0d3      	beq.n	8009918 <_malloc_r+0x20>
 8009970:	425a      	negs	r2, r3
 8009972:	50e2      	str	r2, [r4, r3]
 8009974:	e7d0      	b.n	8009918 <_malloc_r+0x20>
 8009976:	428c      	cmp	r4, r1
 8009978:	684b      	ldr	r3, [r1, #4]
 800997a:	bf16      	itet	ne
 800997c:	6063      	strne	r3, [r4, #4]
 800997e:	6013      	streq	r3, [r2, #0]
 8009980:	460c      	movne	r4, r1
 8009982:	e7eb      	b.n	800995c <_malloc_r+0x64>
 8009984:	460c      	mov	r4, r1
 8009986:	6849      	ldr	r1, [r1, #4]
 8009988:	e7cc      	b.n	8009924 <_malloc_r+0x2c>
 800998a:	1cc4      	adds	r4, r0, #3
 800998c:	f024 0403 	bic.w	r4, r4, #3
 8009990:	42a0      	cmp	r0, r4
 8009992:	d005      	beq.n	80099a0 <_malloc_r+0xa8>
 8009994:	1a21      	subs	r1, r4, r0
 8009996:	4630      	mov	r0, r6
 8009998:	f000 f808 	bl	80099ac <_sbrk_r>
 800999c:	3001      	adds	r0, #1
 800999e:	d0cf      	beq.n	8009940 <_malloc_r+0x48>
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	e7db      	b.n	800995c <_malloc_r+0x64>
 80099a4:	20000210 	.word	0x20000210
 80099a8:	20000214 	.word	0x20000214

080099ac <_sbrk_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4c06      	ldr	r4, [pc, #24]	; (80099c8 <_sbrk_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4605      	mov	r5, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	6023      	str	r3, [r4, #0]
 80099b8:	f7ff f96e 	bl	8008c98 <_sbrk>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_sbrk_r+0x1a>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_sbrk_r+0x1a>
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20009cdc 	.word	0x20009cdc

080099cc <siprintf>:
 80099cc:	b40e      	push	{r1, r2, r3}
 80099ce:	b500      	push	{lr}
 80099d0:	b09c      	sub	sp, #112	; 0x70
 80099d2:	ab1d      	add	r3, sp, #116	; 0x74
 80099d4:	9002      	str	r0, [sp, #8]
 80099d6:	9006      	str	r0, [sp, #24]
 80099d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099dc:	4809      	ldr	r0, [pc, #36]	; (8009a04 <siprintf+0x38>)
 80099de:	9107      	str	r1, [sp, #28]
 80099e0:	9104      	str	r1, [sp, #16]
 80099e2:	4909      	ldr	r1, [pc, #36]	; (8009a08 <siprintf+0x3c>)
 80099e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e8:	9105      	str	r1, [sp, #20]
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	a902      	add	r1, sp, #8
 80099f0:	f000 f868 	bl	8009ac4 <_svfiprintf_r>
 80099f4:	9b02      	ldr	r3, [sp, #8]
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	b01c      	add	sp, #112	; 0x70
 80099fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a00:	b003      	add	sp, #12
 8009a02:	4770      	bx	lr
 8009a04:	20000188 	.word	0x20000188
 8009a08:	ffff0208 	.word	0xffff0208

08009a0c <__malloc_lock>:
 8009a0c:	4770      	bx	lr

08009a0e <__malloc_unlock>:
 8009a0e:	4770      	bx	lr

08009a10 <__ssputs_r>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	688e      	ldr	r6, [r1, #8]
 8009a16:	429e      	cmp	r6, r3
 8009a18:	4682      	mov	sl, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4690      	mov	r8, r2
 8009a1e:	4699      	mov	r9, r3
 8009a20:	d837      	bhi.n	8009a92 <__ssputs_r+0x82>
 8009a22:	898a      	ldrh	r2, [r1, #12]
 8009a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a28:	d031      	beq.n	8009a8e <__ssputs_r+0x7e>
 8009a2a:	6825      	ldr	r5, [r4, #0]
 8009a2c:	6909      	ldr	r1, [r1, #16]
 8009a2e:	1a6f      	subs	r7, r5, r1
 8009a30:	6965      	ldr	r5, [r4, #20]
 8009a32:	2302      	movs	r3, #2
 8009a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a38:	fb95 f5f3 	sdiv	r5, r5, r3
 8009a3c:	f109 0301 	add.w	r3, r9, #1
 8009a40:	443b      	add	r3, r7
 8009a42:	429d      	cmp	r5, r3
 8009a44:	bf38      	it	cc
 8009a46:	461d      	movcc	r5, r3
 8009a48:	0553      	lsls	r3, r2, #21
 8009a4a:	d530      	bpl.n	8009aae <__ssputs_r+0x9e>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	f7ff ff53 	bl	80098f8 <_malloc_r>
 8009a52:	4606      	mov	r6, r0
 8009a54:	b950      	cbnz	r0, 8009a6c <__ssputs_r+0x5c>
 8009a56:	230c      	movs	r3, #12
 8009a58:	f8ca 3000 	str.w	r3, [sl]
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a62:	81a3      	strh	r3, [r4, #12]
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6c:	463a      	mov	r2, r7
 8009a6e:	6921      	ldr	r1, [r4, #16]
 8009a70:	f000 faa8 	bl	8009fc4 <memcpy>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	6126      	str	r6, [r4, #16]
 8009a82:	6165      	str	r5, [r4, #20]
 8009a84:	443e      	add	r6, r7
 8009a86:	1bed      	subs	r5, r5, r7
 8009a88:	6026      	str	r6, [r4, #0]
 8009a8a:	60a5      	str	r5, [r4, #8]
 8009a8c:	464e      	mov	r6, r9
 8009a8e:	454e      	cmp	r6, r9
 8009a90:	d900      	bls.n	8009a94 <__ssputs_r+0x84>
 8009a92:	464e      	mov	r6, r9
 8009a94:	4632      	mov	r2, r6
 8009a96:	4641      	mov	r1, r8
 8009a98:	6820      	ldr	r0, [r4, #0]
 8009a9a:	f000 fa9e 	bl	8009fda <memmove>
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	1b9b      	subs	r3, r3, r6
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	441e      	add	r6, r3
 8009aa8:	6026      	str	r6, [r4, #0]
 8009aaa:	2000      	movs	r0, #0
 8009aac:	e7dc      	b.n	8009a68 <__ssputs_r+0x58>
 8009aae:	462a      	mov	r2, r5
 8009ab0:	f000 faac 	bl	800a00c <_realloc_r>
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d1e2      	bne.n	8009a80 <__ssputs_r+0x70>
 8009aba:	6921      	ldr	r1, [r4, #16]
 8009abc:	4650      	mov	r0, sl
 8009abe:	f7ff fecd 	bl	800985c <_free_r>
 8009ac2:	e7c8      	b.n	8009a56 <__ssputs_r+0x46>

08009ac4 <_svfiprintf_r>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	461d      	mov	r5, r3
 8009aca:	898b      	ldrh	r3, [r1, #12]
 8009acc:	061f      	lsls	r7, r3, #24
 8009ace:	b09d      	sub	sp, #116	; 0x74
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	d50f      	bpl.n	8009af8 <_svfiprintf_r+0x34>
 8009ad8:	690b      	ldr	r3, [r1, #16]
 8009ada:	b96b      	cbnz	r3, 8009af8 <_svfiprintf_r+0x34>
 8009adc:	2140      	movs	r1, #64	; 0x40
 8009ade:	f7ff ff0b 	bl	80098f8 <_malloc_r>
 8009ae2:	6020      	str	r0, [r4, #0]
 8009ae4:	6120      	str	r0, [r4, #16]
 8009ae6:	b928      	cbnz	r0, 8009af4 <_svfiprintf_r+0x30>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	f8c8 3000 	str.w	r3, [r8]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	e0c8      	b.n	8009c86 <_svfiprintf_r+0x1c2>
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	2300      	movs	r3, #0
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	2320      	movs	r3, #32
 8009afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b02:	2330      	movs	r3, #48	; 0x30
 8009b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b08:	9503      	str	r5, [sp, #12]
 8009b0a:	f04f 0b01 	mov.w	fp, #1
 8009b0e:	4637      	mov	r7, r6
 8009b10:	463d      	mov	r5, r7
 8009b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b16:	b10b      	cbz	r3, 8009b1c <_svfiprintf_r+0x58>
 8009b18:	2b25      	cmp	r3, #37	; 0x25
 8009b1a:	d13e      	bne.n	8009b9a <_svfiprintf_r+0xd6>
 8009b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009b20:	d00b      	beq.n	8009b3a <_svfiprintf_r+0x76>
 8009b22:	4653      	mov	r3, sl
 8009b24:	4632      	mov	r2, r6
 8009b26:	4621      	mov	r1, r4
 8009b28:	4640      	mov	r0, r8
 8009b2a:	f7ff ff71 	bl	8009a10 <__ssputs_r>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f000 80a4 	beq.w	8009c7c <_svfiprintf_r+0x1b8>
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	4453      	add	r3, sl
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	783b      	ldrb	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 809d 	beq.w	8009c7c <_svfiprintf_r+0x1b8>
 8009b42:	2300      	movs	r3, #0
 8009b44:	f04f 32ff 	mov.w	r2, #4294967295
 8009b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	9307      	str	r3, [sp, #28]
 8009b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b54:	931a      	str	r3, [sp, #104]	; 0x68
 8009b56:	462f      	mov	r7, r5
 8009b58:	2205      	movs	r2, #5
 8009b5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009b5e:	4850      	ldr	r0, [pc, #320]	; (8009ca0 <_svfiprintf_r+0x1dc>)
 8009b60:	f7f6 fb3e 	bl	80001e0 <memchr>
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	b9d0      	cbnz	r0, 8009b9e <_svfiprintf_r+0xda>
 8009b68:	06d9      	lsls	r1, r3, #27
 8009b6a:	bf44      	itt	mi
 8009b6c:	2220      	movmi	r2, #32
 8009b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b72:	071a      	lsls	r2, r3, #28
 8009b74:	bf44      	itt	mi
 8009b76:	222b      	movmi	r2, #43	; 0x2b
 8009b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b7c:	782a      	ldrb	r2, [r5, #0]
 8009b7e:	2a2a      	cmp	r2, #42	; 0x2a
 8009b80:	d015      	beq.n	8009bae <_svfiprintf_r+0xea>
 8009b82:	9a07      	ldr	r2, [sp, #28]
 8009b84:	462f      	mov	r7, r5
 8009b86:	2000      	movs	r0, #0
 8009b88:	250a      	movs	r5, #10
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b90:	3b30      	subs	r3, #48	; 0x30
 8009b92:	2b09      	cmp	r3, #9
 8009b94:	d94d      	bls.n	8009c32 <_svfiprintf_r+0x16e>
 8009b96:	b1b8      	cbz	r0, 8009bc8 <_svfiprintf_r+0x104>
 8009b98:	e00f      	b.n	8009bba <_svfiprintf_r+0xf6>
 8009b9a:	462f      	mov	r7, r5
 8009b9c:	e7b8      	b.n	8009b10 <_svfiprintf_r+0x4c>
 8009b9e:	4a40      	ldr	r2, [pc, #256]	; (8009ca0 <_svfiprintf_r+0x1dc>)
 8009ba0:	1a80      	subs	r0, r0, r2
 8009ba2:	fa0b f000 	lsl.w	r0, fp, r0
 8009ba6:	4318      	orrs	r0, r3
 8009ba8:	9004      	str	r0, [sp, #16]
 8009baa:	463d      	mov	r5, r7
 8009bac:	e7d3      	b.n	8009b56 <_svfiprintf_r+0x92>
 8009bae:	9a03      	ldr	r2, [sp, #12]
 8009bb0:	1d11      	adds	r1, r2, #4
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	9103      	str	r1, [sp, #12]
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	db01      	blt.n	8009bbe <_svfiprintf_r+0xfa>
 8009bba:	9207      	str	r2, [sp, #28]
 8009bbc:	e004      	b.n	8009bc8 <_svfiprintf_r+0x104>
 8009bbe:	4252      	negs	r2, r2
 8009bc0:	f043 0302 	orr.w	r3, r3, #2
 8009bc4:	9207      	str	r2, [sp, #28]
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	783b      	ldrb	r3, [r7, #0]
 8009bca:	2b2e      	cmp	r3, #46	; 0x2e
 8009bcc:	d10c      	bne.n	8009be8 <_svfiprintf_r+0x124>
 8009bce:	787b      	ldrb	r3, [r7, #1]
 8009bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd2:	d133      	bne.n	8009c3c <_svfiprintf_r+0x178>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	1d1a      	adds	r2, r3, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	9203      	str	r2, [sp, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bfb8      	it	lt
 8009be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009be4:	3702      	adds	r7, #2
 8009be6:	9305      	str	r3, [sp, #20]
 8009be8:	4d2e      	ldr	r5, [pc, #184]	; (8009ca4 <_svfiprintf_r+0x1e0>)
 8009bea:	7839      	ldrb	r1, [r7, #0]
 8009bec:	2203      	movs	r2, #3
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7f6 faf6 	bl	80001e0 <memchr>
 8009bf4:	b138      	cbz	r0, 8009c06 <_svfiprintf_r+0x142>
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	1b40      	subs	r0, r0, r5
 8009bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	4303      	orrs	r3, r0
 8009c02:	3701      	adds	r7, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	7839      	ldrb	r1, [r7, #0]
 8009c08:	4827      	ldr	r0, [pc, #156]	; (8009ca8 <_svfiprintf_r+0x1e4>)
 8009c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c0e:	2206      	movs	r2, #6
 8009c10:	1c7e      	adds	r6, r7, #1
 8009c12:	f7f6 fae5 	bl	80001e0 <memchr>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d038      	beq.n	8009c8c <_svfiprintf_r+0x1c8>
 8009c1a:	4b24      	ldr	r3, [pc, #144]	; (8009cac <_svfiprintf_r+0x1e8>)
 8009c1c:	bb13      	cbnz	r3, 8009c64 <_svfiprintf_r+0x1a0>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	3307      	adds	r3, #7
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	3308      	adds	r3, #8
 8009c28:	9303      	str	r3, [sp, #12]
 8009c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2c:	444b      	add	r3, r9
 8009c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c30:	e76d      	b.n	8009b0e <_svfiprintf_r+0x4a>
 8009c32:	fb05 3202 	mla	r2, r5, r2, r3
 8009c36:	2001      	movs	r0, #1
 8009c38:	460f      	mov	r7, r1
 8009c3a:	e7a6      	b.n	8009b8a <_svfiprintf_r+0xc6>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	3701      	adds	r7, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	4619      	mov	r1, r3
 8009c44:	250a      	movs	r5, #10
 8009c46:	4638      	mov	r0, r7
 8009c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c4c:	3a30      	subs	r2, #48	; 0x30
 8009c4e:	2a09      	cmp	r2, #9
 8009c50:	d903      	bls.n	8009c5a <_svfiprintf_r+0x196>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0c8      	beq.n	8009be8 <_svfiprintf_r+0x124>
 8009c56:	9105      	str	r1, [sp, #20]
 8009c58:	e7c6      	b.n	8009be8 <_svfiprintf_r+0x124>
 8009c5a:	fb05 2101 	mla	r1, r5, r1, r2
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4607      	mov	r7, r0
 8009c62:	e7f0      	b.n	8009c46 <_svfiprintf_r+0x182>
 8009c64:	ab03      	add	r3, sp, #12
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <_svfiprintf_r+0x1ec>)
 8009c6c:	a904      	add	r1, sp, #16
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f3af 8000 	nop.w
 8009c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c78:	4681      	mov	r9, r0
 8009c7a:	d1d6      	bne.n	8009c2a <_svfiprintf_r+0x166>
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	065b      	lsls	r3, r3, #25
 8009c80:	f53f af35 	bmi.w	8009aee <_svfiprintf_r+0x2a>
 8009c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c86:	b01d      	add	sp, #116	; 0x74
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	ab03      	add	r3, sp, #12
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4622      	mov	r2, r4
 8009c92:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <_svfiprintf_r+0x1ec>)
 8009c94:	a904      	add	r1, sp, #16
 8009c96:	4640      	mov	r0, r8
 8009c98:	f000 f882 	bl	8009da0 <_printf_i>
 8009c9c:	e7ea      	b.n	8009c74 <_svfiprintf_r+0x1b0>
 8009c9e:	bf00      	nop
 8009ca0:	0800a100 	.word	0x0800a100
 8009ca4:	0800a106 	.word	0x0800a106
 8009ca8:	0800a10a 	.word	0x0800a10a
 8009cac:	00000000 	.word	0x00000000
 8009cb0:	08009a11 	.word	0x08009a11

08009cb4 <_printf_common>:
 8009cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	4691      	mov	r9, r2
 8009cba:	461f      	mov	r7, r3
 8009cbc:	688a      	ldr	r2, [r1, #8]
 8009cbe:	690b      	ldr	r3, [r1, #16]
 8009cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	bfb8      	it	lt
 8009cc8:	4613      	movlt	r3, r2
 8009cca:	f8c9 3000 	str.w	r3, [r9]
 8009cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b112      	cbz	r2, 8009cde <_printf_common+0x2a>
 8009cd8:	3301      	adds	r3, #1
 8009cda:	f8c9 3000 	str.w	r3, [r9]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	0699      	lsls	r1, r3, #26
 8009ce2:	bf42      	ittt	mi
 8009ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ce8:	3302      	addmi	r3, #2
 8009cea:	f8c9 3000 	strmi.w	r3, [r9]
 8009cee:	6825      	ldr	r5, [r4, #0]
 8009cf0:	f015 0506 	ands.w	r5, r5, #6
 8009cf4:	d107      	bne.n	8009d06 <_printf_common+0x52>
 8009cf6:	f104 0a19 	add.w	sl, r4, #25
 8009cfa:	68e3      	ldr	r3, [r4, #12]
 8009cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	42ab      	cmp	r3, r5
 8009d04:	dc28      	bgt.n	8009d58 <_printf_common+0xa4>
 8009d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	3300      	adds	r3, #0
 8009d0e:	bf18      	it	ne
 8009d10:	2301      	movne	r3, #1
 8009d12:	0692      	lsls	r2, r2, #26
 8009d14:	d42d      	bmi.n	8009d72 <_printf_common+0xbe>
 8009d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	47c0      	blx	r8
 8009d20:	3001      	adds	r0, #1
 8009d22:	d020      	beq.n	8009d66 <_printf_common+0xb2>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	68e5      	ldr	r5, [r4, #12]
 8009d28:	f8d9 2000 	ldr.w	r2, [r9]
 8009d2c:	f003 0306 	and.w	r3, r3, #6
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	bf08      	it	eq
 8009d34:	1aad      	subeq	r5, r5, r2
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	6922      	ldr	r2, [r4, #16]
 8009d3a:	bf0c      	ite	eq
 8009d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d40:	2500      	movne	r5, #0
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bfc4      	itt	gt
 8009d46:	1a9b      	subgt	r3, r3, r2
 8009d48:	18ed      	addgt	r5, r5, r3
 8009d4a:	f04f 0900 	mov.w	r9, #0
 8009d4e:	341a      	adds	r4, #26
 8009d50:	454d      	cmp	r5, r9
 8009d52:	d11a      	bne.n	8009d8a <_printf_common+0xd6>
 8009d54:	2000      	movs	r0, #0
 8009d56:	e008      	b.n	8009d6a <_printf_common+0xb6>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	4652      	mov	r2, sl
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4630      	mov	r0, r6
 8009d60:	47c0      	blx	r8
 8009d62:	3001      	adds	r0, #1
 8009d64:	d103      	bne.n	8009d6e <_printf_common+0xba>
 8009d66:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6e:	3501      	adds	r5, #1
 8009d70:	e7c3      	b.n	8009cfa <_printf_common+0x46>
 8009d72:	18e1      	adds	r1, r4, r3
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	2030      	movs	r0, #48	; 0x30
 8009d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d7c:	4422      	add	r2, r4
 8009d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d86:	3302      	adds	r3, #2
 8009d88:	e7c5      	b.n	8009d16 <_printf_common+0x62>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4639      	mov	r1, r7
 8009d90:	4630      	mov	r0, r6
 8009d92:	47c0      	blx	r8
 8009d94:	3001      	adds	r0, #1
 8009d96:	d0e6      	beq.n	8009d66 <_printf_common+0xb2>
 8009d98:	f109 0901 	add.w	r9, r9, #1
 8009d9c:	e7d8      	b.n	8009d50 <_printf_common+0x9c>
	...

08009da0 <_printf_i>:
 8009da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009da4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009da8:	460c      	mov	r4, r1
 8009daa:	7e09      	ldrb	r1, [r1, #24]
 8009dac:	b085      	sub	sp, #20
 8009dae:	296e      	cmp	r1, #110	; 0x6e
 8009db0:	4617      	mov	r7, r2
 8009db2:	4606      	mov	r6, r0
 8009db4:	4698      	mov	r8, r3
 8009db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009db8:	f000 80b3 	beq.w	8009f22 <_printf_i+0x182>
 8009dbc:	d822      	bhi.n	8009e04 <_printf_i+0x64>
 8009dbe:	2963      	cmp	r1, #99	; 0x63
 8009dc0:	d036      	beq.n	8009e30 <_printf_i+0x90>
 8009dc2:	d80a      	bhi.n	8009dda <_printf_i+0x3a>
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	f000 80b9 	beq.w	8009f3c <_printf_i+0x19c>
 8009dca:	2958      	cmp	r1, #88	; 0x58
 8009dcc:	f000 8083 	beq.w	8009ed6 <_printf_i+0x136>
 8009dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009dd8:	e032      	b.n	8009e40 <_printf_i+0xa0>
 8009dda:	2964      	cmp	r1, #100	; 0x64
 8009ddc:	d001      	beq.n	8009de2 <_printf_i+0x42>
 8009dde:	2969      	cmp	r1, #105	; 0x69
 8009de0:	d1f6      	bne.n	8009dd0 <_printf_i+0x30>
 8009de2:	6820      	ldr	r0, [r4, #0]
 8009de4:	6813      	ldr	r3, [r2, #0]
 8009de6:	0605      	lsls	r5, r0, #24
 8009de8:	f103 0104 	add.w	r1, r3, #4
 8009dec:	d52a      	bpl.n	8009e44 <_printf_i+0xa4>
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da03      	bge.n	8009dfe <_printf_i+0x5e>
 8009df6:	222d      	movs	r2, #45	; 0x2d
 8009df8:	425b      	negs	r3, r3
 8009dfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009dfe:	486f      	ldr	r0, [pc, #444]	; (8009fbc <_printf_i+0x21c>)
 8009e00:	220a      	movs	r2, #10
 8009e02:	e039      	b.n	8009e78 <_printf_i+0xd8>
 8009e04:	2973      	cmp	r1, #115	; 0x73
 8009e06:	f000 809d 	beq.w	8009f44 <_printf_i+0x1a4>
 8009e0a:	d808      	bhi.n	8009e1e <_printf_i+0x7e>
 8009e0c:	296f      	cmp	r1, #111	; 0x6f
 8009e0e:	d020      	beq.n	8009e52 <_printf_i+0xb2>
 8009e10:	2970      	cmp	r1, #112	; 0x70
 8009e12:	d1dd      	bne.n	8009dd0 <_printf_i+0x30>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	f043 0320 	orr.w	r3, r3, #32
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	e003      	b.n	8009e26 <_printf_i+0x86>
 8009e1e:	2975      	cmp	r1, #117	; 0x75
 8009e20:	d017      	beq.n	8009e52 <_printf_i+0xb2>
 8009e22:	2978      	cmp	r1, #120	; 0x78
 8009e24:	d1d4      	bne.n	8009dd0 <_printf_i+0x30>
 8009e26:	2378      	movs	r3, #120	; 0x78
 8009e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e2c:	4864      	ldr	r0, [pc, #400]	; (8009fc0 <_printf_i+0x220>)
 8009e2e:	e055      	b.n	8009edc <_printf_i+0x13c>
 8009e30:	6813      	ldr	r3, [r2, #0]
 8009e32:	1d19      	adds	r1, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6011      	str	r1, [r2, #0]
 8009e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e40:	2301      	movs	r3, #1
 8009e42:	e08c      	b.n	8009f5e <_printf_i+0x1be>
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6011      	str	r1, [r2, #0]
 8009e48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e4c:	bf18      	it	ne
 8009e4e:	b21b      	sxthne	r3, r3
 8009e50:	e7cf      	b.n	8009df2 <_printf_i+0x52>
 8009e52:	6813      	ldr	r3, [r2, #0]
 8009e54:	6825      	ldr	r5, [r4, #0]
 8009e56:	1d18      	adds	r0, r3, #4
 8009e58:	6010      	str	r0, [r2, #0]
 8009e5a:	0628      	lsls	r0, r5, #24
 8009e5c:	d501      	bpl.n	8009e62 <_printf_i+0xc2>
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	e002      	b.n	8009e68 <_printf_i+0xc8>
 8009e62:	0668      	lsls	r0, r5, #25
 8009e64:	d5fb      	bpl.n	8009e5e <_printf_i+0xbe>
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	4854      	ldr	r0, [pc, #336]	; (8009fbc <_printf_i+0x21c>)
 8009e6a:	296f      	cmp	r1, #111	; 0x6f
 8009e6c:	bf14      	ite	ne
 8009e6e:	220a      	movne	r2, #10
 8009e70:	2208      	moveq	r2, #8
 8009e72:	2100      	movs	r1, #0
 8009e74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e78:	6865      	ldr	r5, [r4, #4]
 8009e7a:	60a5      	str	r5, [r4, #8]
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	f2c0 8095 	blt.w	8009fac <_printf_i+0x20c>
 8009e82:	6821      	ldr	r1, [r4, #0]
 8009e84:	f021 0104 	bic.w	r1, r1, #4
 8009e88:	6021      	str	r1, [r4, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d13d      	bne.n	8009f0a <_printf_i+0x16a>
 8009e8e:	2d00      	cmp	r5, #0
 8009e90:	f040 808e 	bne.w	8009fb0 <_printf_i+0x210>
 8009e94:	4665      	mov	r5, ip
 8009e96:	2a08      	cmp	r2, #8
 8009e98:	d10b      	bne.n	8009eb2 <_printf_i+0x112>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	07db      	lsls	r3, r3, #31
 8009e9e:	d508      	bpl.n	8009eb2 <_printf_i+0x112>
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	6862      	ldr	r2, [r4, #4]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	bfde      	ittt	le
 8009ea8:	2330      	movle	r3, #48	; 0x30
 8009eaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009eae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009eb2:	ebac 0305 	sub.w	r3, ip, r5
 8009eb6:	6123      	str	r3, [r4, #16]
 8009eb8:	f8cd 8000 	str.w	r8, [sp]
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	aa03      	add	r2, sp, #12
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff fef6 	bl	8009cb4 <_printf_common>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	d14d      	bne.n	8009f68 <_printf_i+0x1c8>
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed0:	b005      	add	sp, #20
 8009ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	4839      	ldr	r0, [pc, #228]	; (8009fbc <_printf_i+0x21c>)
 8009ed8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009edc:	6813      	ldr	r3, [r2, #0]
 8009ede:	6821      	ldr	r1, [r4, #0]
 8009ee0:	1d1d      	adds	r5, r3, #4
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6015      	str	r5, [r2, #0]
 8009ee6:	060a      	lsls	r2, r1, #24
 8009ee8:	d50b      	bpl.n	8009f02 <_printf_i+0x162>
 8009eea:	07ca      	lsls	r2, r1, #31
 8009eec:	bf44      	itt	mi
 8009eee:	f041 0120 	orrmi.w	r1, r1, #32
 8009ef2:	6021      	strmi	r1, [r4, #0]
 8009ef4:	b91b      	cbnz	r3, 8009efe <_printf_i+0x15e>
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	f022 0220 	bic.w	r2, r2, #32
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	2210      	movs	r2, #16
 8009f00:	e7b7      	b.n	8009e72 <_printf_i+0xd2>
 8009f02:	064d      	lsls	r5, r1, #25
 8009f04:	bf48      	it	mi
 8009f06:	b29b      	uxthmi	r3, r3
 8009f08:	e7ef      	b.n	8009eea <_printf_i+0x14a>
 8009f0a:	4665      	mov	r5, ip
 8009f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f10:	fb02 3311 	mls	r3, r2, r1, r3
 8009f14:	5cc3      	ldrb	r3, [r0, r3]
 8009f16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d1f5      	bne.n	8009f0c <_printf_i+0x16c>
 8009f20:	e7b9      	b.n	8009e96 <_printf_i+0xf6>
 8009f22:	6813      	ldr	r3, [r2, #0]
 8009f24:	6825      	ldr	r5, [r4, #0]
 8009f26:	6961      	ldr	r1, [r4, #20]
 8009f28:	1d18      	adds	r0, r3, #4
 8009f2a:	6010      	str	r0, [r2, #0]
 8009f2c:	0628      	lsls	r0, r5, #24
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	d501      	bpl.n	8009f36 <_printf_i+0x196>
 8009f32:	6019      	str	r1, [r3, #0]
 8009f34:	e002      	b.n	8009f3c <_printf_i+0x19c>
 8009f36:	066a      	lsls	r2, r5, #25
 8009f38:	d5fb      	bpl.n	8009f32 <_printf_i+0x192>
 8009f3a:	8019      	strh	r1, [r3, #0]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	6123      	str	r3, [r4, #16]
 8009f40:	4665      	mov	r5, ip
 8009f42:	e7b9      	b.n	8009eb8 <_printf_i+0x118>
 8009f44:	6813      	ldr	r3, [r2, #0]
 8009f46:	1d19      	adds	r1, r3, #4
 8009f48:	6011      	str	r1, [r2, #0]
 8009f4a:	681d      	ldr	r5, [r3, #0]
 8009f4c:	6862      	ldr	r2, [r4, #4]
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7f6 f945 	bl	80001e0 <memchr>
 8009f56:	b108      	cbz	r0, 8009f5c <_printf_i+0x1bc>
 8009f58:	1b40      	subs	r0, r0, r5
 8009f5a:	6060      	str	r0, [r4, #4]
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	2300      	movs	r3, #0
 8009f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f66:	e7a7      	b.n	8009eb8 <_printf_i+0x118>
 8009f68:	6923      	ldr	r3, [r4, #16]
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	4630      	mov	r0, r6
 8009f70:	47c0      	blx	r8
 8009f72:	3001      	adds	r0, #1
 8009f74:	d0aa      	beq.n	8009ecc <_printf_i+0x12c>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	079b      	lsls	r3, r3, #30
 8009f7a:	d413      	bmi.n	8009fa4 <_printf_i+0x204>
 8009f7c:	68e0      	ldr	r0, [r4, #12]
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	4298      	cmp	r0, r3
 8009f82:	bfb8      	it	lt
 8009f84:	4618      	movlt	r0, r3
 8009f86:	e7a3      	b.n	8009ed0 <_printf_i+0x130>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	464a      	mov	r2, r9
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4630      	mov	r0, r6
 8009f90:	47c0      	blx	r8
 8009f92:	3001      	adds	r0, #1
 8009f94:	d09a      	beq.n	8009ecc <_printf_i+0x12c>
 8009f96:	3501      	adds	r5, #1
 8009f98:	68e3      	ldr	r3, [r4, #12]
 8009f9a:	9a03      	ldr	r2, [sp, #12]
 8009f9c:	1a9b      	subs	r3, r3, r2
 8009f9e:	42ab      	cmp	r3, r5
 8009fa0:	dcf2      	bgt.n	8009f88 <_printf_i+0x1e8>
 8009fa2:	e7eb      	b.n	8009f7c <_printf_i+0x1dc>
 8009fa4:	2500      	movs	r5, #0
 8009fa6:	f104 0919 	add.w	r9, r4, #25
 8009faa:	e7f5      	b.n	8009f98 <_printf_i+0x1f8>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1ac      	bne.n	8009f0a <_printf_i+0x16a>
 8009fb0:	7803      	ldrb	r3, [r0, #0]
 8009fb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fba:	e76c      	b.n	8009e96 <_printf_i+0xf6>
 8009fbc:	0800a111 	.word	0x0800a111
 8009fc0:	0800a122 	.word	0x0800a122

08009fc4 <memcpy>:
 8009fc4:	b510      	push	{r4, lr}
 8009fc6:	1e43      	subs	r3, r0, #1
 8009fc8:	440a      	add	r2, r1
 8009fca:	4291      	cmp	r1, r2
 8009fcc:	d100      	bne.n	8009fd0 <memcpy+0xc>
 8009fce:	bd10      	pop	{r4, pc}
 8009fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fd8:	e7f7      	b.n	8009fca <memcpy+0x6>

08009fda <memmove>:
 8009fda:	4288      	cmp	r0, r1
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	eb01 0302 	add.w	r3, r1, r2
 8009fe2:	d807      	bhi.n	8009ff4 <memmove+0x1a>
 8009fe4:	1e42      	subs	r2, r0, #1
 8009fe6:	4299      	cmp	r1, r3
 8009fe8:	d00a      	beq.n	800a000 <memmove+0x26>
 8009fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ff2:	e7f8      	b.n	8009fe6 <memmove+0xc>
 8009ff4:	4283      	cmp	r3, r0
 8009ff6:	d9f5      	bls.n	8009fe4 <memmove+0xa>
 8009ff8:	1881      	adds	r1, r0, r2
 8009ffa:	1ad2      	subs	r2, r2, r3
 8009ffc:	42d3      	cmn	r3, r2
 8009ffe:	d100      	bne.n	800a002 <memmove+0x28>
 800a000:	bd10      	pop	{r4, pc}
 800a002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a006:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a00a:	e7f7      	b.n	8009ffc <memmove+0x22>

0800a00c <_realloc_r>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	4607      	mov	r7, r0
 800a010:	4614      	mov	r4, r2
 800a012:	460e      	mov	r6, r1
 800a014:	b921      	cbnz	r1, 800a020 <_realloc_r+0x14>
 800a016:	4611      	mov	r1, r2
 800a018:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a01c:	f7ff bc6c 	b.w	80098f8 <_malloc_r>
 800a020:	b922      	cbnz	r2, 800a02c <_realloc_r+0x20>
 800a022:	f7ff fc1b 	bl	800985c <_free_r>
 800a026:	4625      	mov	r5, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02c:	f000 f814 	bl	800a058 <_malloc_usable_size_r>
 800a030:	42a0      	cmp	r0, r4
 800a032:	d20f      	bcs.n	800a054 <_realloc_r+0x48>
 800a034:	4621      	mov	r1, r4
 800a036:	4638      	mov	r0, r7
 800a038:	f7ff fc5e 	bl	80098f8 <_malloc_r>
 800a03c:	4605      	mov	r5, r0
 800a03e:	2800      	cmp	r0, #0
 800a040:	d0f2      	beq.n	800a028 <_realloc_r+0x1c>
 800a042:	4631      	mov	r1, r6
 800a044:	4622      	mov	r2, r4
 800a046:	f7ff ffbd 	bl	8009fc4 <memcpy>
 800a04a:	4631      	mov	r1, r6
 800a04c:	4638      	mov	r0, r7
 800a04e:	f7ff fc05 	bl	800985c <_free_r>
 800a052:	e7e9      	b.n	800a028 <_realloc_r+0x1c>
 800a054:	4635      	mov	r5, r6
 800a056:	e7e7      	b.n	800a028 <_realloc_r+0x1c>

0800a058 <_malloc_usable_size_r>:
 800a058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05c:	1f18      	subs	r0, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfbc      	itt	lt
 800a062:	580b      	ldrlt	r3, [r1, r0]
 800a064:	18c0      	addlt	r0, r0, r3
 800a066:	4770      	bx	lr

0800a068 <_init>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr

0800a074 <_fini>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	bf00      	nop
 800a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07a:	bc08      	pop	{r3}
 800a07c:	469e      	mov	lr, r3
 800a07e:	4770      	bx	lr
