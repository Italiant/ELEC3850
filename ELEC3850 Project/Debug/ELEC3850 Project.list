
ELEC3850 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e54  08008e54  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e5c  08008e5c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  200001e0  08009044  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cac  08009044  00021cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5c8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6d  00000000  00000000  0003c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  00040248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  00041940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258ac  00000000  00000000  00042ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014942  00000000  00000000  0006874c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0cf5  00000000  00000000  0007d08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014dd83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  0014de00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ddc 	.word	0x08008ddc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08008ddc 	.word	0x08008ddc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f007 fb90 	bl	8007c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000118 	.word	0x20000118
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	2000020c 	.word	0x2000020c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000020c 	.word	0x2000020c

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x4a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d007      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d130      	bne.n	800095c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5f      	ldr	r3, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a5e      	ldr	r2, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691a      	ldr	r2, [r3, #16]
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
 8000b84:	4613      	mov	r3, r2
 8000b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b88:	787b      	ldrb	r3, [r7, #1]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b94:	e003      	b.n	8000b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	619a      	str	r2, [r3, #24]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d006      	beq.n	8000bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f806 	bl	8000bdc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013c00 	.word	0x40013c00

08000bdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e10f      	b.n	8000e26 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f007 f828 	bl	8007c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2224      	movs	r2, #36	; 0x24
 8000c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0201 	bic.w	r2, r2, #1
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c38:	f002 fb36 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8000c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a7b      	ldr	r2, [pc, #492]	; (8000e30 <HAL_I2C_Init+0x23c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d807      	bhi.n	8000c58 <HAL_I2C_Init+0x64>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <HAL_I2C_Init+0x240>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	bf94      	ite	ls
 8000c50:	2301      	movls	r3, #1
 8000c52:	2300      	movhi	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	e006      	b.n	8000c66 <HAL_I2C_Init+0x72>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4a77      	ldr	r2, [pc, #476]	; (8000e38 <HAL_I2C_Init+0x244>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	bf94      	ite	ls
 8000c60:	2301      	movls	r3, #1
 8000c62:	2300      	movhi	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0db      	b.n	8000e26 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <HAL_I2C_Init+0x248>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a64      	ldr	r2, [pc, #400]	; (8000e30 <HAL_I2C_Init+0x23c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d802      	bhi.n	8000ca8 <HAL_I2C_Init+0xb4>
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	e009      	b.n	8000cbc <HAL_I2C_Init+0xc8>
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4a63      	ldr	r2, [pc, #396]	; (8000e40 <HAL_I2C_Init+0x24c>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	099b      	lsrs	r3, r3, #6
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4956      	ldr	r1, [pc, #344]	; (8000e30 <HAL_I2C_Init+0x23c>)
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d80d      	bhi.n	8000cf8 <HAL_I2C_Init+0x104>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	1e59      	subs	r1, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	bf38      	it	cc
 8000cf4:	2304      	movcc	r3, #4
 8000cf6:	e04f      	b.n	8000d98 <HAL_I2C_Init+0x1a4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d111      	bne.n	8000d24 <HAL_I2C_Init+0x130>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	1e58      	subs	r0, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	440b      	add	r3, r1
 8000d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d12:	3301      	adds	r3, #1
 8000d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2301      	moveq	r3, #1
 8000d1e:	2300      	movne	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	e012      	b.n	8000d4a <HAL_I2C_Init+0x156>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1e58      	subs	r0, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6859      	ldr	r1, [r3, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	0099      	lsls	r1, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_Init+0x15e>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e022      	b.n	8000d98 <HAL_I2C_Init+0x1a4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10e      	bne.n	8000d78 <HAL_I2C_Init+0x184>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1e58      	subs	r0, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6859      	ldr	r1, [r3, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	440b      	add	r3, r1
 8000d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d76:	e00f      	b.n	8000d98 <HAL_I2C_Init+0x1a4>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1e58      	subs	r0, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	0099      	lsls	r1, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	6809      	ldr	r1, [r1, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69da      	ldr	r2, [r3, #28]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6911      	ldr	r1, [r2, #16]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68d2      	ldr	r2, [r2, #12]
 8000dd2:	4311      	orrs	r1, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2220      	movs	r2, #32
 8000e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	000186a0 	.word	0x000186a0
 8000e34:	001e847f 	.word	0x001e847f
 8000e38:	003d08ff 	.word	0x003d08ff
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	10624dd3 	.word	0x10624dd3

08000e44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e128      	b.n	80010a8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a90      	ldr	r2, [pc, #576]	; (80010b0 <HAL_I2S_Init+0x26c>)
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f006 ff45 	bl	8007d00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2202      	movs	r2, #2
 8000e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000e8c:	f023 030f 	bic.w	r3, r3, #15
 8000e90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2202      	movs	r2, #2
 8000e98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d060      	beq.n	8000f64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e001      	b.n	8000eb4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b20      	cmp	r3, #32
 8000eba:	d802      	bhi.n	8000ec2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f002 fae6 	bl	8003494 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ec8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ed2:	d125      	bne.n	8000f20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d010      	beq.n	8000efe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	3305      	adds	r3, #5
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	e01f      	b.n	8000f3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	461a      	mov	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	3305      	adds	r3, #5
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e00e      	b.n	8000f3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4a5c      	ldr	r2, [pc, #368]	; (80010b4 <HAL_I2S_Init+0x270>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	e003      	b.n	8000f6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d902      	bls.n	8000f78 <HAL_I2S_Init+0x134>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	2bff      	cmp	r3, #255	; 0xff
 8000f76:	d907      	bls.n	8000f88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	f043 0210 	orr.w	r2, r3, #16
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e08f      	b.n	80010a8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	ea42 0103 	orr.w	r1, r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000fa6:	f023 030f 	bic.w	r3, r3, #15
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6851      	ldr	r1, [r2, #4]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6892      	ldr	r2, [r2, #8]
 8000fb2:	4311      	orrs	r1, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68d2      	ldr	r2, [r2, #12]
 8000fb8:	4311      	orrs	r1, r2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6992      	ldr	r2, [r2, #24]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d161      	bne.n	8001098 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <HAL_I2S_Init+0x274>)
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a37      	ldr	r2, [pc, #220]	; (80010bc <HAL_I2S_Init+0x278>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_I2S_Init+0x1a4>
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_I2S_Init+0x27c>)
 8000fe6:	e001      	b.n	8000fec <HAL_I2S_Init+0x1a8>
 8000fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	4932      	ldr	r1, [pc, #200]	; (80010bc <HAL_I2S_Init+0x278>)
 8000ff4:	428a      	cmp	r2, r1
 8000ff6:	d101      	bne.n	8000ffc <HAL_I2S_Init+0x1b8>
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_I2S_Init+0x27c>)
 8000ffa:	e001      	b.n	8001000 <HAL_I2S_Init+0x1bc>
 8000ffc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001000:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001004:	f023 030f 	bic.w	r3, r3, #15
 8001008:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <HAL_I2S_Init+0x278>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_I2S_Init+0x1d4>
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_I2S_Init+0x27c>)
 8001016:	e001      	b.n	800101c <HAL_I2S_Init+0x1d8>
 8001018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800101c:	2202      	movs	r2, #2
 800101e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_I2S_Init+0x278>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_I2S_Init+0x1ea>
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_I2S_Init+0x27c>)
 800102c:	e001      	b.n	8001032 <HAL_I2S_Init+0x1ee>
 800102e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800103e:	d003      	beq.n	8001048 <HAL_I2S_Init+0x204>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e001      	b.n	8001054 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	b299      	uxth	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800106a:	4303      	orrs	r3, r0
 800106c:	b29b      	uxth	r3, r3
 800106e:	430b      	orrs	r3, r1
 8001070:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001072:	4313      	orrs	r3, r2
 8001074:	b29a      	uxth	r2, r3
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	4313      	orrs	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001080:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_I2S_Init+0x278>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d101      	bne.n	8001090 <HAL_I2S_Init+0x24c>
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_I2S_Init+0x27c>)
 800108e:	e001      	b.n	8001094 <HAL_I2S_Init+0x250>
 8001090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001094:	897a      	ldrh	r2, [r7, #10]
 8001096:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	080011bb 	.word	0x080011bb
 80010b4:	cccccccd 	.word	0xcccccccd
 80010b8:	080012d1 	.word	0x080012d1
 80010bc:	40003800 	.word	0x40003800
 80010c0:	40003400 	.word	0x40003400

080010c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	1c9a      	adds	r2, r3, #2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001122:	b29b      	uxth	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10e      	bne.n	8001154 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001144:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffb8 	bl	80010c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	b292      	uxth	r2, r2
 8001170:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	1c9a      	adds	r2, r3, #2
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800118e:	b29b      	uxth	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10e      	bne.n	80011b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff93 	bl	80010d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d13a      	bne.n	800124c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d109      	bne.n	80011f4 <I2S_IRQHandler+0x3a>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b40      	cmp	r3, #64	; 0x40
 80011ec:	d102      	bne.n	80011f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb4 	bl	800115c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fa:	2b40      	cmp	r3, #64	; 0x40
 80011fc:	d126      	bne.n	800124c <I2S_IRQHandler+0x92>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0320 	and.w	r3, r3, #32
 8001208:	2b20      	cmp	r3, #32
 800120a:	d11f      	bne.n	800124c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800121a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f043 0202 	orr.w	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff50 	bl	80010ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d136      	bne.n	80012c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b02      	cmp	r3, #2
 8001260:	d109      	bne.n	8001276 <I2S_IRQHandler+0xbc>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126c:	2b80      	cmp	r3, #128	; 0x80
 800126e:	d102      	bne.n	8001276 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff45 	bl	8001100 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b08      	cmp	r3, #8
 800127e:	d122      	bne.n	80012c6 <I2S_IRQHandler+0x10c>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b20      	cmp	r3, #32
 800128c:	d11b      	bne.n	80012c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800129c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b8:	f043 0204 	orr.w	r2, r3, #4
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff13 	bl	80010ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4aa2      	ldr	r2, [pc, #648]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80012ea:	4ba2      	ldr	r3, [pc, #648]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80012ec:	e001      	b.n	80012f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80012ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a9b      	ldr	r2, [pc, #620]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001308:	4b9a      	ldr	r3, [pc, #616]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800130a:	e001      	b.n	8001310 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800130c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d004      	beq.n	8001328 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 8099 	bne.w	800145a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b02      	cmp	r3, #2
 8001330:	d107      	bne.n	8001342 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f925 	bl	800158c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f9c8 	bl	80016ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001362:	2b40      	cmp	r3, #64	; 0x40
 8001364:	d13a      	bne.n	80013dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	2b00      	cmp	r3, #0
 800136e:	d035      	beq.n	80013dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a7e      	ldr	r2, [pc, #504]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800137a:	4b7e      	ldr	r3, [pc, #504]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800137c:	e001      	b.n	8001382 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800137e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4979      	ldr	r1, [pc, #484]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800138a:	428b      	cmp	r3, r1
 800138c:	d101      	bne.n	8001392 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800138e:	4b79      	ldr	r3, [pc, #484]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001390:	e001      	b.n	8001396 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001396:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800139a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f043 0202 	orr.w	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe88 	bl	80010ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	f040 80be 	bne.w	8001564 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80b8 	beq.w	8001564 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001402:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a59      	ldr	r2, [pc, #356]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001410:	e001      	b.n	8001416 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4954      	ldr	r1, [pc, #336]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800141e:	428b      	cmp	r3, r1
 8001420:	d101      	bne.n	8001426 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001422:	4b54      	ldr	r3, [pc, #336]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001424:	e001      	b.n	800142a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800142a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800142e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f043 0204 	orr.w	r2, r3, #4
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fe4a 	bl	80010ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001458:	e084      	b.n	8001564 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b02      	cmp	r3, #2
 8001462:	d107      	bne.n	8001474 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f8be 	bl	80015f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d107      	bne.n	800148e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8fd 	bl	8001688 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001494:	2b40      	cmp	r3, #64	; 0x40
 8001496:	d12f      	bne.n	80014f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02a      	beq.n	80014f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014be:	e001      	b.n	80014c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80014c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4929      	ldr	r1, [pc, #164]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d101      	bne.n	80014d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014d2:	e001      	b.n	80014d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80014d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f043 0202 	orr.w	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fdfa 	bl	80010ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d131      	bne.n	8001566 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02c      	beq.n	8001566 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001518:	e001      	b.n	800151e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800151a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4912      	ldr	r1, [pc, #72]	; (8001570 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001526:	428b      	cmp	r3, r1
 8001528:	d101      	bne.n	800152e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800152c:	e001      	b.n	8001532 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800152e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001532:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001536:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001546:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f043 0204 	orr.w	r2, r3, #4
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fdc5 	bl	80010ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001562:	e000      	b.n	8001566 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001564:	bf00      	nop
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40003800 	.word	0x40003800
 8001574:	40003400 	.word	0x40003400

08001578 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c99      	adds	r1, r3, #2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6251      	str	r1, [r2, #36]	; 0x24
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d113      	bne.n	80015e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d106      	bne.n	80015e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ffc9 	bl	8001578 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	1c99      	adds	r1, r3, #2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6251      	str	r1, [r2, #36]	; 0x24
 8001602:	8819      	ldrh	r1, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <I2SEx_TxISR_I2SExt+0x90>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <I2SEx_TxISR_I2SExt+0x22>
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <I2SEx_TxISR_I2SExt+0x94>)
 8001610:	e001      	b.n	8001616 <I2SEx_TxISR_I2SExt+0x26>
 8001612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001616:	460a      	mov	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	3b01      	subs	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162c:	b29b      	uxth	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d121      	bne.n	8001676 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <I2SEx_TxISR_I2SExt+0x90>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <I2SEx_TxISR_I2SExt+0x50>
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <I2SEx_TxISR_I2SExt+0x94>)
 800163e:	e001      	b.n	8001644 <I2SEx_TxISR_I2SExt+0x54>
 8001640:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	490d      	ldr	r1, [pc, #52]	; (8001680 <I2SEx_TxISR_I2SExt+0x90>)
 800164c:	428b      	cmp	r3, r1
 800164e:	d101      	bne.n	8001654 <I2SEx_TxISR_I2SExt+0x64>
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <I2SEx_TxISR_I2SExt+0x94>)
 8001652:	e001      	b.n	8001658 <I2SEx_TxISR_I2SExt+0x68>
 8001654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001658:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800165c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001662:	b29b      	uxth	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff81 	bl	8001578 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40003800 	.word	0x40003800
 8001684:	40003400 	.word	0x40003400

08001688 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68d8      	ldr	r0, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	1c99      	adds	r1, r3, #2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	62d1      	str	r1, [r2, #44]	; 0x2c
 80016a0:	b282      	uxth	r2, r0
 80016a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d113      	bne.n	80016e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4a 	bl	8001578 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <I2SEx_RxISR_I2SExt+0x90>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <I2SEx_RxISR_I2SExt+0x16>
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <I2SEx_RxISR_I2SExt+0x94>)
 8001700:	e001      	b.n	8001706 <I2SEx_RxISR_I2SExt+0x1a>
 8001702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001706:	68d8      	ldr	r0, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	1c99      	adds	r1, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001712:	b282      	uxth	r2, r0
 8001714:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001728:	b29b      	uxth	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d121      	bne.n	8001772 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <I2SEx_RxISR_I2SExt+0x90>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <I2SEx_RxISR_I2SExt+0x50>
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <I2SEx_RxISR_I2SExt+0x94>)
 800173a:	e001      	b.n	8001740 <I2SEx_RxISR_I2SExt+0x54>
 800173c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <I2SEx_RxISR_I2SExt+0x90>)
 8001748:	428b      	cmp	r3, r1
 800174a:	d101      	bne.n	8001750 <I2SEx_RxISR_I2SExt+0x64>
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <I2SEx_RxISR_I2SExt+0x94>)
 800174e:	e001      	b.n	8001754 <I2SEx_RxISR_I2SExt+0x68>
 8001750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001754:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001758:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff03 	bl	8001578 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40003800 	.word	0x40003800
 8001780:	40003400 	.word	0x40003400

08001784 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	b08f      	sub	sp, #60	; 0x3c
 8001788:	af0a      	add	r7, sp, #40	; 0x28
 800178a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e10f      	b.n	80019b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f006 fdd1 	bl	8008358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 ff66 	bl	80046a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	687e      	ldr	r6, [r7, #4]
 80017e2:	466d      	mov	r5, sp
 80017e4:	f106 0410 	add.w	r4, r6, #16
 80017e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f8:	1d33      	adds	r3, r6, #4
 80017fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f002 fe3d 	bl	800447c <USB_CoreInit>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0d0      	b.n	80019b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f002 ff54 	bl	80046c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e04a      	b.n	80018bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	333d      	adds	r3, #61	; 0x3d
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	333c      	adds	r3, #60	; 0x3c
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	b298      	uxth	r0, r3
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	3342      	adds	r3, #66	; 0x42
 8001862:	4602      	mov	r2, r0
 8001864:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	333f      	adds	r3, #63	; 0x3f
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3344      	adds	r3, #68	; 0x44
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3348      	adds	r3, #72	; 0x48
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3350      	adds	r3, #80	; 0x50
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	3301      	adds	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3af      	bcc.n	8001826 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e044      	b.n	8001956 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3b5      	bcc.n	80018cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	687e      	ldr	r6, [r7, #4]
 8001968:	466d      	mov	r5, sp
 800196a:	f106 0410 	add.w	r4, r6, #16
 800196e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800197a:	e885 0003 	stmia.w	r5, {r0, r1}
 800197e:	1d33      	adds	r3, r6, #4
 8001980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f002 feca 	bl	800471c <USB_DevInit>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00d      	b.n	80019b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 febf 	bl	8005732 <USB_DevDisconnect>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_PCD_Start+0x1c>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e020      	b.n	8001a1c <HAL_PCD_Start+0x5e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d109      	bne.n	80019fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fe7d 	bl	8005702 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fe39 	bl	8004684 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b08d      	sub	sp, #52	; 0x34
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 ff24 	bl	8005888 <USB_GetMode>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 838e 	bne.w	8002164 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 fe88 	bl	8005762 <USB_ReadInterrupts>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8384 	beq.w	8002162 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fe7f 	bl	8005762 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f002 0202 	and.w	r2, r2, #2
 8001a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fe6d 	bl	8005762 <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a92:	d17b      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fe73 	bl	8005788 <USB_ReadDevAllOutEpInterrupt>
 8001aa2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001aa4:	e06f      	b.n	8001b86 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d064      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fe98 	bl	80057f0 <USB_ReadDevOutEPInterrupt>
 8001ac0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2301      	movs	r3, #1
 8001adc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fe0d 	bl	8002700 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 ff0c 	bl	8002910 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b04:	461a      	mov	r2, r3
 8001b06:	2308      	movs	r3, #8
 8001b08:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b20:	461a      	mov	r2, r3
 8001b22:	2310      	movs	r3, #16
 8001b24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d015      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b42:	461a      	mov	r2, r3
 8001b44:	2101      	movs	r1, #1
 8001b46:	f003 fee3 	bl	8005910 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	015a      	lsls	r2, r3, #5
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b56:	461a      	mov	r2, r3
 8001b58:	2320      	movs	r3, #32
 8001b5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b72:	461a      	mov	r2, r3
 8001b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d18c      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fde6 	bl	8005762 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ba0:	f040 80c4 	bne.w	8001d2c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fe07 	bl	80057bc <USB_ReadDevAllInEpInterrupt>
 8001bae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bb4:	e0b6      	b.n	8001d24 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80ab 	beq.w	8001d18 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 fe2d 	bl	800582c <USB_ReadDevInEPInterrupt>
 8001bd2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d05b      	beq.n	8001c96 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	2201      	movs	r2, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69f9      	ldr	r1, [r7, #28]
 8001bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001bfe:	4013      	ands	r3, r2
 8001c00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2301      	movs	r3, #1
 8001c12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d11b      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3348      	adds	r3, #72	; 0x48
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4403      	add	r3, r0
 8001c3c:	3344      	adds	r3, #68	; 0x44
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4419      	add	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4403      	add	r3, r0
 8001c50:	3348      	adds	r3, #72	; 0x48
 8001c52:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f006 fc0b 	bl	8008476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d116      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d113      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x272>
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3350      	adds	r3, #80	; 0x50
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2101      	movs	r1, #1
 8001c92:	f003 fe3d 	bl	8005910 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cac:	461a      	mov	r2, r3
 8001cae:	2308      	movs	r3, #8
 8001cb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2310      	movs	r3, #16
 8001ccc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2340      	movs	r3, #64	; 0x40
 8001ce8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d00:	461a      	mov	r2, r3
 8001d02:	2302      	movs	r3, #2
 8001d04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 fc67 	bl	80025e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f47f af45 	bne.w	8001bb6 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fd16 	bl	8005762 <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d40:	d122      	bne.n	8001d88 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d108      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fe88 	bl	8002a80 <HAL_PCDEx_LPM_Callback>
 8001d70:	e002      	b.n	8001d78 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 fbf6 	bl	8008564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fce8 	bl	8005762 <USB_ReadInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d9c:	d112      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f006 fbb2 	bl	8008518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001dc2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fcca 	bl	8005762 <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd8:	f040 80a7 	bne.w	8001f2a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2110      	movs	r1, #16
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fe02 	bl	8004a00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	e036      	b.n	8001e70 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e26:	0151      	lsls	r1, r2, #5
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	440a      	add	r2, r1
 8001e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e42:	461a      	mov	r2, r3
 8001e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5a:	0151      	lsls	r1, r2, #5
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	440a      	add	r2, r1
 8001e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3c3      	bcc.n	8001e02 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea6:	f043 030b 	orr.w	r3, r3, #11
 8001eaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ebc:	f043 030b 	orr.w	r3, r3, #11
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	e015      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ed6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001eda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eea:	f043 030b 	orr.w	r3, r3, #11
 8001eee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001efe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f14:	461a      	mov	r2, r3
 8001f16:	f003 fcfb 	bl	8005910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fc17 	bl	8005762 <USB_ReadInterrupts>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	d124      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fcad 	bl	80058a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fdb7 	bl	8004ac2 <USB_GetDevSpeed>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681c      	ldr	r4, [r3, #0]
 8001f60:	f001 f996 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 8001f64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f002 fae6 	bl	8004540 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f006 faa6 	bl	80084c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fbe7 	bl	8005762 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d161      	bne.n	8002062 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0210 	bic.w	r2, r2, #16
 8001fac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	0c5b      	lsrs	r3, r3, #17
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d124      	bne.n	8002024 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d035      	beq.n	8002052 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a38      	ldr	r0, [r7, #32]
 8001ffa:	f003 fa5f 	bl	80054bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800200a:	441a      	add	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201c:	441a      	add	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	e016      	b.n	8002052 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	0c5b      	lsrs	r3, r3, #17
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	2b06      	cmp	r3, #6
 800202e:	d110      	bne.n	8002052 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002036:	2208      	movs	r2, #8
 8002038:	4619      	mov	r1, r3
 800203a:	6a38      	ldr	r0, [r7, #32]
 800203c:	f003 fa3e 	bl	80054bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204c:	441a      	add	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0210 	orr.w	r2, r2, #16
 8002060:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fb7b 	bl	8005762 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b08      	cmp	r3, #8
 8002074:	d10a      	bne.n	800208c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f006 fa17 	bl	80084aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f002 0208 	and.w	r2, r2, #8
 800208a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fb66 	bl	8005762 <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020a0:	d10f      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f006 fa79 	bl	80085a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fb4b 	bl	8005762 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d6:	d10f      	bne.n	80020f8 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f006 fa4c 	bl	8008580 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fb30 	bl	8005762 <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d10a      	bne.n	8002124 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f006 fa5a 	bl	80085c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fb1a 	bl	8005762 <USB_ReadInterrupts>
 800212e:	4603      	mov	r3, r0
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d115      	bne.n	8002164 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f006 fa4a 	bl	80085e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	e000      	b.n	8002164 <HAL_PCD_IRQHandler+0x740>
      return;
 8002162:	bf00      	nop
    }
  }
}
 8002164:	3734      	adds	r7, #52	; 0x34
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}

0800216a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_SetAddress+0x1a>
 8002180:	2302      	movs	r3, #2
 8002182:	e013      	b.n	80021ac <HAL_PCD_SetAddress+0x42>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fa8a 	bl	80056b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	803b      	strh	r3, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da0f      	bge.n	80021fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	3338      	adds	r3, #56	; 0x38
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	705a      	strb	r2, [r3, #1]
 80021f8:	e00f      	b.n	800221a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 020f 	and.w	r2, r3, #15
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002226:	883a      	ldrh	r2, [r7, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	78ba      	ldrb	r2, [r7, #2]
 8002230:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002244:	78bb      	ldrb	r3, [r7, #2]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d102      	bne.n	8002250 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_PCD_EP_Open+0xaa>
 800225a:	2302      	movs	r3, #2
 800225c:	e00e      	b.n	800227c <HAL_PCD_EP_Open+0xc8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fc4d 	bl	8004b0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800227a:	7afb      	ldrb	r3, [r7, #11]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002294:	2b00      	cmp	r3, #0
 8002296:	da0f      	bge.n	80022b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	3338      	adds	r3, #56	; 0x38
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	705a      	strb	r2, [r3, #1]
 80022b6:	e00f      	b.n	80022d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 020f 	and.w	r2, r3, #15
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_Close+0x6e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e00e      	b.n	8002310 <HAL_PCD_EP_Close+0x8c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f002 fc8b 	bl	8004c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	460b      	mov	r3, r1
 8002326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2200      	movs	r2, #0
 8002358:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800235a:	7afb      	ldrb	r3, [r7, #11]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	b2da      	uxtb	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	f002 ff0e 	bl	80051ac <USB_EP0StartXfer>
 8002390:	e008      	b.n	80023a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6979      	ldr	r1, [r7, #20]
 80023a0:	f002 fcc0 	bl	8004d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	f003 020f 	and.w	r2, r3, #15
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023d0:	681b      	ldr	r3, [r3, #0]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	460b      	mov	r3, r1
 80023ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ee:	7afb      	ldrb	r3, [r7, #11]
 80023f0:	f003 020f 	and.w	r2, r3, #15
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3338      	adds	r3, #56	; 0x38
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	3304      	adds	r3, #4
 8002404:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2201      	movs	r2, #1
 800241c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	b2da      	uxtb	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	6979      	ldr	r1, [r7, #20]
 8002450:	f002 feac 	bl	80051ac <USB_EP0StartXfer>
 8002454:	e008      	b.n	8002468 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6979      	ldr	r1, [r7, #20]
 8002464:	f002 fc5e 	bl	8004d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f003 020f 	and.w	r2, r3, #15
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d901      	bls.n	8002490 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e050      	b.n	8002532 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002494:	2b00      	cmp	r3, #0
 8002496:	da0f      	bge.n	80024b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 020f 	and.w	r2, r3, #15
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	3338      	adds	r3, #56	; 0x38
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	705a      	strb	r2, [r3, #1]
 80024b6:	e00d      	b.n	80024d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	3304      	adds	r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_PCD_EP_SetStall+0x82>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e01e      	b.n	8002532 <HAL_PCD_EP_SetStall+0xc0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 f803 	bl	800550e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	b2d9      	uxtb	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002522:	461a      	mov	r2, r3
 8002524:	f003 f9f4 	bl	8005910 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d901      	bls.n	8002558 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e042      	b.n	80025de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800255c:	2b00      	cmp	r3, #0
 800255e:	da0f      	bge.n	8002580 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	f003 020f 	and.w	r2, r3, #15
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	3338      	adds	r3, #56	; 0x38
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	705a      	strb	r2, [r3, #1]
 800257e:	e00f      	b.n	80025a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	f003 020f 	and.w	r2, r3, #15
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	3304      	adds	r3, #4
 8002598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_PCD_EP_ClrStall+0x86>
 80025bc:	2302      	movs	r3, #2
 80025be:	e00e      	b.n	80025de <HAL_PCD_EP_ClrStall+0xa4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f80b 	bl	80055ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b08a      	sub	sp, #40	; 0x28
 80025ea:	af02      	add	r7, sp, #8
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	3338      	adds	r3, #56	; 0x38
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	3304      	adds	r3, #4
 800260c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	429a      	cmp	r2, r3
 8002618:	d901      	bls.n	800261e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06c      	b.n	80026f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	429a      	cmp	r2, r3
 8002632:	d902      	bls.n	800263a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3303      	adds	r3, #3
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002642:	e02b      	b.n	800269c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	429a      	cmp	r2, r3
 8002658:	d902      	bls.n	8002660 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	3303      	adds	r3, #3
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68d9      	ldr	r1, [r3, #12]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002678:	b2db      	uxtb	r3, r3
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4603      	mov	r3, r0
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f002 fee7 	bl	8005452 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	441a      	add	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	441a      	add	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d809      	bhi.n	80026c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d203      	bcs.n	80026c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1be      	bne.n	8002644 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d811      	bhi.n	80026f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2201      	movs	r2, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026f2:	4013      	ands	r3, r2
 80026f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	333c      	adds	r3, #60	; 0x3c
 8002718:	3304      	adds	r3, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	f040 80b3 	bne.w	800289e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d028      	beq.n	8002794 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a70      	ldr	r2, [pc, #448]	; (8002908 <PCD_EP_OutXfrComplete_int+0x208>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d90e      	bls.n	8002768 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002766:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f005 fe57 	bl	800841c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002778:	461a      	mov	r2, r3
 800277a:	2101      	movs	r1, #1
 800277c:	f003 f8c8 	bl	8005910 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	461a      	mov	r2, r3
 800278e:	2308      	movs	r3, #8
 8002790:	6093      	str	r3, [r2, #8]
 8002792:	e0b3      	b.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0320 	and.w	r3, r3, #32
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027aa:	461a      	mov	r2, r3
 80027ac:	2320      	movs	r3, #32
 80027ae:	6093      	str	r3, [r2, #8]
 80027b0:	e0a4      	b.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 809f 	bne.w	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a51      	ldr	r2, [pc, #324]	; (8002908 <PCD_EP_OutXfrComplete_int+0x208>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d90f      	bls.n	80027e6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e2:	6093      	str	r3, [r2, #8]
 80027e4:	e08a      	b.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027f8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	0159      	lsls	r1, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	440b      	add	r3, r1
 8002802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800280c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4403      	add	r3, r0
 800281c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002820:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4403      	add	r3, r0
 8002844:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4419      	add	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4403      	add	r3, r0
 800285a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800285e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f005 fdea 	bl	8008440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d144      	bne.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d138      	bne.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002894:	461a      	mov	r2, r3
 8002896:	2101      	movs	r1, #1
 8002898:	f003 f83a 	bl	8005910 <USB_EP0_OutStart>
 800289c:	e02e      	b.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a1a      	ldr	r2, [pc, #104]	; (800290c <PCD_EP_OutXfrComplete_int+0x20c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d124      	bne.n	80028f0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c2:	6093      	str	r3, [r2, #8]
 80028c4:	e01a      	b.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028dc:	461a      	mov	r2, r3
 80028de:	2320      	movs	r3, #32
 80028e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f005 fda9 	bl	8008440 <HAL_PCD_DataOutStageCallback>
 80028ee:	e005      	b.n	80028fc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f005 fda2 	bl	8008440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	4f54300a 	.word	0x4f54300a
 800290c:	4f54310a 	.word	0x4f54310a

08002910 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	333c      	adds	r3, #60	; 0x3c
 8002928:	3304      	adds	r3, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d113      	bne.n	800296e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d922      	bls.n	8002994 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01d      	beq.n	8002994 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	461a      	mov	r2, r3
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	6093      	str	r3, [r2, #8]
 800296c:	e012      	b.n	8002994 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <PCD_EP_OutSetupPacket_int+0xbc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10e      	bne.n	8002994 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002992:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f005 fd41 	bl	800841c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d90c      	bls.n	80029bc <PCD_EP_OutSetupPacket_int+0xac>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029b4:	461a      	mov	r2, r3
 80029b6:	2101      	movs	r1, #1
 80029b8:	f002 ffaa 	bl	8005910 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	4f54300a 	.word	0x4f54300a
 80029cc:	4f54310a 	.word	0x4f54310a

080029d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
 80029dc:	4613      	mov	r3, r2
 80029de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029ee:	883b      	ldrh	r3, [r7, #0]
 80029f0:	0419      	lsls	r1, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
 80029fc:	e028      	b.n	8002a50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4413      	add	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e00d      	b.n	8002a2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3340      	adds	r3, #64	; 0x40
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3ec      	bcc.n	8002a12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a38:	883b      	ldrh	r3, [r7, #0]
 8002a3a:	0418      	lsls	r0, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	4302      	orrs	r2, r0
 8002a48:	3340      	adds	r3, #64	; 0x40
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e22d      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d075      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab6:	4ba3      	ldr	r3, [pc, #652]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00c      	beq.n	8002adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac2:	4ba0      	ldr	r3, [pc, #640]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d112      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ace:	4b9d      	ldr	r3, [pc, #628]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4b99      	ldr	r3, [pc, #612]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d05b      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x108>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d157      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e208      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x74>
 8002afe:	4b91      	ldr	r3, [pc, #580]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a90      	ldr	r2, [pc, #576]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xb0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x98>
 8002b16:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a8a      	ldr	r2, [pc, #552]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xb0>
 8002b30:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a83      	ldr	r2, [pc, #524]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b81      	ldr	r3, [pc, #516]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a80      	ldr	r2, [pc, #512]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fd fd20 	bl	8000594 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fd fd1c 	bl	8000594 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1cd      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xc0>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fd fd0c 	bl	8000594 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fd fd08 	bl	8000594 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1b9      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0xe8>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bae:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b5f      	ldr	r3, [pc, #380]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b5c      	ldr	r3, [pc, #368]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x152>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e18d      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4952      	ldr	r1, [pc, #328]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_RCC_OscConfig+0x2b0>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fd fcc1 	bl	8000594 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fd fcbd 	bl	8000594 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e16e      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4940      	ldr	r1, [pc, #256]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x2b0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fd fca0 	bl	8000594 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fd fc9c 	bl	8000594 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e14d      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d030      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_RCC_OscConfig+0x2b4>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fd fc80 	bl	8000594 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fd fc7c 	bl	8000594 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e12d      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x200>
 8002cb6:	e015      	b.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCC_OscConfig+0x2b4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fd fc69 	bl	8000594 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fd fc65 	bl	8000594 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e116      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a0 	beq.w	8002e32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x2b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_RCC_OscConfig+0x2b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_RCC_OscConfig+0x2b8>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7fd fc2b 	bl	8000594 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e011      	b.n	8002d66 <HAL_RCC_OscConfig+0x2ce>
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	42470000 	.word	0x42470000
 8002d4c:	42470e80 	.word	0x42470e80
 8002d50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7fd fc1e 	bl	8000594 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0cf      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x478>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e01c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x32a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0x312>
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a5c      	ldr	r2, [pc, #368]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x32a>
 8002daa:	4b5a      	ldr	r3, [pc, #360]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a59      	ldr	r2, [pc, #356]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	4b57      	ldr	r3, [pc, #348]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a56      	ldr	r2, [pc, #344]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d015      	beq.n	8002df6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fd fbe3 	bl	8000594 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fd fbdf 	bl	8000594 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e08e      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ee      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x33a>
 8002df4:	e014      	b.n	8002e20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fd fbcd 	bl	8000594 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fd fbc9 	bl	8000594 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e078      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d064      	beq.n	8002f04 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3a:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d05c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d141      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x480>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fd fb9e 	bl	8000594 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fd fb9a 	bl	8000594 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e04b      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	085b      	lsrs	r3, r3, #1
 8002e92:	3b01      	subs	r3, #1
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	491d      	ldr	r1, [pc, #116]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_RCC_OscConfig+0x480>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fd fb73 	bl	8000594 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fd fb6f 	bl	8000594 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e020      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x41a>
 8002ed0:	e018      	b.n	8002f04 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_OscConfig+0x480>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fd fb5c 	bl	8000594 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fd fb58 	bl	8000594 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e009      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCC_OscConfig+0x47c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x448>
 8002efe:	e001      	b.n	8002f04 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40007000 	.word	0x40007000
 8002f14:	40023800 	.word	0x40023800
 8002f18:	42470060 	.word	0x42470060

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0ca      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d90c      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b62      	ldr	r3, [pc, #392]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b6      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a57      	ldr	r2, [pc, #348]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b52      	ldr	r3, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a51      	ldr	r2, [pc, #324]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494c      	ldr	r1, [pc, #304]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d044      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07d      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06d      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e065      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4933      	ldr	r1, [pc, #204]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fd fac2 	bl	8000594 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fd fabe 	bl	8000594 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04d      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d20c      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b1f      	ldr	r3, [pc, #124]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e030      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4915      	ldr	r1, [pc, #84]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490d      	ldr	r1, [pc, #52]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f81d 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80030a6:	4601      	mov	r1, r0
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fd fa24 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08008e3c 	.word	0x08008e3c
 80030dc:	20000118 	.word	0x20000118

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	2300      	movs	r3, #0
 80030f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d007      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x32>
 8003102:	2b08      	cmp	r3, #8
 8003104:	d008      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x38>
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 80b4 	bne.w	8003274 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800310e:	60bb      	str	r3, [r7, #8]
       break;
 8003110:	e0b3      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003112:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003114:	60bb      	str	r3, [r7, #8]
      break;
 8003116:	e0b0      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003118:	4b5a      	ldr	r3, [pc, #360]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003122:	4b58      	ldr	r3, [pc, #352]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04a      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312e:	4b55      	ldr	r3, [pc, #340]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	099b      	lsrs	r3, r3, #6
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	f240 11ff 	movw	r1, #511	; 0x1ff
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	ea03 0501 	and.w	r5, r3, r1
 8003144:	ea04 0602 	and.w	r6, r4, r2
 8003148:	4629      	mov	r1, r5
 800314a:	4632      	mov	r2, r6
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f04f 0400 	mov.w	r4, #0
 8003154:	0154      	lsls	r4, r2, #5
 8003156:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800315a:	014b      	lsls	r3, r1, #5
 800315c:	4619      	mov	r1, r3
 800315e:	4622      	mov	r2, r4
 8003160:	1b49      	subs	r1, r1, r5
 8003162:	eb62 0206 	sbc.w	r2, r2, r6
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	0194      	lsls	r4, r2, #6
 8003170:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003174:	018b      	lsls	r3, r1, #6
 8003176:	1a5b      	subs	r3, r3, r1
 8003178:	eb64 0402 	sbc.w	r4, r4, r2
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	00e2      	lsls	r2, r4, #3
 8003186:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800318a:	00d9      	lsls	r1, r3, #3
 800318c:	460b      	mov	r3, r1
 800318e:	4614      	mov	r4, r2
 8003190:	195b      	adds	r3, r3, r5
 8003192:	eb44 0406 	adc.w	r4, r4, r6
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	0262      	lsls	r2, r4, #9
 80031a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031a4:	0259      	lsls	r1, r3, #9
 80031a6:	460b      	mov	r3, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	4621      	mov	r1, r4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	f7fd f806 	bl	80001c8 <__aeabi_uldivmod>
 80031bc:	4603      	mov	r3, r0
 80031be:	460c      	mov	r4, r1
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e049      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c4:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	ea03 0501 	and.w	r5, r3, r1
 80031da:	ea04 0602 	and.w	r6, r4, r2
 80031de:	4629      	mov	r1, r5
 80031e0:	4632      	mov	r2, r6
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	f04f 0400 	mov.w	r4, #0
 80031ea:	0154      	lsls	r4, r2, #5
 80031ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031f0:	014b      	lsls	r3, r1, #5
 80031f2:	4619      	mov	r1, r3
 80031f4:	4622      	mov	r2, r4
 80031f6:	1b49      	subs	r1, r1, r5
 80031f8:	eb62 0206 	sbc.w	r2, r2, r6
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	f04f 0400 	mov.w	r4, #0
 8003204:	0194      	lsls	r4, r2, #6
 8003206:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800320a:	018b      	lsls	r3, r1, #6
 800320c:	1a5b      	subs	r3, r3, r1
 800320e:	eb64 0402 	sbc.w	r4, r4, r2
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	00e2      	lsls	r2, r4, #3
 800321c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003220:	00d9      	lsls	r1, r3, #3
 8003222:	460b      	mov	r3, r1
 8003224:	4614      	mov	r4, r2
 8003226:	195b      	adds	r3, r3, r5
 8003228:	eb44 0406 	adc.w	r4, r4, r6
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	02a2      	lsls	r2, r4, #10
 8003236:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800323a:	0299      	lsls	r1, r3, #10
 800323c:	460b      	mov	r3, r1
 800323e:	4614      	mov	r4, r2
 8003240:	4618      	mov	r0, r3
 8003242:	4621      	mov	r1, r4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	461a      	mov	r2, r3
 800324c:	4623      	mov	r3, r4
 800324e:	f7fc ffbb 	bl	80001c8 <__aeabi_uldivmod>
 8003252:	4603      	mov	r3, r0
 8003254:	460c      	mov	r4, r1
 8003256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	3301      	adds	r3, #1
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	60bb      	str	r3, [r7, #8]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003276:	60bb      	str	r3, [r7, #8]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	68bb      	ldr	r3, [r7, #8]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000118 	.word	0x20000118

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032ac:	f7ff fff0 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0a9b      	lsrs	r3, r3, #10
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4a03      	ldr	r2, [pc, #12]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	08008e4c 	.word	0x08008e4c

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d035      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032f8:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032fe:	f7fd f949 	bl	8000594 <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003306:	f7fd f945 	bl	8000594 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0b0      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003318:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	019a      	lsls	r2, r3, #6
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	071b      	lsls	r3, r3, #28
 8003330:	4955      	ldr	r1, [pc, #340]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003338:	4b52      	ldr	r3, [pc, #328]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800333e:	f7fd f929 	bl	8000594 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003346:	f7fd f925 	bl	8000594 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e090      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8083 	beq.w	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b44      	ldr	r3, [pc, #272]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a43      	ldr	r2, [pc, #268]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a3e      	ldr	r2, [pc, #248]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800339a:	f7fd f8fb 	bl	8000594 <HAL_GetTick>
 800339e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fd f8f7 	bl	8000594 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e062      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033b4:	4b35      	ldr	r3, [pc, #212]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c0:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02f      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d028      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033f4:	4a24      	ldr	r2, [pc, #144]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033fa:	4b23      	ldr	r3, [pc, #140]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d114      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003406:	f7fd f8c5 	bl	8000594 <HAL_GetTick>
 800340a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fd f8c1 	bl	8000594 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e02a      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343c:	d10d      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	490d      	ldr	r1, [pc, #52]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]
 8003458:	e005      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003460:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003464:	6093      	str	r3, [r2, #8]
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003472:	4905      	ldr	r1, [pc, #20]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	42470068 	.word	0x42470068
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
 8003490:	42470e40 	.word	0x42470e40

08003494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d13d      	bne.n	800352e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d12f      	bne.n	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80034c8:	617b      	str	r3, [r7, #20]
          break;
 80034ca:	e02f      	b.n	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d8:	d108      	bne.n	80034ec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e007      	b.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80034fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003516:	0f1b      	lsrs	r3, r3, #28
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	617b      	str	r3, [r7, #20]
          break;
 8003524:	e002      	b.n	800352c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
          break;
 800352a:	bf00      	nop
        }
      }
      break;
 800352c:	bf00      	nop
    }
  }
  return frequency;
 800352e:	697b      	ldr	r3, [r7, #20]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40023800 	.word	0x40023800
 8003540:	00bb8000 	.word	0x00bb8000
 8003544:	007a1200 	.word	0x007a1200
 8003548:	00f42400 	.word	0x00f42400

0800354c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e056      	b.n	800360c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f004 fc29 	bl	8007dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003594:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	ea42 0103 	orr.w	r1, r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	f003 0104 	and.w	r1, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e01d      	b.n	8003662 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f004 fc10 	bl	8007e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fb58 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d007      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e01d      	b.n	8003700 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f815 	bl	8003708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 fb09 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fdd4 	bl	80042dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <HAL_TIM_PWM_Start+0x74>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_PWM_Start+0x2c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <HAL_TIM_PWM_Start+0x78>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_TIM_PWM_Start+0x30>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_TIM_PWM_Start+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d007      	beq.n	8003784 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40010400 	.word	0x40010400

08003798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0202 	mvn.w	r2, #2
 80037c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa75 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa67 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fa78 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0204 	mvn.w	r2, #4
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa4b 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fa3d 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa4e 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b08      	cmp	r3, #8
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0208 	mvn.w	r2, #8
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa21 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa13 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fa24 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0210 	mvn.w	r2, #16
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2208      	movs	r2, #8
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9f7 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9e9 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9fa 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0201 	mvn.w	r2, #1
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9c3 	bl	8003ca2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d10e      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d107      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fd90 	bl	8004468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9bf 	bl	8003cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b20      	cmp	r3, #32
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b20      	cmp	r3, #32
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0220 	mvn.w	r2, #32
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fd5a 	bl	8004454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0b4      	b.n	8003b2c <HAL_TIM_PWM_ConfigChannel+0x184>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	f200 809f 	bhi.w	8003b18 <HAL_TIM_PWM_ConfigChannel+0x170>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003b19 	.word	0x08003b19
 80039e8:	08003b19 	.word	0x08003b19
 80039ec:	08003b19 	.word	0x08003b19
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	08003b19 	.word	0x08003b19
 80039fc:	08003b19 	.word	0x08003b19
 8003a00:	08003a97 	.word	0x08003a97
 8003a04:	08003b19 	.word	0x08003b19
 8003a08:	08003b19 	.word	0x08003b19
 8003a0c:	08003b19 	.word	0x08003b19
 8003a10:	08003ad7 	.word	0x08003ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa14 	bl	8003e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e062      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fa64 	bl	8003f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e041      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fab9 	bl	8004014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e021      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb0d 	bl	80040fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_TIM_ConfigClockSource+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e0a6      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x166>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d067      	beq.n	8003c54 <HAL_TIM_ConfigClockSource+0x120>
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d80b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x6c>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d073      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d802      	bhi.n	8003b96 <HAL_TIM_ConfigClockSource+0x62>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d06f      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b94:	e078      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d06c      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
 8003b9a:	2b30      	cmp	r3, #48	; 0x30
 8003b9c:	d06a      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b9e:	e073      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x8c>
 8003ba4:	2b70      	cmp	r3, #112	; 0x70
 8003ba6:	d804      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x7e>
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d033      	beq.n	8003c14 <HAL_TIM_ConfigClockSource+0xe0>
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d041      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bb0:	e06a      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d066      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x152>
 8003bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbc:	d017      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bbe:	e063      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f000 fb64 	bl	800429c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
      break;
 8003bec:	e04c      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f000 fb4d 	bl	800429c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c10:	609a      	str	r2, [r3, #8]
      break;
 8003c12:	e039      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f000 fac1 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2150      	movs	r1, #80	; 0x50
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fb1a 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003c32:	e029      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f000 fae0 	bl	8004206 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2160      	movs	r1, #96	; 0x60
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fb0a 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003c52:	e019      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	461a      	mov	r2, r3
 8003c62:	f000 faa1 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fafa 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003c72:	e009      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 faf1 	bl	8004266 <TIM_ITRx_SetConfig>
      break;
 8003c84:	e000      	b.n	8003c88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a40      	ldr	r2, [pc, #256]	; (8003e1c <TIM_Base_SetConfig+0x114>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d00f      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <TIM_Base_SetConfig+0x118>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <TIM_Base_SetConfig+0x120>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <TIM_Base_SetConfig+0x114>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02b      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d027      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <TIM_Base_SetConfig+0x118>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d023      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <TIM_Base_SetConfig+0x120>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01b      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d017      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	; (8003e30 <TIM_Base_SetConfig+0x128>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <TIM_Base_SetConfig+0x12c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <TIM_Base_SetConfig+0x130>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <TIM_Base_SetConfig+0x134>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a24      	ldr	r2, [pc, #144]	; (8003e40 <TIM_Base_SetConfig+0x138>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <TIM_Base_SetConfig+0x13c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <TIM_Base_SetConfig+0x114>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_Base_SetConfig+0xf8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	615a      	str	r2, [r3, #20]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40010400 	.word	0x40010400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800
 8003e3c:	40001800 	.word	0x40001800
 8003e40:	40001c00 	.word	0x40001c00
 8003e44:	40002000 	.word	0x40002000

08003e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0201 	bic.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <TIM_OC1_SetConfig+0xd8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC1_SetConfig+0x64>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <TIM_OC1_SetConfig+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10c      	bne.n	8003ec6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0308 	bic.w	r3, r3, #8
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <TIM_OC1_SetConfig+0xd8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC1_SetConfig+0x8e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <TIM_OC1_SetConfig+0xdc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d111      	bne.n	8003efa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40010400 	.word	0x40010400

08003f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0210 	bic.w	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0320 	bic.w	r3, r3, #32
 8003f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a22      	ldr	r2, [pc, #136]	; (800400c <TIM_OC2_SetConfig+0xe4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_OC2_SetConfig+0x68>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a21      	ldr	r2, [pc, #132]	; (8004010 <TIM_OC2_SetConfig+0xe8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10d      	bne.n	8003fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <TIM_OC2_SetConfig+0xe4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC2_SetConfig+0x94>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <TIM_OC2_SetConfig+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d113      	bne.n	8003fe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40010400 	.word	0x40010400

08004014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <TIM_OC3_SetConfig+0xe0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC3_SetConfig+0x66>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <TIM_OC3_SetConfig+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10d      	bne.n	8004096 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <TIM_OC3_SetConfig+0xe0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_OC3_SetConfig+0x92>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <TIM_OC3_SetConfig+0xe4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d113      	bne.n	80040ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40010400 	.word	0x40010400

080040fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <TIM_OC4_SetConfig+0xa4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC4_SetConfig+0x68>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <TIM_OC4_SetConfig+0xa8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d109      	bne.n	8004178 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800416a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	019b      	lsls	r3, r3, #6
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 030a 	bic.w	r3, r3, #10
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b087      	sub	sp, #28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f023 0210 	bic.w	r2, r3, #16
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	031b      	lsls	r3, r3, #12
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	f043 0307 	orr.w	r3, r3, #7
 8004288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	431a      	orrs	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	609a      	str	r2, [r3, #8]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	2201      	movs	r2, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800433a:	2302      	movs	r3, #2
 800433c:	e032      	b.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004376:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e03d      	b.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800447c:	b084      	sub	sp, #16
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	f107 001c 	add.w	r0, r7, #28
 800448a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	2b01      	cmp	r3, #1
 8004492:	d122      	bne.n	80044da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d105      	bne.n	80044ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f001 fa7c 	bl	80059cc <USB_CoreReset>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e01a      	b.n	8004510 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f001 fa70 	bl	80059cc <USB_CoreReset>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
 8004502:	e005      	b.n	8004510 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	2b01      	cmp	r3, #1
 8004514:	d10b      	bne.n	800452e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f043 0206 	orr.w	r2, r3, #6
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800453a:	b004      	add	sp, #16
 800453c:	4770      	bx	lr
	...

08004540 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d165      	bne.n	8004620 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a41      	ldr	r2, [pc, #260]	; (800465c <USB_SetTurnaroundTime+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d906      	bls.n	800456a <USB_SetTurnaroundTime+0x2a>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a40      	ldr	r2, [pc, #256]	; (8004660 <USB_SetTurnaroundTime+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d802      	bhi.n	800456a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004564:	230f      	movs	r3, #15
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e062      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <USB_SetTurnaroundTime+0x120>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d906      	bls.n	8004580 <USB_SetTurnaroundTime+0x40>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a3b      	ldr	r2, [pc, #236]	; (8004664 <USB_SetTurnaroundTime+0x124>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d802      	bhi.n	8004580 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800457a:	230e      	movs	r3, #14
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	e057      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <USB_SetTurnaroundTime+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d906      	bls.n	8004596 <USB_SetTurnaroundTime+0x56>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a37      	ldr	r2, [pc, #220]	; (8004668 <USB_SetTurnaroundTime+0x128>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d802      	bhi.n	8004596 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004590:	230d      	movs	r3, #13
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e04c      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a33      	ldr	r2, [pc, #204]	; (8004668 <USB_SetTurnaroundTime+0x128>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d906      	bls.n	80045ac <USB_SetTurnaroundTime+0x6c>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a32      	ldr	r2, [pc, #200]	; (800466c <USB_SetTurnaroundTime+0x12c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d802      	bhi.n	80045ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045a6:	230c      	movs	r3, #12
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e041      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a2f      	ldr	r2, [pc, #188]	; (800466c <USB_SetTurnaroundTime+0x12c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d906      	bls.n	80045c2 <USB_SetTurnaroundTime+0x82>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a2e      	ldr	r2, [pc, #184]	; (8004670 <USB_SetTurnaroundTime+0x130>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d802      	bhi.n	80045c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045bc:	230b      	movs	r3, #11
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e036      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <USB_SetTurnaroundTime+0x130>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d906      	bls.n	80045d8 <USB_SetTurnaroundTime+0x98>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a29      	ldr	r2, [pc, #164]	; (8004674 <USB_SetTurnaroundTime+0x134>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d802      	bhi.n	80045d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045d2:	230a      	movs	r3, #10
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e02b      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a26      	ldr	r2, [pc, #152]	; (8004674 <USB_SetTurnaroundTime+0x134>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d906      	bls.n	80045ee <USB_SetTurnaroundTime+0xae>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a25      	ldr	r2, [pc, #148]	; (8004678 <USB_SetTurnaroundTime+0x138>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d802      	bhi.n	80045ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045e8:	2309      	movs	r3, #9
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e020      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a21      	ldr	r2, [pc, #132]	; (8004678 <USB_SetTurnaroundTime+0x138>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d906      	bls.n	8004604 <USB_SetTurnaroundTime+0xc4>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a20      	ldr	r2, [pc, #128]	; (800467c <USB_SetTurnaroundTime+0x13c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d802      	bhi.n	8004604 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045fe:	2308      	movs	r3, #8
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e015      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <USB_SetTurnaroundTime+0x13c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d906      	bls.n	800461a <USB_SetTurnaroundTime+0xda>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <USB_SetTurnaroundTime+0x140>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d802      	bhi.n	800461a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004614:	2307      	movs	r3, #7
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e00a      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800461a:	2306      	movs	r3, #6
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e007      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004626:	2309      	movs	r3, #9
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e001      	b.n	8004630 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800462c:	2309      	movs	r3, #9
 800462e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	029b      	lsls	r3, r3, #10
 8004644:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	00d8acbf 	.word	0x00d8acbf
 8004660:	00e4e1bf 	.word	0x00e4e1bf
 8004664:	00f423ff 	.word	0x00f423ff
 8004668:	0106737f 	.word	0x0106737f
 800466c:	011a499f 	.word	0x011a499f
 8004670:	01312cff 	.word	0x01312cff
 8004674:	014ca43f 	.word	0x014ca43f
 8004678:	016e35ff 	.word	0x016e35ff
 800467c:	01a6ab1f 	.word	0x01a6ab1f
 8004680:	01e847ff 	.word	0x01e847ff

08004684 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d106      	bne.n	80046f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e00b      	b.n	800470c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	e001      	b.n	800470c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e003      	b.n	8004714 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800470c:	2032      	movs	r0, #50	; 0x32
 800470e:	f7fb ff4d 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800471c:	b084      	sub	sp, #16
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800472a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e009      	b.n	8004750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3340      	adds	r3, #64	; 0x40
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b0e      	cmp	r3, #14
 8004754:	d9f2      	bls.n	800473c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d112      	bne.n	8004782 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
 8004780:	e00b      	b.n	800479a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	4619      	mov	r1, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	461a      	mov	r2, r3
 80047b6:	680b      	ldr	r3, [r1, #0]
 80047b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d10c      	bne.n	80047da <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047c6:	2100      	movs	r1, #0
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f961 	bl	8004a90 <USB_SetDevSpeed>
 80047ce:	e008      	b.n	80047e2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047d0:	2101      	movs	r1, #1
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f95c 	bl	8004a90 <USB_SetDevSpeed>
 80047d8:	e003      	b.n	80047e2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047da:	2103      	movs	r1, #3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f957 	bl	8004a90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047e2:	2110      	movs	r1, #16
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f90b 	bl	8004a00 <USB_FlushTxFifo>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f929 	bl	8004a4c <USB_FlushRxFifo>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	461a      	mov	r2, r3
 8004824:	2300      	movs	r3, #0
 8004826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e043      	b.n	80048b6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004844:	d118      	bne.n	8004878 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	461a      	mov	r2, r3
 800485a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e013      	b.n	800488a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	461a      	mov	r2, r3
 8004870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e008      	b.n	800488a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	461a      	mov	r2, r3
 8004886:	2300      	movs	r3, #0
 8004888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	461a      	mov	r2, r3
 80048aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3b7      	bcc.n	800482e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e043      	b.n	800494c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048da:	d118      	bne.n	800490e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	461a      	mov	r2, r3
 80048f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e013      	b.n	8004920 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e008      	b.n	8004920 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2300      	movs	r3, #0
 800491e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	2300      	movs	r3, #0
 8004930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	3301      	adds	r3, #1
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d3b7      	bcc.n	80048c4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004966:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2b01      	cmp	r3, #1
 800496c:	d111      	bne.n	8004992 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	461a      	mov	r2, r3
 8004976:	4b20      	ldr	r3, [pc, #128]	; (80049f8 <USB_DevInit+0x2dc>)
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498c:	f043 0303 	orr.w	r3, r3, #3
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800499e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d105      	bne.n	80049b2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f043 0210 	orr.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <USB_DevInit+0x2e0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f043 0208 	orr.w	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f2:	b004      	add	sp, #16
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	00800100 	.word	0x00800100
 80049fc:	803c3800 	.word	0x803c3800

08004a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <USB_FlushTxFifo+0x48>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e006      	b.n	8004a3a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d0f0      	beq.n	8004a1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	00030d40 	.word	0x00030d40

08004a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <USB_FlushRxFifo+0x40>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d901      	bls.n	8004a70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e006      	b.n	8004a7e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d0f0      	beq.n	8004a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	00030d40 	.word	0x00030d40

08004a90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	68f9      	ldr	r1, [r7, #12]
 8004aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b087      	sub	sp, #28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0306 	and.w	r3, r3, #6
 8004ada:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
 8004ae6:	e00a      	b.n	8004afe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d002      	beq.n	8004af4 <USB_GetDevSpeed+0x32>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d102      	bne.n	8004afa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004af4:	2302      	movs	r3, #2
 8004af6:	75fb      	strb	r3, [r7, #23]
 8004af8:	e001      	b.n	8004afe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004afa:	230f      	movs	r3, #15
 8004afc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d13a      	bne.n	8004b9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d155      	bne.n	8004c0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	059b      	lsls	r3, r3, #22
 8004b82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b84:	4313      	orrs	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e036      	b.n	8004c0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11a      	bne.n	8004c0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	78db      	ldrb	r3, [r3, #3]
 8004bf0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d135      	bne.n	8004ca4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c58:	4013      	ands	r3, r2
 8004c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0159      	lsls	r1, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	440b      	add	r3, r1
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <USB_DeactivateEndpoint+0x100>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
 8004ca2:	e034      	b.n	8004d0e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0159      	lsls	r1, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	4619      	mov	r1, r3
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <USB_DeactivateEndpoint+0x104>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	ec337800 	.word	0xec337800
 8004d20:	eff37800 	.word	0xeff37800

08004d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 815c 	bne.w	8004ffe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d132      	bne.n	8004db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	0cdb      	lsrs	r3, r3, #19
 8004dae:	04db      	lsls	r3, r3, #19
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	e074      	b.n	8004e9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	0cdb      	lsrs	r3, r3, #19
 8004dd0:	04db      	lsls	r3, r3, #19
 8004dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	440b      	add	r3, r1
 8004e10:	1e59      	subs	r1, r3, #1
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e1a:	04d9      	lsls	r1, r3, #19
 8004e1c:	4b9d      	ldr	r3, [pc, #628]	; (8005094 <USB_EPStartXfer+0x370>)
 8004e1e:	400b      	ands	r3, r1
 8004e20:	69b9      	ldr	r1, [r7, #24]
 8004e22:	0148      	lsls	r0, r1, #5
 8004e24:	69f9      	ldr	r1, [r7, #28]
 8004e26:	4401      	add	r1, r0
 8004e28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	69b9      	ldr	r1, [r7, #24]
 8004e48:	0148      	lsls	r0, r1, #5
 8004e4a:	69f9      	ldr	r1, [r7, #28]
 8004e4c:	4401      	add	r1, r0
 8004e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	78db      	ldrb	r3, [r3, #3]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d11f      	bne.n	8004e9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d14b      	bne.n	8004f3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	78db      	ldrb	r3, [r3, #3]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d128      	bne.n	8004f1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d110      	bne.n	8004efa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e00f      	b.n	8004f1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e12f      	b.n	800519c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	78db      	ldrb	r3, [r3, #3]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d015      	beq.n	8004f90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8117 	beq.w	800519c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f303 	lsl.w	r3, r1, r3
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f8e:	e105      	b.n	800519c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d110      	bne.n	8004fc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e00f      	b.n	8004fe2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68d9      	ldr	r1, [r3, #12]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	b298      	uxth	r0, r3
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa2b 	bl	8005452 <USB_WritePacket>
 8004ffc:	e0ce      	b.n	800519c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	0cdb      	lsrs	r3, r3, #19
 800501a:	04db      	lsls	r3, r3, #19
 800501c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800503c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d126      	bne.n	8005098 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	0148      	lsls	r0, r1, #5
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	4401      	add	r1, r0
 8005068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800506c:	4313      	orrs	r3, r2
 800506e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508e:	6113      	str	r3, [r2, #16]
 8005090:	e036      	b.n	8005100 <USB_EPStartXfer+0x3dc>
 8005092:	bf00      	nop
 8005094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	8afb      	ldrh	r3, [r7, #22]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <USB_EPStartXfer+0x484>)
 80050c2:	400b      	ands	r3, r1
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	0148      	lsls	r0, r1, #5
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	4401      	add	r1, r0
 80050cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050d0:	4313      	orrs	r3, r2
 80050d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	8af9      	ldrh	r1, [r7, #22]
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	0148      	lsls	r0, r1, #5
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	4401      	add	r1, r0
 80050f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d10d      	bne.n	8005122 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	460a      	mov	r2, r1
 8005120:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	78db      	ldrb	r3, [r3, #3]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d128      	bne.n	800517c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d110      	bne.n	800515c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00f      	b.n	800517c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005196:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800519a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	1ff80000 	.word	0x1ff80000

080051ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 80cd 	bne.w	8005368 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d132      	bne.n	800523c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	0cdb      	lsrs	r3, r3, #19
 8005236:	04db      	lsls	r3, r3, #19
 8005238:	6113      	str	r3, [r2, #16]
 800523a:	e04e      	b.n	80052da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	0cdb      	lsrs	r3, r3, #19
 8005258:	04db      	lsls	r3, r3, #19
 800525a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800527a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800527e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	429a      	cmp	r2, r3
 800528a:	d903      	bls.n	8005294 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ca:	6939      	ldr	r1, [r7, #16]
 80052cc:	0148      	lsls	r0, r1, #5
 80052ce:	6979      	ldr	r1, [r7, #20]
 80052d0:	4401      	add	r1, r0
 80052d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052d6:	4313      	orrs	r3, r2
 80052d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d11e      	bne.n	800531e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e092      	b.n	8005444 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800533c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d07e      	beq.n	8005444 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	2101      	movs	r1, #1
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005362:	4313      	orrs	r3, r2
 8005364:	634b      	str	r3, [r1, #52]	; 0x34
 8005366:	e06d      	b.n	8005444 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005382:	0cdb      	lsrs	r3, r3, #19
 8005384:	04db      	lsls	r3, r3, #19
 8005386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	0148      	lsls	r0, r1, #5
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	4401      	add	r1, r0
 80053fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10d      	bne.n	8005424 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	460a      	mov	r2, r1
 8005422:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005452:	b480      	push	{r7}
 8005454:	b089      	sub	sp, #36	; 0x24
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	4611      	mov	r1, r2
 800545e:	461a      	mov	r2, r3
 8005460:	460b      	mov	r3, r1
 8005462:	71fb      	strb	r3, [r7, #7]
 8005464:	4613      	mov	r3, r2
 8005466:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005470:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005478:	88bb      	ldrh	r3, [r7, #4]
 800547a:	3303      	adds	r3, #3
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e00f      	b.n	80054a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	031a      	lsls	r2, r3, #12
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005492:	461a      	mov	r2, r3
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6013      	str	r3, [r2, #0]
      pSrc++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3304      	adds	r3, #4
 800549e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	3301      	adds	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d3eb      	bcc.n	8005486 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	3303      	adds	r3, #3
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e00b      	b.n	80054f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3304      	adds	r3, #4
 80054f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3ef      	bcc.n	80054e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005500:	69fb      	ldr	r3, [r7, #28]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3724      	adds	r7, #36	; 0x24
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d12c      	bne.n	8005584 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	db12      	blt.n	8005562 <USB_EPSetStall+0x54>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005560:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e02b      	b.n	80055dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db12      	blt.n	80055bc <USB_EPSetStall+0xae>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00f      	beq.n	80055bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d128      	bne.n	8005658 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	78db      	ldrb	r3, [r3, #3]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d003      	beq.n	8005636 <USB_EPClearStall+0x4c>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d138      	bne.n	80056a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e027      	b.n	80056a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	78db      	ldrb	r3, [r3, #3]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d003      	beq.n	8005688 <USB_EPClearStall+0x9e>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	78db      	ldrb	r3, [r3, #3]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d10f      	bne.n	80056a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571c:	f023 0302 	bic.w	r3, r3, #2
 8005720:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005722:	2003      	movs	r0, #3
 8005724:	f7fa ff42 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005752:	2003      	movs	r0, #3
 8005754:	f7fa ff2a 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4013      	ands	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0c1b      	lsrs	r3, r3, #16
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4013      	ands	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	b29b      	uxth	r3, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800581e:	68bb      	ldr	r3, [r7, #8]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	01db      	lsls	r3, r3, #7
 800585e:	b2db      	uxtb	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800587a:	68bb      	ldr	r3, [r7, #8]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0301 	and.w	r3, r3, #1
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0306 	and.w	r3, r3, #6
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d109      	bne.n	80058ec <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f043 0303 	orr.w	r3, r3, #3
 80058ea:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	460b      	mov	r3, r1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	333c      	adds	r3, #60	; 0x3c
 8005926:	3304      	adds	r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <USB_EP0_OutStart+0xb8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d90a      	bls.n	800594a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005944:	d101      	bne.n	800594a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e037      	b.n	80059ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005978:	f043 0318 	orr.w	r3, r3, #24
 800597c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005990:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005992:	7afb      	ldrb	r3, [r7, #11]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d10f      	bne.n	80059b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	4f54300a 	.word	0x4f54300a

080059cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <USB_CoreReset+0x64>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e01b      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	daf2      	bge.n	80059d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f043 0201 	orr.w	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <USB_CoreReset+0x64>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d0f0      	beq.n	8005a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	00030d40 	.word	0x00030d40

08005a34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	7c1b      	ldrb	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d115      	bne.n	8005a78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a50:	2202      	movs	r2, #2
 8005a52:	2181      	movs	r1, #129	; 0x81
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f002 fe3a 	bl	80086ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a64:	2202      	movs	r2, #2
 8005a66:	2101      	movs	r1, #1
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f002 fe30 	bl	80086ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005a76:	e012      	b.n	8005a9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 fe25 	bl	80086ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f002 fe1c 	bl	80086ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	2182      	movs	r1, #130	; 0x82
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f002 fe12 	bl	80086ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005ab0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ab4:	f003 f8c0 	bl	8008c38 <malloc>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e026      	b.n	8005b20 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ad8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7c1b      	ldrb	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b06:	2101      	movs	r1, #1
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f002 fed1 	bl	80088b0 <USBD_LL_PrepareReceive>
 8005b0e:	e007      	b.n	8005b20 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b16:	2340      	movs	r3, #64	; 0x40
 8005b18:	2101      	movs	r1, #1
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 fec8 	bl	80088b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b3a:	2181      	movs	r1, #129	; 0x81
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f002 fdec 	bl	800871a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f002 fde5 	bl	800871a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b58:	2182      	movs	r1, #130	; 0x82
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f002 fddd 	bl	800871a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b80:	4618      	mov	r0, r3
 8005b82:	f003 f861 	bl	8008c48 <free>
    pdev->pClassData = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ba8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d039      	beq.n	8005c36 <USBD_CDC_Setup+0x9e>
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d17c      	bne.n	8005cc0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d029      	beq.n	8005c22 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da11      	bge.n	8005bfc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005be4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	88d2      	ldrh	r2, [r2, #6]
 8005bea:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bec:	6939      	ldr	r1, [r7, #16]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	88db      	ldrh	r3, [r3, #6]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f99b 	bl	8006f30 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005bfa:	e068      	b.n	8005cce <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	785a      	ldrb	r2, [r3, #1]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	88db      	ldrh	r3, [r3, #6]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 f9b6 	bl	8006f8c <USBD_CtlPrepareRx>
    break;
 8005c20:	e055      	b.n	8005cce <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	7850      	ldrb	r0, [r2, #1]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	4798      	blx	r3
    break;
 8005c34:	e04b      	b.n	8005cce <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b0a      	cmp	r3, #10
 8005c3c:	d017      	beq.n	8005c6e <USBD_CDC_Setup+0xd6>
 8005c3e:	2b0b      	cmp	r3, #11
 8005c40:	d029      	beq.n	8005c96 <USBD_CDC_Setup+0xfe>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d133      	bne.n	8005cae <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d107      	bne.n	8005c60 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	2202      	movs	r2, #2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f969 	bl	8006f30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c5e:	e02e      	b.n	8005cbe <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 f8f9 	bl	8006e5a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	e027      	b.n	8005cbe <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005c78:	f107 030f 	add.w	r3, r7, #15
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f955 	bl	8006f30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c86:	e01a      	b.n	8005cbe <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f8e5 	bl	8006e5a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c90:	2302      	movs	r3, #2
 8005c92:	75fb      	strb	r3, [r7, #23]
      break;
 8005c94:	e013      	b.n	8005cbe <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d00d      	beq.n	8005cbc <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 f8d9 	bl	8006e5a <USBD_CtlError>
			  ret = USBD_FAIL;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cac:	e006      	b.n	8005cbc <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 f8d2 	bl	8006e5a <USBD_CtlError>
      ret = USBD_FAIL;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cba:	e000      	b.n	8005cbe <USBD_CDC_Setup+0x126>
      break;
 8005cbc:	bf00      	nop
    }
    break;
 8005cbe:	e006      	b.n	8005cce <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 f8c9 	bl	8006e5a <USBD_CtlError>
    ret = USBD_FAIL;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	75fb      	strb	r3, [r7, #23]
    break;
 8005ccc:	bf00      	nop
  }

  return ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005cf2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d03a      	beq.n	8005d74 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cfe:	78fa      	ldrb	r2, [r7, #3]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	331c      	adds	r3, #28
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d029      	beq.n	8005d68 <USBD_CDC_DataIn+0x90>
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	331c      	adds	r3, #28
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	78f9      	ldrb	r1, [r7, #3]
 8005d28:	68b8      	ldr	r0, [r7, #8]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4403      	add	r3, r0
 8005d34:	3344      	adds	r3, #68	; 0x44
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d3c:	fb03 f301 	mul.w	r3, r3, r1
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d110      	bne.n	8005d68 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	331c      	adds	r3, #28
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005d5a:	78f9      	ldrb	r1, [r7, #3]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2200      	movs	r2, #0
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 fd82 	bl	800886a <USBD_LL_Transmit>
 8005d66:	e003      	b.n	8005d70 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f002 fdad 	bl	80088f6 <USBD_LL_GetRxDataSize>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4798      	blx	r3

    return USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005de2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005df4:	2bff      	cmp	r3, #255	; 0xff
 8005df6:	d010      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005e06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2243      	movs	r2, #67	; 0x43
 8005e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000090 	.word	0x20000090

08005e44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2243      	movs	r2, #67	; 0x43
 8005e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	2000004c 	.word	0x2000004c

08005e64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2243      	movs	r2, #67	; 0x43
 8005e70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e72:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	200000d4 	.word	0x200000d4

08005e84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e92:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	20000008 	.word	0x20000008

08005ea4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	4613      	mov	r3, r2
 8005ede:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ee6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d017      	beq.n	8005f78 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f002 fca7 	bl	80088b0 <USBD_LL_PrepareReceive>
 8005f62:	e007      	b.n	8005f74 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 fc9e 	bl	80088b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f78:	2302      	movs	r3, #2
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f96:	2302      	movs	r3, #2
 8005f98:	e01a      	b.n	8005fd0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	79fa      	ldrb	r2, [r7, #7]
 8005fc6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f002 fb19 	bl	8008600 <USBD_LL_Init>

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d006      	beq.n	8005ffa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
 8005ff8:	e001      	b.n	8005ffe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f002 fb3f 	bl	8008698 <USBD_LL_Start>

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006046:	2302      	movs	r3, #2
 8006048:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00c      	beq.n	800606e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	4611      	mov	r1, r2
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	4798      	blx	r3
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	4611      	mov	r1, r2
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
  return USBD_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fe95 	bl	8006de0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80060c4:	461a      	mov	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d00c      	beq.n	80060f4 <USBD_LL_SetupStage+0x56>
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d302      	bcc.n	80060e4 <USBD_LL_SetupStage+0x46>
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d010      	beq.n	8006104 <USBD_LL_SetupStage+0x66>
 80060e2:	e017      	b.n	8006114 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fa05 	bl	80064fc <USBD_StdDevReq>
    break;
 80060f2:	e01a      	b.n	800612a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa67 	bl	80065d0 <USBD_StdItfReq>
    break;
 8006102:	e012      	b.n	800612a <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 faa5 	bl	800665c <USBD_StdEPReq>
    break;
 8006112:	e00a      	b.n	800612a <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800611a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f002 fb18 	bl	8008758 <USBD_LL_StallEP>
    break;
 8006128:	bf00      	nop
  }

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	460b      	mov	r3, r1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d14b      	bne.n	80061e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800614e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006156:	2b03      	cmp	r3, #3
 8006158:	d134      	bne.n	80061c4 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	429a      	cmp	r2, r3
 8006164:	d919      	bls.n	800619a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800617c:	429a      	cmp	r2, r3
 800617e:	d203      	bcs.n	8006188 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006184:	b29b      	uxth	r3, r3
 8006186:	e002      	b.n	800618e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 ff18 	bl	8006fc8 <USBD_CtlContinueRx>
 8006198:	e038      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d105      	bne.n	80061bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 ff15 	bl	8006fec <USBD_CtlSendStatus>
 80061c2:	e023      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	d11e      	bne.n	800620c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f002 fabd 	bl	8008758 <USBD_LL_StallEP>
 80061de:	e015      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d108      	bne.n	8006208 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	7afa      	ldrb	r2, [r7, #11]
 8006200:	4611      	mov	r1, r2
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	4798      	blx	r3
 8006206:	e001      	b.n	800620c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006208:	2302      	movs	r3, #2
 800620a:	e000      	b.n	800620e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	460b      	mov	r3, r1
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d17f      	bne.n	800632a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3314      	adds	r3, #20
 800622e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006236:	2b02      	cmp	r3, #2
 8006238:	d15c      	bne.n	80062f4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d915      	bls.n	8006272 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fe82 	bl	8006f68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	2100      	movs	r1, #0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f002 fb20 	bl	80088b0 <USBD_LL_PrepareReceive>
 8006270:	e04e      	b.n	8006310 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	6912      	ldr	r2, [r2, #16]
 800627a:	fbb3 f1f2 	udiv	r1, r3, r2
 800627e:	fb02 f201 	mul.w	r2, r2, r1
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11c      	bne.n	80062c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006290:	429a      	cmp	r2, r3
 8006292:	d316      	bcc.n	80062c2 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800629e:	429a      	cmp	r2, r3
 80062a0:	d20f      	bcs.n	80062c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2100      	movs	r1, #0
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fe5e 	bl	8006f68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80062b4:	2300      	movs	r3, #0
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f002 faf8 	bl	80088b0 <USBD_LL_PrepareReceive>
 80062c0:	e026      	b.n	8006310 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d105      	bne.n	80062e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f002 fa36 	bl	8008758 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fe90 	bl	8007012 <USBD_CtlReceiveStatus>
 80062f2:	e00d      	b.n	8006310 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d004      	beq.n	8006308 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	d103      	bne.n	8006310 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f002 fa24 	bl	8008758 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11d      	bne.n	8006356 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fe82 	bl	8006024 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006328:	e015      	b.n	8006356 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800633c:	2b03      	cmp	r3, #3
 800633e:	d108      	bne.n	8006352 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	7afa      	ldrb	r2, [r7, #11]
 800634a:	4611      	mov	r1, r2
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	4798      	blx	r3
 8006350:	e001      	b.n	8006356 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	e000      	b.n	8006358 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006368:	2340      	movs	r3, #64	; 0x40
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f002 f9ad 	bl	80086ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006384:	2340      	movs	r3, #64	; 0x40
 8006386:	2200      	movs	r2, #0
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f002 f99f 	bl	80086ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2240      	movs	r2, #64	; 0x40
 800639a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6852      	ldr	r2, [r2, #4]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	4611      	mov	r1, r2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
  }

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800645c:	2b03      	cmp	r3, #3
 800645e:	d10b      	bne.n	8006478 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6852      	ldr	r2, [r2, #4]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	4611      	mov	r1, r2
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006512:	2b20      	cmp	r3, #32
 8006514:	d004      	beq.n	8006520 <USBD_StdDevReq+0x24>
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d002      	beq.n	8006520 <USBD_StdDevReq+0x24>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <USBD_StdDevReq+0x34>
 800651e:	e04c      	b.n	80065ba <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
    break;
 800652e:	e049      	b.n	80065c4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d83a      	bhi.n	80065ae <USBD_StdDevReq+0xb2>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <USBD_StdDevReq+0x44>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006591 	.word	0x08006591
 8006544:	080065a5 	.word	0x080065a5
 8006548:	080065af 	.word	0x080065af
 800654c:	0800659b 	.word	0x0800659b
 8006550:	080065af 	.word	0x080065af
 8006554:	08006573 	.word	0x08006573
 8006558:	08006569 	.word	0x08006569
 800655c:	080065af 	.word	0x080065af
 8006560:	08006587 	.word	0x08006587
 8006564:	0800657d 	.word	0x0800657d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9d2 	bl	8006914 <USBD_GetDescriptor>
      break;
 8006570:	e022      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fac7 	bl	8006b08 <USBD_SetAddress>
      break;
 800657a:	e01d      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb04 	bl	8006b8c <USBD_SetConfig>
      break;
 8006584:	e018      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fb8d 	bl	8006ca8 <USBD_GetConfig>
      break;
 800658e:	e013      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fbbc 	bl	8006d10 <USBD_GetStatus>
      break;
 8006598:	e00e      	b.n	80065b8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fbea 	bl	8006d76 <USBD_SetFeature>
      break;
 80065a2:	e009      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fbf9 	bl	8006d9e <USBD_ClrFeature>
      break;
 80065ac:	e004      	b.n	80065b8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc52 	bl	8006e5a <USBD_CtlError>
      break;
 80065b6:	bf00      	nop
    }
    break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fc4c 	bl	8006e5a <USBD_CtlError>
    break;
 80065c2:	bf00      	nop
  }

  return ret;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop

080065d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d003      	beq.n	80065f2 <USBD_StdItfReq+0x22>
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d001      	beq.n	80065f2 <USBD_StdItfReq+0x22>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d12a      	bne.n	8006648 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065f8:	3b01      	subs	r3, #1
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d81d      	bhi.n	800663a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	889b      	ldrh	r3, [r3, #4]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d813      	bhi.n	8006630 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d110      	bne.n	8006644 <USBD_StdItfReq+0x74>
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fcdf 	bl	8006fec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800662e:	e009      	b.n	8006644 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc11 	bl	8006e5a <USBD_CtlError>
      break;
 8006638:	e004      	b.n	8006644 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fc0c 	bl	8006e5a <USBD_CtlError>
      break;
 8006642:	e000      	b.n	8006646 <USBD_StdItfReq+0x76>
      break;
 8006644:	bf00      	nop
    }
    break;
 8006646:	e004      	b.n	8006652 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fc05 	bl	8006e5a <USBD_CtlError>
    break;
 8006650:	bf00      	nop
  }

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	889b      	ldrh	r3, [r3, #4]
 800666e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006678:	2b20      	cmp	r3, #32
 800667a:	d004      	beq.n	8006686 <USBD_StdEPReq+0x2a>
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d002      	beq.n	8006686 <USBD_StdEPReq+0x2a>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <USBD_StdEPReq+0x3a>
 8006684:	e13b      	b.n	80068fe <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
    break;
 8006694:	e138      	b.n	8006908 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d10a      	bne.n	80066b8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	e128      	b.n	800690a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d03e      	beq.n	800673e <USBD_StdEPReq+0xe2>
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d002      	beq.n	80066ca <USBD_StdEPReq+0x6e>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d070      	beq.n	80067aa <USBD_StdEPReq+0x14e>
 80066c8:	e113      	b.n	80068f2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d002      	beq.n	80066da <USBD_StdEPReq+0x7e>
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d015      	beq.n	8006704 <USBD_StdEPReq+0xa8>
 80066d8:	e02b      	b.n	8006732 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <USBD_StdEPReq+0x9e>
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d009      	beq.n	80066fa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 f834 	bl	8008758 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f002 f830 	bl	8008758 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066f8:	e020      	b.n	800673c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fbac 	bl	8006e5a <USBD_CtlError>
        break;
 8006702:	e01b      	b.n	800673c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	885b      	ldrh	r3, [r3, #2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10e      	bne.n	800672a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <USBD_StdEPReq+0xce>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b80      	cmp	r3, #128	; 0x80
 8006716:	d008      	beq.n	800672a <USBD_StdEPReq+0xce>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	88db      	ldrh	r3, [r3, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 f817 	bl	8008758 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fc5e 	bl	8006fec <USBD_CtlSendStatus>

        break;
 8006730:	e004      	b.n	800673c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fb90 	bl	8006e5a <USBD_CtlError>
        break;
 800673a:	bf00      	nop
      }
      break;
 800673c:	e0de      	b.n	80068fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006744:	2b02      	cmp	r3, #2
 8006746:	d002      	beq.n	800674e <USBD_StdEPReq+0xf2>
 8006748:	2b03      	cmp	r3, #3
 800674a:	d015      	beq.n	8006778 <USBD_StdEPReq+0x11c>
 800674c:	e026      	b.n	800679c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <USBD_StdEPReq+0x112>
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b80      	cmp	r3, #128	; 0x80
 8006758:	d009      	beq.n	800676e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fffa 	bl	8008758 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006764:	2180      	movs	r1, #128	; 0x80
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fff6 	bl	8008758 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800676c:	e01c      	b.n	80067a8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb72 	bl	8006e5a <USBD_CtlError>
        break;
 8006776:	e017      	b.n	80067a8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	885b      	ldrh	r3, [r3, #2]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d112      	bne.n	80067a6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f002 f801 	bl	8008796 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fc29 	bl	8006fec <USBD_CtlSendStatus>
        }
        break;
 800679a:	e004      	b.n	80067a6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fb5b 	bl	8006e5a <USBD_CtlError>
        break;
 80067a4:	e000      	b.n	80067a8 <USBD_StdEPReq+0x14c>
        break;
 80067a6:	bf00      	nop
      }
      break;
 80067a8:	e0a8      	b.n	80068fc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d002      	beq.n	80067ba <USBD_StdEPReq+0x15e>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d031      	beq.n	800681c <USBD_StdEPReq+0x1c0>
 80067b8:	e095      	b.n	80068e6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <USBD_StdEPReq+0x174>
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d004      	beq.n	80067d0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb46 	bl	8006e5a <USBD_CtlError>
          break;
 80067ce:	e08f      	b.n	80068f0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80067d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da0b      	bge.n	80067f0 <USBD_StdEPReq+0x194>
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3310      	adds	r3, #16
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	e00a      	b.n	8006806 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2202      	movs	r2, #2
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb8b 	bl	8006f30 <USBD_CtlSendData>
          break;
 800681a:	e069      	b.n	80068f0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da11      	bge.n	8006848 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3318      	adds	r3, #24
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d117      	bne.n	800686e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb0a 	bl	8006e5a <USBD_CtlError>
            break;
 8006846:	e053      	b.n	80068f0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 faf7 	bl	8006e5a <USBD_CtlError>
            break;
 800686c:	e040      	b.n	80068f0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800686e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006872:	2b00      	cmp	r3, #0
 8006874:	da0b      	bge.n	800688e <USBD_StdEPReq+0x232>
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	3310      	adds	r3, #16
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	3304      	adds	r3, #4
 800688c:	e00a      	b.n	80068a4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <USBD_StdEPReq+0x256>
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	d103      	bne.n	80068ba <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e00e      	b.n	80068d8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 ff88 	bl	80087d4 <USBD_LL_IsStallEP>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e002      	b.n	80068d8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2202      	movs	r2, #2
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb26 	bl	8006f30 <USBD_CtlSendData>
          break;
 80068e4:	e004      	b.n	80068f0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fab6 	bl	8006e5a <USBD_CtlError>
        break;
 80068ee:	bf00      	nop
      }
      break;
 80068f0:	e004      	b.n	80068fc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fab0 	bl	8006e5a <USBD_CtlError>
      break;
 80068fa:	bf00      	nop
    }
    break;
 80068fc:	e004      	b.n	8006908 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 faaa 	bl	8006e5a <USBD_CtlError>
    break;
 8006906:	bf00      	nop
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	2b06      	cmp	r3, #6
 800692a:	f200 80c9 	bhi.w	8006ac0 <USBD_GetDescriptor+0x1ac>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <USBD_GetDescriptor+0x20>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006951 	.word	0x08006951
 8006938:	08006969 	.word	0x08006969
 800693c:	080069a9 	.word	0x080069a9
 8006940:	08006ac1 	.word	0x08006ac1
 8006944:	08006ac1 	.word	0x08006ac1
 8006948:	08006a6d 	.word	0x08006a6d
 800694c:	08006a93 	.word	0x08006a93
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	7c12      	ldrb	r2, [r2, #16]
 800695c:	f107 010a 	add.w	r1, r7, #10
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
 8006964:	60f8      	str	r0, [r7, #12]
    break;
 8006966:	e0b0      	b.n	8006aca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7c1b      	ldrb	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10d      	bne.n	800698c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f107 020a 	add.w	r2, r7, #10
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
 8006980:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800698a:	e09e      	b.n	8006aca <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	f107 020a 	add.w	r2, r7, #10
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	2202      	movs	r2, #2
 80069a4:	701a      	strb	r2, [r3, #0]
    break;
 80069a6:	e090      	b.n	8006aca <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	885b      	ldrh	r3, [r3, #2]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d856      	bhi.n	8006a60 <USBD_GetDescriptor+0x14c>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <USBD_GetDescriptor+0xa4>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069d1 	.word	0x080069d1
 80069bc:	080069e9 	.word	0x080069e9
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	08006a49 	.word	0x08006a49
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 010a 	add.w	r1, r7, #10
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
      break;
 80069e6:	e040      	b.n	8006a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	7c12      	ldrb	r2, [r2, #16]
 80069f4:	f107 010a 	add.w	r1, r7, #10
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
      break;
 80069fe:	e034      	b.n	8006a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 010a 	add.w	r1, r7, #10
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
      break;
 8006a16:	e028      	b.n	8006a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 010a 	add.w	r1, r7, #10
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
      break;
 8006a2e:	e01c      	b.n	8006a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	f107 010a 	add.w	r1, r7, #10
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
 8006a44:	60f8      	str	r0, [r7, #12]
      break;
 8006a46:	e010      	b.n	8006a6a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 010a 	add.w	r1, r7, #10
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
      break;
 8006a5e:	e004      	b.n	8006a6a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9f9 	bl	8006e5a <USBD_CtlError>
      return;
 8006a68:	e04b      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006a6a:	e02e      	b.n	8006aca <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	f107 020a 	add.w	r2, r7, #10
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
      break;
 8006a86:	e020      	b.n	8006aca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9e5 	bl	8006e5a <USBD_CtlError>
      return;
 8006a90:	e037      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7c1b      	ldrb	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f107 020a 	add.w	r2, r7, #10
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4798      	blx	r3
 8006aaa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	701a      	strb	r2, [r3, #0]
      break;
 8006ab4:	e009      	b.n	8006aca <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f9ce 	bl	8006e5a <USBD_CtlError>
      return;
 8006abe:	e020      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9c9 	bl	8006e5a <USBD_CtlError>
    return;
 8006ac8:	e01b      	b.n	8006b02 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006aca:	897b      	ldrh	r3, [r7, #10]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d011      	beq.n	8006af4 <USBD_GetDescriptor+0x1e0>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	88db      	ldrh	r3, [r3, #6]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	88da      	ldrh	r2, [r3, #6]
 8006adc:	897b      	ldrh	r3, [r7, #10]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	bf28      	it	cs
 8006ae2:	4613      	movcs	r3, r2
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006ae8:	897b      	ldrh	r3, [r7, #10]
 8006aea:	461a      	mov	r2, r3
 8006aec:	68f9      	ldr	r1, [r7, #12]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa1e 	bl	8006f30 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	88db      	ldrh	r3, [r3, #6]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d102      	bne.n	8006b02 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa75 	bl	8006fec <USBD_CtlSendStatus>
  }
}
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	889b      	ldrh	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d130      	bne.n	8006b7c <USBD_SetAddress+0x74>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d12c      	bne.n	8006b7c <USBD_SetAddress+0x74>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	885b      	ldrh	r3, [r3, #2]
 8006b26:	2b7f      	cmp	r3, #127	; 0x7f
 8006b28:	d828      	bhi.n	8006b7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	885b      	ldrh	r3, [r3, #2]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d104      	bne.n	8006b4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f989 	bl	8006e5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b48:	e01c      	b.n	8006b84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7bfa      	ldrb	r2, [r7, #15]
 8006b4e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fe68 	bl	800882c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fa45 	bl	8006fec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b70:	e008      	b.n	8006b84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	e003      	b.n	8006b84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f96b 	bl	8006e5a <USBD_CtlError>
  }
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	885b      	ldrh	r3, [r3, #2]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	4b41      	ldr	r3, [pc, #260]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ba0:	4b40      	ldr	r3, [pc, #256]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d904      	bls.n	8006bb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f955 	bl	8006e5a <USBD_CtlError>
 8006bb0:	e075      	b.n	8006c9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d002      	beq.n	8006bc2 <USBD_SetConfig+0x36>
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d023      	beq.n	8006c08 <USBD_SetConfig+0x7c>
 8006bc0:	e062      	b.n	8006c88 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006bc2:	4b38      	ldr	r3, [pc, #224]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d01a      	beq.n	8006c00 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006bca:	4b36      	ldr	r3, [pc, #216]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bdc:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fa29 	bl	800603a <USBD_SetClassConfig>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d104      	bne.n	8006bf8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f932 	bl	8006e5a <USBD_CtlError>
          return;
 8006bf6:	e052      	b.n	8006c9e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f9f7 	bl	8006fec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006bfe:	e04e      	b.n	8006c9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f9f3 	bl	8006fec <USBD_CtlSendStatus>
      break;
 8006c06:	e04a      	b.n	8006c9e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c08:	4b26      	ldr	r3, [pc, #152]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d112      	bne.n	8006c36 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006c18:	4b22      	ldr	r3, [pc, #136]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c22:	4b20      	ldr	r3, [pc, #128]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fa25 	bl	8006078 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f9dc 	bl	8006fec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006c34:	e033      	b.n	8006c9e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006c36:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d01d      	beq.n	8006c80 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fa13 	bl	8006078 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c5c:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff f9e9 	bl	800603a <USBD_SetClassConfig>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d104      	bne.n	8006c78 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8f2 	bl	8006e5a <USBD_CtlError>
          return;
 8006c76:	e012      	b.n	8006c9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9b7 	bl	8006fec <USBD_CtlSendStatus>
      break;
 8006c7e:	e00e      	b.n	8006c9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9b3 	bl	8006fec <USBD_CtlSendStatus>
      break;
 8006c86:	e00a      	b.n	8006c9e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f8e5 	bl	8006e5a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006c90:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <USBD_SetConfig+0x118>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f9ee 	bl	8006078 <USBD_ClrClassConfig>
      break;
 8006c9c:	bf00      	nop
    }
  }
}
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	200001fc 	.word	0x200001fc

08006ca8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	88db      	ldrh	r3, [r3, #6]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d004      	beq.n	8006cc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8cc 	bl	8006e5a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006cc2:	e021      	b.n	8006d08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	db17      	blt.n	8006cfe <USBD_GetConfig+0x56>
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	dd02      	ble.n	8006cd8 <USBD_GetConfig+0x30>
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d00b      	beq.n	8006cee <USBD_GetConfig+0x46>
 8006cd6:	e012      	b.n	8006cfe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f922 	bl	8006f30 <USBD_CtlSendData>
      break;
 8006cec:	e00c      	b.n	8006d08 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f91a 	bl	8006f30 <USBD_CtlSendData>
      break;
 8006cfc:	e004      	b.n	8006d08 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f8aa 	bl	8006e5a <USBD_CtlError>
      break;
 8006d06:	bf00      	nop
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d20:	3b01      	subs	r3, #1
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d81e      	bhi.n	8006d64 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	88db      	ldrh	r3, [r3, #6]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d004      	beq.n	8006d38 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f892 	bl	8006e5a <USBD_CtlError>
      break;
 8006d36:	e01a      	b.n	8006d6e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f043 0202 	orr.w	r2, r3, #2
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	330c      	adds	r3, #12
 8006d58:	2202      	movs	r2, #2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8e7 	bl	8006f30 <USBD_CtlSendData>
    break;
 8006d62:	e004      	b.n	8006d6e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f877 	bl	8006e5a <USBD_CtlError>
    break;
 8006d6c:	bf00      	nop
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	885b      	ldrh	r3, [r3, #2]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d106      	bne.n	8006d96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f92b 	bl	8006fec <USBD_CtlSendStatus>
  }

}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dae:	3b01      	subs	r3, #1
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d80b      	bhi.n	8006dcc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d10c      	bne.n	8006dd6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f911 	bl	8006fec <USBD_CtlSendStatus>
    }
    break;
 8006dca:	e004      	b.n	8006dd6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f843 	bl	8006e5a <USBD_CtlError>
    break;
 8006dd4:	e000      	b.n	8006dd8 <USBD_ClrFeature+0x3a>
    break;
 8006dd6:	bf00      	nop
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	785a      	ldrb	r2, [r3, #1]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	3303      	adds	r3, #3
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4413      	add	r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	3305      	adds	r3, #5
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	021b      	lsls	r3, r3, #8
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	3306      	adds	r3, #6
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	3307      	adds	r3, #7
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	80da      	strh	r2, [r3, #6]

}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006e64:	2180      	movs	r1, #128	; 0x80
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fc76 	bl	8008758 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fc72 	bl	8008758 <USBD_LL_StallEP>
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d032      	beq.n	8006ef8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f834 	bl	8006f00 <USBD_GetLen>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	75fa      	strb	r2, [r7, #23]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	75fa      	strb	r2, [r7, #23]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ec8:	e012      	b.n	8006ef0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	60fa      	str	r2, [r7, #12]
 8006ed0:	7dfa      	ldrb	r2, [r7, #23]
 8006ed2:	1c51      	adds	r1, r2, #1
 8006ed4:	75f9      	strb	r1, [r7, #23]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	440a      	add	r2, r1
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	75fa      	strb	r2, [r7, #23]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4413      	add	r3, r2
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e8      	bne.n	8006eca <USBD_GetString+0x4e>
    }
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006f0c:	e005      	b.n	8006f1a <USBD_GetLen+0x1a>
    {
        len++;
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	3301      	adds	r3, #1
 8006f12:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3301      	adds	r3, #1
 8006f18:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f5      	bne.n	8006f0e <USBD_GetLen+0xe>
    }

    return len;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	2100      	movs	r1, #0
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f001 fc86 	bl	800886a <USBD_LL_Transmit>

  return USBD_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f001 fc74 	bl	800886a <USBD_LL_Transmit>

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 fc79 	bl	80088b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd6:	88fb      	ldrh	r3, [r7, #6]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	2100      	movs	r1, #0
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 fc67 	bl	80088b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fc31 	bl	800886a <USBD_LL_Transmit>

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2205      	movs	r2, #5
 800701e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fc41 	bl	80088b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <pwm_setvalue>:
 * 						"HIGH-SIDE of H-BRIDGE"
 * TIM_CHANNEL_2 : points to channel two of the timer
 * 						"LOW-SIDE of H-BRIDGE"
*/
void pwm_setvalue(int a, uint16_t high_a, uint16_t low_a, uint16_t high_b, uint16_t low_b)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b092      	sub	sp, #72	; 0x48
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	461a      	mov	r2, r3
 8007046:	4603      	mov	r3, r0
 8007048:	817b      	strh	r3, [r7, #10]
 800704a:	460b      	mov	r3, r1
 800704c:	813b      	strh	r3, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
	//Timer configuration setup

	TIM_OC_InitTypeDef sConfigOC, sConfigOC1;

	//Timer one requirements
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007052:	2360      	movs	r3, #96	; 0x60
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007056:	2300      	movs	r3, #0
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Timer four requirements
	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 800705e:	2360      	movs	r3, #96	; 0x60
 8007060:	613b      	str	r3, [r7, #16]
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 8007066:	2300      	movs	r3, #0
 8007068:	623b      	str	r3, [r7, #32]
	sConfigOC1.OCIdleState = TIM_OCIDLESTATE_RESET;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC1.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800706e:	2300      	movs	r3, #0
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]

	//Stop motors: turn on both low gates
	switch(a){
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d04f      	beq.n	800711c <pwm_setvalue+0xe4>
 800707c:	2b02      	cmp	r3, #2
 800707e:	f000 8094 	beq.w	80071aa <pwm_setvalue+0x172>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d000      	beq.n	8007088 <pwm_setvalue+0x50>
			}
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

		break;
	}
}
 8007086:	e0d8      	b.n	800723a <pwm_setvalue+0x202>
			sConfigOC.Pulse = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	633b      	str	r3, [r7, #48]	; 0x30
			sConfigOC1.Pulse = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007094:	2200      	movs	r2, #0
 8007096:	4619      	mov	r1, r3
 8007098:	486a      	ldr	r0, [pc, #424]	; (8007244 <pwm_setvalue+0x20c>)
 800709a:	f7fc fc85 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <pwm_setvalue+0x70>
				Error_Handler();
 80070a4:	f000 fdb4 	bl	8007c10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 80070a8:	f107 0310 	add.w	r3, r7, #16
 80070ac:	2200      	movs	r2, #0
 80070ae:	4619      	mov	r1, r3
 80070b0:	4865      	ldr	r0, [pc, #404]	; (8007248 <pwm_setvalue+0x210>)
 80070b2:	f7fc fc79 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <pwm_setvalue+0x88>
				Error_Handler();
 80070bc:	f000 fda8 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80070c0:	2100      	movs	r1, #0
 80070c2:	4860      	ldr	r0, [pc, #384]	; (8007244 <pwm_setvalue+0x20c>)
 80070c4:	f7fc fb2a 	bl	800371c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80070c8:	2100      	movs	r1, #0
 80070ca:	485f      	ldr	r0, [pc, #380]	; (8007248 <pwm_setvalue+0x210>)
 80070cc:	f7fc fb26 	bl	800371c <HAL_TIM_PWM_Start>
			sConfigOC.Pulse = low_a;
 80070d0:	893b      	ldrh	r3, [r7, #8]
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
			sConfigOC1.Pulse = low_b;
 80070d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80070d8:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80070da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070de:	2204      	movs	r2, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4858      	ldr	r0, [pc, #352]	; (8007244 <pwm_setvalue+0x20c>)
 80070e4:	f7fc fc60 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <pwm_setvalue+0xba>
				Error_Handler();
 80070ee:	f000 fd8f 	bl	8007c10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 80070f2:	f107 0310 	add.w	r3, r7, #16
 80070f6:	2204      	movs	r2, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4853      	ldr	r0, [pc, #332]	; (8007248 <pwm_setvalue+0x210>)
 80070fc:	f7fc fc54 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <pwm_setvalue+0xd2>
				Error_Handler();
 8007106:	f000 fd83 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800710a:	2104      	movs	r1, #4
 800710c:	484d      	ldr	r0, [pc, #308]	; (8007244 <pwm_setvalue+0x20c>)
 800710e:	f7fc fb05 	bl	800371c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8007112:	2104      	movs	r1, #4
 8007114:	484c      	ldr	r0, [pc, #304]	; (8007248 <pwm_setvalue+0x210>)
 8007116:	f7fc fb01 	bl	800371c <HAL_TIM_PWM_Start>
		break;
 800711a:	e08e      	b.n	800723a <pwm_setvalue+0x202>
			sConfigOC1.Pulse = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8007120:	f107 0310 	add.w	r3, r7, #16
 8007124:	2200      	movs	r2, #0
 8007126:	4619      	mov	r1, r3
 8007128:	4847      	ldr	r0, [pc, #284]	; (8007248 <pwm_setvalue+0x210>)
 800712a:	f7fc fc3d 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <pwm_setvalue+0x100>
				Error_Handler();
 8007134:	f000 fd6c 	bl	8007c10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 8007138:	f107 0310 	add.w	r3, r7, #16
 800713c:	2204      	movs	r2, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4841      	ldr	r0, [pc, #260]	; (8007248 <pwm_setvalue+0x210>)
 8007142:	f7fc fc31 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <pwm_setvalue+0x118>
				Error_Handler();
 800714c:	f000 fd60 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007150:	2100      	movs	r1, #0
 8007152:	483d      	ldr	r0, [pc, #244]	; (8007248 <pwm_setvalue+0x210>)
 8007154:	f7fc fae2 	bl	800371c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8007158:	2104      	movs	r1, #4
 800715a:	483b      	ldr	r0, [pc, #236]	; (8007248 <pwm_setvalue+0x210>)
 800715c:	f7fc fade 	bl	800371c <HAL_TIM_PWM_Start>
			sConfigOC.Pulse = low_a;
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007168:	2204      	movs	r2, #4
 800716a:	4619      	mov	r1, r3
 800716c:	4835      	ldr	r0, [pc, #212]	; (8007244 <pwm_setvalue+0x20c>)
 800716e:	f7fc fc1b 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <pwm_setvalue+0x144>
				Error_Handler();
 8007178:	f000 fd4a 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800717c:	2104      	movs	r1, #4
 800717e:	4831      	ldr	r0, [pc, #196]	; (8007244 <pwm_setvalue+0x20c>)
 8007180:	f7fc facc 	bl	800371c <HAL_TIM_PWM_Start>
			sConfigOC.Pulse = high_a;
 8007184:	897b      	ldrh	r3, [r7, #10]
 8007186:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800718c:	2200      	movs	r2, #0
 800718e:	4619      	mov	r1, r3
 8007190:	482c      	ldr	r0, [pc, #176]	; (8007244 <pwm_setvalue+0x20c>)
 8007192:	f7fc fc09 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <pwm_setvalue+0x168>
				Error_Handler();
 800719c:	f000 fd38 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80071a0:	2100      	movs	r1, #0
 80071a2:	4828      	ldr	r0, [pc, #160]	; (8007244 <pwm_setvalue+0x20c>)
 80071a4:	f7fc faba 	bl	800371c <HAL_TIM_PWM_Start>
		break;
 80071a8:	e047      	b.n	800723a <pwm_setvalue+0x202>
			sConfigOC.Pulse = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80071ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071b2:	2200      	movs	r2, #0
 80071b4:	4619      	mov	r1, r3
 80071b6:	4823      	ldr	r0, [pc, #140]	; (8007244 <pwm_setvalue+0x20c>)
 80071b8:	f7fc fbf6 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <pwm_setvalue+0x18e>
				Error_Handler();
 80071c2:	f000 fd25 	bl	8007c10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80071c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071ca:	2204      	movs	r2, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	481d      	ldr	r0, [pc, #116]	; (8007244 <pwm_setvalue+0x20c>)
 80071d0:	f7fc fbea 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <pwm_setvalue+0x1a6>
				Error_Handler();
 80071da:	f000 fd19 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80071de:	2100      	movs	r1, #0
 80071e0:	4818      	ldr	r0, [pc, #96]	; (8007244 <pwm_setvalue+0x20c>)
 80071e2:	f7fc fa9b 	bl	800371c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80071e6:	2104      	movs	r1, #4
 80071e8:	4816      	ldr	r0, [pc, #88]	; (8007244 <pwm_setvalue+0x20c>)
 80071ea:	f7fc fa97 	bl	800371c <HAL_TIM_PWM_Start>
			sConfigOC1.Pulse = low_b;
 80071ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80071f2:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 80071f4:	f107 0310 	add.w	r3, r7, #16
 80071f8:	2204      	movs	r2, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	4812      	ldr	r0, [pc, #72]	; (8007248 <pwm_setvalue+0x210>)
 80071fe:	f7fc fbd3 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <pwm_setvalue+0x1d4>
				Error_Handler();
 8007208:	f000 fd02 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800720c:	2104      	movs	r1, #4
 800720e:	480e      	ldr	r0, [pc, #56]	; (8007248 <pwm_setvalue+0x210>)
 8007210:	f7fc fa84 	bl	800371c <HAL_TIM_PWM_Start>
			sConfigOC1.Pulse = high_b;
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8007218:	f107 0310 	add.w	r3, r7, #16
 800721c:	2200      	movs	r2, #0
 800721e:	4619      	mov	r1, r3
 8007220:	4809      	ldr	r0, [pc, #36]	; (8007248 <pwm_setvalue+0x210>)
 8007222:	f7fc fbc1 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <pwm_setvalue+0x1f8>
				Error_Handler();
 800722c:	f000 fcf0 	bl	8007c10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007230:	2100      	movs	r1, #0
 8007232:	4805      	ldr	r0, [pc, #20]	; (8007248 <pwm_setvalue+0x210>)
 8007234:	f7fc fa72 	bl	800371c <HAL_TIM_PWM_Start>
		break;
 8007238:	bf00      	nop
}
 800723a:	bf00      	nop
 800723c:	3748      	adds	r7, #72	; 0x48
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000210 	.word	0x20000210
 8007248:	200002e4 	.word	0x200002e4

0800724c <steer_pwm_setvalue>:


void steer_pwm_setvalue(uint16_t value)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007256:	2360      	movs	r3, #96	; 0x60
 8007258:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	2200      	movs	r2, #0
 800726c:	4619      	mov	r1, r3
 800726e:	4808      	ldr	r0, [pc, #32]	; (8007290 <steer_pwm_setvalue+0x44>)
 8007270:	f7fc fb9a 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <steer_pwm_setvalue+0x32>
	{
		Error_Handler();
 800727a:	f000 fcc9 	bl	8007c10 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800727e:	2100      	movs	r1, #0
 8007280:	4803      	ldr	r0, [pc, #12]	; (8007290 <steer_pwm_setvalue+0x44>)
 8007282:	f7fc fa4b 	bl	800371c <HAL_TIM_PWM_Start>
}
 8007286:	bf00      	nop
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	2000037c 	.word	0x2000037c

08007294 <drive_forward>:

void steer_right_PWM(){
	steer_pwm_setvalue(133);
}

void drive_forward(uint16_t pwm){
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af02      	add	r7, sp, #8
 800729a:	4603      	mov	r3, r0
 800729c:	80fb      	strh	r3, [r7, #6]

	int i;

	for(i = 0; i<(int)pwm; i++){
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e00b      	b.n	80072bc <drive_forward+0x28>

		//pwm_setvalue(case, high_a, low_a, high_b, low_b);
		pwm_setvalue(1, i, 90, 0, 0);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	b299      	uxth	r1, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	225a      	movs	r2, #90	; 0x5a
 80072b0:	2001      	movs	r0, #1
 80072b2:	f7ff fec1 	bl	8007038 <pwm_setvalue>
	for(i = 0; i<(int)pwm; i++){
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	dbef      	blt.n	80072a4 <drive_forward+0x10>

	}

}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <drive_backward>:

void drive_backward(uint16_t pwm){
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	4603      	mov	r3, r0
 80072d4:	80fb      	strh	r3, [r7, #6]

	int i;

	for(i = 0; i<(int)pwm; i++){
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	e00c      	b.n	80072f6 <drive_backward+0x2a>

		//pwm_setvalue(case, high_a, low_a, high_b, low_b);
		pwm_setvalue(2, 0, 0, i, 90);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	235a      	movs	r3, #90	; 0x5a
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	2002      	movs	r0, #2
 80072ec:	f7ff fea4 	bl	8007038 <pwm_setvalue>
	for(i = 0; i<(int)pwm; i++){
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	dbee      	blt.n	80072dc <drive_backward+0x10>

	}

}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <stop>:

void stop(uint16_t pwm){
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af02      	add	r7, sp, #8
 800730c:	4603      	mov	r3, r0
 800730e:	80fb      	strh	r3, [r7, #6]

	//pwm_setvalue(case, high_a, low_a, high_b, low_b);
	pwm_setvalue(0, 0, pwm, 0, pwm);
 8007310:	88fa      	ldrh	r2, [r7, #6]
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	2100      	movs	r1, #0
 800731a:	2000      	movs	r0, #0
 800731c:	f7ff fe8c 	bl	8007038 <pwm_setvalue>

}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800732e:	f7f9 f8cb 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007332:	f000 f851 	bl	80073d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007336:	f000 fb57 	bl	80079e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800733a:	f000 f8cf 	bl	80074dc <MX_I2C1_Init>
  MX_I2S3_Init();
 800733e:	f000 f8fb 	bl	8007538 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007342:	f000 f929 	bl	8007598 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8007346:	f000 ff49 	bl	80081dc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800734a:	f000 fa7f 	bl	800784c <MX_TIM3_Init>
  MX_TIM4_Init();
 800734e:	f000 fac9 	bl	80078e4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8007352:	f000 fa05 	bl	8007760 <MX_TIM2_Init>
  MX_TIM1_Init();
 8007356:	f000 f955 	bl	8007604 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 800735a:	481d      	ldr	r0, [pc, #116]	; (80073d0 <main+0xa8>)
 800735c:	f7fc f985 	bl	800366a <HAL_TIM_Base_Start_IT>
	uint8_t Reverse = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	71bb      	strb	r3, [r7, #6]
	uint8_t Stop = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i = 235;
 8007368:	23eb      	movs	r3, #235	; 0xeb
 800736a:	603b      	str	r3, [r7, #0]
	steer_pwm_setvalue(i);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff ff6b 	bl	800724c <steer_pwm_setvalue>
		//straight = 225
		//
		//steer_straight_PWM();


		drive_forward(40);
 8007376:	2028      	movs	r0, #40	; 0x28
 8007378:	f7ff ff8c 	bl	8007294 <drive_forward>
		//drive_backward(90);
		//HAL_Delay(1);

		Stop = HAL_GPIO_ReadPin(Stop_GPIO_Port, Stop_Pin);
 800737c:	2120      	movs	r1, #32
 800737e:	4815      	ldr	r0, [pc, #84]	; (80073d4 <main+0xac>)
 8007380:	f7f9 fbe2 	bl	8000b48 <HAL_GPIO_ReadPin>
 8007384:	4603      	mov	r3, r0
 8007386:	71fb      	strb	r3, [r7, #7]
		//int k = 0;
		while(Stop == 1)
 8007388:	e01e      	b.n	80073c8 <main+0xa0>
		{
			//if(!k){
				//steer_pwm_setvalue(200);
			//}

			stop(100);
 800738a:	2064      	movs	r0, #100	; 0x64
 800738c:	f7ff ffbb 	bl	8007306 <stop>
			Reverse = HAL_GPIO_ReadPin(Reverse_GPIO_Port, Reverse_Pin);
 8007390:	2110      	movs	r1, #16
 8007392:	4810      	ldr	r0, [pc, #64]	; (80073d4 <main+0xac>)
 8007394:	f7f9 fbd8 	bl	8000b48 <HAL_GPIO_ReadPin>
 8007398:	4603      	mov	r3, r0
 800739a:	71bb      	strb	r3, [r7, #6]
			while(Reverse == 1)
 800739c:	e011      	b.n	80073c2 <main+0x9a>
			{
				Stop = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	71fb      	strb	r3, [r7, #7]
				drive_backward(50);
 80073a2:	2032      	movs	r0, #50	; 0x32
 80073a4:	f7ff ff92 	bl	80072cc <drive_backward>
				Stop = HAL_GPIO_ReadPin(Stop_GPIO_Port, Stop_Pin);
 80073a8:	2120      	movs	r1, #32
 80073aa:	480a      	ldr	r0, [pc, #40]	; (80073d4 <main+0xac>)
 80073ac:	f7f9 fbcc 	bl	8000b48 <HAL_GPIO_ReadPin>
 80073b0:	4603      	mov	r3, r0
 80073b2:	71fb      	strb	r3, [r7, #7]
				while(Stop == 1)
 80073b4:	e002      	b.n	80073bc <main+0x94>
				{
					stop(100);
 80073b6:	2064      	movs	r0, #100	; 0x64
 80073b8:	f7ff ffa5 	bl	8007306 <stop>
				while(Stop == 1)
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d0f9      	beq.n	80073b6 <main+0x8e>
			while(Reverse == 1)
 80073c2:	79bb      	ldrb	r3, [r7, #6]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d0ea      	beq.n	800739e <main+0x76>
		while(Stop == 1)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d0dd      	beq.n	800738a <main+0x62>
		drive_forward(40);
 80073ce:	e7d2      	b.n	8007376 <main+0x4e>
 80073d0:	200002a4 	.word	0x200002a4
 80073d4:	40020400 	.word	0x40020400

080073d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b098      	sub	sp, #96	; 0x60
 80073dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073e2:	2230      	movs	r2, #48	; 0x30
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fc36 	bl	8008c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073ec:	f107 031c 	add.w	r3, r7, #28
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <SystemClock_Config+0xfc>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <SystemClock_Config+0xfc>)
 8007414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007418:	6413      	str	r3, [r2, #64]	; 0x40
 800741a:	4b2e      	ldr	r3, [pc, #184]	; (80074d4 <SystemClock_Config+0xfc>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007422:	60bb      	str	r3, [r7, #8]
 8007424:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007426:	2300      	movs	r3, #0
 8007428:	607b      	str	r3, [r7, #4]
 800742a:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <SystemClock_Config+0x100>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <SystemClock_Config+0x100>)
 8007430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <SystemClock_Config+0x100>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007442:	2301      	movs	r3, #1
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800744c:	2302      	movs	r3, #2
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007454:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007456:	2308      	movs	r3, #8
 8007458:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800745a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800745e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007460:	2302      	movs	r3, #2
 8007462:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007464:	2307      	movs	r3, #7
 8007466:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800746c:	4618      	mov	r0, r3
 800746e:	f7fb fb13 	bl	8002a98 <HAL_RCC_OscConfig>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007478:	f000 fbca 	bl	8007c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800747c:	230f      	movs	r3, #15
 800747e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007480:	2302      	movs	r3, #2
 8007482:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007488:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800748c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800748e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007494:	f107 031c 	add.w	r3, r7, #28
 8007498:	2105      	movs	r1, #5
 800749a:	4618      	mov	r0, r3
 800749c:	f7fb fd3e 	bl	8002f1c <HAL_RCC_ClockConfig>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80074a6:	f000 fbb3 	bl	8007c10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80074aa:	2301      	movs	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80074ae:	23c0      	movs	r3, #192	; 0xc0
 80074b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80074b2:	2302      	movs	r3, #2
 80074b4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074b6:	f107 030c 	add.w	r3, r7, #12
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fb ff08 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80074c6:	f000 fba3 	bl	8007c10 <Error_Handler>
  }
}
 80074ca:	bf00      	nop
 80074cc:	3760      	adds	r7, #96	; 0x60
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40007000 	.word	0x40007000

080074dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80074e0:	4b12      	ldr	r3, [pc, #72]	; (800752c <MX_I2C1_Init+0x50>)
 80074e2:	4a13      	ldr	r2, [pc, #76]	; (8007530 <MX_I2C1_Init+0x54>)
 80074e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80074e6:	4b11      	ldr	r3, [pc, #68]	; (800752c <MX_I2C1_Init+0x50>)
 80074e8:	4a12      	ldr	r2, [pc, #72]	; (8007534 <MX_I2C1_Init+0x58>)
 80074ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <MX_I2C1_Init+0x50>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <MX_I2C1_Init+0x50>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <MX_I2C1_Init+0x50>)
 80074fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007500:	4b0a      	ldr	r3, [pc, #40]	; (800752c <MX_I2C1_Init+0x50>)
 8007502:	2200      	movs	r2, #0
 8007504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007506:	4b09      	ldr	r3, [pc, #36]	; (800752c <MX_I2C1_Init+0x50>)
 8007508:	2200      	movs	r2, #0
 800750a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800750c:	4b07      	ldr	r3, [pc, #28]	; (800752c <MX_I2C1_Init+0x50>)
 800750e:	2200      	movs	r2, #0
 8007510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <MX_I2C1_Init+0x50>)
 8007514:	2200      	movs	r2, #0
 8007516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007518:	4804      	ldr	r0, [pc, #16]	; (800752c <MX_I2C1_Init+0x50>)
 800751a:	f7f9 fb6b 	bl	8000bf4 <HAL_I2C_Init>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007524:	f000 fb74 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007528:	bf00      	nop
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20000250 	.word	0x20000250
 8007530:	40005400 	.word	0x40005400
 8007534:	000186a0 	.word	0x000186a0

08007538 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <MX_I2S3_Init+0x54>)
 800753e:	4a14      	ldr	r2, [pc, #80]	; (8007590 <MX_I2S3_Init+0x58>)
 8007540:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <MX_I2S3_Init+0x54>)
 8007544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007548:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <MX_I2S3_Init+0x54>)
 800754c:	2200      	movs	r2, #0
 800754e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007550:	4b0e      	ldr	r3, [pc, #56]	; (800758c <MX_I2S3_Init+0x54>)
 8007552:	2200      	movs	r2, #0
 8007554:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <MX_I2S3_Init+0x54>)
 8007558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800755e:	4b0b      	ldr	r3, [pc, #44]	; (800758c <MX_I2S3_Init+0x54>)
 8007560:	4a0c      	ldr	r2, [pc, #48]	; (8007594 <MX_I2S3_Init+0x5c>)
 8007562:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007564:	4b09      	ldr	r3, [pc, #36]	; (800758c <MX_I2S3_Init+0x54>)
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <MX_I2S3_Init+0x54>)
 800756c:	2200      	movs	r2, #0
 800756e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <MX_I2S3_Init+0x54>)
 8007572:	2200      	movs	r2, #0
 8007574:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007576:	4805      	ldr	r0, [pc, #20]	; (800758c <MX_I2S3_Init+0x54>)
 8007578:	f7f9 fc64 	bl	8000e44 <HAL_I2S_Init>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8007582:	f000 fb45 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8007586:	bf00      	nop
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200003bc 	.word	0x200003bc
 8007590:	40003c00 	.word	0x40003c00
 8007594:	00017700 	.word	0x00017700

08007598 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800759c:	4b17      	ldr	r3, [pc, #92]	; (80075fc <MX_SPI1_Init+0x64>)
 800759e:	4a18      	ldr	r2, [pc, #96]	; (8007600 <MX_SPI1_Init+0x68>)
 80075a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <MX_SPI1_Init+0x64>)
 80075a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80075a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80075aa:	4b14      	ldr	r3, [pc, #80]	; (80075fc <MX_SPI1_Init+0x64>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80075b0:	4b12      	ldr	r3, [pc, #72]	; (80075fc <MX_SPI1_Init+0x64>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80075b6:	4b11      	ldr	r3, [pc, #68]	; (80075fc <MX_SPI1_Init+0x64>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <MX_SPI1_Init+0x64>)
 80075be:	2200      	movs	r2, #0
 80075c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80075c2:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <MX_SPI1_Init+0x64>)
 80075c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <MX_SPI1_Init+0x64>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <MX_SPI1_Init+0x64>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <MX_SPI1_Init+0x64>)
 80075d8:	2200      	movs	r2, #0
 80075da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075dc:	4b07      	ldr	r3, [pc, #28]	; (80075fc <MX_SPI1_Init+0x64>)
 80075de:	2200      	movs	r2, #0
 80075e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <MX_SPI1_Init+0x64>)
 80075e4:	220a      	movs	r2, #10
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80075e8:	4804      	ldr	r0, [pc, #16]	; (80075fc <MX_SPI1_Init+0x64>)
 80075ea:	f7fb ffaf 	bl	800354c <HAL_SPI_Init>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80075f4:	f000 fb0c 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80075f8:	bf00      	nop
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000324 	.word	0x20000324
 8007600:	40013000 	.word	0x40013000

08007604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b096      	sub	sp, #88	; 0x58
 8007608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800760a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	609a      	str	r2, [r3, #8]
 8007616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	609a      	str	r2, [r3, #8]
 800762e:	60da      	str	r2, [r3, #12]
 8007630:	611a      	str	r2, [r3, #16]
 8007632:	615a      	str	r2, [r3, #20]
 8007634:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007636:	1d3b      	adds	r3, r7, #4
 8007638:	2220      	movs	r2, #32
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fb0b 	bl	8008c58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007642:	4b45      	ldr	r3, [pc, #276]	; (8007758 <MX_TIM1_Init+0x154>)
 8007644:	4a45      	ldr	r2, [pc, #276]	; (800775c <MX_TIM1_Init+0x158>)
 8007646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8007648:	4b43      	ldr	r3, [pc, #268]	; (8007758 <MX_TIM1_Init+0x154>)
 800764a:	22a7      	movs	r2, #167	; 0xa7
 800764c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800764e:	4b42      	ldr	r3, [pc, #264]	; (8007758 <MX_TIM1_Init+0x154>)
 8007650:	2200      	movs	r2, #0
 8007652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8007654:	4b40      	ldr	r3, [pc, #256]	; (8007758 <MX_TIM1_Init+0x154>)
 8007656:	2263      	movs	r2, #99	; 0x63
 8007658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800765a:	4b3f      	ldr	r3, [pc, #252]	; (8007758 <MX_TIM1_Init+0x154>)
 800765c:	2200      	movs	r2, #0
 800765e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007660:	4b3d      	ldr	r3, [pc, #244]	; (8007758 <MX_TIM1_Init+0x154>)
 8007662:	2200      	movs	r2, #0
 8007664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007666:	4b3c      	ldr	r3, [pc, #240]	; (8007758 <MX_TIM1_Init+0x154>)
 8007668:	2200      	movs	r2, #0
 800766a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800766c:	483a      	ldr	r0, [pc, #232]	; (8007758 <MX_TIM1_Init+0x154>)
 800766e:	f7fb ffd1 	bl	8003614 <HAL_TIM_Base_Init>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8007678:	f000 faca 	bl	8007c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800767c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007680:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007686:	4619      	mov	r1, r3
 8007688:	4833      	ldr	r0, [pc, #204]	; (8007758 <MX_TIM1_Init+0x154>)
 800768a:	f7fc fa53 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8007694:	f000 fabc 	bl	8007c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007698:	482f      	ldr	r0, [pc, #188]	; (8007758 <MX_TIM1_Init+0x154>)
 800769a:	f7fc f80a 	bl	80036b2 <HAL_TIM_PWM_Init>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80076a4:	f000 fab4 	bl	8007c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076a8:	2300      	movs	r3, #0
 80076aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80076b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076b4:	4619      	mov	r1, r3
 80076b6:	4828      	ldr	r0, [pc, #160]	; (8007758 <MX_TIM1_Init+0x154>)
 80076b8:	f7fc fe35 	bl	8004326 <HAL_TIMEx_MasterConfigSynchronization>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80076c2:	f000 faa5 	bl	8007c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076c6:	2360      	movs	r3, #96	; 0x60
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30;
 80076ca:	231e      	movs	r3, #30
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076ce:	2300      	movs	r3, #0
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80076d2:	2300      	movs	r3, #0
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80076da:	2300      	movs	r3, #0
 80076dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80076de:	2300      	movs	r3, #0
 80076e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e6:	2200      	movs	r2, #0
 80076e8:	4619      	mov	r1, r3
 80076ea:	481b      	ldr	r0, [pc, #108]	; (8007758 <MX_TIM1_Init+0x154>)
 80076ec:	f7fc f95c 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80076f6:	f000 fa8b 	bl	8007c10 <Error_Handler>
  }
  sConfigOC.Pulse = 90;
 80076fa:	235a      	movs	r3, #90	; 0x5a
 80076fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80076fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007702:	2204      	movs	r2, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4814      	ldr	r0, [pc, #80]	; (8007758 <MX_TIM1_Init+0x154>)
 8007708:	f7fc f94e 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8007712:	f000 fa7d 	bl	8007c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800772a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800772e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007730:	2300      	movs	r3, #0
 8007732:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007734:	1d3b      	adds	r3, r7, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4807      	ldr	r0, [pc, #28]	; (8007758 <MX_TIM1_Init+0x154>)
 800773a:	f7fc fe39 	bl	80043b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8007744:	f000 fa64 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007748:	4803      	ldr	r0, [pc, #12]	; (8007758 <MX_TIM1_Init+0x154>)
 800774a:	f000 fbf1 	bl	8007f30 <HAL_TIM_MspPostInit>

}
 800774e:	bf00      	nop
 8007750:	3758      	adds	r7, #88	; 0x58
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200002e4 	.word	0x200002e4
 800775c:	40010000 	.word	0x40010000

08007760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08e      	sub	sp, #56	; 0x38
 8007764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	605a      	str	r2, [r3, #4]
 8007770:	609a      	str	r2, [r3, #8]
 8007772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007774:	f107 0320 	add.w	r3, r7, #32
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	609a      	str	r2, [r3, #8]
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	611a      	str	r2, [r3, #16]
 800778c:	615a      	str	r2, [r3, #20]
 800778e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007790:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <MX_TIM2_Init+0xe8>)
 8007792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 540;
 8007798:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <MX_TIM2_Init+0xe8>)
 800779a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800779e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077a0:	4b29      	ldr	r3, [pc, #164]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80077a6:	4b28      	ldr	r3, [pc, #160]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077a8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80077ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077b4:	4b24      	ldr	r3, [pc, #144]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80077ba:	4823      	ldr	r0, [pc, #140]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077bc:	f7fb ff2a 	bl	8003614 <HAL_TIM_Base_Init>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80077c6:	f000 fa23 	bl	8007c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80077d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077d4:	4619      	mov	r1, r3
 80077d6:	481c      	ldr	r0, [pc, #112]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077d8:	f7fc f9ac 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80077e2:	f000 fa15 	bl	8007c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80077e6:	4818      	ldr	r0, [pc, #96]	; (8007848 <MX_TIM2_Init+0xe8>)
 80077e8:	f7fb ff63 	bl	80036b2 <HAL_TIM_PWM_Init>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80077f2:	f000 fa0d 	bl	8007c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077f6:	2300      	movs	r3, #0
 80077f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80077fe:	f107 0320 	add.w	r3, r7, #32
 8007802:	4619      	mov	r1, r3
 8007804:	4810      	ldr	r0, [pc, #64]	; (8007848 <MX_TIM2_Init+0xe8>)
 8007806:	f7fc fd8e 	bl	8004326 <HAL_TIMEx_MasterConfigSynchronization>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8007810:	f000 f9fe 	bl	8007c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007814:	2360      	movs	r3, #96	; 0x60
 8007816:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800781c:	2300      	movs	r3, #0
 800781e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007824:	1d3b      	adds	r3, r7, #4
 8007826:	2200      	movs	r2, #0
 8007828:	4619      	mov	r1, r3
 800782a:	4807      	ldr	r0, [pc, #28]	; (8007848 <MX_TIM2_Init+0xe8>)
 800782c:	f7fc f8bc 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8007836:	f000 f9eb 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800783a:	4803      	ldr	r0, [pc, #12]	; (8007848 <MX_TIM2_Init+0xe8>)
 800783c:	f000 fb78 	bl	8007f30 <HAL_TIM_MspPostInit>

}
 8007840:	bf00      	nop
 8007842:	3738      	adds	r7, #56	; 0x38
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	2000037c 	.word	0x2000037c

0800784c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	609a      	str	r2, [r3, #8]
 800785e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007860:	463b      	mov	r3, r7
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007868:	4b1c      	ldr	r3, [pc, #112]	; (80078dc <MX_TIM3_Init+0x90>)
 800786a:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <MX_TIM3_Init+0x94>)
 800786c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800786e:	4b1b      	ldr	r3, [pc, #108]	; (80078dc <MX_TIM3_Init+0x90>)
 8007870:	2200      	movs	r2, #0
 8007872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007874:	4b19      	ldr	r3, [pc, #100]	; (80078dc <MX_TIM3_Init+0x90>)
 8007876:	2200      	movs	r2, #0
 8007878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800787a:	4b18      	ldr	r3, [pc, #96]	; (80078dc <MX_TIM3_Init+0x90>)
 800787c:	2200      	movs	r2, #0
 800787e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007880:	4b16      	ldr	r3, [pc, #88]	; (80078dc <MX_TIM3_Init+0x90>)
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007886:	4b15      	ldr	r3, [pc, #84]	; (80078dc <MX_TIM3_Init+0x90>)
 8007888:	2200      	movs	r2, #0
 800788a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800788c:	4813      	ldr	r0, [pc, #76]	; (80078dc <MX_TIM3_Init+0x90>)
 800788e:	f7fb fec1 	bl	8003614 <HAL_TIM_Base_Init>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8007898:	f000 f9ba 	bl	8007c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800789c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80078a2:	f107 0308 	add.w	r3, r7, #8
 80078a6:	4619      	mov	r1, r3
 80078a8:	480c      	ldr	r0, [pc, #48]	; (80078dc <MX_TIM3_Init+0x90>)
 80078aa:	f7fc f943 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80078b4:	f000 f9ac 	bl	8007c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078b8:	2300      	movs	r3, #0
 80078ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078bc:	2300      	movs	r3, #0
 80078be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80078c0:	463b      	mov	r3, r7
 80078c2:	4619      	mov	r1, r3
 80078c4:	4805      	ldr	r0, [pc, #20]	; (80078dc <MX_TIM3_Init+0x90>)
 80078c6:	f7fc fd2e 	bl	8004326 <HAL_TIMEx_MasterConfigSynchronization>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80078d0:	f000 f99e 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80078d4:	bf00      	nop
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	200002a4 	.word	0x200002a4
 80078e0:	40000400 	.word	0x40000400

080078e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	; 0x38
 80078e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	609a      	str	r2, [r3, #8]
 80078f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078f8:	f107 0320 	add.w	r3, r7, #32
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	609a      	str	r2, [r3, #8]
 800790c:	60da      	str	r2, [r3, #12]
 800790e:	611a      	str	r2, [r3, #16]
 8007910:	615a      	str	r2, [r3, #20]
 8007912:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007914:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007916:	4a33      	ldr	r2, [pc, #204]	; (80079e4 <MX_TIM4_Init+0x100>)
 8007918:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 800791a:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <MX_TIM4_Init+0xfc>)
 800791c:	22a7      	movs	r2, #167	; 0xa7
 800791e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007920:	4b2f      	ldr	r3, [pc, #188]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007922:	2200      	movs	r2, #0
 8007924:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8007926:	4b2e      	ldr	r3, [pc, #184]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007928:	2263      	movs	r2, #99	; 0x63
 800792a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800792c:	4b2c      	ldr	r3, [pc, #176]	; (80079e0 <MX_TIM4_Init+0xfc>)
 800792e:	2200      	movs	r2, #0
 8007930:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007932:	4b2b      	ldr	r3, [pc, #172]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007934:	2200      	movs	r2, #0
 8007936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007938:	4829      	ldr	r0, [pc, #164]	; (80079e0 <MX_TIM4_Init+0xfc>)
 800793a:	f7fb fe6b 	bl	8003614 <HAL_TIM_Base_Init>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8007944:	f000 f964 	bl	8007c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800794c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800794e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007952:	4619      	mov	r1, r3
 8007954:	4822      	ldr	r0, [pc, #136]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007956:	f7fc f8ed 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8007960:	f000 f956 	bl	8007c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007964:	481e      	ldr	r0, [pc, #120]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007966:	f7fb fea4 	bl	80036b2 <HAL_TIM_PWM_Init>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8007970:	f000 f94e 	bl	8007c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007974:	2300      	movs	r3, #0
 8007976:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007978:	2300      	movs	r3, #0
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800797c:	f107 0320 	add.w	r3, r7, #32
 8007980:	4619      	mov	r1, r3
 8007982:	4817      	ldr	r0, [pc, #92]	; (80079e0 <MX_TIM4_Init+0xfc>)
 8007984:	f7fc fccf 	bl	8004326 <HAL_TIMEx_MasterConfigSynchronization>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800798e:	f000 f93f 	bl	8007c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007992:	2360      	movs	r3, #96	; 0x60
 8007994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8007996:	231e      	movs	r3, #30
 8007998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80079a2:	1d3b      	adds	r3, r7, #4
 80079a4:	2200      	movs	r2, #0
 80079a6:	4619      	mov	r1, r3
 80079a8:	480d      	ldr	r0, [pc, #52]	; (80079e0 <MX_TIM4_Init+0xfc>)
 80079aa:	f7fb fffd 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80079b4:	f000 f92c 	bl	8007c10 <Error_Handler>
  }
  sConfigOC.Pulse = 90;
 80079b8:	235a      	movs	r3, #90	; 0x5a
 80079ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80079bc:	1d3b      	adds	r3, r7, #4
 80079be:	2204      	movs	r2, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4807      	ldr	r0, [pc, #28]	; (80079e0 <MX_TIM4_Init+0xfc>)
 80079c4:	f7fb fff0 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80079ce:	f000 f91f 	bl	8007c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80079d2:	4803      	ldr	r0, [pc, #12]	; (80079e0 <MX_TIM4_Init+0xfc>)
 80079d4:	f000 faac 	bl	8007f30 <HAL_TIM_MspPostInit>

}
 80079d8:	bf00      	nop
 80079da:	3738      	adds	r7, #56	; 0x38
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000210 	.word	0x20000210
 80079e4:	40000800 	.word	0x40000800

080079e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08c      	sub	sp, #48	; 0x30
 80079ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ee:	f107 031c 	add.w	r3, r7, #28
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	609a      	str	r2, [r3, #8]
 80079fa:	60da      	str	r2, [r3, #12]
 80079fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80079fe:	2300      	movs	r3, #0
 8007a00:	61bb      	str	r3, [r7, #24]
 8007a02:	4b7b      	ldr	r3, [pc, #492]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	4a7a      	ldr	r2, [pc, #488]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a08:	f043 0310 	orr.w	r3, r3, #16
 8007a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a0e:	4b78      	ldr	r3, [pc, #480]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	4b74      	ldr	r3, [pc, #464]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	4a73      	ldr	r2, [pc, #460]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a24:	f043 0304 	orr.w	r3, r3, #4
 8007a28:	6313      	str	r3, [r2, #48]	; 0x30
 8007a2a:	4b71      	ldr	r3, [pc, #452]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	4b6d      	ldr	r3, [pc, #436]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	4a6c      	ldr	r2, [pc, #432]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a44:	6313      	str	r3, [r2, #48]	; 0x30
 8007a46:	4b6a      	ldr	r3, [pc, #424]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	4b66      	ldr	r3, [pc, #408]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	4a65      	ldr	r2, [pc, #404]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	6313      	str	r3, [r2, #48]	; 0x30
 8007a62:	4b63      	ldr	r3, [pc, #396]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	4b5f      	ldr	r3, [pc, #380]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	4a5e      	ldr	r2, [pc, #376]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a78:	f043 0302 	orr.w	r3, r3, #2
 8007a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a7e:	4b5c      	ldr	r3, [pc, #368]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	4b58      	ldr	r3, [pc, #352]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a92:	4a57      	ldr	r2, [pc, #348]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a94:	f043 0308 	orr.w	r3, r3, #8
 8007a98:	6313      	str	r3, [r2, #48]	; 0x30
 8007a9a:	4b55      	ldr	r3, [pc, #340]	; (8007bf0 <MX_GPIO_Init+0x208>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	607b      	str	r3, [r7, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2108      	movs	r1, #8
 8007aaa:	4852      	ldr	r0, [pc, #328]	; (8007bf4 <MX_GPIO_Init+0x20c>)
 8007aac:	f7f9 f864 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	4850      	ldr	r0, [pc, #320]	; (8007bf8 <MX_GPIO_Init+0x210>)
 8007ab6:	f7f9 f85f 	bl	8000b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|APIN_Pin|BPIN_Pin|LD3_Pin 
 8007aba:	2200      	movs	r2, #0
 8007abc:	f64e 6110 	movw	r1, #60944	; 0xee10
 8007ac0:	484e      	ldr	r0, [pc, #312]	; (8007bfc <MX_GPIO_Init+0x214>)
 8007ac2:	f7f9 f859 	bl	8000b78 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007aca:	2301      	movs	r3, #1
 8007acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007ad6:	f107 031c 	add.w	r3, r7, #28
 8007ada:	4619      	mov	r1, r3
 8007adc:	4845      	ldr	r0, [pc, #276]	; (8007bf4 <MX_GPIO_Init+0x20c>)
 8007ade:	f7f8 fe99 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aee:	2300      	movs	r3, #0
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007af2:	f107 031c 	add.w	r3, r7, #28
 8007af6:	4619      	mov	r1, r3
 8007af8:	483f      	ldr	r0, [pc, #252]	; (8007bf8 <MX_GPIO_Init+0x210>)
 8007afa:	f7f8 fe8b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007afe:	2308      	movs	r3, #8
 8007b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b02:	2302      	movs	r3, #2
 8007b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b0e:	2305      	movs	r3, #5
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007b12:	f107 031c 	add.w	r3, r7, #28
 8007b16:	4619      	mov	r1, r3
 8007b18:	4837      	ldr	r0, [pc, #220]	; (8007bf8 <MX_GPIO_Init+0x210>)
 8007b1a:	f7f8 fe7b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007b22:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <MX_GPIO_Init+0x218>)
 8007b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007b2a:	f107 031c 	add.w	r3, r7, #28
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4834      	ldr	r0, [pc, #208]	; (8007c04 <MX_GPIO_Init+0x21c>)
 8007b32:	f7f8 fe6f 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007b36:	2304      	movs	r3, #4
 8007b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007b42:	f107 031c 	add.w	r3, r7, #28
 8007b46:	4619      	mov	r1, r3
 8007b48:	482f      	ldr	r0, [pc, #188]	; (8007c08 <MX_GPIO_Init+0x220>)
 8007b4a:	f7f8 fe63 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b54:	2302      	movs	r3, #2
 8007b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007b60:	2305      	movs	r3, #5
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007b64:	f107 031c 	add.w	r3, r7, #28
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4827      	ldr	r0, [pc, #156]	; (8007c08 <MX_GPIO_Init+0x220>)
 8007b6c:	f7f8 fe52 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 APIN_Pin BPIN_Pin LD3_Pin 
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|APIN_Pin|BPIN_Pin|LD3_Pin 
 8007b70:	f64e 6310 	movw	r3, #60944	; 0xee10
 8007b74:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b76:	2301      	movs	r3, #1
 8007b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b82:	f107 031c 	add.w	r3, r7, #28
 8007b86:	4619      	mov	r1, r3
 8007b88:	481c      	ldr	r0, [pc, #112]	; (8007bfc <MX_GPIO_Init+0x214>)
 8007b8a:	f7f8 fe43 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007b8e:	2320      	movs	r3, #32
 8007b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b92:	2300      	movs	r3, #0
 8007b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007b9a:	f107 031c 	add.w	r3, r7, #28
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4816      	ldr	r0, [pc, #88]	; (8007bfc <MX_GPIO_Init+0x214>)
 8007ba2:	f7f8 fe37 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reverse_Pin Stop_Pin */
  GPIO_InitStruct.Pin = Reverse_Pin|Stop_Pin;
 8007ba6:	2330      	movs	r3, #48	; 0x30
 8007ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007baa:	2300      	movs	r3, #0
 8007bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bb2:	f107 031c 	add.w	r3, r7, #28
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4813      	ldr	r0, [pc, #76]	; (8007c08 <MX_GPIO_Init+0x220>)
 8007bba:	f7f8 fe2b 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <MX_GPIO_Init+0x224>)
 8007bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007bca:	f107 031c 	add.w	r3, r7, #28
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <MX_GPIO_Init+0x20c>)
 8007bd2:	f7f8 fe1f 	bl	8000814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2100      	movs	r1, #0
 8007bda:	2006      	movs	r0, #6
 8007bdc:	f7f8 fde3 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007be0:	2006      	movs	r0, #6
 8007be2:	f7f8 fdfc 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 8007be6:	bf00      	nop
 8007be8:	3730      	adds	r7, #48	; 0x30
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40021000 	.word	0x40021000
 8007bf8:	40020800 	.word	0x40020800
 8007bfc:	40020c00 	.word	0x40020c00
 8007c00:	10110000 	.word	0x10110000
 8007c04:	40020000 	.word	0x40020000
 8007c08:	40020400 	.word	0x40020400
 8007c0c:	10120000 	.word	0x10120000

08007c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	4b10      	ldr	r3, [pc, #64]	; (8007c6c <HAL_MspInit+0x4c>)
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2e:	4a0f      	ldr	r2, [pc, #60]	; (8007c6c <HAL_MspInit+0x4c>)
 8007c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c34:	6453      	str	r3, [r2, #68]	; 0x44
 8007c36:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <HAL_MspInit+0x4c>)
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	2300      	movs	r3, #0
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	4b09      	ldr	r3, [pc, #36]	; (8007c6c <HAL_MspInit+0x4c>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <HAL_MspInit+0x4c>)
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c50:	6413      	str	r3, [r2, #64]	; 0x40
 8007c52:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <HAL_MspInit+0x4c>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007c5e:	2007      	movs	r0, #7
 8007c60:	f7f8 fd96 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40023800 	.word	0x40023800

08007c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c78:	f107 0314 	add.w	r3, r7, #20
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	609a      	str	r2, [r3, #8]
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	; (8007cf4 <HAL_I2C_MspInit+0x84>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d12c      	bne.n	8007cec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <HAL_I2C_MspInit+0x88>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <HAL_I2C_MspInit+0x88>)
 8007c9c:	f043 0302 	orr.w	r3, r3, #2
 8007ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <HAL_I2C_MspInit+0x88>)
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007cae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007cb4:	2312      	movs	r3, #18
 8007cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cc4:	f107 0314 	add.w	r3, r7, #20
 8007cc8:	4619      	mov	r1, r3
 8007cca:	480c      	ldr	r0, [pc, #48]	; (8007cfc <HAL_I2C_MspInit+0x8c>)
 8007ccc:	f7f8 fda2 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	4b08      	ldr	r3, [pc, #32]	; (8007cf8 <HAL_I2C_MspInit+0x88>)
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <HAL_I2C_MspInit+0x88>)
 8007cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cde:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <HAL_I2C_MspInit+0x88>)
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007cec:	bf00      	nop
 8007cee:	3728      	adds	r7, #40	; 0x28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40005400 	.word	0x40005400
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	40020400 	.word	0x40020400

08007d00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d08:	f107 0314 	add.w	r3, r7, #20
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	609a      	str	r2, [r3, #8]
 8007d14:	60da      	str	r2, [r3, #12]
 8007d16:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a28      	ldr	r2, [pc, #160]	; (8007dc0 <HAL_I2S_MspInit+0xc0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d14a      	bne.n	8007db8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007d22:	2300      	movs	r3, #0
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	4a26      	ldr	r2, [pc, #152]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d30:	6413      	str	r3, [r2, #64]	; 0x40
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d46:	4a1f      	ldr	r2, [pc, #124]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d48:	f043 0301 	orr.w	r3, r3, #1
 8007d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	4a18      	ldr	r2, [pc, #96]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d64:	f043 0304 	orr.w	r3, r3, #4
 8007d68:	6313      	str	r3, [r2, #48]	; 0x30
 8007d6a:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <HAL_I2S_MspInit+0xc4>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	60bb      	str	r3, [r7, #8]
 8007d74:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007d76:	2310      	movs	r3, #16
 8007d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d82:	2300      	movs	r3, #0
 8007d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007d86:	2306      	movs	r3, #6
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007d8a:	f107 0314 	add.w	r3, r7, #20
 8007d8e:	4619      	mov	r1, r3
 8007d90:	480d      	ldr	r0, [pc, #52]	; (8007dc8 <HAL_I2S_MspInit+0xc8>)
 8007d92:	f7f8 fd3f 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007d96:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007da4:	2300      	movs	r3, #0
 8007da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007da8:	2306      	movs	r3, #6
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dac:	f107 0314 	add.w	r3, r7, #20
 8007db0:	4619      	mov	r1, r3
 8007db2:	4806      	ldr	r0, [pc, #24]	; (8007dcc <HAL_I2S_MspInit+0xcc>)
 8007db4:	f7f8 fd2e 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007db8:	bf00      	nop
 8007dba:	3728      	adds	r7, #40	; 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40003c00 	.word	0x40003c00
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	40020000 	.word	0x40020000
 8007dcc:	40020800 	.word	0x40020800

08007dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08a      	sub	sp, #40	; 0x28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	2200      	movs	r2, #0
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	609a      	str	r2, [r3, #8]
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a19      	ldr	r2, [pc, #100]	; (8007e54 <HAL_SPI_MspInit+0x84>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d12b      	bne.n	8007e4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007df2:	2300      	movs	r3, #0
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <HAL_SPI_MspInit+0x88>)
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <HAL_SPI_MspInit+0x88>)
 8007dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e00:	6453      	str	r3, [r2, #68]	; 0x44
 8007e02:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <HAL_SPI_MspInit+0x88>)
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	4b11      	ldr	r3, [pc, #68]	; (8007e58 <HAL_SPI_MspInit+0x88>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	4a10      	ldr	r2, [pc, #64]	; (8007e58 <HAL_SPI_MspInit+0x88>)
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <HAL_SPI_MspInit+0x88>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007e2a:	23e0      	movs	r3, #224	; 0xe0
 8007e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e36:	2300      	movs	r3, #0
 8007e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007e3a:	2305      	movs	r3, #5
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e3e:	f107 0314 	add.w	r3, r7, #20
 8007e42:	4619      	mov	r1, r3
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <HAL_SPI_MspInit+0x8c>)
 8007e46:	f7f8 fce5 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007e4a:	bf00      	nop
 8007e4c:	3728      	adds	r7, #40	; 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40013000 	.word	0x40013000
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	40020000 	.word	0x40020000

08007e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2c      	ldr	r2, [pc, #176]	; (8007f20 <HAL_TIM_Base_MspInit+0xc0>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d10e      	bne.n	8007e90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7a:	4a2a      	ldr	r2, [pc, #168]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	6453      	str	r3, [r2, #68]	; 0x44
 8007e82:	4b28      	ldr	r3, [pc, #160]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007e8e:	e042      	b.n	8007f16 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e98:	d10e      	bne.n	8007eb8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	4b21      	ldr	r3, [pc, #132]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	4a20      	ldr	r2, [pc, #128]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eaa:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	693b      	ldr	r3, [r7, #16]
}
 8007eb6:	e02e      	b.n	8007f16 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1a      	ldr	r2, [pc, #104]	; (8007f28 <HAL_TIM_Base_MspInit+0xc8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d116      	bne.n	8007ef0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	4a16      	ldr	r2, [pc, #88]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ed2:	4b14      	ldr	r3, [pc, #80]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	201d      	movs	r0, #29
 8007ee4:	f7f8 fc5f 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007ee8:	201d      	movs	r0, #29
 8007eea:	f7f8 fc78 	bl	80007de <HAL_NVIC_EnableIRQ>
}
 8007eee:	e012      	b.n	8007f16 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a0d      	ldr	r2, [pc, #52]	; (8007f2c <HAL_TIM_Base_MspInit+0xcc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d10d      	bne.n	8007f16 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	4a08      	ldr	r2, [pc, #32]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007f04:	f043 0304 	orr.w	r3, r3, #4
 8007f08:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0a:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <HAL_TIM_Base_MspInit+0xc4>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	68bb      	ldr	r3, [r7, #8]
}
 8007f16:	bf00      	nop
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40023800 	.word	0x40023800
 8007f28:	40000400 	.word	0x40000400
 8007f2c:	40000800 	.word	0x40000800

08007f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08c      	sub	sp, #48	; 0x30
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f38:	f107 031c 	add.w	r3, r7, #28
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a46      	ldr	r2, [pc, #280]	; (8008068 <HAL_TIM_MspPostInit+0x138>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d11f      	bne.n	8007f92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007f52:	2300      	movs	r3, #0
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	4b45      	ldr	r3, [pc, #276]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	4a44      	ldr	r2, [pc, #272]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007f5c:	f043 0310 	orr.w	r3, r3, #16
 8007f60:	6313      	str	r3, [r2, #48]	; 0x30
 8007f62:	4b42      	ldr	r3, [pc, #264]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007f6e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f74:	2302      	movs	r3, #2
 8007f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007f80:	2301      	movs	r3, #1
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007f84:	f107 031c 	add.w	r3, r7, #28
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4839      	ldr	r0, [pc, #228]	; (8008070 <HAL_TIM_MspPostInit+0x140>)
 8007f8c:	f7f8 fc42 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007f90:	e066      	b.n	8008060 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9a:	d11f      	bne.n	8007fdc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	4b32      	ldr	r3, [pc, #200]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	4a31      	ldr	r2, [pc, #196]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	6313      	str	r3, [r2, #48]	; 0x30
 8007fac:	4b2f      	ldr	r3, [pc, #188]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fce:	f107 031c 	add.w	r3, r7, #28
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4827      	ldr	r0, [pc, #156]	; (8008074 <HAL_TIM_MspPostInit+0x144>)
 8007fd6:	f7f8 fc1d 	bl	8000814 <HAL_GPIO_Init>
}
 8007fda:	e041      	b.n	8008060 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM4)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a25      	ldr	r2, [pc, #148]	; (8008078 <HAL_TIM_MspPostInit+0x148>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d13c      	bne.n	8008060 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	4b20      	ldr	r3, [pc, #128]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	4a1f      	ldr	r2, [pc, #124]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008002:	2300      	movs	r3, #0
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	4a18      	ldr	r2, [pc, #96]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 800800c:	f043 0302 	orr.w	r3, r3, #2
 8008010:	6313      	str	r3, [r2, #48]	; 0x30
 8008012:	4b16      	ldr	r3, [pc, #88]	; (800806c <HAL_TIM_MspPostInit+0x13c>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800801e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008024:	2302      	movs	r3, #2
 8008026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008028:	2300      	movs	r3, #0
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800802c:	2300      	movs	r3, #0
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008030:	2302      	movs	r3, #2
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008034:	f107 031c 	add.w	r3, r7, #28
 8008038:	4619      	mov	r1, r3
 800803a:	4810      	ldr	r0, [pc, #64]	; (800807c <HAL_TIM_MspPostInit+0x14c>)
 800803c:	f7f8 fbea 	bl	8000814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008044:	2302      	movs	r3, #2
 8008046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008048:	2300      	movs	r3, #0
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800804c:	2300      	movs	r3, #0
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008050:	2302      	movs	r3, #2
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008054:	f107 031c 	add.w	r3, r7, #28
 8008058:	4619      	mov	r1, r3
 800805a:	4809      	ldr	r0, [pc, #36]	; (8008080 <HAL_TIM_MspPostInit+0x150>)
 800805c:	f7f8 fbda 	bl	8000814 <HAL_GPIO_Init>
}
 8008060:	bf00      	nop
 8008062:	3730      	adds	r7, #48	; 0x30
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40010000 	.word	0x40010000
 800806c:	40023800 	.word	0x40023800
 8008070:	40021000 	.word	0x40021000
 8008074:	40020000 	.word	0x40020000
 8008078:	40000800 	.word	0x40000800
 800807c:	40020c00 	.word	0x40020c00
 8008080:	40020400 	.word	0x40020400

08008084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008088:	bf00      	nop
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008092:	b480      	push	{r7}
 8008094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008096:	e7fe      	b.n	8008096 <HardFault_Handler+0x4>

08008098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800809c:	e7fe      	b.n	800809c <MemManage_Handler+0x4>

0800809e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800809e:	b480      	push	{r7}
 80080a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080a2:	e7fe      	b.n	80080a2 <BusFault_Handler+0x4>

080080a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080a8:	e7fe      	b.n	80080a8 <UsageFault_Handler+0x4>

080080aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080aa:	b480      	push	{r7}
 80080ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080ae:	bf00      	nop
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80080bc:	bf00      	nop
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080c6:	b480      	push	{r7}
 80080c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080ca:	bf00      	nop
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080d8:	f7f8 fa48 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080dc:	bf00      	nop
 80080de:	bd80      	pop	{r7, pc}

080080e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80080e4:	2001      	movs	r0, #1
 80080e6:	f7f8 fd61 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80080ea:	bf00      	nop
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80080f4:	4802      	ldr	r0, [pc, #8]	; (8008100 <TIM3_IRQHandler+0x10>)
 80080f6:	f7fb fb4f 	bl	8003798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	200002a4 	.word	0x200002a4

08008104 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008108:	4802      	ldr	r0, [pc, #8]	; (8008114 <OTG_FS_IRQHandler+0x10>)
 800810a:	f7f9 fc8b 	bl	8001a24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800810e:	bf00      	nop
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200016a0 	.word	0x200016a0

08008118 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008120:	4b11      	ldr	r3, [pc, #68]	; (8008168 <_sbrk+0x50>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <_sbrk+0x16>
		heap_end = &end;
 8008128:	4b0f      	ldr	r3, [pc, #60]	; (8008168 <_sbrk+0x50>)
 800812a:	4a10      	ldr	r2, [pc, #64]	; (800816c <_sbrk+0x54>)
 800812c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800812e:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <_sbrk+0x50>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <_sbrk+0x50>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	466a      	mov	r2, sp
 800813e:	4293      	cmp	r3, r2
 8008140:	d907      	bls.n	8008152 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008142:	f000 fd4f 	bl	8008be4 <__errno>
 8008146:	4602      	mov	r2, r0
 8008148:	230c      	movs	r3, #12
 800814a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	e006      	b.n	8008160 <_sbrk+0x48>
	}

	heap_end += incr;
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <_sbrk+0x50>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4413      	add	r3, r2
 800815a:	4a03      	ldr	r2, [pc, #12]	; (8008168 <_sbrk+0x50>)
 800815c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800815e:	68fb      	ldr	r3, [r7, #12]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20000200 	.word	0x20000200
 800816c:	20001cb0 	.word	0x20001cb0

08008170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008174:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <SystemInit+0x60>)
 8008176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817a:	4a15      	ldr	r2, [pc, #84]	; (80081d0 <SystemInit+0x60>)
 800817c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008184:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <SystemInit+0x64>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a12      	ldr	r2, [pc, #72]	; (80081d4 <SystemInit+0x64>)
 800818a:	f043 0301 	orr.w	r3, r3, #1
 800818e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008190:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <SystemInit+0x64>)
 8008192:	2200      	movs	r2, #0
 8008194:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008196:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <SystemInit+0x64>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <SystemInit+0x64>)
 800819c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80081a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <SystemInit+0x64>)
 80081a8:	4a0b      	ldr	r2, [pc, #44]	; (80081d8 <SystemInit+0x68>)
 80081aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <SystemInit+0x64>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <SystemInit+0x64>)
 80081b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80081b8:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <SystemInit+0x64>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80081be:	4b04      	ldr	r3, [pc, #16]	; (80081d0 <SystemInit+0x60>)
 80081c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081c4:	609a      	str	r2, [r3, #8]
#endif
}
 80081c6:	bf00      	nop
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	e000ed00 	.word	0xe000ed00
 80081d4:	40023800 	.word	0x40023800
 80081d8:	24003010 	.word	0x24003010

080081dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081e0:	2200      	movs	r2, #0
 80081e2:	4912      	ldr	r1, [pc, #72]	; (800822c <MX_USB_DEVICE_Init+0x50>)
 80081e4:	4812      	ldr	r0, [pc, #72]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 80081e6:	f7fd fecc 	bl	8005f82 <USBD_Init>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081f0:	f7ff fd0e 	bl	8007c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081f4:	490f      	ldr	r1, [pc, #60]	; (8008234 <MX_USB_DEVICE_Init+0x58>)
 80081f6:	480e      	ldr	r0, [pc, #56]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 80081f8:	f7fd feee 	bl	8005fd8 <USBD_RegisterClass>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008202:	f7ff fd05 	bl	8007c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008206:	490c      	ldr	r1, [pc, #48]	; (8008238 <MX_USB_DEVICE_Init+0x5c>)
 8008208:	4809      	ldr	r0, [pc, #36]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 800820a:	f7fd fe4b 	bl	8005ea4 <USBD_CDC_RegisterInterface>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008214:	f7ff fcfc 	bl	8007c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008218:	4805      	ldr	r0, [pc, #20]	; (8008230 <MX_USB_DEVICE_Init+0x54>)
 800821a:	f7fd fef7 	bl	800600c <USBD_Start>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008224:	f7ff fcf4 	bl	8007c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	2000012c 	.word	0x2000012c
 8008230:	20000404 	.word	0x20000404
 8008234:	20000014 	.word	0x20000014
 8008238:	2000011c 	.word	0x2000011c

0800823c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008240:	2200      	movs	r2, #0
 8008242:	4905      	ldr	r1, [pc, #20]	; (8008258 <CDC_Init_FS+0x1c>)
 8008244:	4805      	ldr	r0, [pc, #20]	; (800825c <CDC_Init_FS+0x20>)
 8008246:	f7fd fe44 	bl	8005ed2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800824a:	4905      	ldr	r1, [pc, #20]	; (8008260 <CDC_Init_FS+0x24>)
 800824c:	4803      	ldr	r0, [pc, #12]	; (800825c <CDC_Init_FS+0x20>)
 800824e:	f7fd fe5a 	bl	8005f06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008252:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000ea0 	.word	0x20000ea0
 800825c:	20000404 	.word	0x20000404
 8008260:	200006a0 	.word	0x200006a0

08008264 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008268:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800826a:	4618      	mov	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	6039      	str	r1, [r7, #0]
 800827e:	71fb      	strb	r3, [r7, #7]
 8008280:	4613      	mov	r3, r2
 8008282:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b23      	cmp	r3, #35	; 0x23
 8008288:	d84a      	bhi.n	8008320 <CDC_Control_FS+0xac>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <CDC_Control_FS+0x1c>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	08008321 	.word	0x08008321
 8008294:	08008321 	.word	0x08008321
 8008298:	08008321 	.word	0x08008321
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008321 	.word	0x08008321
 80082a4:	08008321 	.word	0x08008321
 80082a8:	08008321 	.word	0x08008321
 80082ac:	08008321 	.word	0x08008321
 80082b0:	08008321 	.word	0x08008321
 80082b4:	08008321 	.word	0x08008321
 80082b8:	08008321 	.word	0x08008321
 80082bc:	08008321 	.word	0x08008321
 80082c0:	08008321 	.word	0x08008321
 80082c4:	08008321 	.word	0x08008321
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008321 	.word	0x08008321
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008321 	.word	0x08008321
 80082dc:	08008321 	.word	0x08008321
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008321 	.word	0x08008321
 80082f0:	08008321 	.word	0x08008321
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008321 	.word	0x08008321
 8008304:	08008321 	.word	0x08008321
 8008308:	08008321 	.word	0x08008321
 800830c:	08008321 	.word	0x08008321
 8008310:	08008321 	.word	0x08008321
 8008314:	08008321 	.word	0x08008321
 8008318:	08008321 	.word	0x08008321
 800831c:	08008321 	.word	0x08008321
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008320:	bf00      	nop
  }

  return (USBD_OK);
 8008322:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4805      	ldr	r0, [pc, #20]	; (8008354 <CDC_Receive_FS+0x24>)
 800833e:	f7fd fde2 	bl	8005f06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008342:	4804      	ldr	r0, [pc, #16]	; (8008354 <CDC_Receive_FS+0x24>)
 8008344:	f7fd fdf3 	bl	8005f2e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008348:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000404 	.word	0x20000404

08008358 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008378:	d147      	bne.n	800840a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800837a:	2300      	movs	r3, #0
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	4b25      	ldr	r3, [pc, #148]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	4a24      	ldr	r2, [pc, #144]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	6313      	str	r3, [r2, #48]	; 0x30
 800838a:	4b22      	ldr	r3, [pc, #136]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800839a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800839c:	2300      	movs	r3, #0
 800839e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80083a4:	f107 0314 	add.w	r3, r7, #20
 80083a8:	4619      	mov	r1, r3
 80083aa:	481b      	ldr	r0, [pc, #108]	; (8008418 <HAL_PCD_MspInit+0xc0>)
 80083ac:	f7f8 fa32 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80083b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b6:	2302      	movs	r3, #2
 80083b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083be:	2300      	movs	r3, #0
 80083c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083c2:	230a      	movs	r3, #10
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083c6:	f107 0314 	add.w	r3, r7, #20
 80083ca:	4619      	mov	r1, r3
 80083cc:	4812      	ldr	r0, [pc, #72]	; (8008418 <HAL_PCD_MspInit+0xc0>)
 80083ce:	f7f8 fa21 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 80083d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d6:	4a0f      	ldr	r2, [pc, #60]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 80083d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083dc:	6353      	str	r3, [r2, #52]	; 0x34
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 80083e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083ec:	6453      	str	r3, [r2, #68]	; 0x44
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_PCD_MspInit+0xbc>)
 80083f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	2043      	movs	r0, #67	; 0x43
 8008400:	f7f8 f9d1 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008404:	2043      	movs	r0, #67	; 0x43
 8008406:	f7f8 f9ea 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800840a:	bf00      	nop
 800840c:	3728      	adds	r7, #40	; 0x28
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40023800 	.word	0x40023800
 8008418:	40020000 	.word	0x40020000

0800841c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fd fe33 	bl	800609e <USBD_LL_SetupStage>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	4619      	mov	r1, r3
 800846a:	f7fd fe63 	bl	8006134 <USBD_LL_DataOutStage>
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	3348      	adds	r3, #72	; 0x48
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	4619      	mov	r1, r3
 800849e:	f7fd feba 	bl	8006216 <USBD_LL_DataInStage>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fd ffc8 	bl	800644e <USBD_LL_SOF>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084ce:	2301      	movs	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d102      	bne.n	80084e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
 80084de:	e008      	b.n	80084f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d102      	bne.n	80084ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084e8:	2301      	movs	r3, #1
 80084ea:	73fb      	strb	r3, [r7, #15]
 80084ec:	e001      	b.n	80084f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084ee:	f7ff fb8f 	bl	8007c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084f8:	7bfa      	ldrb	r2, [r7, #15]
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fd ff70 	bl	80063e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008508:	4618      	mov	r0, r3
 800850a:	f7fd ff29 	bl	8006360 <USBD_LL_Reset>
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008526:	4618      	mov	r0, r3
 8008528:	f7fd ff6b 	bl	8006402 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800853e:	f043 0301 	orr.w	r3, r3, #1
 8008542:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <HAL_PCD_SuspendCallback+0x48>)
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	4a03      	ldr	r2, [pc, #12]	; (8008560 <HAL_PCD_SuspendCallback+0x48>)
 8008552:	f043 0306 	orr.w	r3, r3, #6
 8008556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	e000ed00 	.word	0xe000ed00

08008564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd ff5a 	bl	800642c <USBD_LL_Resume>
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	4611      	mov	r1, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd ff80 	bl	800649c <USBD_LL_IsoOUTIncomplete>
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b6:	78fa      	ldrb	r2, [r7, #3]
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fd ff61 	bl	8006482 <USBD_LL_IsoINIncomplete>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd ff6d 	bl	80064b6 <USBD_LL_DevConnected>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fd ff6a 	bl	80064cc <USBD_LL_DevDisconnected>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d13c      	bne.n	800868a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008610:	4a20      	ldr	r2, [pc, #128]	; (8008694 <USBD_LL_Init+0x94>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a1e      	ldr	r2, [pc, #120]	; (8008694 <USBD_LL_Init+0x94>)
 800861c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008620:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <USBD_LL_Init+0x94>)
 8008622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008626:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008628:	4b1a      	ldr	r3, [pc, #104]	; (8008694 <USBD_LL_Init+0x94>)
 800862a:	2204      	movs	r2, #4
 800862c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800862e:	4b19      	ldr	r3, [pc, #100]	; (8008694 <USBD_LL_Init+0x94>)
 8008630:	2202      	movs	r2, #2
 8008632:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008634:	4b17      	ldr	r3, [pc, #92]	; (8008694 <USBD_LL_Init+0x94>)
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800863a:	4b16      	ldr	r3, [pc, #88]	; (8008694 <USBD_LL_Init+0x94>)
 800863c:	2202      	movs	r2, #2
 800863e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008640:	4b14      	ldr	r3, [pc, #80]	; (8008694 <USBD_LL_Init+0x94>)
 8008642:	2200      	movs	r2, #0
 8008644:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008646:	4b13      	ldr	r3, [pc, #76]	; (8008694 <USBD_LL_Init+0x94>)
 8008648:	2200      	movs	r2, #0
 800864a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800864c:	4b11      	ldr	r3, [pc, #68]	; (8008694 <USBD_LL_Init+0x94>)
 800864e:	2200      	movs	r2, #0
 8008650:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <USBD_LL_Init+0x94>)
 8008654:	2200      	movs	r2, #0
 8008656:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008658:	4b0e      	ldr	r3, [pc, #56]	; (8008694 <USBD_LL_Init+0x94>)
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800865e:	480d      	ldr	r0, [pc, #52]	; (8008694 <USBD_LL_Init+0x94>)
 8008660:	f7f9 f890 	bl	8001784 <HAL_PCD_Init>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800866a:	f7ff fad1 	bl	8007c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800866e:	2180      	movs	r1, #128	; 0x80
 8008670:	4808      	ldr	r0, [pc, #32]	; (8008694 <USBD_LL_Init+0x94>)
 8008672:	f7fa f9f4 	bl	8002a5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008676:	2240      	movs	r2, #64	; 0x40
 8008678:	2100      	movs	r1, #0
 800867a:	4806      	ldr	r0, [pc, #24]	; (8008694 <USBD_LL_Init+0x94>)
 800867c:	f7fa f9a8 	bl	80029d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	2101      	movs	r1, #1
 8008684:	4803      	ldr	r0, [pc, #12]	; (8008694 <USBD_LL_Init+0x94>)
 8008686:	f7fa f9a3 	bl	80029d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	200016a0 	.word	0x200016a0

08008698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f9 f985 	bl	80019be <HAL_PCD_Start>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f92e 	bl	800891c <USBD_Get_USB_Status>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	461a      	mov	r2, r3
 80086dc:	4603      	mov	r3, r0
 80086de:	70fb      	strb	r3, [r7, #3]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70bb      	strb	r3, [r7, #2]
 80086e4:	4613      	mov	r3, r2
 80086e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80086f6:	78bb      	ldrb	r3, [r7, #2]
 80086f8:	883a      	ldrh	r2, [r7, #0]
 80086fa:	78f9      	ldrb	r1, [r7, #3]
 80086fc:	f7f9 fd5a 	bl	80021b4 <HAL_PCD_EP_Open>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f908 	bl	800891c <USBD_Get_USB_Status>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008710:	7bbb      	ldrb	r3, [r7, #14]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f7f9 fda3 	bl	8002284 <HAL_PCD_EP_Close>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f8e9 	bl	800891c <USBD_Get_USB_Status>
 800874a:	4603      	mov	r3, r0
 800874c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800874e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f7f9 fe7b 	bl	8002472 <HAL_PCD_EP_SetStall>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f8ca 	bl	800891c <USBD_Get_USB_Status>
 8008788:	4603      	mov	r3, r0
 800878a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800878c:	7bbb      	ldrb	r3, [r7, #14]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b084      	sub	sp, #16
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f9 fec0 	bl	800253a <HAL_PCD_EP_ClrStall>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f8ab 	bl	800891c <USBD_Get_USB_Status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087e6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80087e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da0b      	bge.n	8008808 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	4613      	mov	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	333e      	adds	r3, #62	; 0x3e
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	e00b      	b.n	8008820 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008808:	78fb      	ldrb	r3, [r7, #3]
 800880a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	4613      	mov	r3, r2
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800881e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7f9 fc8d 	bl	800216a <HAL_PCD_SetAddress>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f860 	bl	800891c <USBD_Get_USB_Status>
 800885c:	4603      	mov	r3, r0
 800885e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008860:	7bbb      	ldrb	r3, [r7, #14]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	461a      	mov	r2, r3
 8008876:	460b      	mov	r3, r1
 8008878:	72fb      	strb	r3, [r7, #11]
 800887a:	4613      	mov	r3, r2
 800887c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800888c:	893b      	ldrh	r3, [r7, #8]
 800888e:	7af9      	ldrb	r1, [r7, #11]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	f7f9 fda4 	bl	80023de <HAL_PCD_EP_Transmit>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f83d 	bl	800891c <USBD_Get_USB_Status>
 80088a2:	4603      	mov	r3, r0
 80088a4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80088a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	461a      	mov	r2, r3
 80088bc:	460b      	mov	r3, r1
 80088be:	72fb      	strb	r3, [r7, #11]
 80088c0:	4613      	mov	r3, r2
 80088c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80088d2:	893b      	ldrh	r3, [r7, #8]
 80088d4:	7af9      	ldrb	r1, [r7, #11]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	f7f9 fd1e 	bl	8002318 <HAL_PCD_EP_Receive>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f81a 	bl	800891c <USBD_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80088ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008908:	78fa      	ldrb	r2, [r7, #3]
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7f9 fd4e 	bl	80023ae <HAL_PCD_EP_GetRxCount>
 8008912:	4603      	mov	r3, r0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d817      	bhi.n	8008960 <USBD_Get_USB_Status+0x44>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_Get_USB_Status+0x1c>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008949 	.word	0x08008949
 800893c:	0800894f 	.word	0x0800894f
 8008940:	08008955 	.word	0x08008955
 8008944:	0800895b 	.word	0x0800895b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	e00b      	b.n	8008966 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800894e:	2302      	movs	r3, #2
 8008950:	73fb      	strb	r3, [r7, #15]
    break;
 8008952:	e008      	b.n	8008966 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	e005      	b.n	8008966 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800895a:	2302      	movs	r3, #2
 800895c:	73fb      	strb	r3, [r7, #15]
    break;
 800895e:	e002      	b.n	8008966 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008960:	2302      	movs	r3, #2
 8008962:	73fb      	strb	r3, [r7, #15]
    break;
 8008964:	bf00      	nop
  }
  return usb_status;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2212      	movs	r2, #18
 8008984:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	; (8008994 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	20000148 	.word	0x20000148

08008998 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2204      	movs	r2, #4
 80089a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089aa:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	2000015c 	.word	0x2000015c

080089bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4907      	ldr	r1, [pc, #28]	; (80089f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80089d2:	4808      	ldr	r0, [pc, #32]	; (80089f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089d4:	f7fe fa52 	bl	8006e7c <USBD_GetString>
 80089d8:	e004      	b.n	80089e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	4904      	ldr	r1, [pc, #16]	; (80089f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80089de:	4805      	ldr	r0, [pc, #20]	; (80089f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089e0:	f7fe fa4c 	bl	8006e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20001aa8 	.word	0x20001aa8
 80089f4:	08008df4 	.word	0x08008df4

080089f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	4904      	ldr	r1, [pc, #16]	; (8008a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a08:	4804      	ldr	r0, [pc, #16]	; (8008a1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a0a:	f7fe fa37 	bl	8006e7c <USBD_GetString>
  return USBD_StrDesc;
 8008a0e:	4b02      	ldr	r3, [pc, #8]	; (8008a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20001aa8 	.word	0x20001aa8
 8008a1c:	08008e0c 	.word	0x08008e0c

08008a20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	221a      	movs	r2, #26
 8008a30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a32:	f000 f843 	bl	8008abc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a36:	4b02      	ldr	r3, [pc, #8]	; (8008a40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000160 	.word	0x20000160

08008a44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d105      	bne.n	8008a62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4907      	ldr	r1, [pc, #28]	; (8008a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a5a:	4808      	ldr	r0, [pc, #32]	; (8008a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a5c:	f7fe fa0e 	bl	8006e7c <USBD_GetString>
 8008a60:	e004      	b.n	8008a6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	4904      	ldr	r1, [pc, #16]	; (8008a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a66:	4805      	ldr	r0, [pc, #20]	; (8008a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a68:	f7fe fa08 	bl	8006e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a6c:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20001aa8 	.word	0x20001aa8
 8008a7c:	08008e20 	.word	0x08008e20

08008a80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d105      	bne.n	8008a9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	4907      	ldr	r1, [pc, #28]	; (8008ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a96:	4808      	ldr	r0, [pc, #32]	; (8008ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a98:	f7fe f9f0 	bl	8006e7c <USBD_GetString>
 8008a9c:	e004      	b.n	8008aa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4904      	ldr	r1, [pc, #16]	; (8008ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008aa2:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008aa4:	f7fe f9ea 	bl	8006e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aa8:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20001aa8 	.word	0x20001aa8
 8008ab8:	08008e2c 	.word	0x08008e2c

08008abc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ac2:	4b0f      	ldr	r3, [pc, #60]	; (8008b00 <Get_SerialNum+0x44>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <Get_SerialNum+0x48>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <Get_SerialNum+0x4c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	4909      	ldr	r1, [pc, #36]	; (8008b0c <Get_SerialNum+0x50>)
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f814 	bl	8008b14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008aec:	2204      	movs	r2, #4
 8008aee:	4908      	ldr	r1, [pc, #32]	; (8008b10 <Get_SerialNum+0x54>)
 8008af0:	68b8      	ldr	r0, [r7, #8]
 8008af2:	f000 f80f 	bl	8008b14 <IntToUnicode>
  }
}
 8008af6:	bf00      	nop
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	1fff7a10 	.word	0x1fff7a10
 8008b04:	1fff7a14 	.word	0x1fff7a14
 8008b08:	1fff7a18 	.word	0x1fff7a18
 8008b0c:	20000162 	.word	0x20000162
 8008b10:	20000172 	.word	0x20000172

08008b14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
 8008b2a:	e027      	b.n	8008b7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	0f1b      	lsrs	r3, r3, #28
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d80b      	bhi.n	8008b4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	0f1b      	lsrs	r3, r3, #28
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	440b      	add	r3, r1
 8008b44:	3230      	adds	r2, #48	; 0x30
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	e00a      	b.n	8008b62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	0f1b      	lsrs	r3, r3, #28
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	4619      	mov	r1, r3
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	440b      	add	r3, r1
 8008b5c:	3237      	adds	r2, #55	; 0x37
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
 8008b7c:	7dfa      	ldrb	r2, [r7, #23]
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d3d3      	bcc.n	8008b2c <IntToUnicode+0x18>
  }
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b96:	e003      	b.n	8008ba0 <LoopCopyDataInit>

08008b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b9e:	3104      	adds	r1, #4

08008ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ba0:	480b      	ldr	r0, [pc, #44]	; (8008bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ba8:	d3f6      	bcc.n	8008b98 <CopyDataInit>
  ldr  r2, =_sbss
 8008baa:	4a0b      	ldr	r2, [pc, #44]	; (8008bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008bac:	e002      	b.n	8008bb4 <LoopFillZerobss>

08008bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bb0:	f842 3b04 	str.w	r3, [r2], #4

08008bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008bb4:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008bb8:	d3f9      	bcc.n	8008bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008bba:	f7ff fad9 	bl	8008170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008bbe:	f000 f817 	bl	8008bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008bc2:	f7fe fbb1 	bl	8007328 <main>
  bx  lr    
 8008bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008bcc:	08008e64 	.word	0x08008e64
  ldr  r0, =_sdata
 8008bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bd4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8008bd8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008bdc:	20001cac 	.word	0x20001cac

08008be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008be0:	e7fe      	b.n	8008be0 <ADC_IRQHandler>
	...

08008be4 <__errno>:
 8008be4:	4b01      	ldr	r3, [pc, #4]	; (8008bec <__errno+0x8>)
 8008be6:	6818      	ldr	r0, [r3, #0]
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	2000017c 	.word	0x2000017c

08008bf0 <__libc_init_array>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4e0d      	ldr	r6, [pc, #52]	; (8008c28 <__libc_init_array+0x38>)
 8008bf4:	4c0d      	ldr	r4, [pc, #52]	; (8008c2c <__libc_init_array+0x3c>)
 8008bf6:	1ba4      	subs	r4, r4, r6
 8008bf8:	10a4      	asrs	r4, r4, #2
 8008bfa:	2500      	movs	r5, #0
 8008bfc:	42a5      	cmp	r5, r4
 8008bfe:	d109      	bne.n	8008c14 <__libc_init_array+0x24>
 8008c00:	4e0b      	ldr	r6, [pc, #44]	; (8008c30 <__libc_init_array+0x40>)
 8008c02:	4c0c      	ldr	r4, [pc, #48]	; (8008c34 <__libc_init_array+0x44>)
 8008c04:	f000 f8ea 	bl	8008ddc <_init>
 8008c08:	1ba4      	subs	r4, r4, r6
 8008c0a:	10a4      	asrs	r4, r4, #2
 8008c0c:	2500      	movs	r5, #0
 8008c0e:	42a5      	cmp	r5, r4
 8008c10:	d105      	bne.n	8008c1e <__libc_init_array+0x2e>
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c18:	4798      	blx	r3
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	e7ee      	b.n	8008bfc <__libc_init_array+0xc>
 8008c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c22:	4798      	blx	r3
 8008c24:	3501      	adds	r5, #1
 8008c26:	e7f2      	b.n	8008c0e <__libc_init_array+0x1e>
 8008c28:	08008e5c 	.word	0x08008e5c
 8008c2c:	08008e5c 	.word	0x08008e5c
 8008c30:	08008e5c 	.word	0x08008e5c
 8008c34:	08008e60 	.word	0x08008e60

08008c38 <malloc>:
 8008c38:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <malloc+0xc>)
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	6818      	ldr	r0, [r3, #0]
 8008c3e:	f000 b861 	b.w	8008d04 <_malloc_r>
 8008c42:	bf00      	nop
 8008c44:	2000017c 	.word	0x2000017c

08008c48 <free>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <free+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f000 b80b 	b.w	8008c68 <_free_r>
 8008c52:	bf00      	nop
 8008c54:	2000017c 	.word	0x2000017c

08008c58 <memset>:
 8008c58:	4402      	add	r2, r0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d100      	bne.n	8008c62 <memset+0xa>
 8008c60:	4770      	bx	lr
 8008c62:	f803 1b01 	strb.w	r1, [r3], #1
 8008c66:	e7f9      	b.n	8008c5c <memset+0x4>

08008c68 <_free_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	d045      	beq.n	8008cfc <_free_r+0x94>
 8008c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c74:	1f0c      	subs	r4, r1, #4
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfb8      	it	lt
 8008c7a:	18e4      	addlt	r4, r4, r3
 8008c7c:	f000 f8ac 	bl	8008dd8 <__malloc_lock>
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <_free_r+0x98>)
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	4610      	mov	r0, r2
 8008c86:	b933      	cbnz	r3, 8008c96 <_free_r+0x2e>
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	6014      	str	r4, [r2, #0]
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c92:	f000 b8a2 	b.w	8008dda <__malloc_unlock>
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	d90c      	bls.n	8008cb4 <_free_r+0x4c>
 8008c9a:	6821      	ldr	r1, [r4, #0]
 8008c9c:	1862      	adds	r2, r4, r1
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	bf04      	itt	eq
 8008ca2:	681a      	ldreq	r2, [r3, #0]
 8008ca4:	685b      	ldreq	r3, [r3, #4]
 8008ca6:	6063      	str	r3, [r4, #4]
 8008ca8:	bf04      	itt	eq
 8008caa:	1852      	addeq	r2, r2, r1
 8008cac:	6022      	streq	r2, [r4, #0]
 8008cae:	6004      	str	r4, [r0, #0]
 8008cb0:	e7ec      	b.n	8008c8c <_free_r+0x24>
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	b10a      	cbz	r2, 8008cbc <_free_r+0x54>
 8008cb8:	42a2      	cmp	r2, r4
 8008cba:	d9fa      	bls.n	8008cb2 <_free_r+0x4a>
 8008cbc:	6819      	ldr	r1, [r3, #0]
 8008cbe:	1858      	adds	r0, r3, r1
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d10b      	bne.n	8008cdc <_free_r+0x74>
 8008cc4:	6820      	ldr	r0, [r4, #0]
 8008cc6:	4401      	add	r1, r0
 8008cc8:	1858      	adds	r0, r3, r1
 8008cca:	4282      	cmp	r2, r0
 8008ccc:	6019      	str	r1, [r3, #0]
 8008cce:	d1dd      	bne.n	8008c8c <_free_r+0x24>
 8008cd0:	6810      	ldr	r0, [r2, #0]
 8008cd2:	6852      	ldr	r2, [r2, #4]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	4401      	add	r1, r0
 8008cd8:	6019      	str	r1, [r3, #0]
 8008cda:	e7d7      	b.n	8008c8c <_free_r+0x24>
 8008cdc:	d902      	bls.n	8008ce4 <_free_r+0x7c>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	e7d3      	b.n	8008c8c <_free_r+0x24>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	1821      	adds	r1, r4, r0
 8008ce8:	428a      	cmp	r2, r1
 8008cea:	bf04      	itt	eq
 8008cec:	6811      	ldreq	r1, [r2, #0]
 8008cee:	6852      	ldreq	r2, [r2, #4]
 8008cf0:	6062      	str	r2, [r4, #4]
 8008cf2:	bf04      	itt	eq
 8008cf4:	1809      	addeq	r1, r1, r0
 8008cf6:	6021      	streq	r1, [r4, #0]
 8008cf8:	605c      	str	r4, [r3, #4]
 8008cfa:	e7c7      	b.n	8008c8c <_free_r+0x24>
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000204 	.word	0x20000204

08008d04 <_malloc_r>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	1ccd      	adds	r5, r1, #3
 8008d08:	f025 0503 	bic.w	r5, r5, #3
 8008d0c:	3508      	adds	r5, #8
 8008d0e:	2d0c      	cmp	r5, #12
 8008d10:	bf38      	it	cc
 8008d12:	250c      	movcc	r5, #12
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	4606      	mov	r6, r0
 8008d18:	db01      	blt.n	8008d1e <_malloc_r+0x1a>
 8008d1a:	42a9      	cmp	r1, r5
 8008d1c:	d903      	bls.n	8008d26 <_malloc_r+0x22>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	6033      	str	r3, [r6, #0]
 8008d22:	2000      	movs	r0, #0
 8008d24:	bd70      	pop	{r4, r5, r6, pc}
 8008d26:	f000 f857 	bl	8008dd8 <__malloc_lock>
 8008d2a:	4a21      	ldr	r2, [pc, #132]	; (8008db0 <_malloc_r+0xac>)
 8008d2c:	6814      	ldr	r4, [r2, #0]
 8008d2e:	4621      	mov	r1, r4
 8008d30:	b991      	cbnz	r1, 8008d58 <_malloc_r+0x54>
 8008d32:	4c20      	ldr	r4, [pc, #128]	; (8008db4 <_malloc_r+0xb0>)
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	b91b      	cbnz	r3, 8008d40 <_malloc_r+0x3c>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f000 f83d 	bl	8008db8 <_sbrk_r>
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	4629      	mov	r1, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 f838 	bl	8008db8 <_sbrk_r>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d124      	bne.n	8008d96 <_malloc_r+0x92>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	6033      	str	r3, [r6, #0]
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f842 	bl	8008dda <__malloc_unlock>
 8008d56:	e7e4      	b.n	8008d22 <_malloc_r+0x1e>
 8008d58:	680b      	ldr	r3, [r1, #0]
 8008d5a:	1b5b      	subs	r3, r3, r5
 8008d5c:	d418      	bmi.n	8008d90 <_malloc_r+0x8c>
 8008d5e:	2b0b      	cmp	r3, #11
 8008d60:	d90f      	bls.n	8008d82 <_malloc_r+0x7e>
 8008d62:	600b      	str	r3, [r1, #0]
 8008d64:	50cd      	str	r5, [r1, r3]
 8008d66:	18cc      	adds	r4, r1, r3
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f000 f836 	bl	8008dda <__malloc_unlock>
 8008d6e:	f104 000b 	add.w	r0, r4, #11
 8008d72:	1d23      	adds	r3, r4, #4
 8008d74:	f020 0007 	bic.w	r0, r0, #7
 8008d78:	1ac3      	subs	r3, r0, r3
 8008d7a:	d0d3      	beq.n	8008d24 <_malloc_r+0x20>
 8008d7c:	425a      	negs	r2, r3
 8008d7e:	50e2      	str	r2, [r4, r3]
 8008d80:	e7d0      	b.n	8008d24 <_malloc_r+0x20>
 8008d82:	428c      	cmp	r4, r1
 8008d84:	684b      	ldr	r3, [r1, #4]
 8008d86:	bf16      	itet	ne
 8008d88:	6063      	strne	r3, [r4, #4]
 8008d8a:	6013      	streq	r3, [r2, #0]
 8008d8c:	460c      	movne	r4, r1
 8008d8e:	e7eb      	b.n	8008d68 <_malloc_r+0x64>
 8008d90:	460c      	mov	r4, r1
 8008d92:	6849      	ldr	r1, [r1, #4]
 8008d94:	e7cc      	b.n	8008d30 <_malloc_r+0x2c>
 8008d96:	1cc4      	adds	r4, r0, #3
 8008d98:	f024 0403 	bic.w	r4, r4, #3
 8008d9c:	42a0      	cmp	r0, r4
 8008d9e:	d005      	beq.n	8008dac <_malloc_r+0xa8>
 8008da0:	1a21      	subs	r1, r4, r0
 8008da2:	4630      	mov	r0, r6
 8008da4:	f000 f808 	bl	8008db8 <_sbrk_r>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d0cf      	beq.n	8008d4c <_malloc_r+0x48>
 8008dac:	6025      	str	r5, [r4, #0]
 8008dae:	e7db      	b.n	8008d68 <_malloc_r+0x64>
 8008db0:	20000204 	.word	0x20000204
 8008db4:	20000208 	.word	0x20000208

08008db8 <_sbrk_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4c06      	ldr	r4, [pc, #24]	; (8008dd4 <_sbrk_r+0x1c>)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	f7ff f9a8 	bl	8008118 <_sbrk>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_sbrk_r+0x1a>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_sbrk_r+0x1a>
 8008dd0:	602b      	str	r3, [r5, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20001ca8 	.word	0x20001ca8

08008dd8 <__malloc_lock>:
 8008dd8:	4770      	bx	lr

08008dda <__malloc_unlock>:
 8008dda:	4770      	bx	lr

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr
