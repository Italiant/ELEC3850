
ELEC3850 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800889c  0800889c  0001889c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080088a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  200001e8  08008a8c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c34  08008a8c  00021c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3d9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a3c  00000000  00000000  0003c5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b0  00000000  00000000  00040030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  000416e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002583c  00000000  00000000  00042bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000147b5  00000000  00000000  00068434  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0ba4  00000000  00000000  0007cbe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d78d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f4  00000000  00000000  0014d808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008810 	.word	0x08008810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08008810 	.word	0x08008810

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f94d 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f007 f8f6 	bl	80076fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f965 	bl	800080a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f92d 	bl	80007b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000118 	.word	0x20000118
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000214 	.word	0x20000214

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000214 	.word	0x20000214

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <__NVIC_EnableIRQ+0x38>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800076c:	d301      	bcc.n	8000772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076e:	2301      	movs	r3, #1
 8000770:	e00f      	b.n	8000792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <SysTick_Config+0x40>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3b01      	subs	r3, #1
 8000778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077a:	210f      	movs	r1, #15
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f7ff ff8e 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SysTick_Config+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <SysTick_Config+0x40>)
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff29 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff3e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ff8e 	bl	80006f4 <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff31 	bl	8000664 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffa2 	bl	800075c <SysTick_Config>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e16b      	b.n	8000b18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 815a 	bne.w	8000b12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d003      	beq.n	800086e <HAL_GPIO_Init+0x4a>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b12      	cmp	r3, #18
 800086c:	d123      	bne.n	80008b6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	220f      	movs	r2, #15
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4013      	ands	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	691a      	ldr	r2, [r3, #16]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	69b9      	ldr	r1, [r7, #24]
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0203 	and.w	r2, r3, #3
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d00b      	beq.n	800090a <HAL_GPIO_Init+0xe6>
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d007      	beq.n	800090a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fe:	2b11      	cmp	r3, #17
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b12      	cmp	r3, #18
 8000908:	d130      	bne.n	800096c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	2203      	movs	r2, #3
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	68da      	ldr	r2, [r3, #12]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000940:	2201      	movs	r2, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	f003 0201 	and.w	r2, r3, #1
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80b4 	beq.w	8000b12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a5e      	ldr	r2, [pc, #376]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <HAL_GPIO_Init+0x308>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c6:	4a5a      	ldr	r2, [pc, #360]	; (8000b30 <HAL_GPIO_Init+0x30c>)
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a51      	ldr	r2, [pc, #324]	; (8000b34 <HAL_GPIO_Init+0x310>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d02b      	beq.n	8000a4a <HAL_GPIO_Init+0x226>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a50      	ldr	r2, [pc, #320]	; (8000b38 <HAL_GPIO_Init+0x314>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d025      	beq.n	8000a46 <HAL_GPIO_Init+0x222>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4f      	ldr	r2, [pc, #316]	; (8000b3c <HAL_GPIO_Init+0x318>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01f      	beq.n	8000a42 <HAL_GPIO_Init+0x21e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4e      	ldr	r2, [pc, #312]	; (8000b40 <HAL_GPIO_Init+0x31c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d019      	beq.n	8000a3e <HAL_GPIO_Init+0x21a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4d      	ldr	r2, [pc, #308]	; (8000b44 <HAL_GPIO_Init+0x320>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x216>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4c      	ldr	r2, [pc, #304]	; (8000b48 <HAL_GPIO_Init+0x324>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x212>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_GPIO_Init+0x328>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x20e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_GPIO_Init+0x32c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x20a>
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	e00e      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a2e:	2308      	movs	r3, #8
 8000a30:	e00c      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a32:	2306      	movs	r3, #6
 8000a34:	e00a      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a36:	2305      	movs	r3, #5
 8000a38:	e008      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x228>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5c:	4934      	ldr	r1, [pc, #208]	; (8000b30 <HAL_GPIO_Init+0x30c>)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a8e:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_GPIO_Init+0x330>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	f67f ae90 	bls.w	8000840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	3724      	adds	r7, #36	; 0x24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40013800 	.word	0x40013800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40021400 	.word	0x40021400
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40021c00 	.word	0x40021c00
 8000b54:	40013c00 	.word	0x40013c00

08000b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e001      	b.n	8000b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	619a      	str	r2, [r3, #24]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	401a      	ands	r2, r3
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d104      	bne.n	8000bde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	041a      	lsls	r2, r3, #16
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	619a      	str	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f806 	bl	8000c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40013c00 	.word	0x40013c00

08000c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e10f      	b.n	8000e6a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d106      	bne.n	8000c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f006 fd74 	bl	800774c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2224      	movs	r2, #36	; 0x24
 8000c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0201 	bic.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c7c:	f002 fb36 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 8000c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	4a7b      	ldr	r2, [pc, #492]	; (8000e74 <HAL_I2C_Init+0x23c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d807      	bhi.n	8000c9c <HAL_I2C_Init+0x64>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4a7a      	ldr	r2, [pc, #488]	; (8000e78 <HAL_I2C_Init+0x240>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	bf94      	ite	ls
 8000c94:	2301      	movls	r3, #1
 8000c96:	2300      	movhi	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	e006      	b.n	8000caa <HAL_I2C_Init+0x72>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4a77      	ldr	r2, [pc, #476]	; (8000e7c <HAL_I2C_Init+0x244>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	bf94      	ite	ls
 8000ca4:	2301      	movls	r3, #1
 8000ca6:	2300      	movhi	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0db      	b.n	8000e6a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4a72      	ldr	r2, [pc, #456]	; (8000e80 <HAL_I2C_Init+0x248>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	0c9b      	lsrs	r3, r3, #18
 8000cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4a64      	ldr	r2, [pc, #400]	; (8000e74 <HAL_I2C_Init+0x23c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d802      	bhi.n	8000cec <HAL_I2C_Init+0xb4>
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	e009      	b.n	8000d00 <HAL_I2C_Init+0xc8>
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4a63      	ldr	r2, [pc, #396]	; (8000e84 <HAL_I2C_Init+0x24c>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	099b      	lsrs	r3, r3, #6
 8000cfe:	3301      	adds	r3, #1
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4956      	ldr	r1, [pc, #344]	; (8000e74 <HAL_I2C_Init+0x23c>)
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d80d      	bhi.n	8000d3c <HAL_I2C_Init+0x104>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	1e59      	subs	r1, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	bf38      	it	cc
 8000d38:	2304      	movcc	r3, #4
 8000d3a:	e04f      	b.n	8000ddc <HAL_I2C_Init+0x1a4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_I2C_Init+0x130>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	1e58      	subs	r0, r3, #1
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6859      	ldr	r1, [r3, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	440b      	add	r3, r1
 8000d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf0c      	ite	eq
 8000d60:	2301      	moveq	r3, #1
 8000d62:	2300      	movne	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	e012      	b.n	8000d8e <HAL_I2C_Init+0x156>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1e58      	subs	r0, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6859      	ldr	r1, [r3, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	0099      	lsls	r1, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf0c      	ite	eq
 8000d88:	2301      	moveq	r3, #1
 8000d8a:	2300      	movne	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_Init+0x15e>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e022      	b.n	8000ddc <HAL_I2C_Init+0x1a4>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10e      	bne.n	8000dbc <HAL_I2C_Init+0x184>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1e58      	subs	r0, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	440b      	add	r3, r1
 8000dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dba:	e00f      	b.n	8000ddc <HAL_I2C_Init+0x1a4>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6859      	ldr	r1, [r3, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	0099      	lsls	r1, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	6809      	ldr	r1, [r1, #0]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69da      	ldr	r2, [r3, #28]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a1b      	ldr	r3, [r3, #32]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	6911      	ldr	r1, [r2, #16]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68d2      	ldr	r2, [r2, #12]
 8000e16:	4311      	orrs	r1, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695a      	ldr	r2, [r3, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2220      	movs	r2, #32
 8000e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	000186a0 	.word	0x000186a0
 8000e78:	001e847f 	.word	0x001e847f
 8000e7c:	003d08ff 	.word	0x003d08ff
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	10624dd3 	.word	0x10624dd3

08000e88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e128      	b.n	80010ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a90      	ldr	r2, [pc, #576]	; (80010f4 <HAL_I2S_Init+0x26c>)
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f006 fc91 	bl	80077dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d060      	beq.n	8000fa8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e001      	b.n	8000ef8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b20      	cmp	r3, #32
 8000efe:	d802      	bhi.n	8000f06 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f002 fae6 	bl	80034d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f0c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f16:	d125      	bne.n	8000f64 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d010      	beq.n	8000f42 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3c:	3305      	adds	r3, #5
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	e01f      	b.n	8000f82 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	3305      	adds	r3, #5
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	e00e      	b.n	8000f82 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	461a      	mov	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	3305      	adds	r3, #5
 8000f80:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_I2S_Init+0x270>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	085b      	lsrs	r3, r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	e003      	b.n	8000fb0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d902      	bls.n	8000fbc <HAL_I2S_Init+0x134>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2bff      	cmp	r3, #255	; 0xff
 8000fba:	d907      	bls.n	8000fcc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f043 0210 	orr.w	r2, r3, #16
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e08f      	b.n	80010ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	ea42 0103 	orr.w	r1, r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000fea:	f023 030f 	bic.w	r3, r3, #15
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6851      	ldr	r1, [r2, #4]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6892      	ldr	r2, [r2, #8]
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68d2      	ldr	r2, [r2, #12]
 8000ffc:	4311      	orrs	r1, r2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6992      	ldr	r2, [r2, #24]
 8001002:	430a      	orrs	r2, r1
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800100e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d161      	bne.n	80010dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a38      	ldr	r2, [pc, #224]	; (80010fc <HAL_I2S_Init+0x274>)
 800101c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a37      	ldr	r2, [pc, #220]	; (8001100 <HAL_I2S_Init+0x278>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_I2S_Init+0x1a4>
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <HAL_I2S_Init+0x27c>)
 800102a:	e001      	b.n	8001030 <HAL_I2S_Init+0x1a8>
 800102c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	4932      	ldr	r1, [pc, #200]	; (8001100 <HAL_I2S_Init+0x278>)
 8001038:	428a      	cmp	r2, r1
 800103a:	d101      	bne.n	8001040 <HAL_I2S_Init+0x1b8>
 800103c:	4a31      	ldr	r2, [pc, #196]	; (8001104 <HAL_I2S_Init+0x27c>)
 800103e:	e001      	b.n	8001044 <HAL_I2S_Init+0x1bc>
 8001040:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001044:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001048:	f023 030f 	bic.w	r3, r3, #15
 800104c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <HAL_I2S_Init+0x278>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_I2S_Init+0x1d4>
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_I2S_Init+0x27c>)
 800105a:	e001      	b.n	8001060 <HAL_I2S_Init+0x1d8>
 800105c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001060:	2202      	movs	r2, #2
 8001062:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_I2S_Init+0x278>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_I2S_Init+0x1ea>
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_I2S_Init+0x27c>)
 8001070:	e001      	b.n	8001076 <HAL_I2S_Init+0x1ee>
 8001072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001082:	d003      	beq.n	800108c <HAL_I2S_Init+0x204>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e001      	b.n	8001098 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80010ae:	4303      	orrs	r3, r0
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	430b      	orrs	r3, r1
 80010b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_I2S_Init+0x278>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_I2S_Init+0x24c>
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_I2S_Init+0x27c>)
 80010d2:	e001      	b.n	80010d8 <HAL_I2S_Init+0x250>
 80010d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010d8:	897a      	ldrh	r2, [r7, #10]
 80010da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	080011ff 	.word	0x080011ff
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	08001315 	.word	0x08001315
 8001100:	40003800 	.word	0x40003800
 8001104:	40003400 	.word	0x40003400

08001108 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	881a      	ldrh	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	1c9a      	adds	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001166:	b29b      	uxth	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001174:	b29b      	uxth	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10e      	bne.n	8001198 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001188:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb8 	bl	8001108 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	b292      	uxth	r2, r2
 80011b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	1c9a      	adds	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10e      	bne.n	80011f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff93 	bl	800111c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b04      	cmp	r3, #4
 8001218:	d13a      	bne.n	8001290 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b01      	cmp	r3, #1
 8001222:	d109      	bne.n	8001238 <I2S_IRQHandler+0x3a>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b40      	cmp	r3, #64	; 0x40
 8001230:	d102      	bne.n	8001238 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffb4 	bl	80011a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123e:	2b40      	cmp	r3, #64	; 0x40
 8001240:	d126      	bne.n	8001290 <I2S_IRQHandler+0x92>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b20      	cmp	r3, #32
 800124e:	d11f      	bne.n	8001290 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800125e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f043 0202 	orr.w	r2, r3, #2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff50 	bl	8001130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d136      	bne.n	800130a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d109      	bne.n	80012ba <I2S_IRQHandler+0xbc>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b0:	2b80      	cmp	r3, #128	; 0x80
 80012b2:	d102      	bne.n	80012ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff45 	bl	8001144 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d122      	bne.n	800130a <I2S_IRQHandler+0x10c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b20      	cmp	r3, #32
 80012d0:	d11b      	bne.n	800130a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80012e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f043 0204 	orr.w	r2, r3, #4
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff13 	bl	8001130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4aa2      	ldr	r2, [pc, #648]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800132e:	4ba2      	ldr	r3, [pc, #648]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001330:	e001      	b.n	8001336 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001332:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a9b      	ldr	r2, [pc, #620]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800134c:	4b9a      	ldr	r3, [pc, #616]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800134e:	e001      	b.n	8001354 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001360:	d004      	beq.n	800136c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8099 	bne.w	800149e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d107      	bne.n	8001386 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f925 	bl	80015d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d107      	bne.n	80013a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f9c8 	bl	8001730 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d13a      	bne.n	8001420 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d035      	beq.n	8001420 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a7e      	ldr	r2, [pc, #504]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80013be:	4b7e      	ldr	r3, [pc, #504]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013c0:	e001      	b.n	80013c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80013c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4979      	ldr	r1, [pc, #484]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013ce:	428b      	cmp	r3, r1
 80013d0:	d101      	bne.n	80013d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80013d2:	4b79      	ldr	r3, [pc, #484]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013d4:	e001      	b.n	80013da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80013d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fe88 	bl	8001130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b08      	cmp	r3, #8
 8001428:	f040 80be 	bne.w	80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80b8 	beq.w	80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001446:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a59      	ldr	r2, [pc, #356]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001452:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001454:	e001      	b.n	800145a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4954      	ldr	r1, [pc, #336]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001462:	428b      	cmp	r3, r1
 8001464:	d101      	bne.n	800146a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001468:	e001      	b.n	800146e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800146a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800146e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001472:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f043 0204 	orr.w	r2, r3, #4
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fe4a 	bl	8001130 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800149c:	e084      	b.n	80015a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d107      	bne.n	80014b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8be 	bl	8001634 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f8fd 	bl	80016cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	d12f      	bne.n	800153c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d02a      	beq.n	800153c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001502:	e001      	b.n	8001508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4929      	ldr	r1, [pc, #164]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001510:	428b      	cmp	r3, r1
 8001512:	d101      	bne.n	8001518 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001516:	e001      	b.n	800151c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800151c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001520:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f043 0202 	orr.w	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fdfa 	bl	8001130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b08      	cmp	r3, #8
 8001544:	d131      	bne.n	80015aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d02c      	beq.n	80015aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800155c:	e001      	b.n	8001562 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800155e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4912      	ldr	r1, [pc, #72]	; (80015b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800156a:	428b      	cmp	r3, r1
 800156c:	d101      	bne.n	8001572 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001570:	e001      	b.n	8001576 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800157a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800158a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f043 0204 	orr.w	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fdc5 	bl	8001130 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80015a6:	e000      	b.n	80015aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80015a8:	bf00      	nop
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40003800 	.word	0x40003800
 80015b8:	40003400 	.word	0x40003400

080015bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	1c99      	adds	r1, r3, #2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6251      	str	r1, [r2, #36]	; 0x24
 80015e2:	881a      	ldrh	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d113      	bne.n	800162a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001610:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001616:	b29b      	uxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d106      	bne.n	800162a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffc9 	bl	80015bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	1c99      	adds	r1, r3, #2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6251      	str	r1, [r2, #36]	; 0x24
 8001646:	8819      	ldrh	r1, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <I2SEx_TxISR_I2SExt+0x90>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <I2SEx_TxISR_I2SExt+0x22>
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <I2SEx_TxISR_I2SExt+0x94>)
 8001654:	e001      	b.n	800165a <I2SEx_TxISR_I2SExt+0x26>
 8001656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800165a:	460a      	mov	r2, r1
 800165c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d121      	bne.n	80016ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <I2SEx_TxISR_I2SExt+0x90>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <I2SEx_TxISR_I2SExt+0x50>
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <I2SEx_TxISR_I2SExt+0x94>)
 8001682:	e001      	b.n	8001688 <I2SEx_TxISR_I2SExt+0x54>
 8001684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	490d      	ldr	r1, [pc, #52]	; (80016c4 <I2SEx_TxISR_I2SExt+0x90>)
 8001690:	428b      	cmp	r3, r1
 8001692:	d101      	bne.n	8001698 <I2SEx_TxISR_I2SExt+0x64>
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <I2SEx_TxISR_I2SExt+0x94>)
 8001696:	e001      	b.n	800169c <I2SEx_TxISR_I2SExt+0x68>
 8001698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800169c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff81 	bl	80015bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40003800 	.word	0x40003800
 80016c8:	40003400 	.word	0x40003400

080016cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68d8      	ldr	r0, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	1c99      	adds	r1, r3, #2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80016e4:	b282      	uxth	r2, r0
 80016e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d113      	bne.n	8001728 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800170e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff4a 	bl	80015bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <I2SEx_RxISR_I2SExt+0x90>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <I2SEx_RxISR_I2SExt+0x16>
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <I2SEx_RxISR_I2SExt+0x94>)
 8001744:	e001      	b.n	800174a <I2SEx_RxISR_I2SExt+0x1a>
 8001746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800174a:	68d8      	ldr	r0, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	1c99      	adds	r1, r3, #2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001756:	b282      	uxth	r2, r0
 8001758:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d121      	bne.n	80017b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <I2SEx_RxISR_I2SExt+0x90>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d101      	bne.n	8001780 <I2SEx_RxISR_I2SExt+0x50>
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <I2SEx_RxISR_I2SExt+0x94>)
 800177e:	e001      	b.n	8001784 <I2SEx_RxISR_I2SExt+0x54>
 8001780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	490d      	ldr	r1, [pc, #52]	; (80017c0 <I2SEx_RxISR_I2SExt+0x90>)
 800178c:	428b      	cmp	r3, r1
 800178e:	d101      	bne.n	8001794 <I2SEx_RxISR_I2SExt+0x64>
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <I2SEx_RxISR_I2SExt+0x94>)
 8001792:	e001      	b.n	8001798 <I2SEx_RxISR_I2SExt+0x68>
 8001794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001798:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800179c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff03 	bl	80015bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40003400 	.word	0x40003400

080017c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b08f      	sub	sp, #60	; 0x3c
 80017cc:	af0a      	add	r7, sp, #40	; 0x28
 80017ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e10f      	b.n	80019fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d106      	bne.n	80017fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f006 fac9 	bl	8007d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 ff14 	bl	8004646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	687e      	ldr	r6, [r7, #4]
 8001826:	466d      	mov	r5, sp
 8001828:	f106 0410 	add.w	r4, r6, #16
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001838:	e885 0003 	stmia.w	r5, {r0, r1}
 800183c:	1d33      	adds	r3, r6, #4
 800183e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f002 fdeb 	bl	800441c <USB_CoreInit>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0d0      	b.n	80019fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f002 ff02 	bl	8004668 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e04a      	b.n	8001900 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	333d      	adds	r3, #61	; 0x3d
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	333c      	adds	r3, #60	; 0x3c
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	b298      	uxth	r0, r3
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	4602      	mov	r2, r0
 80018a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	333f      	adds	r3, #63	; 0x3f
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3344      	adds	r3, #68	; 0x44
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3348      	adds	r3, #72	; 0x48
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3350      	adds	r3, #80	; 0x50
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d3af      	bcc.n	800186a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	e044      	b.n	800199a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	3301      	adds	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3b5      	bcc.n	8001910 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	687e      	ldr	r6, [r7, #4]
 80019ac:	466d      	mov	r5, sp
 80019ae:	f106 0410 	add.w	r4, r6, #16
 80019b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019be:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c2:	1d33      	adds	r3, r6, #4
 80019c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c6:	6838      	ldr	r0, [r7, #0]
 80019c8:	f002 fe78 	bl	80046bc <USB_DevInit>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00d      	b.n	80019fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fe6d 	bl	80056d2 <USB_DevDisconnect>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_PCD_Start+0x1c>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e020      	b.n	8001a60 <HAL_PCD_Start+0x5e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d109      	bne.n	8001a42 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fe2b 	bl	80056a2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fde7 	bl	8004624 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b08d      	sub	sp, #52	; 0x34
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fed2 	bl	8005828 <USB_GetMode>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 838e 	bne.w	80021a8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fe36 	bl	8005702 <USB_ReadInterrupts>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8384 	beq.w	80021a6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fe2d 	bl	8005702 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d107      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f002 0202 	and.w	r2, r2, #2
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fe1b 	bl	8005702 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ad6:	d17b      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fe21 	bl	8005728 <USB_ReadDevAllOutEpInterrupt>
 8001ae6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ae8:	e06f      	b.n	8001bca <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d064      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fe46 	bl	8005790 <USB_ReadDevOutEPInterrupt>
 8001b04:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2301      	movs	r3, #1
 8001b20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fe0d 	bl	8002744 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 ff0c 	bl	8002954 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b64:	461a      	mov	r2, r3
 8001b66:	2310      	movs	r3, #16
 8001b68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b86:	461a      	mov	r2, r3
 8001b88:	2101      	movs	r1, #1
 8001b8a:	f003 fe91 	bl	80058b0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d18c      	bne.n	8001aea <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fd94 	bl	8005702 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001be4:	f040 80c4 	bne.w	8001d70 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fdb5 	bl	800575c <USB_ReadDevAllInEpInterrupt>
 8001bf2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bf8:	e0b6      	b.n	8001d68 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80ab 	beq.w	8001d5c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fddb 	bl	80057cc <USB_ReadDevInEPInterrupt>
 8001c16:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d05b      	beq.n	8001cda <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	2201      	movs	r2, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69f9      	ldr	r1, [r7, #28]
 8001c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c42:	4013      	ands	r3, r2
 8001c44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d11b      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3348      	adds	r3, #72	; 0x48
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4403      	add	r3, r0
 8001c80:	3344      	adds	r3, #68	; 0x44
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4419      	add	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4403      	add	r3, r0
 8001c94:	3348      	adds	r3, #72	; 0x48
 8001c96:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f006 f903 	bl	8007eaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d116      	bne.n	8001cda <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d113      	bne.n	8001cda <HAL_PCD_IRQHandler+0x272>
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3350      	adds	r3, #80	; 0x50
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	f003 fdeb 	bl	80058b0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	015a      	lsls	r2, r3, #5
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2310      	movs	r3, #16
 8001d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	015a      	lsls	r2, r3, #5
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	4413      	add	r3, r2
 8001d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2340      	movs	r3, #64	; 0x40
 8001d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d44:	461a      	mov	r2, r3
 8001d46:	2302      	movs	r3, #2
 8001d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fc67 	bl	800262a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f47f af45 	bne.w	8001bfa <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fcc4 	bl	8005702 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d84:	d122      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dac:	2100      	movs	r1, #0
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fe88 	bl	8002ac4 <HAL_PCDEx_LPM_Callback>
 8001db4:	e002      	b.n	8001dbc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f006 f8ee 	bl	8007f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fc96 	bl	8005702 <USB_ReadInterrupts>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de0:	d112      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f006 f8aa 	bl	8007f4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e06:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fc78 	bl	8005702 <USB_ReadInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1c:	f040 80a7 	bne.w	8001f6e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2110      	movs	r1, #16
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fdb0 	bl	80049a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e44:	e036      	b.n	8001eb4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e52:	461a      	mov	r2, r3
 8001e54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6a:	0151      	lsls	r1, r2, #5
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	440a      	add	r2, r1
 8001e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ea8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3c3      	bcc.n	8001e46 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ecc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ed0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d016      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eea:	f043 030b 	orr.w	r3, r3, #11
 8001eee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f00:	f043 030b 	orr.w	r3, r3, #11
 8001f04:	6453      	str	r3, [r2, #68]	; 0x44
 8001f06:	e015      	b.n	8001f34 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f1a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f1e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f2e:	f043 030b 	orr.w	r3, r3, #11
 8001f32:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f46:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f003 fca9 	bl	80058b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fbc5 	bl	8005702 <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f82:	d124      	bne.n	8001fce <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fc5b 	bl	8005844 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fd65 	bl	8004a62 <USB_GetDevSpeed>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681c      	ldr	r4, [r3, #0]
 8001fa4:	f001 f996 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f002 fa94 	bl	80044e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f005 ff9e 	bl	8007efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fb95 	bl	8005702 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d161      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	0c5b      	lsrs	r3, r3, #17
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2b02      	cmp	r3, #2
 800201c:	d124      	bne.n	8002068 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d035      	beq.n	8002096 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6a38      	ldr	r0, [r7, #32]
 800203e:	f003 fa0d 	bl	800545c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204e:	441a      	add	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002060:	441a      	add	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e016      	b.n	8002096 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	2b06      	cmp	r3, #6
 8002072:	d110      	bne.n	8002096 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800207a:	2208      	movs	r2, #8
 800207c:	4619      	mov	r1, r3
 800207e:	6a38      	ldr	r0, [r7, #32]
 8002080:	f003 f9ec 	bl	800545c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	441a      	add	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699a      	ldr	r2, [r3, #24]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0210 	orr.w	r2, r2, #16
 80020a4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fb29 	bl	8005702 <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d10a      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f005 ff0f 	bl	8007ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f002 0208 	and.w	r2, r2, #8
 80020ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fb14 	bl	8005702 <USB_ReadInterrupts>
 80020da:	4603      	mov	r3, r0
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e4:	d10f      	bne.n	8002106 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f005 ff71 	bl	8007fd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 faf9 	bl	8005702 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800211a:	d10f      	bne.n	800213c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f005 ff44 	bl	8007fb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800213a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fade 	bl	8005702 <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002150:	d10a      	bne.n	8002168 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f005 ff52 	bl	8007ffc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002166:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 fac8 	bl	8005702 <USB_ReadInterrupts>
 8002172:	4603      	mov	r3, r0
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d115      	bne.n	80021a8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f005 ff42 	bl	8008018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	e000      	b.n	80021a8 <HAL_PCD_IRQHandler+0x740>
      return;
 80021a6:	bf00      	nop
    }
  }
}
 80021a8:	3734      	adds	r7, #52	; 0x34
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}

080021ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_PCD_SetAddress+0x1a>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e013      	b.n	80021f0 <HAL_PCD_SetAddress+0x42>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fa38 	bl	8005656 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	70fb      	strb	r3, [r7, #3]
 800220a:	460b      	mov	r3, r1
 800220c:	803b      	strh	r3, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221a:	2b00      	cmp	r3, #0
 800221c:	da0f      	bge.n	800223e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	3338      	adds	r3, #56	; 0x38
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	705a      	strb	r2, [r3, #1]
 800223c:	e00f      	b.n	800225e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	b2da      	uxtb	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800226a:	883a      	ldrh	r2, [r7, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	78ba      	ldrb	r2, [r7, #2]
 8002274:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002288:	78bb      	ldrb	r3, [r7, #2]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d102      	bne.n	8002294 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_PCD_EP_Open+0xaa>
 800229e:	2302      	movs	r3, #2
 80022a0:	e00e      	b.n	80022c0 <HAL_PCD_EP_Open+0xc8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fbfb 	bl	8004aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022be:	7afb      	ldrb	r3, [r7, #11]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da0f      	bge.n	80022fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	3338      	adds	r3, #56	; 0x38
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	705a      	strb	r2, [r3, #1]
 80022fa:	e00f      	b.n	800231c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 020f 	and.w	r2, r3, #15
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_PCD_EP_Close+0x6e>
 8002332:	2302      	movs	r3, #2
 8002334:	e00e      	b.n	8002354 <HAL_PCD_EP_Close+0x8c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fc39 	bl	8004bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2200      	movs	r2, #0
 800239c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d102      	bne.n	80023b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	6979      	ldr	r1, [r7, #20]
 80023d0:	f002 febc 	bl	800514c <USB_EP0StartXfer>
 80023d4:	e008      	b.n	80023e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	f002 fc6e 	bl	8004cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 020f 	and.w	r2, r3, #15
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002414:	681b      	ldr	r3, [r3, #0]
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	460b      	mov	r3, r1
 8002430:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002432:	7afb      	ldrb	r3, [r7, #11]
 8002434:	f003 020f 	and.w	r2, r3, #15
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	3338      	adds	r3, #56	; 0x38
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2201      	movs	r2, #1
 8002460:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	b2da      	uxtb	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6979      	ldr	r1, [r7, #20]
 8002494:	f002 fe5a 	bl	800514c <USB_EP0StartXfer>
 8002498:	e008      	b.n	80024ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	6979      	ldr	r1, [r7, #20]
 80024a8:	f002 fc0c 	bl	8004cc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	f003 020f 	and.w	r2, r3, #15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d901      	bls.n	80024d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e050      	b.n	8002576 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da0f      	bge.n	80024fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	3338      	adds	r3, #56	; 0x38
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	4413      	add	r3, r2
 80024f0:	3304      	adds	r3, #4
 80024f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	705a      	strb	r2, [r3, #1]
 80024fa:	e00d      	b.n	8002518 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_PCD_EP_SetStall+0x82>
 8002534:	2302      	movs	r3, #2
 8002536:	e01e      	b.n	8002576 <HAL_PCD_EP_SetStall+0xc0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 ffb1 	bl	80054ae <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	b2d9      	uxtb	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002566:	461a      	mov	r2, r3
 8002568:	f003 f9a2 	bl	80058b0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d901      	bls.n	800259c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e042      	b.n	8002622 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800259c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da0f      	bge.n	80025c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 020f 	and.w	r2, r3, #15
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	3338      	adds	r3, #56	; 0x38
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	705a      	strb	r2, [r3, #1]
 80025c2:	e00f      	b.n	80025e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_PCD_EP_ClrStall+0x86>
 8002600:	2302      	movs	r3, #2
 8002602:	e00e      	b.n	8002622 <HAL_PCD_EP_ClrStall+0xa4>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 ffb9 	bl	800558a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08a      	sub	sp, #40	; 0x28
 800262e:	af02      	add	r7, sp, #8
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	429a      	cmp	r2, r3
 800265c:	d901      	bls.n	8002662 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06c      	b.n	800273c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	429a      	cmp	r2, r3
 8002676:	d902      	bls.n	800267e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3303      	adds	r3, #3
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002686:	e02b      	b.n	80026e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d902      	bls.n	80026a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3303      	adds	r3, #3
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f002 fe95 	bl	80053f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d809      	bhi.n	800270a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026fe:	429a      	cmp	r2, r3
 8002700:	d203      	bcs.n	800270a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1be      	bne.n	8002688 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	429a      	cmp	r2, r3
 8002714:	d811      	bhi.n	800273a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	2201      	movs	r2, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	43db      	mvns	r3, r3
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002736:	4013      	ands	r3, r2
 8002738:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	333c      	adds	r3, #60	; 0x3c
 800275c:	3304      	adds	r3, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b01      	cmp	r3, #1
 8002778:	f040 80b3 	bne.w	80028e2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d028      	beq.n	80027d8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4a70      	ldr	r2, [pc, #448]	; (800294c <PCD_EP_OutXfrComplete_int+0x208>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d90e      	bls.n	80027ac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002794:	2b00      	cmp	r3, #0
 8002796:	d009      	beq.n	80027ac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027aa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f005 fb4f 	bl	8007e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027bc:	461a      	mov	r2, r3
 80027be:	2101      	movs	r1, #1
 80027c0:	f003 f876 	bl	80058b0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d0:	461a      	mov	r2, r3
 80027d2:	2308      	movs	r3, #8
 80027d4:	6093      	str	r3, [r2, #8]
 80027d6:	e0b3      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ee:	461a      	mov	r2, r3
 80027f0:	2320      	movs	r3, #32
 80027f2:	6093      	str	r3, [r2, #8]
 80027f4:	e0a4      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 809f 	bne.w	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <PCD_EP_OutXfrComplete_int+0x208>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d90f      	bls.n	800282a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002820:	461a      	mov	r2, r3
 8002822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002826:	6093      	str	r3, [r2, #8]
 8002828:	e08a      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800283c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	0159      	lsls	r1, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	440b      	add	r3, r1
 8002846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002850:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4403      	add	r3, r0
 8002860:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002864:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4403      	add	r3, r0
 8002888:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4419      	add	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4403      	add	r3, r0
 800289e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028a2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 fae2 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d144      	bne.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d138      	bne.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	f002 ffe8 	bl	80058b0 <USB_EP0_OutStart>
 80028e0:	e02e      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <PCD_EP_OutXfrComplete_int+0x20c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d124      	bne.n	8002934 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	e01a      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	461a      	mov	r2, r3
 8002922:	2320      	movs	r3, #32
 8002924:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f005 faa1 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
 8002932:	e005      	b.n	8002940 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f005 fa9a 	bl	8007e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	4f54300a 	.word	0x4f54300a
 8002950:	4f54310a 	.word	0x4f54310a

08002954 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	333c      	adds	r3, #60	; 0x3c
 800296c:	3304      	adds	r3, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d113      	bne.n	80029b2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <PCD_EP_OutSetupPacket_int+0xb8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d922      	bls.n	80029d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01d      	beq.n	80029d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ae:	6093      	str	r3, [r2, #8]
 80029b0:	e012      	b.n	80029d8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <PCD_EP_OutSetupPacket_int+0xbc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d10e      	bne.n	80029d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f005 fa39 	bl	8007e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <PCD_EP_OutSetupPacket_int+0xb8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d90c      	bls.n	8002a00 <PCD_EP_OutSetupPacket_int+0xac>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029f8:	461a      	mov	r2, r3
 80029fa:	2101      	movs	r1, #1
 80029fc:	f002 ff58 	bl	80058b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	4f54300a 	.word	0x4f54300a
 8002a10:	4f54310a 	.word	0x4f54310a

08002a14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	70fb      	strb	r3, [r7, #3]
 8002a20:	4613      	mov	r3, r2
 8002a22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a32:	883b      	ldrh	r3, [r7, #0]
 8002a34:	0419      	lsls	r1, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a40:	e028      	b.n	8002a94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e00d      	b.n	8002a72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	3340      	adds	r3, #64	; 0x40
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3ec      	bcc.n	8002a56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a7c:	883b      	ldrh	r3, [r7, #0]
 8002a7e:	0418      	lsls	r0, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4302      	orrs	r2, r0
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e22d      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d075      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afa:	4ba3      	ldr	r3, [pc, #652]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4ba0      	ldr	r3, [pc, #640]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d112      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b9d      	ldr	r3, [pc, #628]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b99      	ldr	r3, [pc, #612]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d157      	bne.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e208      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x74>
 8002b42:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a90      	ldr	r2, [pc, #576]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a8a      	ldr	r2, [pc, #552]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b88      	ldr	r3, [pc, #544]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a87      	ldr	r2, [pc, #540]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b74:	4b84      	ldr	r3, [pc, #528]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a83      	ldr	r2, [pc, #524]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b81      	ldr	r3, [pc, #516]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a80      	ldr	r2, [pc, #512]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fd fd06 	bl	80005a4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fd fd02 	bl	80005a4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1cd      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fd fcf2 	bl	80005a4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fd fcee 	bl	80005a4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1b9      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xe8>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b62      	ldr	r3, [pc, #392]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b5f      	ldr	r3, [pc, #380]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b5c      	ldr	r3, [pc, #368]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e18d      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4952      	ldr	r1, [pc, #328]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_OscConfig+0x2b0>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fd fca7 	bl	80005a4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fd fca3 	bl	80005a4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e16e      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4940      	ldr	r1, [pc, #256]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x2b0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fd fc86 	bl	80005a4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7fd fc82 	bl	80005a4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e14d      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d030      	beq.n	8002d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x2b4>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fd fc66 	bl	80005a4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fd fc62 	bl	80005a4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e12d      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x200>
 8002cfa:	e015      	b.n	8002d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_RCC_OscConfig+0x2b4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fc4f 	bl	80005a4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7fd fc4b 	bl	80005a4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e116      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a0 	beq.w	8002e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_OscConfig+0x2b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d121      	bne.n	8002db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCC_OscConfig+0x2b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <HAL_RCC_OscConfig+0x2b8>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fd fc11 	bl	80005a4 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	e011      	b.n	8002daa <HAL_RCC_OscConfig+0x2ce>
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	42470000 	.word	0x42470000
 8002d90:	42470e80 	.word	0x42470e80
 8002d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fd fc04 	bl	80005a4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0cf      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
 8002dbe:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a65      	ldr	r2, [pc, #404]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	e01c      	b.n	8002e06 <HAL_RCC_OscConfig+0x32a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d10c      	bne.n	8002dee <HAL_RCC_OscConfig+0x312>
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a5f      	ldr	r2, [pc, #380]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
 8002dec:	e00b      	b.n	8002e06 <HAL_RCC_OscConfig+0x32a>
 8002dee:	4b5a      	ldr	r3, [pc, #360]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df2:	4a59      	ldr	r2, [pc, #356]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d015      	beq.n	8002e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fd fbc9 	bl	80005a4 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fd fbc5 	bl	80005a4 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e08e      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ee      	beq.n	8002e16 <HAL_RCC_OscConfig+0x33a>
 8002e38:	e014      	b.n	8002e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fd fbb3 	bl	80005a4 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fd fbaf 	bl	80005a4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e078      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ee      	bne.n	8002e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d105      	bne.n	8002e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d064      	beq.n	8002f48 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d05c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d141      	bne.n	8002f16 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_RCC_OscConfig+0x480>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fd fb84 	bl	80005a4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fd fb80 	bl	80005a4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e04b      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	019b      	lsls	r3, r3, #6
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	491d      	ldr	r1, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_RCC_OscConfig+0x480>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fd fb59 	bl	80005a4 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fd fb55 	bl	80005a4 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e020      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x41a>
 8002f14:	e018      	b.n	8002f48 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_OscConfig+0x480>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fb42 	bl	80005a4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fd fb3e 	bl	80005a4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_RCC_OscConfig+0x47c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x448>
 8002f42:	e001      	b.n	8002f48 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40007000 	.word	0x40007000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	42470060 	.word	0x42470060

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0ca      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d90c      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b64      	ldr	r3, [pc, #400]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b62      	ldr	r3, [pc, #392]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0b6      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a57      	ldr	r2, [pc, #348]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fcc:	4b52      	ldr	r3, [pc, #328]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a51      	ldr	r2, [pc, #324]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd8:	4b4f      	ldr	r3, [pc, #316]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	494c      	ldr	r1, [pc, #304]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d044      	beq.n	8003080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d119      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e07d      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d003      	beq.n	800301e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301a:	2b03      	cmp	r3, #3
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06d      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e065      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f023 0203 	bic.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4933      	ldr	r1, [pc, #204]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003050:	f7fd faa8 	bl	80005a4 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7fd faa4 	bl	80005a4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e04d      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 020c 	and.w	r2, r3, #12
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d1eb      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d20c      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <HAL_RCC_ClockConfig+0x1b4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e030      	b.n	800310a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4915      	ldr	r1, [pc, #84]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	490d      	ldr	r1, [pc, #52]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030e6:	f000 f81d 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030ea:	4601      	mov	r1, r0
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	5cd3      	ldrb	r3, [r2, r3]
 80030fa:	fa21 f303 	lsr.w	r3, r1, r3
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fa0a 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023c00 	.word	0x40023c00
 8003118:	40023800 	.word	0x40023800
 800311c:	0800887c 	.word	0x0800887c
 8003120:	20000118 	.word	0x20000118

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	2300      	movs	r3, #0
 8003134:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d007      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x32>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d008      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x38>
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 80b4 	bne.w	80032b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003152:	60bb      	str	r3, [r7, #8]
       break;
 8003154:	e0b3      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003156:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003158:	60bb      	str	r3, [r7, #8]
      break;
 800315a:	e0b0      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315c:	4b5a      	ldr	r3, [pc, #360]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003164:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003166:	4b58      	ldr	r3, [pc, #352]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04a      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003172:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	f04f 0400 	mov.w	r4, #0
 800317c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	ea03 0501 	and.w	r5, r3, r1
 8003188:	ea04 0602 	and.w	r6, r4, r2
 800318c:	4629      	mov	r1, r5
 800318e:	4632      	mov	r2, r6
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	f04f 0400 	mov.w	r4, #0
 8003198:	0154      	lsls	r4, r2, #5
 800319a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800319e:	014b      	lsls	r3, r1, #5
 80031a0:	4619      	mov	r1, r3
 80031a2:	4622      	mov	r2, r4
 80031a4:	1b49      	subs	r1, r1, r5
 80031a6:	eb62 0206 	sbc.w	r2, r2, r6
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	f04f 0400 	mov.w	r4, #0
 80031b2:	0194      	lsls	r4, r2, #6
 80031b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031b8:	018b      	lsls	r3, r1, #6
 80031ba:	1a5b      	subs	r3, r3, r1
 80031bc:	eb64 0402 	sbc.w	r4, r4, r2
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	00e2      	lsls	r2, r4, #3
 80031ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ce:	00d9      	lsls	r1, r3, #3
 80031d0:	460b      	mov	r3, r1
 80031d2:	4614      	mov	r4, r2
 80031d4:	195b      	adds	r3, r3, r5
 80031d6:	eb44 0406 	adc.w	r4, r4, r6
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	0262      	lsls	r2, r4, #9
 80031e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031e8:	0259      	lsls	r1, r3, #9
 80031ea:	460b      	mov	r3, r1
 80031ec:	4614      	mov	r4, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	4621      	mov	r1, r4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f04f 0400 	mov.w	r4, #0
 80031f8:	461a      	mov	r2, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	f7fc ffec 	bl	80001d8 <__aeabi_uldivmod>
 8003200:	4603      	mov	r3, r0
 8003202:	460c      	mov	r4, r1
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e049      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003208:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	f04f 0400 	mov.w	r4, #0
 8003212:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	ea03 0501 	and.w	r5, r3, r1
 800321e:	ea04 0602 	and.w	r6, r4, r2
 8003222:	4629      	mov	r1, r5
 8003224:	4632      	mov	r2, r6
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	f04f 0400 	mov.w	r4, #0
 800322e:	0154      	lsls	r4, r2, #5
 8003230:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003234:	014b      	lsls	r3, r1, #5
 8003236:	4619      	mov	r1, r3
 8003238:	4622      	mov	r2, r4
 800323a:	1b49      	subs	r1, r1, r5
 800323c:	eb62 0206 	sbc.w	r2, r2, r6
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	f04f 0400 	mov.w	r4, #0
 8003248:	0194      	lsls	r4, r2, #6
 800324a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800324e:	018b      	lsls	r3, r1, #6
 8003250:	1a5b      	subs	r3, r3, r1
 8003252:	eb64 0402 	sbc.w	r4, r4, r2
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	00e2      	lsls	r2, r4, #3
 8003260:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003264:	00d9      	lsls	r1, r3, #3
 8003266:	460b      	mov	r3, r1
 8003268:	4614      	mov	r4, r2
 800326a:	195b      	adds	r3, r3, r5
 800326c:	eb44 0406 	adc.w	r4, r4, r6
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	02a2      	lsls	r2, r4, #10
 800327a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800327e:	0299      	lsls	r1, r3, #10
 8003280:	460b      	mov	r3, r1
 8003282:	4614      	mov	r4, r2
 8003284:	4618      	mov	r0, r3
 8003286:	4621      	mov	r1, r4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f04f 0400 	mov.w	r4, #0
 800328e:	461a      	mov	r2, r3
 8003290:	4623      	mov	r3, r4
 8003292:	f7fc ffa1 	bl	80001d8 <__aeabi_uldivmod>
 8003296:	4603      	mov	r3, r0
 8003298:	460c      	mov	r4, r1
 800329a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	3301      	adds	r3, #1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	60bb      	str	r3, [r7, #8]
      break;
 80032b6:	e002      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032ba:	60bb      	str	r3, [r7, #8]
      break;
 80032bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032be:	68bb      	ldr	r3, [r7, #8]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000118 	.word	0x20000118

080032ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f0:	f7ff fff0 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f4:	4601      	mov	r1, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	0800888c 	.word	0x0800888c

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003338:	2b00      	cmp	r3, #0
 800333a:	d035      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800333c:	4b62      	ldr	r3, [pc, #392]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003342:	f7fd f92f 	bl	80005a4 <HAL_GetTick>
 8003346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003348:	e008      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800334a:	f7fd f92b 	bl	80005a4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0b0      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800335c:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	019a      	lsls	r2, r3, #6
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	071b      	lsls	r3, r3, #28
 8003374:	4955      	ldr	r1, [pc, #340]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800337c:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003382:	f7fd f90f 	bl	80005a4 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800338a:	f7fd f90b 	bl	80005a4 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e090      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800339c:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8083 	beq.w	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a43      	ldr	r2, [pc, #268]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
 80033c6:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a3e      	ldr	r2, [pc, #248]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033de:	f7fd f8e1 	bl	80005a4 <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fd f8dd 	bl	80005a4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e062      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02f      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	429a      	cmp	r2, r3
 8003420:	d028      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003422:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003438:	4a24      	ldr	r2, [pc, #144]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800343e:	4b23      	ldr	r3, [pc, #140]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	d114      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800344a:	f7fd f8ab 	bl	80005a4 <HAL_GetTick>
 800344e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003450:	e00a      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003452:	f7fd f8a7 	bl	80005a4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e02a      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ee      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003480:	d10d      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	490d      	ldr	r1, [pc, #52]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]
 800349c:	e005      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034a8:	6093      	str	r3, [r2, #8]
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b6:	4905      	ldr	r1, [pc, #20]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	42470068 	.word	0x42470068
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
 80034d4:	42470e40 	.word	0x42470e40

080034d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d13d      	bne.n	8003572 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003506:	2b01      	cmp	r3, #1
 8003508:	d12f      	bne.n	800356a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800350c:	617b      	str	r3, [r7, #20]
          break;
 800350e:	e02f      	b.n	8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351c:	d108      	bne.n	8003530 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003526:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	e007      	b.n	8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	0f1b      	lsrs	r3, r3, #28
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
          break;
 8003568:	e002      	b.n	8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
          break;
 800356e:	bf00      	nop
        }
      }
      break;
 8003570:	bf00      	nop
    }
  }
  return frequency;
 8003572:	697b      	ldr	r3, [r7, #20]
}
 8003574:	4618      	mov	r0, r3
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40023800 	.word	0x40023800
 8003584:	00bb8000 	.word	0x00bb8000
 8003588:	007a1200 	.word	0x007a1200
 800358c:	00f42400 	.word	0x00f42400

08003590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e056      	b.n	8003650 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f004 f975 	bl	80078ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	ea42 0103 	orr.w	r1, r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	f003 0104 	and.w	r1, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01d      	b.n	80036a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f004 f95c 	bl	800793c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f000 fb58 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d007      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01d      	b.n	8003744 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f815 	bl	800374c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f000 fb09 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fdd4 	bl	8004320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_TIM_PWM_Start+0x74>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_TIM_PWM_Start+0x2c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_TIM_PWM_Start+0x78>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_TIM_PWM_Start+0x30>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_TIM_PWM_Start+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d007      	beq.n	80037c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40010400 	.word	0x40010400

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa75 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa67 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa78 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa4b 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa3d 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fa4e 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa21 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa13 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fa24 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9f7 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9e9 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f9fa 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9c3 	bl	8003ce6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fd3e 	bl	8004408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9bf 	bl	8003d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0220 	mvn.w	r2, #32
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fd08 	bl	80043f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0b4      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0c      	cmp	r3, #12
 8003a1a:	f200 809f 	bhi.w	8003b5c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003b5d 	.word	0x08003b5d
 8003a2c:	08003b5d 	.word	0x08003b5d
 8003a30:	08003b5d 	.word	0x08003b5d
 8003a34:	08003a99 	.word	0x08003a99
 8003a38:	08003b5d 	.word	0x08003b5d
 8003a3c:	08003b5d 	.word	0x08003b5d
 8003a40:	08003b5d 	.word	0x08003b5d
 8003a44:	08003adb 	.word	0x08003adb
 8003a48:	08003b5d 	.word	0x08003b5d
 8003a4c:	08003b5d 	.word	0x08003b5d
 8003a50:	08003b5d 	.word	0x08003b5d
 8003a54:	08003b1b 	.word	0x08003b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fa14 	bl	8003e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0204 	bic.w	r2, r2, #4
 8003a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	619a      	str	r2, [r3, #24]
      break;
 8003a96:	e062      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fa64 	bl	8003f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6999      	ldr	r1, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	619a      	str	r2, [r3, #24]
      break;
 8003ad8:	e041      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fab9 	bl	8004058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0208 	orr.w	r2, r2, #8
 8003af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0204 	bic.w	r2, r2, #4
 8003b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	61da      	str	r2, [r3, #28]
      break;
 8003b18:	e021      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fb0d 	bl	8004140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69d9      	ldr	r1, [r3, #28]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	61da      	str	r2, [r3, #28]
      break;
 8003b5a:	e000      	b.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_ConfigClockSource+0x18>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0a6      	b.n	8003cde <HAL_TIM_ConfigClockSource+0x166>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d067      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x120>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d80b      	bhi.n	8003be4 <HAL_TIM_ConfigClockSource+0x6c>
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d073      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
 8003bd0:	2b10      	cmp	r3, #16
 8003bd2:	d802      	bhi.n	8003bda <HAL_TIM_ConfigClockSource+0x62>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06f      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bd8:	e078      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d06c      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
 8003bde:	2b30      	cmp	r3, #48	; 0x30
 8003be0:	d06a      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003be2:	e073      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d00d      	beq.n	8003c04 <HAL_TIM_ConfigClockSource+0x8c>
 8003be8:	2b70      	cmp	r3, #112	; 0x70
 8003bea:	d804      	bhi.n	8003bf6 <HAL_TIM_ConfigClockSource+0x7e>
 8003bec:	2b50      	cmp	r3, #80	; 0x50
 8003bee:	d033      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xe0>
 8003bf0:	2b60      	cmp	r3, #96	; 0x60
 8003bf2:	d041      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bf4:	e06a      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	d066      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x152>
 8003bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c00:	d017      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c02:	e063      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f000 fb64 	bl	80042e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]
      break;
 8003c30:	e04c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f000 fb4d 	bl	80042e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c54:	609a      	str	r2, [r3, #8]
      break;
 8003c56:	e039      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	461a      	mov	r2, r3
 8003c66:	f000 fac1 	bl	80041ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2150      	movs	r1, #80	; 0x50
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fb1a 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003c76:	e029      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 fae0 	bl	800424a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2160      	movs	r1, #96	; 0x60
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fb0a 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003c96:	e019      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 faa1 	bl	80041ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fafa 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e009      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 faf1 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e000      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <TIM_Base_SetConfig+0x118>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <TIM_Base_SetConfig+0x11c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d027      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <TIM_Base_SetConfig+0x118>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d023      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <TIM_Base_SetConfig+0x11c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a28      	ldr	r2, [pc, #160]	; (8003e74 <TIM_Base_SetConfig+0x128>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <TIM_Base_SetConfig+0x134>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a24      	ldr	r2, [pc, #144]	; (8003e84 <TIM_Base_SetConfig+0x138>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_Base_SetConfig+0xf8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	615a      	str	r2, [r3, #20]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40010400 	.word	0x40010400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800
 8003e80:	40001800 	.word	0x40001800
 8003e84:	40001c00 	.word	0x40001c00
 8003e88:	40002000 	.word	0x40002000

08003e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 0302 	bic.w	r3, r3, #2
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <TIM_OC1_SetConfig+0xd8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x64>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <TIM_OC1_SetConfig+0xdc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10c      	bne.n	8003f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0308 	bic.w	r3, r3, #8
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <TIM_OC1_SetConfig+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC1_SetConfig+0x8e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <TIM_OC1_SetConfig+0xdc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d111      	bne.n	8003f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40010400 	.word	0x40010400

08003f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0210 	bic.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0320 	bic.w	r3, r3, #32
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <TIM_OC2_SetConfig+0xe4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x68>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a21      	ldr	r2, [pc, #132]	; (8004054 <TIM_OC2_SetConfig+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10d      	bne.n	8003ff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a17      	ldr	r2, [pc, #92]	; (8004050 <TIM_OC2_SetConfig+0xe4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC2_SetConfig+0x94>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <TIM_OC2_SetConfig+0xe8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d113      	bne.n	8004028 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400

08004058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a21      	ldr	r2, [pc, #132]	; (8004138 <TIM_OC3_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x66>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <TIM_OC3_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10d      	bne.n	80040da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <TIM_OC3_SetConfig+0xe0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_OC3_SetConfig+0x92>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <TIM_OC3_SetConfig+0xe4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d113      	bne.n	8004112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40010000 	.word	0x40010000
 800413c:	40010400 	.word	0x40010400

08004140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <TIM_OC4_SetConfig+0xa4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC4_SetConfig+0x68>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <TIM_OC4_SetConfig+0xa8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d109      	bne.n	80041bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400

080041ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 030a 	bic.w	r3, r3, #10
 8004228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f043 0307 	orr.w	r3, r3, #7
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	431a      	orrs	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2201      	movs	r2, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437e:	2302      	movs	r3, #2
 8004380:	e032      	b.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800441c:	b084      	sub	sp, #16
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	f107 001c 	add.w	r0, r7, #28
 800442a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	d122      	bne.n	800447a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f001 fa7c 	bl	800596c <USB_CoreReset>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e01a      	b.n	80044b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f001 fa70 	bl	800596c <USB_CoreReset>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
 80044a2:	e005      	b.n	80044b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10b      	bne.n	80044ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f043 0206 	orr.w	r2, r3, #6
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044da:	b004      	add	sp, #16
 80044dc:	4770      	bx	lr
	...

080044e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d165      	bne.n	80045c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a41      	ldr	r2, [pc, #260]	; (80045fc <USB_SetTurnaroundTime+0x11c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d906      	bls.n	800450a <USB_SetTurnaroundTime+0x2a>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a40      	ldr	r2, [pc, #256]	; (8004600 <USB_SetTurnaroundTime+0x120>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d802      	bhi.n	800450a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004504:	230f      	movs	r3, #15
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e062      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <USB_SetTurnaroundTime+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d906      	bls.n	8004520 <USB_SetTurnaroundTime+0x40>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <USB_SetTurnaroundTime+0x124>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800451a:	230e      	movs	r3, #14
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e057      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a38      	ldr	r2, [pc, #224]	; (8004604 <USB_SetTurnaroundTime+0x124>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d906      	bls.n	8004536 <USB_SetTurnaroundTime+0x56>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a37      	ldr	r2, [pc, #220]	; (8004608 <USB_SetTurnaroundTime+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d802      	bhi.n	8004536 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004530:	230d      	movs	r3, #13
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e04c      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4a33      	ldr	r2, [pc, #204]	; (8004608 <USB_SetTurnaroundTime+0x128>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d906      	bls.n	800454c <USB_SetTurnaroundTime+0x6c>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a32      	ldr	r2, [pc, #200]	; (800460c <USB_SetTurnaroundTime+0x12c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d802      	bhi.n	800454c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004546:	230c      	movs	r3, #12
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e041      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4a2f      	ldr	r2, [pc, #188]	; (800460c <USB_SetTurnaroundTime+0x12c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d906      	bls.n	8004562 <USB_SetTurnaroundTime+0x82>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <USB_SetTurnaroundTime+0x130>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d802      	bhi.n	8004562 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800455c:	230b      	movs	r3, #11
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e036      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <USB_SetTurnaroundTime+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d906      	bls.n	8004578 <USB_SetTurnaroundTime+0x98>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a29      	ldr	r2, [pc, #164]	; (8004614 <USB_SetTurnaroundTime+0x134>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d802      	bhi.n	8004578 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004572:	230a      	movs	r3, #10
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e02b      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a26      	ldr	r2, [pc, #152]	; (8004614 <USB_SetTurnaroundTime+0x134>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d906      	bls.n	800458e <USB_SetTurnaroundTime+0xae>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a25      	ldr	r2, [pc, #148]	; (8004618 <USB_SetTurnaroundTime+0x138>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d802      	bhi.n	800458e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004588:	2309      	movs	r3, #9
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	e020      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4a21      	ldr	r2, [pc, #132]	; (8004618 <USB_SetTurnaroundTime+0x138>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d906      	bls.n	80045a4 <USB_SetTurnaroundTime+0xc4>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a20      	ldr	r2, [pc, #128]	; (800461c <USB_SetTurnaroundTime+0x13c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800459e:	2308      	movs	r3, #8
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	e015      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <USB_SetTurnaroundTime+0x13c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d906      	bls.n	80045ba <USB_SetTurnaroundTime+0xda>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <USB_SetTurnaroundTime+0x140>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d802      	bhi.n	80045ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045b4:	2307      	movs	r3, #7
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e00a      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045ba:	2306      	movs	r3, #6
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e007      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045c6:	2309      	movs	r3, #9
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e001      	b.n	80045d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045cc:	2309      	movs	r3, #9
 80045ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	029b      	lsls	r3, r3, #10
 80045e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	00d8acbf 	.word	0x00d8acbf
 8004600:	00e4e1bf 	.word	0x00e4e1bf
 8004604:	00f423ff 	.word	0x00f423ff
 8004608:	0106737f 	.word	0x0106737f
 800460c:	011a499f 	.word	0x011a499f
 8004610:	01312cff 	.word	0x01312cff
 8004614:	014ca43f 	.word	0x014ca43f
 8004618:	016e35ff 	.word	0x016e35ff
 800461c:	01a6ab1f 	.word	0x01a6ab1f
 8004620:	01e847ff 	.word	0x01e847ff

08004624 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d106      	bne.n	8004694 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e00b      	b.n	80046ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	e001      	b.n	80046ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e003      	b.n	80046b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046ac:	2032      	movs	r0, #50	; 0x32
 80046ae:	f7fb ff85 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046bc:	b084      	sub	sp, #16
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e009      	b.n	80046f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3340      	adds	r3, #64	; 0x40
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b0e      	cmp	r3, #14
 80046f4:	d9f2      	bls.n	80046dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d112      	bne.n	8004722 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
 8004720:	e00b      	b.n	800473a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474c:	4619      	mov	r1, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004754:	461a      	mov	r2, r3
 8004756:	680b      	ldr	r3, [r1, #0]
 8004758:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10c      	bne.n	800477a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004766:	2100      	movs	r1, #0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f961 	bl	8004a30 <USB_SetDevSpeed>
 800476e:	e008      	b.n	8004782 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004770:	2101      	movs	r1, #1
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f95c 	bl	8004a30 <USB_SetDevSpeed>
 8004778:	e003      	b.n	8004782 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800477a:	2103      	movs	r1, #3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f957 	bl	8004a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004782:	2110      	movs	r1, #16
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f90b 	bl	80049a0 <USB_FlushTxFifo>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f929 	bl	80049ec <USB_FlushRxFifo>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e043      	b.n	8004856 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e4:	d118      	bne.n	8004818 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	461a      	mov	r2, r3
 80047fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	e013      	b.n	800482a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e008      	b.n	800482a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	2300      	movs	r3, #0
 8004828:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800484e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3301      	adds	r3, #1
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3b7      	bcc.n	80047ce <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e043      	b.n	80048ec <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800487a:	d118      	bne.n	80048ae <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	461a      	mov	r2, r3
 8004890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e013      	b.n	80048c0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e008      	b.n	80048c0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3301      	adds	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3b7      	bcc.n	8004864 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004906:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	2b01      	cmp	r3, #1
 800490c:	d111      	bne.n	8004932 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004914:	461a      	mov	r2, r3
 8004916:	4b20      	ldr	r3, [pc, #128]	; (8004998 <USB_DevInit+0x2dc>)
 8004918:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	f043 0303 	orr.w	r3, r3, #3
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800493e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f043 0210 	orr.w	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <USB_DevInit+0x2e0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f043 0208 	orr.w	r2, r3, #8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004992:	b004      	add	sp, #16
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	00800100 	.word	0x00800100
 800499c:	803c3800 	.word	0x803c3800

080049a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <USB_FlushTxFifo+0x48>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e006      	b.n	80049da <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d0f0      	beq.n	80049ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	00030d40 	.word	0x00030d40

080049ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2210      	movs	r2, #16
 80049fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <USB_FlushRxFifo+0x40>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d0f0      	beq.n	80049fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	00030d40 	.word	0x00030d40

08004a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
 8004a86:	e00a      	b.n	8004a9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d002      	beq.n	8004a94 <USB_GetDevSpeed+0x32>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b06      	cmp	r3, #6
 8004a92:	d102      	bne.n	8004a9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a94:	2302      	movs	r3, #2
 8004a96:	75fb      	strb	r3, [r7, #23]
 8004a98:	e001      	b.n	8004a9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a9a:	230f      	movs	r3, #15
 8004a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d13a      	bne.n	8004b3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	68f9      	ldr	r1, [r7, #12]
 8004ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d155      	bne.n	8004bac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	78db      	ldrb	r3, [r3, #3]
 8004b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	059b      	lsls	r3, r3, #22
 8004b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b24:	4313      	orrs	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e036      	b.n	8004bac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	2101      	movs	r1, #1
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11a      	bne.n	8004bac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b92:	430b      	orrs	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d135      	bne.n	8004c44 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	0159      	lsls	r1, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <USB_DeactivateEndpoint+0x100>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	600b      	str	r3, [r1, #0]
 8004c42:	e034      	b.n	8004cae <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	2101      	movs	r1, #1
 8004c56:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c64:	4013      	ands	r3, r2
 8004c66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	43db      	mvns	r3, r3
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	0159      	lsls	r1, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <USB_DeactivateEndpoint+0x104>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	ec337800 	.word	0xec337800
 8004cc0:	eff37800 	.word	0xeff37800

08004cc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 815c 	bne.w	8004f9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d132      	bne.n	8004d54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4c:	0cdb      	lsrs	r3, r3, #19
 8004d4e:	04db      	lsls	r3, r3, #19
 8004d50:	6113      	str	r3, [r2, #16]
 8004d52:	e074      	b.n	8004e3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6e:	0cdb      	lsrs	r3, r3, #19
 8004d70:	04db      	lsls	r3, r3, #19
 8004d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	0151      	lsls	r1, r2, #5
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	440a      	add	r2, r1
 8004d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6959      	ldr	r1, [r3, #20]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	440b      	add	r3, r1
 8004db0:	1e59      	subs	r1, r3, #1
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dba:	04d9      	lsls	r1, r3, #19
 8004dbc:	4b9d      	ldr	r3, [pc, #628]	; (8005034 <USB_EPStartXfer+0x370>)
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	0148      	lsls	r0, r1, #5
 8004dc4:	69f9      	ldr	r1, [r7, #28]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	0148      	lsls	r0, r1, #5
 8004dea:	69f9      	ldr	r1, [r7, #28]
 8004dec:	4401      	add	r1, r0
 8004dee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004df2:	4313      	orrs	r3, r2
 8004df4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	78db      	ldrb	r3, [r3, #3]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d11f      	bne.n	8004e3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d14b      	bne.n	8004edc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	78db      	ldrb	r3, [r3, #3]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d128      	bne.n	8004eba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d110      	bne.n	8004e9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e00f      	b.n	8004eba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e12f      	b.n	800513c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004efa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	78db      	ldrb	r3, [r3, #3]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d015      	beq.n	8004f30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8117 	beq.w	800513c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	2101      	movs	r1, #1
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	69f9      	ldr	r1, [r7, #28]
 8004f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f2e:	e105      	b.n	800513c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d110      	bne.n	8004f62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	e00f      	b.n	8004f82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68d9      	ldr	r1, [r3, #12]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781a      	ldrb	r2, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	b298      	uxth	r0, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4603      	mov	r3, r0
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa2b 	bl	80053f2 <USB_WritePacket>
 8004f9c:	e0ce      	b.n	800513c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	0cdb      	lsrs	r3, r3, #19
 8004fba:	04db      	lsls	r3, r3, #19
 8004fbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fe0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d126      	bne.n	8005038 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	0148      	lsls	r0, r1, #5
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	4401      	add	r1, r0
 8005008:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800500c:	4313      	orrs	r3, r2
 800500e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800502e:	6113      	str	r3, [r2, #16]
 8005030:	e036      	b.n	80050a0 <USB_EPStartXfer+0x3dc>
 8005032:	bf00      	nop
 8005034:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4413      	add	r3, r2
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	8afb      	ldrh	r3, [r7, #22]
 800505e:	04d9      	lsls	r1, r3, #19
 8005060:	4b39      	ldr	r3, [pc, #228]	; (8005148 <USB_EPStartXfer+0x484>)
 8005062:	400b      	ands	r3, r1
 8005064:	69b9      	ldr	r1, [r7, #24]
 8005066:	0148      	lsls	r0, r1, #5
 8005068:	69f9      	ldr	r1, [r7, #28]
 800506a:	4401      	add	r1, r0
 800506c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005070:	4313      	orrs	r3, r2
 8005072:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	8af9      	ldrh	r1, [r7, #22]
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005090:	69b9      	ldr	r1, [r7, #24]
 8005092:	0148      	lsls	r0, r1, #5
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	4401      	add	r1, r0
 8005098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800509c:	4313      	orrs	r3, r2
 800509e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10d      	bne.n	80050c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	460a      	mov	r2, r1
 80050c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d128      	bne.n	800511c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d110      	bne.n	80050fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e00f      	b.n	800511c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	1ff80000 	.word	0x1ff80000

0800514c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	f040 80cd 	bne.w	8005308 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d132      	bne.n	80051dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	0cdb      	lsrs	r3, r3, #19
 80051d6:	04db      	lsls	r3, r3, #19
 80051d8:	6113      	str	r3, [r2, #16]
 80051da:	e04e      	b.n	800527a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	0cdb      	lsrs	r3, r3, #19
 80051f8:	04db      	lsls	r3, r3, #19
 80051fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800521e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d903      	bls.n	8005234 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526a:	6939      	ldr	r1, [r7, #16]
 800526c:	0148      	lsls	r0, r1, #5
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	4401      	add	r1, r0
 8005272:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005276:	4313      	orrs	r3, r2
 8005278:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d11e      	bne.n	80052be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e092      	b.n	80053e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d07e      	beq.n	80053e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	2101      	movs	r1, #1
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005302:	4313      	orrs	r3, r2
 8005304:	634b      	str	r3, [r1, #52]	; 0x34
 8005306:	e06d      	b.n	80053e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005322:	0cdb      	lsrs	r3, r3, #19
 8005324:	04db      	lsls	r3, r3, #19
 8005326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800534a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800537a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	0148      	lsls	r0, r1, #5
 8005396:	6979      	ldr	r1, [r7, #20]
 8005398:	4401      	add	r1, r0
 800539a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800539e:	4313      	orrs	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10d      	bne.n	80053c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	68d9      	ldr	r1, [r3, #12]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	460a      	mov	r2, r1
 80053c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b089      	sub	sp, #36	; 0x24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	4611      	mov	r1, r2
 80053fe:	461a      	mov	r2, r3
 8005400:	460b      	mov	r3, r1
 8005402:	71fb      	strb	r3, [r7, #7]
 8005404:	4613      	mov	r3, r2
 8005406:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005410:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11a      	bne.n	800544e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005418:	88bb      	ldrh	r3, [r7, #4]
 800541a:	3303      	adds	r3, #3
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	e00f      	b.n	8005446 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	031a      	lsls	r2, r3, #12
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	461a      	mov	r2, r3
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6013      	str	r3, [r2, #0]
      pSrc++;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3304      	adds	r3, #4
 800543e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	3301      	adds	r3, #1
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	429a      	cmp	r2, r3
 800544c:	d3eb      	bcc.n	8005426 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3724      	adds	r7, #36	; 0x24
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800545c:	b480      	push	{r7}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	3303      	adds	r3, #3
 8005476:	089b      	lsrs	r3, r3, #2
 8005478:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e00b      	b.n	8005498 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	601a      	str	r2, [r3, #0]
    pDest++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3304      	adds	r3, #4
 8005490:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	3301      	adds	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3ef      	bcc.n	8005480 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80054a0:	69fb      	ldr	r3, [r7, #28]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3724      	adds	r7, #36	; 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d12c      	bne.n	8005524 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	db12      	blt.n	8005502 <USB_EPSetStall+0x54>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00f      	beq.n	8005502 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005500:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e02b      	b.n	800557c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	db12      	blt.n	800555c <USB_EPSetStall+0xae>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800555a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d128      	bne.n	80055f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	78db      	ldrb	r3, [r3, #3]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d003      	beq.n	80055d6 <USB_EPClearStall+0x4c>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	78db      	ldrb	r3, [r3, #3]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d138      	bne.n	8005648 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e027      	b.n	8005648 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	78db      	ldrb	r3, [r3, #3]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d003      	beq.n	8005628 <USB_EPClearStall+0x9e>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d10f      	bne.n	8005648 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	440a      	add	r2, r1
 800563e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005646:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005674:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005678:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056bc:	f023 0302 	bic.w	r3, r3, #2
 80056c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056c2:	2003      	movs	r0, #3
 80056c4:	f7fa ff7a 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056f2:	2003      	movs	r0, #3
 80056f4:	f7fa ff62 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4013      	ands	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	0c1b      	lsrs	r3, r3, #16
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4013      	ands	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	b29b      	uxth	r3, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057be:	68bb      	ldr	r3, [r7, #8]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
 80057fc:	01db      	lsls	r3, r3, #7
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4013      	ands	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800581a:	68bb      	ldr	r3, [r7, #8]
}
 800581c:	4618      	mov	r0, r3
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0301 	and.w	r3, r3, #1
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005862:	f023 0307 	bic.w	r3, r3, #7
 8005866:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0306 	and.w	r3, r3, #6
 8005874:	2b04      	cmp	r3, #4
 8005876:	d109      	bne.n	800588c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 0303 	orr.w	r3, r3, #3
 800588a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800589a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	460b      	mov	r3, r1
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	333c      	adds	r3, #60	; 0x3c
 80058c6:	3304      	adds	r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4a26      	ldr	r2, [pc, #152]	; (8005968 <USB_EP0_OutStart+0xb8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d90a      	bls.n	80058ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e4:	d101      	bne.n	80058ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e037      	b.n	800595a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005918:	f043 0318 	orr.w	r3, r3, #24
 800591c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005932:	7afb      	ldrb	r3, [r7, #11]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10f      	bne.n	8005958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005952:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	4f54300a 	.word	0x4f54300a

0800596c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <USB_CoreReset+0x64>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e01b      	b.n	80059c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	daf2      	bge.n	8005978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <USB_CoreReset+0x64>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e006      	b.n	80059c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d0f0      	beq.n	80059a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	00030d40 	.word	0x00030d40

080059d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7c1b      	ldrb	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d115      	bne.n	8005a18 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059f0:	2202      	movs	r2, #2
 80059f2:	2181      	movs	r1, #129	; 0x81
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f002 fb84 	bl	8008102 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a04:	2202      	movs	r2, #2
 8005a06:	2101      	movs	r1, #1
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f002 fb7a 	bl	8008102 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005a16:	e012      	b.n	8005a3e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	2181      	movs	r1, #129	; 0x81
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f002 fb6f 	bl	8008102 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a2a:	2340      	movs	r3, #64	; 0x40
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	2101      	movs	r1, #1
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f002 fb66 	bl	8008102 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a3e:	2308      	movs	r3, #8
 8005a40:	2203      	movs	r2, #3
 8005a42:	2182      	movs	r1, #130	; 0x82
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f002 fb5c 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005a50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a54:	f002 fe0a 	bl	800866c <malloc>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	e026      	b.n	8005ac0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005a78:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	7c1b      	ldrb	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f002 fc1b 	bl	80082e4 <USBD_LL_PrepareReceive>
 8005aae:	e007      	b.n	8005ac0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab6:	2340      	movs	r3, #64	; 0x40
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 fc12 	bl	80082e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ada:	2181      	movs	r1, #129	; 0x81
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f002 fb36 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ae8:	2101      	movs	r1, #1
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f002 fb2f 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005af8:	2182      	movs	r1, #130	; 0x82
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f002 fb27 	bl	800814e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b20:	4618      	mov	r0, r3
 8005b22:	f002 fdab 	bl	800867c <free>
    pdev->pClassData = NULL;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b48:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d039      	beq.n	8005bd6 <USBD_CDC_Setup+0x9e>
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d17c      	bne.n	8005c60 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	88db      	ldrh	r3, [r3, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d029      	beq.n	8005bc2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b25b      	sxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da11      	bge.n	8005b9c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005b84:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	88d2      	ldrh	r2, [r2, #6]
 8005b8a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	88db      	ldrh	r3, [r3, #6]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 f9c9 	bl	8006f2c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005b9a:	e068      	b.n	8005c6e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	785a      	ldrb	r2, [r3, #1]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	88db      	ldrh	r3, [r3, #6]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bb2:	6939      	ldr	r1, [r7, #16]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	88db      	ldrh	r3, [r3, #6]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 f9e4 	bl	8006f88 <USBD_CtlPrepareRx>
    break;
 8005bc0:	e055      	b.n	8005c6e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	7850      	ldrb	r0, [r2, #1]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	4798      	blx	r3
    break;
 8005bd4:	e04b      	b.n	8005c6e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	2b0a      	cmp	r3, #10
 8005bdc:	d017      	beq.n	8005c0e <USBD_CDC_Setup+0xd6>
 8005bde:	2b0b      	cmp	r3, #11
 8005be0:	d029      	beq.n	8005c36 <USBD_CDC_Setup+0xfe>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d133      	bne.n	8005c4e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d107      	bne.n	8005c00 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bf0:	f107 030c 	add.w	r3, r7, #12
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f997 	bl	8006f2c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005bfe:	e02e      	b.n	8005c5e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f927 	bl	8006e56 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	e027      	b.n	8005c5e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d107      	bne.n	8005c28 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005c18:	f107 030f 	add.w	r3, r7, #15
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f983 	bl	8006f2c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005c26:	e01a      	b.n	8005c5e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 f913 	bl	8006e56 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c30:	2302      	movs	r3, #2
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	e013      	b.n	8005c5e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d00d      	beq.n	8005c5c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 f907 	bl	8006e56 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c4c:	e006      	b.n	8005c5c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 f900 	bl	8006e56 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c56:	2302      	movs	r3, #2
 8005c58:	75fb      	strb	r3, [r7, #23]
      break;
 8005c5a:	e000      	b.n	8005c5e <USBD_CDC_Setup+0x126>
      break;
 8005c5c:	bf00      	nop
    }
    break;
 8005c5e:	e006      	b.n	8005c6e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 f8f7 	bl	8006e56 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	75fb      	strb	r3, [r7, #23]
    break;
 8005c6c:	bf00      	nop
  }

  return ret;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c8a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005c92:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03a      	beq.n	8005d14 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	331c      	adds	r3, #28
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d029      	beq.n	8005d08 <USBD_CDC_DataIn+0x90>
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	331c      	adds	r3, #28
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	78f9      	ldrb	r1, [r7, #3]
 8005cc8:	68b8      	ldr	r0, [r7, #8]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	1a5b      	subs	r3, r3, r1
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4403      	add	r3, r0
 8005cd4:	3344      	adds	r3, #68	; 0x44
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cdc:	fb03 f301 	mul.w	r3, r3, r1
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d110      	bne.n	8005d08 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	331c      	adds	r3, #28
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005cfa:	78f9      	ldrb	r1, [r7, #3]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2200      	movs	r2, #0
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f002 facc 	bl	800829e <USBD_LL_Transmit>
 8005d06:	e003      	b.n	8005d10 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	460b      	mov	r3, r1
 8005d28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 faf7 	bl	800832a <USBD_LL_GetRxDataSize>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00d      	beq.n	8005d6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d62:	4611      	mov	r1, r2
 8005d64:	4798      	blx	r3

    return USBD_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d82:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d015      	beq.n	8005dba <USBD_CDC_EP0_RxReady+0x46>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d94:	2bff      	cmp	r3, #255	; 0xff
 8005d96:	d010      	beq.n	8005dba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005da6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dae:	b292      	uxth	r2, r2
 8005db0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	22ff      	movs	r2, #255	; 0xff
 8005db6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2243      	movs	r2, #67	; 0x43
 8005dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005dd2:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000090 	.word	0x20000090

08005de4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2243      	movs	r2, #67	; 0x43
 8005df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005df2:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	2000004c 	.word	0x2000004c

08005e04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2243      	movs	r2, #67	; 0x43
 8005e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	200000d4 	.word	0x200000d4

08005e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	220a      	movs	r2, #10
 8005e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000008 	.word	0x20000008

08005e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e86:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005eb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005edc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d115      	bne.n	8005f1e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2181      	movs	r1, #129	; 0x81
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f002 f9c2 	bl	800829e <USBD_LL_Transmit>

      return USBD_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e002      	b.n	8005f24 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f22:	2302      	movs	r3, #2
  }
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d017      	beq.n	8005f76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	7c1b      	ldrb	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d109      	bne.n	8005f62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f58:	2101      	movs	r1, #1
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f002 f9c2 	bl	80082e4 <USBD_LL_PrepareReceive>
 8005f60:	e007      	b.n	8005f72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f002 f9b9 	bl	80082e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e000      	b.n	8005f78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f76:	2302      	movs	r3, #2
  }
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f94:	2302      	movs	r3, #2
 8005f96:	e01a      	b.n	8005fce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	79fa      	ldrb	r2, [r7, #7]
 8005fc4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f002 f834 	bl	8008034 <USBD_LL_Init>

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b085      	sub	sp, #20
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d006      	beq.n	8005ff8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
 8005ff6:	e001      	b.n	8005ffc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f002 f85a 	bl	80080cc <USBD_LL_Start>

  return USBD_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006044:	2302      	movs	r3, #2
 8006046:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	4611      	mov	r1, r2
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	4611      	mov	r1, r2
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
  return USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fe94 	bl	8006ddc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d00c      	beq.n	80060f2 <USBD_LL_SetupStage+0x56>
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d302      	bcc.n	80060e2 <USBD_LL_SetupStage+0x46>
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d010      	beq.n	8006102 <USBD_LL_SetupStage+0x66>
 80060e0:	e017      	b.n	8006112 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa04 	bl	80064f8 <USBD_StdDevReq>
    break;
 80060f0:	e01a      	b.n	8006128 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa66 	bl	80065cc <USBD_StdItfReq>
    break;
 8006100:	e012      	b.n	8006128 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 faa4 	bl	8006658 <USBD_StdEPReq>
    break;
 8006110:	e00a      	b.n	8006128 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800611c:	b2db      	uxtb	r3, r3
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f002 f833 	bl	800818c <USBD_LL_StallEP>
    break;
 8006126:	bf00      	nop
  }

  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b086      	sub	sp, #24
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	460b      	mov	r3, r1
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d14b      	bne.n	80061de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800614c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006154:	2b03      	cmp	r3, #3
 8006156:	d134      	bne.n	80061c2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d919      	bls.n	8006198 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	1ad2      	subs	r2, r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800617a:	429a      	cmp	r2, r3
 800617c:	d203      	bcs.n	8006186 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006182:	b29b      	uxth	r3, r3
 8006184:	e002      	b.n	800618c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 ff17 	bl	8006fc4 <USBD_CtlContinueRx>
 8006196:	e038      	b.n	800620a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d105      	bne.n	80061ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 ff14 	bl	8006fe8 <USBD_CtlSendStatus>
 80061c0:	e023      	b.n	800620a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	d11e      	bne.n	800620a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80061d4:	2100      	movs	r1, #0
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f001 ffd8 	bl	800818c <USBD_LL_StallEP>
 80061dc:	e015      	b.n	800620a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d108      	bne.n	8006206 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	7afa      	ldrb	r2, [r7, #11]
 80061fe:	4611      	mov	r1, r2
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	4798      	blx	r3
 8006204:	e001      	b.n	800620a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006206:	2302      	movs	r3, #2
 8006208:	e000      	b.n	800620c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	460b      	mov	r3, r1
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006222:	7afb      	ldrb	r3, [r7, #11]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d17f      	bne.n	8006328 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3314      	adds	r3, #20
 800622c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006234:	2b02      	cmp	r3, #2
 8006236:	d15c      	bne.n	80062f2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d915      	bls.n	8006270 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fe81 	bl	8006f64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006262:	2300      	movs	r3, #0
 8006264:	2200      	movs	r2, #0
 8006266:	2100      	movs	r1, #0
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f002 f83b 	bl	80082e4 <USBD_LL_PrepareReceive>
 800626e:	e04e      	b.n	800630e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	6912      	ldr	r2, [r2, #16]
 8006278:	fbb3 f1f2 	udiv	r1, r3, r2
 800627c:	fb02 f201 	mul.w	r2, r2, r1
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d11c      	bne.n	80062c0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800628e:	429a      	cmp	r2, r3
 8006290:	d316      	bcc.n	80062c0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800629c:	429a      	cmp	r2, r3
 800629e:	d20f      	bcs.n	80062c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062a0:	2200      	movs	r2, #0
 80062a2:	2100      	movs	r1, #0
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fe5d 	bl	8006f64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80062b2:	2300      	movs	r3, #0
 80062b4:	2200      	movs	r2, #0
 80062b6:	2100      	movs	r1, #0
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f002 f813 	bl	80082e4 <USBD_LL_PrepareReceive>
 80062be:	e026      	b.n	800630e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d105      	bne.n	80062e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f001 ff51 	bl	800818c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fe8f 	bl	800700e <USBD_CtlReceiveStatus>
 80062f0:	e00d      	b.n	800630e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d004      	beq.n	8006306 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f001 ff3f 	bl	800818c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006314:	2b01      	cmp	r3, #1
 8006316:	d11d      	bne.n	8006354 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff fe82 	bl	8006022 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006326:	e015      	b.n	8006354 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800633a:	2b03      	cmp	r3, #3
 800633c:	d108      	bne.n	8006350 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	7afa      	ldrb	r2, [r7, #11]
 8006348:	4611      	mov	r1, r2
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	4798      	blx	r3
 800634e:	e001      	b.n	8006354 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006350:	2302      	movs	r3, #2
 8006352:	e000      	b.n	8006356 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006366:	2340      	movs	r3, #64	; 0x40
 8006368:	2200      	movs	r2, #0
 800636a:	2100      	movs	r1, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 fec8 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2240      	movs	r2, #64	; 0x40
 800637e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006382:	2340      	movs	r3, #64	; 0x40
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 feba 	bl	8008102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2240      	movs	r2, #64	; 0x40
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6852      	ldr	r2, [r2, #4]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	4611      	mov	r1, r2
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
  }

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2204      	movs	r2, #4
 8006418:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800645a:	2b03      	cmp	r3, #3
 800645c:	d10b      	bne.n	8006476 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6852      	ldr	r2, [r2, #4]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	4611      	mov	r1, r2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3

  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800650e:	2b20      	cmp	r3, #32
 8006510:	d004      	beq.n	800651c <USBD_StdDevReq+0x24>
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d002      	beq.n	800651c <USBD_StdDevReq+0x24>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <USBD_StdDevReq+0x34>
 800651a:	e04c      	b.n	80065b6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
    break;
 800652a:	e049      	b.n	80065c0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	2b09      	cmp	r3, #9
 8006532:	d83a      	bhi.n	80065aa <USBD_StdDevReq+0xb2>
 8006534:	a201      	add	r2, pc, #4	; (adr r2, 800653c <USBD_StdDevReq+0x44>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	0800658d 	.word	0x0800658d
 8006540:	080065a1 	.word	0x080065a1
 8006544:	080065ab 	.word	0x080065ab
 8006548:	08006597 	.word	0x08006597
 800654c:	080065ab 	.word	0x080065ab
 8006550:	0800656f 	.word	0x0800656f
 8006554:	08006565 	.word	0x08006565
 8006558:	080065ab 	.word	0x080065ab
 800655c:	08006583 	.word	0x08006583
 8006560:	08006579 	.word	0x08006579
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9d2 	bl	8006910 <USBD_GetDescriptor>
      break;
 800656c:	e022      	b.n	80065b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fac7 	bl	8006b04 <USBD_SetAddress>
      break;
 8006576:	e01d      	b.n	80065b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb04 	bl	8006b88 <USBD_SetConfig>
      break;
 8006580:	e018      	b.n	80065b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb8d 	bl	8006ca4 <USBD_GetConfig>
      break;
 800658a:	e013      	b.n	80065b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fbbc 	bl	8006d0c <USBD_GetStatus>
      break;
 8006594:	e00e      	b.n	80065b4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fbea 	bl	8006d72 <USBD_SetFeature>
      break;
 800659e:	e009      	b.n	80065b4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fbf9 	bl	8006d9a <USBD_ClrFeature>
      break;
 80065a8:	e004      	b.n	80065b4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fc52 	bl	8006e56 <USBD_CtlError>
      break;
 80065b2:	bf00      	nop
    }
    break;
 80065b4:	e004      	b.n	80065c0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc4c 	bl	8006e56 <USBD_CtlError>
    break;
 80065be:	bf00      	nop
  }

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d003      	beq.n	80065ee <USBD_StdItfReq+0x22>
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d001      	beq.n	80065ee <USBD_StdItfReq+0x22>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d12a      	bne.n	8006644 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80065f4:	3b01      	subs	r3, #1
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d81d      	bhi.n	8006636 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	889b      	ldrh	r3, [r3, #4]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b01      	cmp	r3, #1
 8006602:	d813      	bhi.n	800662c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
 8006612:	4603      	mov	r3, r0
 8006614:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88db      	ldrh	r3, [r3, #6]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d110      	bne.n	8006640 <USBD_StdItfReq+0x74>
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10d      	bne.n	8006640 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fcdf 	bl	8006fe8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800662a:	e009      	b.n	8006640 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fc11 	bl	8006e56 <USBD_CtlError>
      break;
 8006634:	e004      	b.n	8006640 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fc0c 	bl	8006e56 <USBD_CtlError>
      break;
 800663e:	e000      	b.n	8006642 <USBD_StdItfReq+0x76>
      break;
 8006640:	bf00      	nop
    }
    break;
 8006642:	e004      	b.n	800664e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fc05 	bl	8006e56 <USBD_CtlError>
    break;
 800664c:	bf00      	nop
  }

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	889b      	ldrh	r3, [r3, #4]
 800666a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006674:	2b20      	cmp	r3, #32
 8006676:	d004      	beq.n	8006682 <USBD_StdEPReq+0x2a>
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d002      	beq.n	8006682 <USBD_StdEPReq+0x2a>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <USBD_StdEPReq+0x3a>
 8006680:	e13b      	b.n	80068fa <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
    break;
 8006690:	e138      	b.n	8006904 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800669a:	2b20      	cmp	r3, #32
 800669c:	d10a      	bne.n	80066b4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	4603      	mov	r3, r0
 80066ae:	73fb      	strb	r3, [r7, #15]

      return ret;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	e128      	b.n	8006906 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d03e      	beq.n	800673a <USBD_StdEPReq+0xe2>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d002      	beq.n	80066c6 <USBD_StdEPReq+0x6e>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d070      	beq.n	80067a6 <USBD_StdEPReq+0x14e>
 80066c4:	e113      	b.n	80068ee <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d002      	beq.n	80066d6 <USBD_StdEPReq+0x7e>
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d015      	beq.n	8006700 <USBD_StdEPReq+0xa8>
 80066d4:	e02b      	b.n	800672e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00c      	beq.n	80066f6 <USBD_StdEPReq+0x9e>
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d009      	beq.n	80066f6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fd50 	bl	800818c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 fd4c 	bl	800818c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066f4:	e020      	b.n	8006738 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fbac 	bl	8006e56 <USBD_CtlError>
        break;
 80066fe:	e01b      	b.n	8006738 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10e      	bne.n	8006726 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <USBD_StdEPReq+0xce>
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b80      	cmp	r3, #128	; 0x80
 8006712:	d008      	beq.n	8006726 <USBD_StdEPReq+0xce>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	88db      	ldrh	r3, [r3, #6]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 fd33 	bl	800818c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc5e 	bl	8006fe8 <USBD_CtlSendStatus>

        break;
 800672c:	e004      	b.n	8006738 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fb90 	bl	8006e56 <USBD_CtlError>
        break;
 8006736:	bf00      	nop
      }
      break;
 8006738:	e0de      	b.n	80068f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006740:	2b02      	cmp	r3, #2
 8006742:	d002      	beq.n	800674a <USBD_StdEPReq+0xf2>
 8006744:	2b03      	cmp	r3, #3
 8006746:	d015      	beq.n	8006774 <USBD_StdEPReq+0x11c>
 8006748:	e026      	b.n	8006798 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00c      	beq.n	800676a <USBD_StdEPReq+0x112>
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d009      	beq.n	800676a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fd16 	bl	800818c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006760:	2180      	movs	r1, #128	; 0x80
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fd12 	bl	800818c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006768:	e01c      	b.n	80067a4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fb72 	bl	8006e56 <USBD_CtlError>
        break;
 8006772:	e017      	b.n	80067a4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	885b      	ldrh	r3, [r3, #2]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d112      	bne.n	80067a2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 fd1d 	bl	80081ca <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc29 	bl	8006fe8 <USBD_CtlSendStatus>
        }
        break;
 8006796:	e004      	b.n	80067a2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fb5b 	bl	8006e56 <USBD_CtlError>
        break;
 80067a0:	e000      	b.n	80067a4 <USBD_StdEPReq+0x14c>
        break;
 80067a2:	bf00      	nop
      }
      break;
 80067a4:	e0a8      	b.n	80068f8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d002      	beq.n	80067b6 <USBD_StdEPReq+0x15e>
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d031      	beq.n	8006818 <USBD_StdEPReq+0x1c0>
 80067b4:	e095      	b.n	80068e2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <USBD_StdEPReq+0x174>
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d004      	beq.n	80067cc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fb46 	bl	8006e56 <USBD_CtlError>
          break;
 80067ca:	e08f      	b.n	80068ec <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80067cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	da0b      	bge.n	80067ec <USBD_StdEPReq+0x194>
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	3310      	adds	r3, #16
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	3304      	adds	r3, #4
 80067ea:	e00a      	b.n	8006802 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2202      	movs	r2, #2
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb8b 	bl	8006f2c <USBD_CtlSendData>
          break;
 8006816:	e069      	b.n	80068ec <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800681c:	2b00      	cmp	r3, #0
 800681e:	da11      	bge.n	8006844 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3318      	adds	r3, #24
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d117      	bne.n	800686a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb0a 	bl	8006e56 <USBD_CtlError>
            break;
 8006842:	e053      	b.n	80068ec <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 faf7 	bl	8006e56 <USBD_CtlError>
            break;
 8006868:	e040      	b.n	80068ec <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800686a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800686e:	2b00      	cmp	r3, #0
 8006870:	da0b      	bge.n	800688a <USBD_StdEPReq+0x232>
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	3310      	adds	r3, #16
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	3304      	adds	r3, #4
 8006888:	e00a      	b.n	80068a0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	4413      	add	r3, r2
 80068a0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <USBD_StdEPReq+0x256>
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	2b80      	cmp	r3, #128	; 0x80
 80068ac:	d103      	bne.n	80068b6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	e00e      	b.n	80068d4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fca4 	bl	8008208 <USBD_LL_IsStallEP>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e002      	b.n	80068d4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2202      	movs	r2, #2
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb26 	bl	8006f2c <USBD_CtlSendData>
          break;
 80068e0:	e004      	b.n	80068ec <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fab6 	bl	8006e56 <USBD_CtlError>
        break;
 80068ea:	bf00      	nop
      }
      break;
 80068ec:	e004      	b.n	80068f8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fab0 	bl	8006e56 <USBD_CtlError>
      break;
 80068f6:	bf00      	nop
    }
    break;
 80068f8:	e004      	b.n	8006904 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 faaa 	bl	8006e56 <USBD_CtlError>
    break;
 8006902:	bf00      	nop
  }

  return ret;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	885b      	ldrh	r3, [r3, #2]
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	2b06      	cmp	r3, #6
 8006926:	f200 80c9 	bhi.w	8006abc <USBD_GetDescriptor+0x1ac>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <USBD_GetDescriptor+0x20>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	0800694d 	.word	0x0800694d
 8006934:	08006965 	.word	0x08006965
 8006938:	080069a5 	.word	0x080069a5
 800693c:	08006abd 	.word	0x08006abd
 8006940:	08006abd 	.word	0x08006abd
 8006944:	08006a69 	.word	0x08006a69
 8006948:	08006a8f 	.word	0x08006a8f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	7c12      	ldrb	r2, [r2, #16]
 8006958:	f107 010a 	add.w	r1, r7, #10
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
 8006960:	60f8      	str	r0, [r7, #12]
    break;
 8006962:	e0b0      	b.n	8006ac6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7c1b      	ldrb	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	f107 020a 	add.w	r2, r7, #10
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	2202      	movs	r2, #2
 8006984:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006986:	e09e      	b.n	8006ac6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f107 020a 	add.w	r2, r7, #10
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	2202      	movs	r2, #2
 80069a0:	701a      	strb	r2, [r3, #0]
    break;
 80069a2:	e090      	b.n	8006ac6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	885b      	ldrh	r3, [r3, #2]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b05      	cmp	r3, #5
 80069ac:	d856      	bhi.n	8006a5c <USBD_GetDescriptor+0x14c>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <USBD_GetDescriptor+0xa4>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069cd 	.word	0x080069cd
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	080069fd 	.word	0x080069fd
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006a2d 	.word	0x08006a2d
 80069c8:	08006a45 	.word	0x08006a45
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 010a 	add.w	r1, r7, #10
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
      break;
 80069e2:	e040      	b.n	8006a66 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	f107 010a 	add.w	r1, r7, #10
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
      break;
 80069fa:	e034      	b.n	8006a66 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7c12      	ldrb	r2, [r2, #16]
 8006a08:	f107 010a 	add.w	r1, r7, #10
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
      break;
 8006a12:	e028      	b.n	8006a66 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 010a 	add.w	r1, r7, #10
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
      break;
 8006a2a:	e01c      	b.n	8006a66 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	7c12      	ldrb	r2, [r2, #16]
 8006a38:	f107 010a 	add.w	r1, r7, #10
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
      break;
 8006a42:	e010      	b.n	8006a66 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7c12      	ldrb	r2, [r2, #16]
 8006a50:	f107 010a 	add.w	r1, r7, #10
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
      break;
 8006a5a:	e004      	b.n	8006a66 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9f9 	bl	8006e56 <USBD_CtlError>
      return;
 8006a64:	e04b      	b.n	8006afe <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006a66:	e02e      	b.n	8006ac6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	7c1b      	ldrb	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	f107 020a 	add.w	r2, r7, #10
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
 8006a80:	60f8      	str	r0, [r7, #12]
      break;
 8006a82:	e020      	b.n	8006ac6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9e5 	bl	8006e56 <USBD_CtlError>
      return;
 8006a8c:	e037      	b.n	8006afe <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c1b      	ldrb	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f107 020a 	add.w	r2, r7, #10
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4798      	blx	r3
 8006aa6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	2207      	movs	r2, #7
 8006aae:	701a      	strb	r2, [r3, #0]
      break;
 8006ab0:	e009      	b.n	8006ac6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f9ce 	bl	8006e56 <USBD_CtlError>
      return;
 8006aba:	e020      	b.n	8006afe <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9c9 	bl	8006e56 <USBD_CtlError>
    return;
 8006ac4:	e01b      	b.n	8006afe <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006ac6:	897b      	ldrh	r3, [r7, #10]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d011      	beq.n	8006af0 <USBD_GetDescriptor+0x1e0>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	88db      	ldrh	r3, [r3, #6]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00d      	beq.n	8006af0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88da      	ldrh	r2, [r3, #6]
 8006ad8:	897b      	ldrh	r3, [r7, #10]
 8006ada:	4293      	cmp	r3, r2
 8006adc:	bf28      	it	cs
 8006ade:	4613      	movcs	r3, r2
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006ae4:	897b      	ldrh	r3, [r7, #10]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa1e 	bl	8006f2c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	88db      	ldrh	r3, [r3, #6]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa75 	bl	8006fe8 <USBD_CtlSendStatus>
  }
}
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	889b      	ldrh	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d130      	bne.n	8006b78 <USBD_SetAddress+0x74>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	88db      	ldrh	r3, [r3, #6]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d12c      	bne.n	8006b78 <USBD_SetAddress+0x74>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d828      	bhi.n	8006b78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d104      	bne.n	8006b46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f989 	bl	8006e56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b44:	e01c      	b.n	8006b80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7bfa      	ldrb	r2, [r7, #15]
 8006b4a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fb84 	bl	8008260 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa45 	bl	8006fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6c:	e008      	b.n	8006b80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	e003      	b.n	8006b80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f96b 	bl	8006e56 <USBD_CtlError>
  }
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	4b41      	ldr	r3, [pc, #260]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006b9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b9c:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d904      	bls.n	8006bae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f955 	bl	8006e56 <USBD_CtlError>
 8006bac:	e075      	b.n	8006c9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d002      	beq.n	8006bbe <USBD_SetConfig+0x36>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d023      	beq.n	8006c04 <USBD_SetConfig+0x7c>
 8006bbc:	e062      	b.n	8006c84 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006bbe:	4b38      	ldr	r3, [pc, #224]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01a      	beq.n	8006bfc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006bc6:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bd8:	4b31      	ldr	r3, [pc, #196]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff fa2a 	bl	8006038 <USBD_SetClassConfig>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d104      	bne.n	8006bf4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f932 	bl	8006e56 <USBD_CtlError>
          return;
 8006bf2:	e052      	b.n	8006c9a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f9f7 	bl	8006fe8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006bfa:	e04e      	b.n	8006c9a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f9f3 	bl	8006fe8 <USBD_CtlSendStatus>
      break;
 8006c02:	e04a      	b.n	8006c9a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c04:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d112      	bne.n	8006c32 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006c14:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006c1e:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fa26 	bl	8006076 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f9dc 	bl	8006fe8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006c30:	e033      	b.n	8006c9a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d01d      	beq.n	8006c7c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff fa14 	bl	8006076 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff f9ea 	bl	8006038 <USBD_SetClassConfig>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d104      	bne.n	8006c74 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8f2 	bl	8006e56 <USBD_CtlError>
          return;
 8006c72:	e012      	b.n	8006c9a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9b7 	bl	8006fe8 <USBD_CtlSendStatus>
      break;
 8006c7a:	e00e      	b.n	8006c9a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f9b3 	bl	8006fe8 <USBD_CtlSendStatus>
      break;
 8006c82:	e00a      	b.n	8006c9a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8e5 	bl	8006e56 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006c8c:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <USBD_SetConfig+0x118>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff f9ef 	bl	8006076 <USBD_ClrClassConfig>
      break;
 8006c98:	bf00      	nop
    }
  }
}
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000204 	.word	0x20000204

08006ca4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	88db      	ldrh	r3, [r3, #6]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d004      	beq.n	8006cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8cc 	bl	8006e56 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006cbe:	e021      	b.n	8006d04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	db17      	blt.n	8006cfa <USBD_GetConfig+0x56>
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	dd02      	ble.n	8006cd4 <USBD_GetConfig+0x30>
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d00b      	beq.n	8006cea <USBD_GetConfig+0x46>
 8006cd2:	e012      	b.n	8006cfa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f922 	bl	8006f2c <USBD_CtlSendData>
      break;
 8006ce8:	e00c      	b.n	8006d04 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f91a 	bl	8006f2c <USBD_CtlSendData>
      break;
 8006cf8:	e004      	b.n	8006d04 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8aa 	bl	8006e56 <USBD_CtlError>
      break;
 8006d02:	bf00      	nop
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d81e      	bhi.n	8006d60 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	88db      	ldrh	r3, [r3, #6]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d004      	beq.n	8006d34 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f892 	bl	8006e56 <USBD_CtlError>
      break;
 8006d32:	e01a      	b.n	8006d6a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f043 0202 	orr.w	r2, r3, #2
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	330c      	adds	r3, #12
 8006d54:	2202      	movs	r2, #2
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f8e7 	bl	8006f2c <USBD_CtlSendData>
    break;
 8006d5e:	e004      	b.n	8006d6a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f877 	bl	8006e56 <USBD_CtlError>
    break;
 8006d68:	bf00      	nop
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	885b      	ldrh	r3, [r3, #2]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f92b 	bl	8006fe8 <USBD_CtlSendStatus>
  }

}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006daa:	3b01      	subs	r3, #1
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d80b      	bhi.n	8006dc8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	885b      	ldrh	r3, [r3, #2]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d10c      	bne.n	8006dd2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f911 	bl	8006fe8 <USBD_CtlSendStatus>
    }
    break;
 8006dc6:	e004      	b.n	8006dd2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f843 	bl	8006e56 <USBD_CtlError>
    break;
 8006dd0:	e000      	b.n	8006dd4 <USBD_ClrFeature+0x3a>
    break;
 8006dd2:	bf00      	nop
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785a      	ldrb	r2, [r3, #1]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	3302      	adds	r3, #2
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	3303      	adds	r3, #3
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	3304      	adds	r3, #4
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	3305      	adds	r3, #5
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	4413      	add	r3, r2
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	3306      	adds	r3, #6
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3307      	adds	r3, #7
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	80da      	strh	r2, [r3, #6]

}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006e60:	2180      	movs	r1, #128	; 0x80
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f992 	bl	800818c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f98e 	bl	800818c <USBD_LL_StallEP>
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d032      	beq.n	8006ef4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f834 	bl	8006efc <USBD_GetLen>
 8006e94:	4603      	mov	r3, r0
 8006e96:	3301      	adds	r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	75fa      	strb	r2, [r7, #23]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4413      	add	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	75fa      	strb	r2, [r7, #23]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ec4:	e012      	b.n	8006eec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	60fa      	str	r2, [r7, #12]
 8006ecc:	7dfa      	ldrb	r2, [r7, #23]
 8006ece:	1c51      	adds	r1, r2, #1
 8006ed0:	75f9      	strb	r1, [r7, #23]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006edc:	7dfb      	ldrb	r3, [r7, #23]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	75fa      	strb	r2, [r7, #23]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	2200      	movs	r2, #0
 8006eea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e8      	bne.n	8006ec6 <USBD_GetString+0x4e>
    }
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006f08:	e005      	b.n	8006f16 <USBD_GetLen+0x1a>
    {
        len++;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3301      	adds	r3, #1
 8006f14:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f5      	bne.n	8006f0a <USBD_GetLen+0xe>
    }

    return len;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f48:	88fa      	ldrh	r2, [r7, #6]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	2100      	movs	r1, #0
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 f9a2 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	2100      	movs	r1, #0
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f001 f990 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2203      	movs	r2, #3
 8006f9a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 f995 	bl	80082e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 f983 	bl	80082e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 f94d 	bl	800829e <USBD_LL_Transmit>

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2205      	movs	r2, #5
 800701a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	2100      	movs	r1, #0
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f95d 	bl	80082e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <user_pwm_setvalue>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void user_pwm_setvalue(uint16_t value)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.Pulse = value;
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800704a:	f107 030c 	add.w	r3, r7, #12
 800704e:	2200      	movs	r2, #0
 8007050:	4619      	mov	r1, r3
 8007052:	4808      	ldr	r0, [pc, #32]	; (8007074 <user_pwm_setvalue+0x40>)
 8007054:	f7fc fcca 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <user_pwm_setvalue+0x2e>
	{
		Error_Handler();
 800705e:	f000 fb45 	bl	80076ec <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8007062:	2100      	movs	r1, #0
 8007064:	4803      	ldr	r0, [pc, #12]	; (8007074 <user_pwm_setvalue+0x40>)
 8007066:	f7fc fb7b 	bl	8003760 <HAL_TIM_PWM_Start>
}
 800706a:	bf00      	nop
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000218 	.word	0x20000218

08007078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800707e:	f7f9 fa2b 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007082:	f000 f851 	bl	8007128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007086:	f000 fa29 	bl	80074dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800708a:	f000 f8cf 	bl	800722c <MX_I2C1_Init>
  MX_I2S3_Init();
 800708e:	f000 f8fb 	bl	8007288 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007092:	f000 f929 	bl	80072e8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8007096:	f000 fd81 	bl	8007b9c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800709a:	f000 f95b 	bl	8007354 <MX_TIM3_Init>
  MX_TIM4_Init();
 800709e:	f000 f9a5 	bl	80073ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 80070a2:	481d      	ldr	r0, [pc, #116]	; (8007118 <main+0xa0>)
 80070a4:	f7fc fb03 	bl	80036ae <HAL_TIM_Base_Start_IT>
  uint8_t pwm_value=0, step;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t HiMsg[] = "plez work\r\n";
 80070ac:	4a1b      	ldr	r2, [pc, #108]	; (800711c <main+0xa4>)
 80070ae:	463b      	mov	r3, r7
 80070b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80070b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  CDC_Transmit_FS(HiMsg, strlen(HiMsg));
 80070b6:	463b      	mov	r3, r7
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7f9 f885 	bl	80001c8 <strlen>
 80070be:	4602      	mov	r2, r0
 80070c0:	463b      	mov	r3, r7
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fe3b 	bl	8007d40 <CDC_Transmit_FS>
	  HAL_Delay(200);
 80070ca:	20c8      	movs	r0, #200	; 0xc8
 80070cc:	f7f9 fa76 	bl	80005bc <HAL_Delay>

	  if(pwm_value == 0) step = 100;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <main+0x62>
 80070d6:	2364      	movs	r3, #100	; 0x64
 80070d8:	73bb      	strb	r3, [r7, #14]
	  if(pwm_value == 2000) step = -100;
	  pwm_value += step;
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	4413      	add	r3, r2
 80070e0:	73fb      	strb	r3, [r7, #15]
	  user_pwm_setvalue(pwm_value);
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff ffa4 	bl	8007034 <user_pwm_setvalue>

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80070ec:	2101      	movs	r1, #1
 80070ee:	480c      	ldr	r0, [pc, #48]	; (8007120 <main+0xa8>)
 80070f0:	f7f9 fd32 	bl	8000b58 <HAL_GPIO_ReadPin>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <main+0x90>
		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80070fa:	2201      	movs	r2, #1
 80070fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007100:	4808      	ldr	r0, [pc, #32]	; (8007124 <main+0xac>)
 8007102:	f7f9 fd41 	bl	8000b88 <HAL_GPIO_WritePin>
 8007106:	e7d1      	b.n	80070ac <main+0x34>
	  } else {
		  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8007108:	2200      	movs	r2, #0
 800710a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800710e:	4805      	ldr	r0, [pc, #20]	; (8007124 <main+0xac>)
 8007110:	f7f9 fd3a 	bl	8000b88 <HAL_GPIO_WritePin>
  {
 8007114:	e7ca      	b.n	80070ac <main+0x34>
 8007116:	bf00      	nop
 8007118:	200002ac 	.word	0x200002ac
 800711c:	08008828 	.word	0x08008828
 8007120:	40020000 	.word	0x40020000
 8007124:	40020c00 	.word	0x40020c00

08007128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b098      	sub	sp, #96	; 0x60
 800712c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800712e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007132:	2230      	movs	r2, #48	; 0x30
 8007134:	2100      	movs	r1, #0
 8007136:	4618      	mov	r0, r3
 8007138:	f001 faa8 	bl	800868c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800713c:	f107 031c 	add.w	r3, r7, #28
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	609a      	str	r2, [r3, #8]
 8007148:	60da      	str	r2, [r3, #12]
 800714a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800714c:	f107 030c 	add.w	r3, r7, #12
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	4b31      	ldr	r3, [pc, #196]	; (8007224 <SystemClock_Config+0xfc>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	4a30      	ldr	r2, [pc, #192]	; (8007224 <SystemClock_Config+0xfc>)
 8007164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007168:	6413      	str	r3, [r2, #64]	; 0x40
 800716a:	4b2e      	ldr	r3, [pc, #184]	; (8007224 <SystemClock_Config+0xfc>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007172:	60bb      	str	r3, [r7, #8]
 8007174:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007176:	2300      	movs	r3, #0
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <SystemClock_Config+0x100>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <SystemClock_Config+0x100>)
 8007180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4b28      	ldr	r3, [pc, #160]	; (8007228 <SystemClock_Config+0x100>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007192:	2301      	movs	r3, #1
 8007194:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800719c:	2302      	movs	r3, #2
 800719e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80071a6:	2308      	movs	r3, #8
 80071a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80071aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80071ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80071b0:	2302      	movs	r3, #2
 80071b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80071b4:	2307      	movs	r3, #7
 80071b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fb fc8d 	bl	8002adc <HAL_RCC_OscConfig>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80071c8:	f000 fa90 	bl	80076ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071cc:	230f      	movs	r3, #15
 80071ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071d0:	2302      	movs	r3, #2
 80071d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071d4:	2300      	movs	r3, #0
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80071d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80071dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80071de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80071e4:	f107 031c 	add.w	r3, r7, #28
 80071e8:	2105      	movs	r1, #5
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fb feb8 	bl	8002f60 <HAL_RCC_ClockConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80071f6:	f000 fa79 	bl	80076ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80071fa:	2301      	movs	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80071fe:	23c0      	movs	r3, #192	; 0xc0
 8007200:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007202:	2302      	movs	r3, #2
 8007204:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	4618      	mov	r0, r3
 800720c:	f7fc f882 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007216:	f000 fa69 	bl	80076ec <Error_Handler>
  }
}
 800721a:	bf00      	nop
 800721c:	3760      	adds	r7, #96	; 0x60
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40023800 	.word	0x40023800
 8007228:	40007000 	.word	0x40007000

0800722c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007230:	4b12      	ldr	r3, [pc, #72]	; (800727c <MX_I2C1_Init+0x50>)
 8007232:	4a13      	ldr	r2, [pc, #76]	; (8007280 <MX_I2C1_Init+0x54>)
 8007234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007236:	4b11      	ldr	r3, [pc, #68]	; (800727c <MX_I2C1_Init+0x50>)
 8007238:	4a12      	ldr	r2, [pc, #72]	; (8007284 <MX_I2C1_Init+0x58>)
 800723a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <MX_I2C1_Init+0x50>)
 800723e:	2200      	movs	r2, #0
 8007240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <MX_I2C1_Init+0x50>)
 8007244:	2200      	movs	r2, #0
 8007246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <MX_I2C1_Init+0x50>)
 800724a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800724e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <MX_I2C1_Init+0x50>)
 8007252:	2200      	movs	r2, #0
 8007254:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007256:	4b09      	ldr	r3, [pc, #36]	; (800727c <MX_I2C1_Init+0x50>)
 8007258:	2200      	movs	r2, #0
 800725a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800725c:	4b07      	ldr	r3, [pc, #28]	; (800727c <MX_I2C1_Init+0x50>)
 800725e:	2200      	movs	r2, #0
 8007260:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <MX_I2C1_Init+0x50>)
 8007264:	2200      	movs	r2, #0
 8007266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007268:	4804      	ldr	r0, [pc, #16]	; (800727c <MX_I2C1_Init+0x50>)
 800726a:	f7f9 fce5 	bl	8000c38 <HAL_I2C_Init>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007274:	f000 fa3a 	bl	80076ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007278:	bf00      	nop
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000258 	.word	0x20000258
 8007280:	40005400 	.word	0x40005400
 8007284:	000186a0 	.word	0x000186a0

08007288 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <MX_I2S3_Init+0x54>)
 800728e:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <MX_I2S3_Init+0x58>)
 8007290:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <MX_I2S3_Init+0x54>)
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <MX_I2S3_Init+0x54>)
 800729c:	2200      	movs	r2, #0
 800729e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <MX_I2S3_Init+0x54>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80072a6:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <MX_I2S3_Init+0x54>)
 80072a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <MX_I2S3_Init+0x54>)
 80072b0:	4a0c      	ldr	r2, [pc, #48]	; (80072e4 <MX_I2S3_Init+0x5c>)
 80072b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <MX_I2S3_Init+0x54>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <MX_I2S3_Init+0x54>)
 80072bc:	2200      	movs	r2, #0
 80072be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <MX_I2S3_Init+0x54>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80072c6:	4805      	ldr	r0, [pc, #20]	; (80072dc <MX_I2S3_Init+0x54>)
 80072c8:	f7f9 fdde 	bl	8000e88 <HAL_I2S_Init>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80072d2:	f000 fa0b 	bl	80076ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80072d6:	bf00      	nop
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000344 	.word	0x20000344
 80072e0:	40003c00 	.word	0x40003c00
 80072e4:	00017700 	.word	0x00017700

080072e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <MX_SPI1_Init+0x64>)
 80072ee:	4a18      	ldr	r2, [pc, #96]	; (8007350 <MX_SPI1_Init+0x68>)
 80072f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80072f2:	4b16      	ldr	r3, [pc, #88]	; (800734c <MX_SPI1_Init+0x64>)
 80072f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80072f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <MX_SPI1_Init+0x64>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007300:	4b12      	ldr	r3, [pc, #72]	; (800734c <MX_SPI1_Init+0x64>)
 8007302:	2200      	movs	r2, #0
 8007304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <MX_SPI1_Init+0x64>)
 8007308:	2200      	movs	r2, #0
 800730a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <MX_SPI1_Init+0x64>)
 800730e:	2200      	movs	r2, #0
 8007310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007312:	4b0e      	ldr	r3, [pc, #56]	; (800734c <MX_SPI1_Init+0x64>)
 8007314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <MX_SPI1_Init+0x64>)
 800731c:	2200      	movs	r2, #0
 800731e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <MX_SPI1_Init+0x64>)
 8007322:	2200      	movs	r2, #0
 8007324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <MX_SPI1_Init+0x64>)
 8007328:	2200      	movs	r2, #0
 800732a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <MX_SPI1_Init+0x64>)
 800732e:	2200      	movs	r2, #0
 8007330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <MX_SPI1_Init+0x64>)
 8007334:	220a      	movs	r2, #10
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007338:	4804      	ldr	r0, [pc, #16]	; (800734c <MX_SPI1_Init+0x64>)
 800733a:	f7fc f929 	bl	8003590 <HAL_SPI_Init>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007344:	f000 f9d2 	bl	80076ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007348:	bf00      	nop
 800734a:	bd80      	pop	{r7, pc}
 800734c:	200002ec 	.word	0x200002ec
 8007350:	40013000 	.word	0x40013000

08007354 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800735a:	f107 0308 	add.w	r3, r7, #8
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	605a      	str	r2, [r3, #4]
 8007364:	609a      	str	r2, [r3, #8]
 8007366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007368:	463b      	mov	r3, r7
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <MX_TIM3_Init+0x90>)
 8007372:	4a1d      	ldr	r2, [pc, #116]	; (80073e8 <MX_TIM3_Init+0x94>)
 8007374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007376:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <MX_TIM3_Init+0x90>)
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <MX_TIM3_Init+0x90>)
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8007382:	4b18      	ldr	r3, [pc, #96]	; (80073e4 <MX_TIM3_Init+0x90>)
 8007384:	2200      	movs	r2, #0
 8007386:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007388:	4b16      	ldr	r3, [pc, #88]	; (80073e4 <MX_TIM3_Init+0x90>)
 800738a:	2200      	movs	r2, #0
 800738c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800738e:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <MX_TIM3_Init+0x90>)
 8007390:	2200      	movs	r2, #0
 8007392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007394:	4813      	ldr	r0, [pc, #76]	; (80073e4 <MX_TIM3_Init+0x90>)
 8007396:	f7fc f95f 	bl	8003658 <HAL_TIM_Base_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80073a0:	f000 f9a4 	bl	80076ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80073aa:	f107 0308 	add.w	r3, r7, #8
 80073ae:	4619      	mov	r1, r3
 80073b0:	480c      	ldr	r0, [pc, #48]	; (80073e4 <MX_TIM3_Init+0x90>)
 80073b2:	f7fc fbe1 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80073bc:	f000 f996 	bl	80076ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073c0:	2300      	movs	r3, #0
 80073c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073c4:	2300      	movs	r3, #0
 80073c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80073c8:	463b      	mov	r3, r7
 80073ca:	4619      	mov	r1, r3
 80073cc:	4805      	ldr	r0, [pc, #20]	; (80073e4 <MX_TIM3_Init+0x90>)
 80073ce:	f7fc ffcc 	bl	800436a <HAL_TIMEx_MasterConfigSynchronization>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80073d8:	f000 f988 	bl	80076ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80073dc:	bf00      	nop
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	200002ac 	.word	0x200002ac
 80073e8:	40000400 	.word	0x40000400

080073ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	609a      	str	r2, [r3, #8]
 80073fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007400:	f107 0320 	add.w	r3, r7, #32
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	611a      	str	r2, [r3, #16]
 8007418:	615a      	str	r2, [r3, #20]
 800741a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800741c:	4b2d      	ldr	r3, [pc, #180]	; (80074d4 <MX_TIM4_Init+0xe8>)
 800741e:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <MX_TIM4_Init+0xec>)
 8007420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1080-1;
 8007422:	4b2c      	ldr	r3, [pc, #176]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007424:	f240 4237 	movw	r2, #1079	; 0x437
 8007428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800742a:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <MX_TIM4_Init+0xe8>)
 800742c:	2200      	movs	r2, #0
 800742e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8007430:	4b28      	ldr	r3, [pc, #160]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007432:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007438:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <MX_TIM4_Init+0xe8>)
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800743e:	4b25      	ldr	r3, [pc, #148]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007440:	2200      	movs	r2, #0
 8007442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007444:	4823      	ldr	r0, [pc, #140]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007446:	f7fc f907 	bl	8003658 <HAL_TIM_Base_Init>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8007450:	f000 f94c 	bl	80076ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800745a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800745e:	4619      	mov	r1, r3
 8007460:	481c      	ldr	r0, [pc, #112]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007462:	f7fc fb89 	bl	8003b78 <HAL_TIM_ConfigClockSource>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800746c:	f000 f93e 	bl	80076ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007470:	4818      	ldr	r0, [pc, #96]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007472:	f7fc f940 	bl	80036f6 <HAL_TIM_PWM_Init>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800747c:	f000 f936 	bl	80076ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007480:	2300      	movs	r3, #0
 8007482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007488:	f107 0320 	add.w	r3, r7, #32
 800748c:	4619      	mov	r1, r3
 800748e:	4811      	ldr	r0, [pc, #68]	; (80074d4 <MX_TIM4_Init+0xe8>)
 8007490:	f7fc ff6b 	bl	800436a <HAL_TIMEx_MasterConfigSynchronization>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800749a:	f000 f927 	bl	80076ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800749e:	2360      	movs	r3, #96	; 0x60
 80074a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2399;
 80074a2:	f640 135f 	movw	r3, #2399	; 0x95f
 80074a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074b0:	1d3b      	adds	r3, r7, #4
 80074b2:	2200      	movs	r2, #0
 80074b4:	4619      	mov	r1, r3
 80074b6:	4807      	ldr	r0, [pc, #28]	; (80074d4 <MX_TIM4_Init+0xe8>)
 80074b8:	f7fc fa98 	bl	80039ec <HAL_TIM_PWM_ConfigChannel>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80074c2:	f000 f913 	bl	80076ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80074c6:	4803      	ldr	r0, [pc, #12]	; (80074d4 <MX_TIM4_Init+0xe8>)
 80074c8:	f000 fa76 	bl	80079b8 <HAL_TIM_MspPostInit>

}
 80074cc:	bf00      	nop
 80074ce:	3738      	adds	r7, #56	; 0x38
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20000218 	.word	0x20000218
 80074d8:	40000800 	.word	0x40000800

080074dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	; 0x30
 80074e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e2:	f107 031c 	add.w	r3, r7, #28
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	605a      	str	r2, [r3, #4]
 80074ec:	609a      	str	r2, [r3, #8]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	4b75      	ldr	r3, [pc, #468]	; (80076cc <MX_GPIO_Init+0x1f0>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	4a74      	ldr	r2, [pc, #464]	; (80076cc <MX_GPIO_Init+0x1f0>)
 80074fc:	f043 0310 	orr.w	r3, r3, #16
 8007500:	6313      	str	r3, [r2, #48]	; 0x30
 8007502:	4b72      	ldr	r3, [pc, #456]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	4b6e      	ldr	r3, [pc, #440]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	4a6d      	ldr	r2, [pc, #436]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007518:	f043 0304 	orr.w	r3, r3, #4
 800751c:	6313      	str	r3, [r2, #48]	; 0x30
 800751e:	4b6b      	ldr	r3, [pc, #428]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	4b67      	ldr	r3, [pc, #412]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	4a66      	ldr	r2, [pc, #408]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	6313      	str	r3, [r2, #48]	; 0x30
 800753a:	4b64      	ldr	r3, [pc, #400]	; (80076cc <MX_GPIO_Init+0x1f0>)
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	4b60      	ldr	r3, [pc, #384]	; (80076cc <MX_GPIO_Init+0x1f0>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4a5f      	ldr	r2, [pc, #380]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b5d      	ldr	r3, [pc, #372]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	4b59      	ldr	r3, [pc, #356]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a58      	ldr	r2, [pc, #352]	; (80076cc <MX_GPIO_Init+0x1f0>)
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b56      	ldr	r3, [pc, #344]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	4b52      	ldr	r3, [pc, #328]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a51      	ldr	r2, [pc, #324]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007588:	f043 0308 	orr.w	r3, r3, #8
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b4f      	ldr	r3, [pc, #316]	; (80076cc <MX_GPIO_Init+0x1f0>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800759a:	2200      	movs	r2, #0
 800759c:	2108      	movs	r1, #8
 800759e:	484c      	ldr	r0, [pc, #304]	; (80076d0 <MX_GPIO_Init+0x1f4>)
 80075a0:	f7f9 faf2 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80075a4:	2201      	movs	r2, #1
 80075a6:	2101      	movs	r1, #1
 80075a8:	484a      	ldr	r0, [pc, #296]	; (80076d4 <MX_GPIO_Init+0x1f8>)
 80075aa:	f7f9 faed 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80075ae:	2200      	movs	r2, #0
 80075b0:	f24e 0110 	movw	r1, #57360	; 0xe010
 80075b4:	4848      	ldr	r0, [pc, #288]	; (80076d8 <MX_GPIO_Init+0x1fc>)
 80075b6:	f7f9 fae7 	bl	8000b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80075ba:	2308      	movs	r3, #8
 80075bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075be:	2301      	movs	r3, #1
 80075c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c6:	2300      	movs	r3, #0
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80075ca:	f107 031c 	add.w	r3, r7, #28
 80075ce:	4619      	mov	r1, r3
 80075d0:	483f      	ldr	r0, [pc, #252]	; (80076d0 <MX_GPIO_Init+0x1f4>)
 80075d2:	f7f9 f927 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80075d6:	2301      	movs	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075da:	2301      	movs	r3, #1
 80075dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e2:	2300      	movs	r3, #0
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80075e6:	f107 031c 	add.w	r3, r7, #28
 80075ea:	4619      	mov	r1, r3
 80075ec:	4839      	ldr	r0, [pc, #228]	; (80076d4 <MX_GPIO_Init+0x1f8>)
 80075ee:	f7f9 f919 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80075f2:	2308      	movs	r3, #8
 80075f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f6:	2302      	movs	r3, #2
 80075f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fa:	2300      	movs	r3, #0
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075fe:	2300      	movs	r3, #0
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007602:	2305      	movs	r3, #5
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007606:	f107 031c 	add.w	r3, r7, #28
 800760a:	4619      	mov	r1, r3
 800760c:	4831      	ldr	r0, [pc, #196]	; (80076d4 <MX_GPIO_Init+0x1f8>)
 800760e:	f7f9 f909 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007612:	2301      	movs	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007616:	4b31      	ldr	r3, [pc, #196]	; (80076dc <MX_GPIO_Init+0x200>)
 8007618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761a:	2300      	movs	r3, #0
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800761e:	f107 031c 	add.w	r3, r7, #28
 8007622:	4619      	mov	r1, r3
 8007624:	482e      	ldr	r0, [pc, #184]	; (80076e0 <MX_GPIO_Init+0x204>)
 8007626:	f7f9 f8fd 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800762a:	2304      	movs	r3, #4
 800762c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800762e:	2300      	movs	r3, #0
 8007630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007632:	2300      	movs	r3, #0
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007636:	f107 031c 	add.w	r3, r7, #28
 800763a:	4619      	mov	r1, r3
 800763c:	4829      	ldr	r0, [pc, #164]	; (80076e4 <MX_GPIO_Init+0x208>)
 800763e:	f7f9 f8f1 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007648:	2302      	movs	r3, #2
 800764a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800764c:	2300      	movs	r3, #0
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007650:	2300      	movs	r3, #0
 8007652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007654:	2305      	movs	r3, #5
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007658:	f107 031c 	add.w	r3, r7, #28
 800765c:	4619      	mov	r1, r3
 800765e:	4821      	ldr	r0, [pc, #132]	; (80076e4 <MX_GPIO_Init+0x208>)
 8007660:	f7f9 f8e0 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8007664:	f24e 0310 	movw	r3, #57360	; 0xe010
 8007668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800766a:	2301      	movs	r3, #1
 800766c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766e:	2300      	movs	r3, #0
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007672:	2300      	movs	r3, #0
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007676:	f107 031c 	add.w	r3, r7, #28
 800767a:	4619      	mov	r1, r3
 800767c:	4816      	ldr	r0, [pc, #88]	; (80076d8 <MX_GPIO_Init+0x1fc>)
 800767e:	f7f9 f8d1 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007682:	2320      	movs	r3, #32
 8007684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007686:	2300      	movs	r3, #0
 8007688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800768e:	f107 031c 	add.w	r3, r7, #28
 8007692:	4619      	mov	r1, r3
 8007694:	4810      	ldr	r0, [pc, #64]	; (80076d8 <MX_GPIO_Init+0x1fc>)
 8007696:	f7f9 f8c5 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800769a:	2302      	movs	r3, #2
 800769c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800769e:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <MX_GPIO_Init+0x20c>)
 80076a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80076a6:	f107 031c 	add.w	r3, r7, #28
 80076aa:	4619      	mov	r1, r3
 80076ac:	4808      	ldr	r0, [pc, #32]	; (80076d0 <MX_GPIO_Init+0x1f4>)
 80076ae:	f7f9 f8b9 	bl	8000824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	2006      	movs	r0, #6
 80076b8:	f7f9 f87d 	bl	80007b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80076bc:	2006      	movs	r0, #6
 80076be:	f7f9 f896 	bl	80007ee <HAL_NVIC_EnableIRQ>

}
 80076c2:	bf00      	nop
 80076c4:	3730      	adds	r7, #48	; 0x30
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40021000 	.word	0x40021000
 80076d4:	40020800 	.word	0x40020800
 80076d8:	40020c00 	.word	0x40020c00
 80076dc:	10110000 	.word	0x10110000
 80076e0:	40020000 	.word	0x40020000
 80076e4:	40020400 	.word	0x40020400
 80076e8:	10120000 	.word	0x10120000

080076ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076f0:	bf00      	nop
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
	...

080076fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <HAL_MspInit+0x4c>)
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	4a0f      	ldr	r2, [pc, #60]	; (8007748 <HAL_MspInit+0x4c>)
 800770c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007710:	6453      	str	r3, [r2, #68]	; 0x44
 8007712:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <HAL_MspInit+0x4c>)
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800771e:	2300      	movs	r3, #0
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	4b09      	ldr	r3, [pc, #36]	; (8007748 <HAL_MspInit+0x4c>)
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	4a08      	ldr	r2, [pc, #32]	; (8007748 <HAL_MspInit+0x4c>)
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772c:	6413      	str	r3, [r2, #64]	; 0x40
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <HAL_MspInit+0x4c>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800773a:	2007      	movs	r0, #7
 800773c:	f7f9 f830 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40023800 	.word	0x40023800

0800774c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007754:	f107 0314 	add.w	r3, r7, #20
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <HAL_I2C_MspInit+0x84>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d12c      	bne.n	80077c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <HAL_I2C_MspInit+0x88>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <HAL_I2C_MspInit+0x88>)
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	6313      	str	r3, [r2, #48]	; 0x30
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <HAL_I2C_MspInit+0x88>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800778a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800778e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007790:	2312      	movs	r3, #18
 8007792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007794:	2301      	movs	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007798:	2300      	movs	r3, #0
 800779a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800779c:	2304      	movs	r3, #4
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077a0:	f107 0314 	add.w	r3, r7, #20
 80077a4:	4619      	mov	r1, r3
 80077a6:	480c      	ldr	r0, [pc, #48]	; (80077d8 <HAL_I2C_MspInit+0x8c>)
 80077a8:	f7f9 f83c 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <HAL_I2C_MspInit+0x88>)
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <HAL_I2C_MspInit+0x88>)
 80077b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ba:	6413      	str	r3, [r2, #64]	; 0x40
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <HAL_I2C_MspInit+0x88>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80077c8:	bf00      	nop
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40005400 	.word	0x40005400
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020400 	.word	0x40020400

080077dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e4:	f107 0314 	add.w	r3, r7, #20
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	609a      	str	r2, [r3, #8]
 80077f0:	60da      	str	r2, [r3, #12]
 80077f2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a28      	ldr	r2, [pc, #160]	; (800789c <HAL_I2S_MspInit+0xc0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d14a      	bne.n	8007894 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	4a26      	ldr	r2, [pc, #152]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780c:	6413      	str	r3, [r2, #64]	; 0x40
 800780e:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007824:	f043 0301 	orr.w	r3, r3, #1
 8007828:	6313      	str	r3, [r2, #48]	; 0x30
 800782a:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	4a18      	ldr	r2, [pc, #96]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007840:	f043 0304 	orr.w	r3, r3, #4
 8007844:	6313      	str	r3, [r2, #48]	; 0x30
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <HAL_I2S_MspInit+0xc4>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007852:	2310      	movs	r3, #16
 8007854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007856:	2302      	movs	r3, #2
 8007858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800785e:	2300      	movs	r3, #0
 8007860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007862:	2306      	movs	r3, #6
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007866:	f107 0314 	add.w	r3, r7, #20
 800786a:	4619      	mov	r1, r3
 800786c:	480d      	ldr	r0, [pc, #52]	; (80078a4 <HAL_I2S_MspInit+0xc8>)
 800786e:	f7f8 ffd9 	bl	8000824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007872:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007878:	2302      	movs	r3, #2
 800787a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787c:	2300      	movs	r3, #0
 800787e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007880:	2300      	movs	r3, #0
 8007882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007884:	2306      	movs	r3, #6
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007888:	f107 0314 	add.w	r3, r7, #20
 800788c:	4619      	mov	r1, r3
 800788e:	4806      	ldr	r0, [pc, #24]	; (80078a8 <HAL_I2S_MspInit+0xcc>)
 8007890:	f7f8 ffc8 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007894:	bf00      	nop
 8007896:	3728      	adds	r7, #40	; 0x28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40003c00 	.word	0x40003c00
 80078a0:	40023800 	.word	0x40023800
 80078a4:	40020000 	.word	0x40020000
 80078a8:	40020800 	.word	0x40020800

080078ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b4:	f107 0314 	add.w	r3, r7, #20
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	605a      	str	r2, [r3, #4]
 80078be:	609a      	str	r2, [r3, #8]
 80078c0:	60da      	str	r2, [r3, #12]
 80078c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a19      	ldr	r2, [pc, #100]	; (8007930 <HAL_SPI_MspInit+0x84>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d12b      	bne.n	8007926 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	4b18      	ldr	r3, [pc, #96]	; (8007934 <HAL_SPI_MspInit+0x88>)
 80078d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d6:	4a17      	ldr	r2, [pc, #92]	; (8007934 <HAL_SPI_MspInit+0x88>)
 80078d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078dc:	6453      	str	r3, [r2, #68]	; 0x44
 80078de:	4b15      	ldr	r3, [pc, #84]	; (8007934 <HAL_SPI_MspInit+0x88>)
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	4b11      	ldr	r3, [pc, #68]	; (8007934 <HAL_SPI_MspInit+0x88>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	4a10      	ldr	r2, [pc, #64]	; (8007934 <HAL_SPI_MspInit+0x88>)
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	6313      	str	r3, [r2, #48]	; 0x30
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <HAL_SPI_MspInit+0x88>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007906:	23e0      	movs	r3, #224	; 0xe0
 8007908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800790a:	2302      	movs	r3, #2
 800790c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007912:	2300      	movs	r3, #0
 8007914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007916:	2305      	movs	r3, #5
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800791a:	f107 0314 	add.w	r3, r7, #20
 800791e:	4619      	mov	r1, r3
 8007920:	4805      	ldr	r0, [pc, #20]	; (8007938 <HAL_SPI_MspInit+0x8c>)
 8007922:	f7f8 ff7f 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007926:	bf00      	nop
 8007928:	3728      	adds	r7, #40	; 0x28
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40013000 	.word	0x40013000
 8007934:	40023800 	.word	0x40023800
 8007938:	40020000 	.word	0x40020000

0800793c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a18      	ldr	r2, [pc, #96]	; (80079ac <HAL_TIM_Base_MspInit+0x70>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d116      	bne.n	800797c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <HAL_TIM_Base_MspInit+0x74>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <HAL_TIM_Base_MspInit+0x74>)
 8007958:	f043 0302 	orr.w	r3, r3, #2
 800795c:	6413      	str	r3, [r2, #64]	; 0x40
 800795e:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <HAL_TIM_Base_MspInit+0x74>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800796a:	2200      	movs	r2, #0
 800796c:	2100      	movs	r1, #0
 800796e:	201d      	movs	r0, #29
 8007970:	f7f8 ff21 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007974:	201d      	movs	r0, #29
 8007976:	f7f8 ff3a 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800797a:	e012      	b.n	80079a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <HAL_TIM_Base_MspInit+0x78>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d10d      	bne.n	80079a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_TIM_Base_MspInit+0x74>)
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <HAL_TIM_Base_MspInit+0x74>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6413      	str	r3, [r2, #64]	; 0x40
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <HAL_TIM_Base_MspInit+0x74>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	60bb      	str	r3, [r7, #8]
 80079a0:	68bb      	ldr	r3, [r7, #8]
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40000800 	.word	0x40000800

080079b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c0:	f107 030c 	add.w	r3, r7, #12
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a12      	ldr	r2, [pc, #72]	; (8007a20 <HAL_TIM_MspPostInit+0x68>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d11e      	bne.n	8007a18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <HAL_TIM_MspPostInit+0x6c>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	4a10      	ldr	r2, [pc, #64]	; (8007a24 <HAL_TIM_MspPostInit+0x6c>)
 80079e4:	f043 0308 	orr.w	r3, r3, #8
 80079e8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ea:	4b0e      	ldr	r3, [pc, #56]	; (8007a24 <HAL_TIM_MspPostInit+0x6c>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80079f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fc:	2302      	movs	r3, #2
 80079fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	4619      	mov	r1, r3
 8007a12:	4805      	ldr	r0, [pc, #20]	; (8007a28 <HAL_TIM_MspPostInit+0x70>)
 8007a14:	f7f8 ff06 	bl	8000824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007a18:	bf00      	nop
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	40000800 	.word	0x40000800
 8007a24:	40023800 	.word	0x40023800
 8007a28:	40020c00 	.word	0x40020c00

08007a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007a30:	bf00      	nop
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a3e:	e7fe      	b.n	8007a3e <HardFault_Handler+0x4>

08007a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a44:	e7fe      	b.n	8007a44 <MemManage_Handler+0x4>

08007a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a46:	b480      	push	{r7}
 8007a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a4a:	e7fe      	b.n	8007a4a <BusFault_Handler+0x4>

08007a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a50:	e7fe      	b.n	8007a50 <UsageFault_Handler+0x4>

08007a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a52:	b480      	push	{r7}
 8007a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a56:	bf00      	nop
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a72:	bf00      	nop
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a80:	f7f8 fd7c 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a84:	bf00      	nop
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8007a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a90:	4803      	ldr	r0, [pc, #12]	; (8007aa0 <EXTI0_IRQHandler+0x18>)
 8007a92:	f7f9 f892 	bl	8000bba <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007a96:	2001      	movs	r0, #1
 8007a98:	f7f9 f8aa 	bl	8000bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007a9c:	bf00      	nop
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40020c00 	.word	0x40020c00

08007aa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8007aa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007aac:	4803      	ldr	r0, [pc, #12]	; (8007abc <TIM3_IRQHandler+0x18>)
 8007aae:	f7f9 f884 	bl	8000bba <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007ab2:	4803      	ldr	r0, [pc, #12]	; (8007ac0 <TIM3_IRQHandler+0x1c>)
 8007ab4:	f7fb fe92 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007ab8:	bf00      	nop
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40020c00 	.word	0x40020c00
 8007ac0:	200002ac 	.word	0x200002ac

08007ac4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007ac8:	4802      	ldr	r0, [pc, #8]	; (8007ad4 <OTG_FS_IRQHandler+0x10>)
 8007aca:	f7f9 ffcd 	bl	8001a68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20001628 	.word	0x20001628

08007ad8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007ae0:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <_sbrk+0x50>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <_sbrk+0x16>
		heap_end = &end;
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <_sbrk+0x50>)
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <_sbrk+0x54>)
 8007aec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <_sbrk+0x50>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007af4:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <_sbrk+0x50>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	466a      	mov	r2, sp
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d907      	bls.n	8007b12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007b02:	f000 fd89 	bl	8008618 <__errno>
 8007b06:	4602      	mov	r2, r0
 8007b08:	230c      	movs	r3, #12
 8007b0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	e006      	b.n	8007b20 <_sbrk+0x48>
	}

	heap_end += incr;
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <_sbrk+0x50>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	4a03      	ldr	r2, [pc, #12]	; (8007b28 <_sbrk+0x50>)
 8007b1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20000208 	.word	0x20000208
 8007b2c:	20001c38 	.word	0x20001c38

08007b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b34:	4b16      	ldr	r3, [pc, #88]	; (8007b90 <SystemInit+0x60>)
 8007b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3a:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <SystemInit+0x60>)
 8007b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007b44:	4b13      	ldr	r3, [pc, #76]	; (8007b94 <SystemInit+0x64>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a12      	ldr	r2, [pc, #72]	; (8007b94 <SystemInit+0x64>)
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007b50:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <SystemInit+0x64>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <SystemInit+0x64>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a0e      	ldr	r2, [pc, #56]	; (8007b94 <SystemInit+0x64>)
 8007b5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <SystemInit+0x64>)
 8007b68:	4a0b      	ldr	r2, [pc, #44]	; (8007b98 <SystemInit+0x68>)
 8007b6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <SystemInit+0x64>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a08      	ldr	r2, [pc, #32]	; (8007b94 <SystemInit+0x64>)
 8007b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <SystemInit+0x64>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b7e:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <SystemInit+0x60>)
 8007b80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b84:	609a      	str	r2, [r3, #8]
#endif
}
 8007b86:	bf00      	nop
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	e000ed00 	.word	0xe000ed00
 8007b94:	40023800 	.word	0x40023800
 8007b98:	24003010 	.word	0x24003010

08007b9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4912      	ldr	r1, [pc, #72]	; (8007bec <MX_USB_DEVICE_Init+0x50>)
 8007ba4:	4812      	ldr	r0, [pc, #72]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007ba6:	f7fe f9eb 	bl	8005f80 <USBD_Init>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bb0:	f7ff fd9c 	bl	80076ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007bb4:	490f      	ldr	r1, [pc, #60]	; (8007bf4 <MX_USB_DEVICE_Init+0x58>)
 8007bb6:	480e      	ldr	r0, [pc, #56]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007bb8:	f7fe fa0d 	bl	8005fd6 <USBD_RegisterClass>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bc2:	f7ff fd93 	bl	80076ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bc6:	490c      	ldr	r1, [pc, #48]	; (8007bf8 <MX_USB_DEVICE_Init+0x5c>)
 8007bc8:	4809      	ldr	r0, [pc, #36]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007bca:	f7fe f93b 	bl	8005e44 <USBD_CDC_RegisterInterface>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bd4:	f7ff fd8a 	bl	80076ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bd8:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007bda:	f7fe fa16 	bl	800600a <USBD_Start>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007be4:	f7ff fd82 	bl	80076ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007be8:	bf00      	nop
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000134 	.word	0x20000134
 8007bf0:	2000038c 	.word	0x2000038c
 8007bf4:	20000014 	.word	0x20000014
 8007bf8:	20000124 	.word	0x20000124

08007bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c00:	2200      	movs	r2, #0
 8007c02:	4905      	ldr	r1, [pc, #20]	; (8007c18 <CDC_Init_FS+0x1c>)
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <CDC_Init_FS+0x20>)
 8007c06:	f7fe f934 	bl	8005e72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c0a:	4905      	ldr	r1, [pc, #20]	; (8007c20 <CDC_Init_FS+0x24>)
 8007c0c:	4803      	ldr	r0, [pc, #12]	; (8007c1c <CDC_Init_FS+0x20>)
 8007c0e:	f7fe f94a 	bl	8005ea6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000e28 	.word	0x20000e28
 8007c1c:	2000038c 	.word	0x2000038c
 8007c20:	20000628 	.word	0x20000628

08007c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b23      	cmp	r3, #35	; 0x23
 8007c48:	d85c      	bhi.n	8007d04 <CDC_Control_FS+0xd0>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <CDC_Control_FS+0x1c>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007d05 	.word	0x08007d05
 8007c54:	08007d05 	.word	0x08007d05
 8007c58:	08007d05 	.word	0x08007d05
 8007c5c:	08007d05 	.word	0x08007d05
 8007c60:	08007d05 	.word	0x08007d05
 8007c64:	08007d05 	.word	0x08007d05
 8007c68:	08007d05 	.word	0x08007d05
 8007c6c:	08007d05 	.word	0x08007d05
 8007c70:	08007d05 	.word	0x08007d05
 8007c74:	08007d05 	.word	0x08007d05
 8007c78:	08007d05 	.word	0x08007d05
 8007c7c:	08007d05 	.word	0x08007d05
 8007c80:	08007d05 	.word	0x08007d05
 8007c84:	08007d05 	.word	0x08007d05
 8007c88:	08007d05 	.word	0x08007d05
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d05 	.word	0x08007d05
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	08007d05 	.word	0x08007d05
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007d05 	.word	0x08007d05
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007d05 	.word	0x08007d05
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007d05 	.word	0x08007d05
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007cf3 	.word	0x08007cf3
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	08007d05 	.word	0x08007d05
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <CDC_Control_FS+0xe0>)
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	6810      	ldr	r0, [r2, #0]
 8007ce6:	6018      	str	r0, [r3, #0]
 8007ce8:	8891      	ldrh	r1, [r2, #4]
 8007cea:	7992      	ldrb	r2, [r2, #6]
 8007cec:	8099      	strh	r1, [r3, #4]
 8007cee:	719a      	strb	r2, [r3, #6]
    break;
 8007cf0:	e009      	b.n	8007d06 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <CDC_Control_FS+0xe0>)
 8007cf6:	6810      	ldr	r0, [r2, #0]
 8007cf8:	6018      	str	r0, [r3, #0]
 8007cfa:	8891      	ldrh	r1, [r2, #4]
 8007cfc:	7992      	ldrb	r2, [r2, #6]
 8007cfe:	8099      	strh	r1, [r3, #4]
 8007d00:	719a      	strb	r2, [r3, #6]
    break;
 8007d02:	e000      	b.n	8007d06 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d04:	bf00      	nop
  }

  return (USBD_OK);
 8007d06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	2000011c 	.word	0x2000011c

08007d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4805      	ldr	r0, [pc, #20]	; (8007d3c <CDC_Receive_FS+0x24>)
 8007d26:	f7fe f8be 	bl	8005ea6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d2a:	4804      	ldr	r0, [pc, #16]	; (8007d3c <CDC_Receive_FS+0x24>)
 8007d2c:	f7fe f8fe 	bl	8005f2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000038c 	.word	0x2000038c

08007d40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d50:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <CDC_Transmit_FS+0x48>)
 8007d52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e00b      	b.n	8007d7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d66:	887b      	ldrh	r3, [r7, #2]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4806      	ldr	r0, [pc, #24]	; (8007d88 <CDC_Transmit_FS+0x48>)
 8007d6e:	f7fe f880 	bl	8005e72 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d72:	4805      	ldr	r0, [pc, #20]	; (8007d88 <CDC_Transmit_FS+0x48>)
 8007d74:	f7fe f8ab 	bl	8005ece <USBD_CDC_TransmitPacket>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	2000038c 	.word	0x2000038c

08007d8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	605a      	str	r2, [r3, #4]
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	60da      	str	r2, [r3, #12]
 8007da2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dac:	d147      	bne.n	8007e3e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	4a24      	ldr	r2, [pc, #144]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8007dbe:	4b22      	ldr	r3, [pc, #136]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	4619      	mov	r1, r3
 8007dde:	481b      	ldr	r0, [pc, #108]	; (8007e4c <HAL_PCD_MspInit+0xc0>)
 8007de0:	f7f8 fd20 	bl	8000824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007de4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dea:	2302      	movs	r3, #2
 8007dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df2:	2300      	movs	r3, #0
 8007df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007df6:	230a      	movs	r3, #10
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfa:	f107 0314 	add.w	r3, r7, #20
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4812      	ldr	r0, [pc, #72]	; (8007e4c <HAL_PCD_MspInit+0xc0>)
 8007e02:	f7f8 fd0f 	bl	8000824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e10:	6353      	str	r3, [r2, #52]	; 0x34
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	4a0b      	ldr	r2, [pc, #44]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e20:	6453      	str	r3, [r2, #68]	; 0x44
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_PCD_MspInit+0xbc>)
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	2043      	movs	r0, #67	; 0x43
 8007e34:	f7f8 fcbf 	bl	80007b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e38:	2043      	movs	r0, #67	; 0x43
 8007e3a:	f7f8 fcd8 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e3e:	bf00      	nop
 8007e40:	3728      	adds	r7, #40	; 0x28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40020000 	.word	0x40020000

08007e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	f7fe f918 	bl	800609c <USBD_LL_SetupStage>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7fe f948 	bl	8006132 <USBD_LL_DataOutStage>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	3348      	adds	r3, #72	; 0x48
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	78fb      	ldrb	r3, [r7, #3]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f7fe f99f 	bl	8006214 <USBD_LL_DataInStage>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe faad 	bl	800644c <USBD_LL_SOF>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e008      	b.n	8007f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d102      	bne.n	8007f22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
 8007f20:	e001      	b.n	8007f26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f22:	f7ff fbe3 	bl	80076ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f2c:	7bfa      	ldrb	r2, [r7, #15]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fa55 	bl	80063e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fa0e 	bl	800635e <USBD_LL_Reset>
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fa50 	bl	8006400 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <HAL_PCD_SuspendCallback+0x48>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	4a03      	ldr	r2, [pc, #12]	; (8007f94 <HAL_PCD_SuspendCallback+0x48>)
 8007f86:	f043 0306 	orr.w	r3, r3, #6
 8007f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed00 	.word	0xe000ed00

08007f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fa3f 	bl	800642a <USBD_LL_Resume>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fa65 	bl	800649a <USBD_LL_IsoOUTIncomplete>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fa46 	bl	8006480 <USBD_LL_IsoINIncomplete>
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fa52 	bl	80064b4 <USBD_LL_DevConnected>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fa4f 	bl	80064ca <USBD_LL_DevDisconnected>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d13c      	bne.n	80080be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008044:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <USBD_LL_Init+0x94>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <USBD_LL_Init+0x94>)
 8008050:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008054:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <USBD_LL_Init+0x94>)
 8008056:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800805a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <USBD_LL_Init+0x94>)
 800805e:	2204      	movs	r2, #4
 8008060:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008062:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <USBD_LL_Init+0x94>)
 8008064:	2202      	movs	r2, #2
 8008066:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008068:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <USBD_LL_Init+0x94>)
 800806a:	2200      	movs	r2, #0
 800806c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <USBD_LL_Init+0x94>)
 8008070:	2202      	movs	r2, #2
 8008072:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008074:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <USBD_LL_Init+0x94>)
 8008076:	2200      	movs	r2, #0
 8008078:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800807a:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <USBD_LL_Init+0x94>)
 800807c:	2200      	movs	r2, #0
 800807e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <USBD_LL_Init+0x94>)
 8008082:	2200      	movs	r2, #0
 8008084:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <USBD_LL_Init+0x94>)
 8008088:	2200      	movs	r2, #0
 800808a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800808c:	4b0e      	ldr	r3, [pc, #56]	; (80080c8 <USBD_LL_Init+0x94>)
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008092:	480d      	ldr	r0, [pc, #52]	; (80080c8 <USBD_LL_Init+0x94>)
 8008094:	f7f9 fb98 	bl	80017c8 <HAL_PCD_Init>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800809e:	f7ff fb25 	bl	80076ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080a2:	2180      	movs	r1, #128	; 0x80
 80080a4:	4808      	ldr	r0, [pc, #32]	; (80080c8 <USBD_LL_Init+0x94>)
 80080a6:	f7fa fcfc 	bl	8002aa2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080aa:	2240      	movs	r2, #64	; 0x40
 80080ac:	2100      	movs	r1, #0
 80080ae:	4806      	ldr	r0, [pc, #24]	; (80080c8 <USBD_LL_Init+0x94>)
 80080b0:	f7fa fcb0 	bl	8002a14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080b4:	2280      	movs	r2, #128	; 0x80
 80080b6:	2101      	movs	r1, #1
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <USBD_LL_Init+0x94>)
 80080ba:	f7fa fcab 	bl	8002a14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20001628 	.word	0x20001628

080080cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7f9 fc8d 	bl	8001a02 <HAL_PCD_Start>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 f92e 	bl	8008350 <USBD_Get_USB_Status>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	4603      	mov	r3, r0
 8008112:	70fb      	strb	r3, [r7, #3]
 8008114:	460b      	mov	r3, r1
 8008116:	70bb      	strb	r3, [r7, #2]
 8008118:	4613      	mov	r3, r2
 800811a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800812a:	78bb      	ldrb	r3, [r7, #2]
 800812c:	883a      	ldrh	r2, [r7, #0]
 800812e:	78f9      	ldrb	r1, [r7, #3]
 8008130:	f7fa f862 	bl	80021f8 <HAL_PCD_EP_Open>
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f908 	bl	8008350 <USBD_Get_USB_Status>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008144:	7bbb      	ldrb	r3, [r7, #14]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7fa f8ab 	bl	80022c8 <HAL_PCD_EP_Close>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f8e9 	bl	8008350 <USBD_Get_USB_Status>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008182:	7bbb      	ldrb	r3, [r7, #14]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fa f983 	bl	80024b6 <HAL_PCD_EP_SetStall>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f8ca 	bl	8008350 <USBD_Get_USB_Status>
 80081bc:	4603      	mov	r3, r0
 80081be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fa f9c8 	bl	800257e <HAL_PCD_EP_ClrStall>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f8ab 	bl	8008350 <USBD_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800821a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800821c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da0b      	bge.n	800823c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	333e      	adds	r3, #62	; 0x3e
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	e00b      	b.n	8008254 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	1a9b      	subs	r3, r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 ff95 	bl	80021ae <HAL_PCD_SetAddress>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f860 	bl	8008350 <USBD_Get_USB_Status>
 8008290:	4603      	mov	r3, r0
 8008292:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008294:	7bbb      	ldrb	r3, [r7, #14]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	461a      	mov	r2, r3
 80082aa:	460b      	mov	r3, r1
 80082ac:	72fb      	strb	r3, [r7, #11]
 80082ae:	4613      	mov	r3, r2
 80082b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80082c0:	893b      	ldrh	r3, [r7, #8]
 80082c2:	7af9      	ldrb	r1, [r7, #11]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	f7fa f8ac 	bl	8002422 <HAL_PCD_EP_Transmit>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 f83d 	bl	8008350 <USBD_Get_USB_Status>
 80082d6:	4603      	mov	r3, r0
 80082d8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80082da:	7dbb      	ldrb	r3, [r7, #22]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	461a      	mov	r2, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	72fb      	strb	r3, [r7, #11]
 80082f4:	4613      	mov	r3, r2
 80082f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008306:	893b      	ldrh	r3, [r7, #8]
 8008308:	7af9      	ldrb	r1, [r7, #11]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	f7fa f826 	bl	800235c <HAL_PCD_EP_Receive>
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f81a 	bl	8008350 <USBD_Get_USB_Status>
 800831c:	4603      	mov	r3, r0
 800831e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008320:	7dbb      	ldrb	r3, [r7, #22]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f7fa f856 	bl	80023f2 <HAL_PCD_EP_GetRxCount>
 8008346:	4603      	mov	r3, r0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d817      	bhi.n	8008394 <USBD_Get_USB_Status+0x44>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <USBD_Get_USB_Status+0x1c>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	0800837d 	.word	0x0800837d
 8008370:	08008383 	.word	0x08008383
 8008374:	08008389 	.word	0x08008389
 8008378:	0800838f 	.word	0x0800838f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
    break;
 8008380:	e00b      	b.n	800839a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	e008      	b.n	800839a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
    break;
 800838c:	e005      	b.n	800839a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800838e:	2302      	movs	r3, #2
 8008390:	73fb      	strb	r3, [r7, #15]
    break;
 8008392:	e002      	b.n	800839a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008394:	2302      	movs	r3, #2
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	bf00      	nop
  }
  return usb_status;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	6039      	str	r1, [r7, #0]
 80083b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2212      	movs	r2, #18
 80083b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083ba:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	20000150 	.word	0x20000150

080083cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2204      	movs	r2, #4
 80083dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083de:	4b03      	ldr	r3, [pc, #12]	; (80083ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	20000164 	.word	0x20000164

080083f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d105      	bne.n	800840e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4907      	ldr	r1, [pc, #28]	; (8008424 <USBD_FS_ProductStrDescriptor+0x34>)
 8008406:	4808      	ldr	r0, [pc, #32]	; (8008428 <USBD_FS_ProductStrDescriptor+0x38>)
 8008408:	f7fe fd36 	bl	8006e78 <USBD_GetString>
 800840c:	e004      	b.n	8008418 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4904      	ldr	r1, [pc, #16]	; (8008424 <USBD_FS_ProductStrDescriptor+0x34>)
 8008412:	4805      	ldr	r0, [pc, #20]	; (8008428 <USBD_FS_ProductStrDescriptor+0x38>)
 8008414:	f7fe fd30 	bl	8006e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20001a30 	.word	0x20001a30
 8008428:	08008834 	.word	0x08008834

0800842c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	4904      	ldr	r1, [pc, #16]	; (800844c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800843c:	4804      	ldr	r0, [pc, #16]	; (8008450 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800843e:	f7fe fd1b 	bl	8006e78 <USBD_GetString>
  return USBD_StrDesc;
 8008442:	4b02      	ldr	r3, [pc, #8]	; (800844c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20001a30 	.word	0x20001a30
 8008450:	0800884c 	.word	0x0800884c

08008454 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	221a      	movs	r2, #26
 8008464:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008466:	f000 f843 	bl	80084f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800846a:	4b02      	ldr	r3, [pc, #8]	; (8008474 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000168 	.word	0x20000168

08008478 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	6039      	str	r1, [r7, #0]
 8008482:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4907      	ldr	r1, [pc, #28]	; (80084ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800848e:	4808      	ldr	r0, [pc, #32]	; (80084b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008490:	f7fe fcf2 	bl	8006e78 <USBD_GetString>
 8008494:	e004      	b.n	80084a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	4904      	ldr	r1, [pc, #16]	; (80084ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800849a:	4805      	ldr	r0, [pc, #20]	; (80084b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800849c:	f7fe fcec 	bl	8006e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084a0:	4b02      	ldr	r3, [pc, #8]	; (80084ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20001a30 	.word	0x20001a30
 80084b0:	08008860 	.word	0x08008860

080084b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	6039      	str	r1, [r7, #0]
 80084be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d105      	bne.n	80084d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4907      	ldr	r1, [pc, #28]	; (80084e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ca:	4808      	ldr	r0, [pc, #32]	; (80084ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084cc:	f7fe fcd4 	bl	8006e78 <USBD_GetString>
 80084d0:	e004      	b.n	80084dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4904      	ldr	r1, [pc, #16]	; (80084e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084d6:	4805      	ldr	r0, [pc, #20]	; (80084ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084d8:	f7fe fcce 	bl	8006e78 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20001a30 	.word	0x20001a30
 80084ec:	0800886c 	.word	0x0800886c

080084f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <Get_SerialNum+0x44>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084fc:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <Get_SerialNum+0x48>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <Get_SerialNum+0x4c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008516:	2208      	movs	r2, #8
 8008518:	4909      	ldr	r1, [pc, #36]	; (8008540 <Get_SerialNum+0x50>)
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f814 	bl	8008548 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008520:	2204      	movs	r2, #4
 8008522:	4908      	ldr	r1, [pc, #32]	; (8008544 <Get_SerialNum+0x54>)
 8008524:	68b8      	ldr	r0, [r7, #8]
 8008526:	f000 f80f 	bl	8008548 <IntToUnicode>
  }
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	1fff7a10 	.word	0x1fff7a10
 8008538:	1fff7a14 	.word	0x1fff7a14
 800853c:	1fff7a18 	.word	0x1fff7a18
 8008540:	2000016a 	.word	0x2000016a
 8008544:	2000017a 	.word	0x2000017a

08008548 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800855a:	2300      	movs	r3, #0
 800855c:	75fb      	strb	r3, [r7, #23]
 800855e:	e027      	b.n	80085b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	0f1b      	lsrs	r3, r3, #28
 8008564:	2b09      	cmp	r3, #9
 8008566:	d80b      	bhi.n	8008580 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	0f1b      	lsrs	r3, r3, #28
 800856c:	b2da      	uxtb	r2, r3
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	4619      	mov	r1, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	440b      	add	r3, r1
 8008578:	3230      	adds	r2, #48	; 0x30
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e00a      	b.n	8008596 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	b2da      	uxtb	r2, r3
 8008586:	7dfb      	ldrb	r3, [r7, #23]
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4619      	mov	r1, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	440b      	add	r3, r1
 8008590:	3237      	adds	r2, #55	; 0x37
 8008592:	b2d2      	uxtb	r2, r2
 8008594:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	3301      	adds	r3, #1
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	4413      	add	r3, r2
 80085a6:	2200      	movs	r2, #0
 80085a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	3301      	adds	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
 80085b0:	7dfa      	ldrb	r2, [r7, #23]
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d3d3      	bcc.n	8008560 <IntToUnicode+0x18>
  }
}
 80085b8:	bf00      	nop
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80085c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80085fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80085c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80085ca:	e003      	b.n	80085d4 <LoopCopyDataInit>

080085cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80085ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80085d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80085d2:	3104      	adds	r1, #4

080085d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80085d4:	480b      	ldr	r0, [pc, #44]	; (8008604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80085d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80085da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80085dc:	d3f6      	bcc.n	80085cc <CopyDataInit>
  ldr  r2, =_sbss
 80085de:	4a0b      	ldr	r2, [pc, #44]	; (800860c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80085e0:	e002      	b.n	80085e8 <LoopFillZerobss>

080085e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80085e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80085e4:	f842 3b04 	str.w	r3, [r2], #4

080085e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80085ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80085ec:	d3f9      	bcc.n	80085e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80085ee:	f7ff fa9f 	bl	8007b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085f2:	f000 f817 	bl	8008624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80085f6:	f7fe fd3f 	bl	8007078 <main>
  bx  lr    
 80085fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80085fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008600:	080088a4 	.word	0x080088a4
  ldr  r0, =_sdata
 8008604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008608:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800860c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8008610:	20001c34 	.word	0x20001c34

08008614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008614:	e7fe      	b.n	8008614 <ADC_IRQHandler>
	...

08008618 <__errno>:
 8008618:	4b01      	ldr	r3, [pc, #4]	; (8008620 <__errno+0x8>)
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20000184 	.word	0x20000184

08008624 <__libc_init_array>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4e0d      	ldr	r6, [pc, #52]	; (800865c <__libc_init_array+0x38>)
 8008628:	4c0d      	ldr	r4, [pc, #52]	; (8008660 <__libc_init_array+0x3c>)
 800862a:	1ba4      	subs	r4, r4, r6
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	2500      	movs	r5, #0
 8008630:	42a5      	cmp	r5, r4
 8008632:	d109      	bne.n	8008648 <__libc_init_array+0x24>
 8008634:	4e0b      	ldr	r6, [pc, #44]	; (8008664 <__libc_init_array+0x40>)
 8008636:	4c0c      	ldr	r4, [pc, #48]	; (8008668 <__libc_init_array+0x44>)
 8008638:	f000 f8ea 	bl	8008810 <_init>
 800863c:	1ba4      	subs	r4, r4, r6
 800863e:	10a4      	asrs	r4, r4, #2
 8008640:	2500      	movs	r5, #0
 8008642:	42a5      	cmp	r5, r4
 8008644:	d105      	bne.n	8008652 <__libc_init_array+0x2e>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800864c:	4798      	blx	r3
 800864e:	3501      	adds	r5, #1
 8008650:	e7ee      	b.n	8008630 <__libc_init_array+0xc>
 8008652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008656:	4798      	blx	r3
 8008658:	3501      	adds	r5, #1
 800865a:	e7f2      	b.n	8008642 <__libc_init_array+0x1e>
 800865c:	0800889c 	.word	0x0800889c
 8008660:	0800889c 	.word	0x0800889c
 8008664:	0800889c 	.word	0x0800889c
 8008668:	080088a0 	.word	0x080088a0

0800866c <malloc>:
 800866c:	4b02      	ldr	r3, [pc, #8]	; (8008678 <malloc+0xc>)
 800866e:	4601      	mov	r1, r0
 8008670:	6818      	ldr	r0, [r3, #0]
 8008672:	f000 b861 	b.w	8008738 <_malloc_r>
 8008676:	bf00      	nop
 8008678:	20000184 	.word	0x20000184

0800867c <free>:
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <free+0xc>)
 800867e:	4601      	mov	r1, r0
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	f000 b80b 	b.w	800869c <_free_r>
 8008686:	bf00      	nop
 8008688:	20000184 	.word	0x20000184

0800868c <memset>:
 800868c:	4402      	add	r2, r0
 800868e:	4603      	mov	r3, r0
 8008690:	4293      	cmp	r3, r2
 8008692:	d100      	bne.n	8008696 <memset+0xa>
 8008694:	4770      	bx	lr
 8008696:	f803 1b01 	strb.w	r1, [r3], #1
 800869a:	e7f9      	b.n	8008690 <memset+0x4>

0800869c <_free_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4605      	mov	r5, r0
 80086a0:	2900      	cmp	r1, #0
 80086a2:	d045      	beq.n	8008730 <_free_r+0x94>
 80086a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a8:	1f0c      	subs	r4, r1, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfb8      	it	lt
 80086ae:	18e4      	addlt	r4, r4, r3
 80086b0:	f000 f8ac 	bl	800880c <__malloc_lock>
 80086b4:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <_free_r+0x98>)
 80086b6:	6813      	ldr	r3, [r2, #0]
 80086b8:	4610      	mov	r0, r2
 80086ba:	b933      	cbnz	r3, 80086ca <_free_r+0x2e>
 80086bc:	6063      	str	r3, [r4, #4]
 80086be:	6014      	str	r4, [r2, #0]
 80086c0:	4628      	mov	r0, r5
 80086c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086c6:	f000 b8a2 	b.w	800880e <__malloc_unlock>
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	d90c      	bls.n	80086e8 <_free_r+0x4c>
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	1862      	adds	r2, r4, r1
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bf04      	itt	eq
 80086d6:	681a      	ldreq	r2, [r3, #0]
 80086d8:	685b      	ldreq	r3, [r3, #4]
 80086da:	6063      	str	r3, [r4, #4]
 80086dc:	bf04      	itt	eq
 80086de:	1852      	addeq	r2, r2, r1
 80086e0:	6022      	streq	r2, [r4, #0]
 80086e2:	6004      	str	r4, [r0, #0]
 80086e4:	e7ec      	b.n	80086c0 <_free_r+0x24>
 80086e6:	4613      	mov	r3, r2
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	b10a      	cbz	r2, 80086f0 <_free_r+0x54>
 80086ec:	42a2      	cmp	r2, r4
 80086ee:	d9fa      	bls.n	80086e6 <_free_r+0x4a>
 80086f0:	6819      	ldr	r1, [r3, #0]
 80086f2:	1858      	adds	r0, r3, r1
 80086f4:	42a0      	cmp	r0, r4
 80086f6:	d10b      	bne.n	8008710 <_free_r+0x74>
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	4401      	add	r1, r0
 80086fc:	1858      	adds	r0, r3, r1
 80086fe:	4282      	cmp	r2, r0
 8008700:	6019      	str	r1, [r3, #0]
 8008702:	d1dd      	bne.n	80086c0 <_free_r+0x24>
 8008704:	6810      	ldr	r0, [r2, #0]
 8008706:	6852      	ldr	r2, [r2, #4]
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	4401      	add	r1, r0
 800870c:	6019      	str	r1, [r3, #0]
 800870e:	e7d7      	b.n	80086c0 <_free_r+0x24>
 8008710:	d902      	bls.n	8008718 <_free_r+0x7c>
 8008712:	230c      	movs	r3, #12
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	e7d3      	b.n	80086c0 <_free_r+0x24>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	1821      	adds	r1, r4, r0
 800871c:	428a      	cmp	r2, r1
 800871e:	bf04      	itt	eq
 8008720:	6811      	ldreq	r1, [r2, #0]
 8008722:	6852      	ldreq	r2, [r2, #4]
 8008724:	6062      	str	r2, [r4, #4]
 8008726:	bf04      	itt	eq
 8008728:	1809      	addeq	r1, r1, r0
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	605c      	str	r4, [r3, #4]
 800872e:	e7c7      	b.n	80086c0 <_free_r+0x24>
 8008730:	bd38      	pop	{r3, r4, r5, pc}
 8008732:	bf00      	nop
 8008734:	2000020c 	.word	0x2000020c

08008738 <_malloc_r>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	1ccd      	adds	r5, r1, #3
 800873c:	f025 0503 	bic.w	r5, r5, #3
 8008740:	3508      	adds	r5, #8
 8008742:	2d0c      	cmp	r5, #12
 8008744:	bf38      	it	cc
 8008746:	250c      	movcc	r5, #12
 8008748:	2d00      	cmp	r5, #0
 800874a:	4606      	mov	r6, r0
 800874c:	db01      	blt.n	8008752 <_malloc_r+0x1a>
 800874e:	42a9      	cmp	r1, r5
 8008750:	d903      	bls.n	800875a <_malloc_r+0x22>
 8008752:	230c      	movs	r3, #12
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	2000      	movs	r0, #0
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	f000 f857 	bl	800880c <__malloc_lock>
 800875e:	4a21      	ldr	r2, [pc, #132]	; (80087e4 <_malloc_r+0xac>)
 8008760:	6814      	ldr	r4, [r2, #0]
 8008762:	4621      	mov	r1, r4
 8008764:	b991      	cbnz	r1, 800878c <_malloc_r+0x54>
 8008766:	4c20      	ldr	r4, [pc, #128]	; (80087e8 <_malloc_r+0xb0>)
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	b91b      	cbnz	r3, 8008774 <_malloc_r+0x3c>
 800876c:	4630      	mov	r0, r6
 800876e:	f000 f83d 	bl	80087ec <_sbrk_r>
 8008772:	6020      	str	r0, [r4, #0]
 8008774:	4629      	mov	r1, r5
 8008776:	4630      	mov	r0, r6
 8008778:	f000 f838 	bl	80087ec <_sbrk_r>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d124      	bne.n	80087ca <_malloc_r+0x92>
 8008780:	230c      	movs	r3, #12
 8008782:	6033      	str	r3, [r6, #0]
 8008784:	4630      	mov	r0, r6
 8008786:	f000 f842 	bl	800880e <__malloc_unlock>
 800878a:	e7e4      	b.n	8008756 <_malloc_r+0x1e>
 800878c:	680b      	ldr	r3, [r1, #0]
 800878e:	1b5b      	subs	r3, r3, r5
 8008790:	d418      	bmi.n	80087c4 <_malloc_r+0x8c>
 8008792:	2b0b      	cmp	r3, #11
 8008794:	d90f      	bls.n	80087b6 <_malloc_r+0x7e>
 8008796:	600b      	str	r3, [r1, #0]
 8008798:	50cd      	str	r5, [r1, r3]
 800879a:	18cc      	adds	r4, r1, r3
 800879c:	4630      	mov	r0, r6
 800879e:	f000 f836 	bl	800880e <__malloc_unlock>
 80087a2:	f104 000b 	add.w	r0, r4, #11
 80087a6:	1d23      	adds	r3, r4, #4
 80087a8:	f020 0007 	bic.w	r0, r0, #7
 80087ac:	1ac3      	subs	r3, r0, r3
 80087ae:	d0d3      	beq.n	8008758 <_malloc_r+0x20>
 80087b0:	425a      	negs	r2, r3
 80087b2:	50e2      	str	r2, [r4, r3]
 80087b4:	e7d0      	b.n	8008758 <_malloc_r+0x20>
 80087b6:	428c      	cmp	r4, r1
 80087b8:	684b      	ldr	r3, [r1, #4]
 80087ba:	bf16      	itet	ne
 80087bc:	6063      	strne	r3, [r4, #4]
 80087be:	6013      	streq	r3, [r2, #0]
 80087c0:	460c      	movne	r4, r1
 80087c2:	e7eb      	b.n	800879c <_malloc_r+0x64>
 80087c4:	460c      	mov	r4, r1
 80087c6:	6849      	ldr	r1, [r1, #4]
 80087c8:	e7cc      	b.n	8008764 <_malloc_r+0x2c>
 80087ca:	1cc4      	adds	r4, r0, #3
 80087cc:	f024 0403 	bic.w	r4, r4, #3
 80087d0:	42a0      	cmp	r0, r4
 80087d2:	d005      	beq.n	80087e0 <_malloc_r+0xa8>
 80087d4:	1a21      	subs	r1, r4, r0
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f808 	bl	80087ec <_sbrk_r>
 80087dc:	3001      	adds	r0, #1
 80087de:	d0cf      	beq.n	8008780 <_malloc_r+0x48>
 80087e0:	6025      	str	r5, [r4, #0]
 80087e2:	e7db      	b.n	800879c <_malloc_r+0x64>
 80087e4:	2000020c 	.word	0x2000020c
 80087e8:	20000210 	.word	0x20000210

080087ec <_sbrk_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4c06      	ldr	r4, [pc, #24]	; (8008808 <_sbrk_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4605      	mov	r5, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	f7ff f96e 	bl	8007ad8 <_sbrk>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_sbrk_r+0x1a>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	b103      	cbz	r3, 8008806 <_sbrk_r+0x1a>
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20001c30 	.word	0x20001c30

0800880c <__malloc_lock>:
 800880c:	4770      	bx	lr

0800880e <__malloc_unlock>:
 800880e:	4770      	bx	lr

08008810 <_init>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	bf00      	nop
 8008814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008816:	bc08      	pop	{r3}
 8008818:	469e      	mov	lr, r3
 800881a:	4770      	bx	lr

0800881c <_fini>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr
