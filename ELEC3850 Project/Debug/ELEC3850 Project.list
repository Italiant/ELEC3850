
ELEC3850 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e8  080093e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080093e8  080093e8  000193e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f0  080093f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080093f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  200001e0  080095d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cac  080095d8  00021cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c579  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a3c  00000000  00000000  0003c789  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  000401c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001558  00000000  00000000  000418b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025874  00000000  00000000  00042e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148c6  00000000  00000000  00068684  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0c95  00000000  00000000  0007cf4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014dbdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006404  00000000  00000000  0014dc5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009328 	.word	0x08009328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009328 	.word	0x08009328

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f94d 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 fa88 	bl	8007ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f965 	bl	80008b2 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92d 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000118 	.word	0x20000118
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	2000020c 	.word	0x2000020c

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000020c 	.word	0x2000020c

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	e16b      	b.n	8000bc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008e8:	2201      	movs	r2, #1
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	f040 815a 	bne.w	8000bba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x4a>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d123      	bne.n	800095e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	691a      	ldr	r2, [r3, #16]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	08da      	lsrs	r2, r3, #3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3208      	adds	r2, #8
 8000958:	69b9      	ldr	r1, [r7, #24]
 800095a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2203      	movs	r2, #3
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4013      	ands	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 0203 	and.w	r2, r3, #3
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4313      	orrs	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d00b      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d007      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a6:	2b11      	cmp	r3, #17
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d130      	bne.n	8000a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	f003 0201 	and.w	r2, r3, #1
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80b4 	beq.w	8000bba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <HAL_GPIO_Init+0x308>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a5e      	ldr	r2, [pc, #376]	; (8000bd4 <HAL_GPIO_Init+0x308>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
 8000a62:	4b5c      	ldr	r3, [pc, #368]	; (8000bd4 <HAL_GPIO_Init+0x308>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a6e:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <HAL_GPIO_Init+0x30c>)
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	3302      	adds	r3, #2
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <HAL_GPIO_Init+0x310>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d02b      	beq.n	8000af2 <HAL_GPIO_Init+0x226>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <HAL_GPIO_Init+0x314>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d025      	beq.n	8000aee <HAL_GPIO_Init+0x222>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x318>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d01f      	beq.n	8000aea <HAL_GPIO_Init+0x21e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <HAL_GPIO_Init+0x31c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d019      	beq.n	8000ae6 <HAL_GPIO_Init+0x21a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4d      	ldr	r2, [pc, #308]	; (8000bec <HAL_GPIO_Init+0x320>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x216>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4c      	ldr	r2, [pc, #304]	; (8000bf0 <HAL_GPIO_Init+0x324>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x212>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <HAL_GPIO_Init+0x328>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x20e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <HAL_GPIO_Init+0x32c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x20a>
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	e00e      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	e00c      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ada:	2306      	movs	r3, #6
 8000adc:	e00a      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ade:	2305      	movs	r3, #5
 8000ae0:	e008      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e004      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x228>
 8000af2:	2300      	movs	r3, #0
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4093      	lsls	r3, r2
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b04:	4934      	ldr	r1, [pc, #208]	; (8000bd8 <HAL_GPIO_Init+0x30c>)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	f67f ae90 	bls.w	80008e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3724      	adds	r7, #36	; 0x24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40021c00 	.word	0x40021c00
 8000bfc:	40013c00 	.word	0x40013c00

08000c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e001      	b.n	8000c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c40:	787b      	ldrb	r3, [r7, #1]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c4c:	e003      	b.n	8000c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	619a      	str	r2, [r3, #24]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c70:	695a      	ldr	r2, [r3, #20]
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f806 	bl	8000c94 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013c00 	.word	0x40013c00

08000c94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e10f      	b.n	8000ede <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d106      	bne.n	8000cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f006 ff20 	bl	8007b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2224      	movs	r2, #36	; 0x24
 8000cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cf0:	f002 fb36 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8000cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a7b      	ldr	r2, [pc, #492]	; (8000ee8 <HAL_I2C_Init+0x23c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d807      	bhi.n	8000d10 <HAL_I2C_Init+0x64>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a7a      	ldr	r2, [pc, #488]	; (8000eec <HAL_I2C_Init+0x240>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	bf94      	ite	ls
 8000d08:	2301      	movls	r3, #1
 8000d0a:	2300      	movhi	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	e006      	b.n	8000d1e <HAL_I2C_Init+0x72>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a77      	ldr	r2, [pc, #476]	; (8000ef0 <HAL_I2C_Init+0x244>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bf94      	ite	ls
 8000d18:	2301      	movls	r3, #1
 8000d1a:	2300      	movhi	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e0db      	b.n	8000ede <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4a72      	ldr	r2, [pc, #456]	; (8000ef4 <HAL_I2C_Init+0x248>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a64      	ldr	r2, [pc, #400]	; (8000ee8 <HAL_I2C_Init+0x23c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d802      	bhi.n	8000d60 <HAL_I2C_Init+0xb4>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	e009      	b.n	8000d74 <HAL_I2C_Init+0xc8>
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	4a63      	ldr	r2, [pc, #396]	; (8000ef8 <HAL_I2C_Init+0x24c>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	3301      	adds	r3, #1
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	4956      	ldr	r1, [pc, #344]	; (8000ee8 <HAL_I2C_Init+0x23c>)
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d80d      	bhi.n	8000db0 <HAL_I2C_Init+0x104>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	1e59      	subs	r1, r3, #1
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da2:	3301      	adds	r3, #1
 8000da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	bf38      	it	cc
 8000dac:	2304      	movcc	r3, #4
 8000dae:	e04f      	b.n	8000e50 <HAL_I2C_Init+0x1a4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d111      	bne.n	8000ddc <HAL_I2C_Init+0x130>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1e58      	subs	r0, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6859      	ldr	r1, [r3, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	440b      	add	r3, r1
 8000dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	e012      	b.n	8000e02 <HAL_I2C_Init+0x156>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1e58      	subs	r0, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6859      	ldr	r1, [r3, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	0099      	lsls	r1, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df2:	3301      	adds	r3, #1
 8000df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_I2C_Init+0x15e>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e022      	b.n	8000e50 <HAL_I2C_Init+0x1a4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10e      	bne.n	8000e30 <HAL_I2C_Init+0x184>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1e58      	subs	r0, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6859      	ldr	r1, [r3, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	440b      	add	r3, r1
 8000e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2e:	e00f      	b.n	8000e50 <HAL_I2C_Init+0x1a4>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6859      	ldr	r1, [r3, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	0099      	lsls	r1, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	6809      	ldr	r1, [r1, #0]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6911      	ldr	r1, [r2, #16]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68d2      	ldr	r2, [r2, #12]
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	000186a0 	.word	0x000186a0
 8000eec:	001e847f 	.word	0x001e847f
 8000ef0:	003d08ff 	.word	0x003d08ff
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	10624dd3 	.word	0x10624dd3

08000efc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e128      	b.n	8001160 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d109      	bne.n	8000f2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a90      	ldr	r2, [pc, #576]	; (8001168 <HAL_I2S_Init+0x26c>)
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f006 fe3d 	bl	8007ba8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d060      	beq.n	800101c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000f62:	2310      	movs	r3, #16
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e001      	b.n	8000f6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d802      	bhi.n	8000f7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f002 fae6 	bl	800354c <HAL_RCCEx_GetPeriphCLKFreq>
 8000f80:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8a:	d125      	bne.n	8000fd8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d010      	beq.n	8000fb6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb0:	3305      	adds	r3, #5
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	e01f      	b.n	8000ff6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	3305      	adds	r3, #5
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e00e      	b.n	8000ff6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	3305      	adds	r3, #5
 8000ff4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4a5c      	ldr	r2, [pc, #368]	; (800116c <HAL_I2S_Init+0x270>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	e003      	b.n	8001024 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d902      	bls.n	8001030 <HAL_I2S_Init+0x134>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d907      	bls.n	8001040 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f043 0210 	orr.w	r2, r3, #16
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e08f      	b.n	8001160 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	ea42 0103 	orr.w	r1, r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	430a      	orrs	r2, r1
 8001052:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800105e:	f023 030f 	bic.w	r3, r3, #15
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6851      	ldr	r1, [r2, #4]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6892      	ldr	r2, [r2, #8]
 800106a:	4311      	orrs	r1, r2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68d2      	ldr	r2, [r2, #12]
 8001070:	4311      	orrs	r1, r2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6992      	ldr	r2, [r2, #24]
 8001076:	430a      	orrs	r2, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001082:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d161      	bne.n	8001150 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a38      	ldr	r2, [pc, #224]	; (8001170 <HAL_I2S_Init+0x274>)
 8001090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a37      	ldr	r2, [pc, #220]	; (8001174 <HAL_I2S_Init+0x278>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_I2S_Init+0x1a4>
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_I2S_Init+0x27c>)
 800109e:	e001      	b.n	80010a4 <HAL_I2S_Init+0x1a8>
 80010a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	4932      	ldr	r1, [pc, #200]	; (8001174 <HAL_I2S_Init+0x278>)
 80010ac:	428a      	cmp	r2, r1
 80010ae:	d101      	bne.n	80010b4 <HAL_I2S_Init+0x1b8>
 80010b0:	4a31      	ldr	r2, [pc, #196]	; (8001178 <HAL_I2S_Init+0x27c>)
 80010b2:	e001      	b.n	80010b8 <HAL_I2S_Init+0x1bc>
 80010b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80010b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <HAL_I2S_Init+0x278>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_I2S_Init+0x1d4>
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <HAL_I2S_Init+0x27c>)
 80010ce:	e001      	b.n	80010d4 <HAL_I2S_Init+0x1d8>
 80010d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010d4:	2202      	movs	r2, #2
 80010d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a25      	ldr	r2, [pc, #148]	; (8001174 <HAL_I2S_Init+0x278>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_I2S_Init+0x1ea>
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_I2S_Init+0x27c>)
 80010e4:	e001      	b.n	80010ea <HAL_I2S_Init+0x1ee>
 80010e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f6:	d003      	beq.n	8001100 <HAL_I2S_Init+0x204>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	e001      	b.n	800110c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	b299      	uxth	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001122:	4303      	orrs	r3, r0
 8001124:	b29b      	uxth	r3, r3
 8001126:	430b      	orrs	r3, r1
 8001128:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800112a:	4313      	orrs	r3, r2
 800112c:	b29a      	uxth	r2, r3
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	4313      	orrs	r3, r2
 8001132:	b29b      	uxth	r3, r3
 8001134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001138:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_I2S_Init+0x278>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_I2S_Init+0x24c>
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_I2S_Init+0x27c>)
 8001146:	e001      	b.n	800114c <HAL_I2S_Init+0x250>
 8001148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800114c:	897a      	ldrh	r2, [r7, #10]
 800114e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	08001273 	.word	0x08001273
 800116c:	cccccccd 	.word	0xcccccccd
 8001170:	08001389 	.word	0x08001389
 8001174:	40003800 	.word	0x40003800
 8001178:	40003400 	.word	0x40003400

0800117c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	1c9a      	adds	r2, r3, #2
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10e      	bne.n	800120c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80011fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffb8 	bl	800117c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	b292      	uxth	r2, r2
 8001228:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122e:	1c9a      	adds	r2, r3, #2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001238:	b29b      	uxth	r3, r3
 800123a:	3b01      	subs	r3, #1
 800123c:	b29a      	uxth	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001246:	b29b      	uxth	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10e      	bne.n	800126a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800125a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff93 	bl	8001190 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b04      	cmp	r3, #4
 800128c:	d13a      	bne.n	8001304 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d109      	bne.n	80012ac <I2S_IRQHandler+0x3a>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a2:	2b40      	cmp	r3, #64	; 0x40
 80012a4:	d102      	bne.n	80012ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffb4 	bl	8001214 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b2:	2b40      	cmp	r3, #64	; 0x40
 80012b4:	d126      	bne.n	8001304 <I2S_IRQHandler+0x92>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	d11f      	bne.n	8001304 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80012d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f043 0202 	orr.w	r2, r3, #2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff50 	bl	80011a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b03      	cmp	r3, #3
 800130e:	d136      	bne.n	800137e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d109      	bne.n	800132e <I2S_IRQHandler+0xbc>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	d102      	bne.n	800132e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff45 	bl	80011b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b08      	cmp	r3, #8
 8001336:	d122      	bne.n	800137e <I2S_IRQHandler+0x10c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b20      	cmp	r3, #32
 8001344:	d11b      	bne.n	800137e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001354:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f043 0204 	orr.w	r2, r3, #4
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff13 	bl	80011a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4aa2      	ldr	r2, [pc, #648]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80013a2:	4ba2      	ldr	r3, [pc, #648]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013a4:	e001      	b.n	80013aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80013a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a9b      	ldr	r2, [pc, #620]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80013c0:	4b9a      	ldr	r3, [pc, #616]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013c2:	e001      	b.n	80013c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80013c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d4:	d004      	beq.n	80013e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 8099 	bne.w	8001512 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d107      	bne.n	80013fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f925 	bl	8001644 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f9c8 	bl	80017a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141a:	2b40      	cmp	r3, #64	; 0x40
 800141c:	d13a      	bne.n	8001494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	2b00      	cmp	r3, #0
 8001426:	d035      	beq.n	8001494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001432:	4b7e      	ldr	r3, [pc, #504]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001434:	e001      	b.n	800143a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4979      	ldr	r1, [pc, #484]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001442:	428b      	cmp	r3, r1
 8001444:	d101      	bne.n	800144a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001446:	4b79      	ldr	r3, [pc, #484]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001448:	e001      	b.n	800144e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800144a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800144e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001452:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001462:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f043 0202 	orr.w	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fe88 	bl	80011a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b08      	cmp	r3, #8
 800149c:	f040 80be 	bne.w	800161c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80b8 	beq.w	800161c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a59      	ldr	r2, [pc, #356]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014c8:	e001      	b.n	80014ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80014ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4954      	ldr	r1, [pc, #336]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014d6:	428b      	cmp	r3, r1
 80014d8:	d101      	bne.n	80014de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014dc:	e001      	b.n	80014e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80014de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f043 0204 	orr.w	r2, r3, #4
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fe4a 	bl	80011a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001510:	e084      	b.n	800161c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b02      	cmp	r3, #2
 800151a:	d107      	bne.n	800152c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f8be 	bl	80016a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f8fd 	bl	8001740 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154c:	2b40      	cmp	r3, #64	; 0x40
 800154e:	d12f      	bne.n	80015b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	2b00      	cmp	r3, #0
 8001558:	d02a      	beq.n	80015b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001568:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2e      	ldr	r2, [pc, #184]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001576:	e001      	b.n	800157c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4929      	ldr	r1, [pc, #164]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001584:	428b      	cmp	r3, r1
 8001586:	d101      	bne.n	800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800158a:	e001      	b.n	8001590 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800158c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001594:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f043 0202 	orr.w	r2, r3, #2
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fdfa 	bl	80011a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d131      	bne.n	800161e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d02c      	beq.n	800161e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80015d0:	e001      	b.n	80015d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80015d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4912      	ldr	r1, [pc, #72]	; (8001628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80015de:	428b      	cmp	r3, r1
 80015e0:	d101      	bne.n	80015e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80015e4:	e001      	b.n	80015ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80015e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f043 0204 	orr.w	r2, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fdc5 	bl	80011a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800161a:	e000      	b.n	800161e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800161c:	bf00      	nop
}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40003800 	.word	0x40003800
 800162c:	40003400 	.word	0x40003400

08001630 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	1c99      	adds	r1, r3, #2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6251      	str	r1, [r2, #36]	; 0x24
 8001656:	881a      	ldrh	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d113      	bne.n	800169e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001684:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffc9 	bl	8001630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	1c99      	adds	r1, r3, #2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6251      	str	r1, [r2, #36]	; 0x24
 80016ba:	8819      	ldrh	r1, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <I2SEx_TxISR_I2SExt+0x90>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <I2SEx_TxISR_I2SExt+0x22>
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <I2SEx_TxISR_I2SExt+0x94>)
 80016c8:	e001      	b.n	80016ce <I2SEx_TxISR_I2SExt+0x26>
 80016ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016ce:	460a      	mov	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d121      	bne.n	800172e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <I2SEx_TxISR_I2SExt+0x90>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <I2SEx_TxISR_I2SExt+0x50>
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <I2SEx_TxISR_I2SExt+0x94>)
 80016f6:	e001      	b.n	80016fc <I2SEx_TxISR_I2SExt+0x54>
 80016f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	490d      	ldr	r1, [pc, #52]	; (8001738 <I2SEx_TxISR_I2SExt+0x90>)
 8001704:	428b      	cmp	r3, r1
 8001706:	d101      	bne.n	800170c <I2SEx_TxISR_I2SExt+0x64>
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <I2SEx_TxISR_I2SExt+0x94>)
 800170a:	e001      	b.n	8001710 <I2SEx_TxISR_I2SExt+0x68>
 800170c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800171a:	b29b      	uxth	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d106      	bne.n	800172e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff81 	bl	8001630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40003800 	.word	0x40003800
 800173c:	40003400 	.word	0x40003400

08001740 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68d8      	ldr	r0, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	1c99      	adds	r1, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001758:	b282      	uxth	r2, r0
 800175a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800176e:	b29b      	uxth	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d113      	bne.n	800179c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001782:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff4a 	bl	8001630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <I2SEx_RxISR_I2SExt+0x90>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <I2SEx_RxISR_I2SExt+0x16>
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <I2SEx_RxISR_I2SExt+0x94>)
 80017b8:	e001      	b.n	80017be <I2SEx_RxISR_I2SExt+0x1a>
 80017ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017be:	68d8      	ldr	r0, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	1c99      	adds	r1, r3, #2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80017ca:	b282      	uxth	r2, r0
 80017cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d121      	bne.n	800182a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <I2SEx_RxISR_I2SExt+0x90>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <I2SEx_RxISR_I2SExt+0x50>
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <I2SEx_RxISR_I2SExt+0x94>)
 80017f2:	e001      	b.n	80017f8 <I2SEx_RxISR_I2SExt+0x54>
 80017f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <I2SEx_RxISR_I2SExt+0x90>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d101      	bne.n	8001808 <I2SEx_RxISR_I2SExt+0x64>
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <I2SEx_RxISR_I2SExt+0x94>)
 8001806:	e001      	b.n	800180c <I2SEx_RxISR_I2SExt+0x68>
 8001808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800180c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001810:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d106      	bne.n	800182a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff03 	bl	8001630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40003800 	.word	0x40003800
 8001838:	40003400 	.word	0x40003400

0800183c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b08f      	sub	sp, #60	; 0x3c
 8001840:	af0a      	add	r7, sp, #40	; 0x28
 8001842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e10f      	b.n	8001a6e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d106      	bne.n	800186e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f006 fccf 	bl	800820c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 ff66 	bl	800475e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	687e      	ldr	r6, [r7, #4]
 800189a:	466d      	mov	r5, sp
 800189c:	f106 0410 	add.w	r4, r6, #16
 80018a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f002 fe3d 	bl	8004534 <USB_CoreInit>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d0      	b.n	8001a6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 ff54 	bl	8004780 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e04a      	b.n	8001974 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	333d      	adds	r3, #61	; 0x3d
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	333c      	adds	r3, #60	; 0x3c
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b298      	uxth	r0, r3
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	4602      	mov	r2, r0
 800191c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	333f      	adds	r3, #63	; 0x3f
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3344      	adds	r3, #68	; 0x44
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3348      	adds	r3, #72	; 0x48
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	3350      	adds	r3, #80	; 0x50
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3af      	bcc.n	80018de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	e044      	b.n	8001a0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3b5      	bcc.n	8001984 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	687e      	ldr	r6, [r7, #4]
 8001a20:	466d      	mov	r5, sp
 8001a22:	f106 0410 	add.w	r4, r6, #16
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a36:	1d33      	adds	r3, r6, #4
 8001a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f002 feca 	bl	80047d4 <USB_DevInit>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00d      	b.n	8001a6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 febf 	bl	80057ea <USB_DevDisconnect>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_PCD_Start+0x1c>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e020      	b.n	8001ad4 <HAL_PCD_Start+0x5e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d109      	bne.n	8001ab6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fe7d 	bl	80057ba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fe39 	bl	800473c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b08d      	sub	sp, #52	; 0x34
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 ff24 	bl	8005940 <USB_GetMode>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 838e 	bne.w	800221c <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fe88 	bl	800581a <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8384 	beq.w	800221a <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fe7f 	bl	800581a <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f002 0202 	and.w	r2, r2, #2
 8001b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fe6d 	bl	800581a <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b4a:	d17b      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fe73 	bl	8005840 <USB_ReadDevAllOutEpInterrupt>
 8001b5a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b5c:	e06f      	b.n	8001c3e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d064      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fe98 	bl	80058a8 <USB_ReadDevOutEPInterrupt>
 8001b78:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	2301      	movs	r3, #1
 8001b94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fe0d 	bl	80027b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 ff0c 	bl	80029c8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2310      	movs	r3, #16
 8001bdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d015      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	f003 fee3 	bl	80059c8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2320      	movs	r3, #32
 8001c12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c30:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	3301      	adds	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d18c      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 fde6 	bl	800581a <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c58:	f040 80c4 	bne.w	8001de4 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fe07 	bl	8005874 <USB_ReadDevAllInEpInterrupt>
 8001c66:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c6c:	e0b6      	b.n	8001ddc <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80ab 	beq.w	8001dd0 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fe2d 	bl	80058e4 <USB_ReadDevInEPInterrupt>
 8001c8a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d05b      	beq.n	8001d4e <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69f9      	ldr	r1, [r7, #28]
 8001cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2301      	movs	r3, #1
 8001cca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11b      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3348      	adds	r3, #72	; 0x48
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4403      	add	r3, r0
 8001cf4:	3344      	adds	r3, #68	; 0x44
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4419      	add	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4403      	add	r3, r0
 8001d08:	3348      	adds	r3, #72	; 0x48
 8001d0a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f006 fb09 	bl	800832a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d116      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d113      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x272>
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3350      	adds	r3, #80	; 0x50
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d108      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d46:	461a      	mov	r2, r3
 8001d48:	2101      	movs	r1, #1
 8001d4a:	f003 fe3d 	bl	80059c8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d64:	461a      	mov	r2, r3
 8001d66:	2308      	movs	r3, #8
 8001d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d80:	461a      	mov	r2, r3
 8001d82:	2310      	movs	r3, #16
 8001d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2340      	movs	r3, #64	; 0x40
 8001da0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db8:	461a      	mov	r2, r3
 8001dba:	2302      	movs	r3, #2
 8001dbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fc67 	bl	800269e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f af45 	bne.w	8001c6e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fd16 	bl	800581a <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df8:	d122      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d108      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e20:	2100      	movs	r1, #0
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fe88 	bl	8002b38 <HAL_PCDEx_LPM_Callback>
 8001e28:	e002      	b.n	8001e30 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f006 faf4 	bl	8008418 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fce8 	bl	800581a <USB_ReadInterrupts>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e54:	d112      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f006 fab0 	bl	80083cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e7a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fcca 	bl	800581a <USB_ReadInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e90:	f040 80a7 	bne.w	8001fe2 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2110      	movs	r1, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fe02 	bl	8004ab8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb8:	e036      	b.n	8001f28 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ecc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ede:	0151      	lsls	r1, r2, #5
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	440a      	add	r2, r1
 8001ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ee8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001efa:	461a      	mov	r2, r3
 8001efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f12:	0151      	lsls	r1, r2, #5
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	440a      	add	r2, r1
 8001f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	3301      	adds	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3c3      	bcc.n	8001eba <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d016      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f5e:	f043 030b 	orr.w	r3, r3, #11
 8001f62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f74:	f043 030b 	orr.w	r3, r3, #11
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	e015      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa2:	f043 030b 	orr.w	r3, r3, #11
 8001fa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f003 fcfb 	bl	80059c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fc17 	bl	800581a <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff6:	d124      	bne.n	8002042 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fcad 	bl	800595c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fdb7 	bl	8004b7a <USB_GetDevSpeed>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	f001 f996 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 800201c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4620      	mov	r0, r4
 8002028:	f002 fae6 	bl	80045f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f006 f9a4 	bl	800837a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002040:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fbe7 	bl	800581a <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b10      	cmp	r3, #16
 8002054:	d161      	bne.n	800211a <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0210 	bic.w	r2, r2, #16
 8002064:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	0c5b      	lsrs	r3, r3, #17
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	2b02      	cmp	r3, #2
 8002090:	d124      	bne.n	80020dc <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d035      	beq.n	800210a <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6a38      	ldr	r0, [r7, #32]
 80020b2:	f003 fa5f 	bl	8005574 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c2:	441a      	add	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d4:	441a      	add	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	619a      	str	r2, [r3, #24]
 80020da:	e016      	b.n	800210a <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	0c5b      	lsrs	r3, r3, #17
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d110      	bne.n	800210a <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ee:	2208      	movs	r2, #8
 80020f0:	4619      	mov	r1, r3
 80020f2:	6a38      	ldr	r0, [r7, #32]
 80020f4:	f003 fa3e 	bl	8005574 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002104:	441a      	add	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0210 	orr.w	r2, r2, #16
 8002118:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fb7b 	bl	800581a <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b08      	cmp	r3, #8
 800212c:	d10a      	bne.n	8002144 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f006 f915 	bl	800835e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f002 0208 	and.w	r2, r2, #8
 8002142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fb66 	bl	800581a <USB_ReadInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002158:	d10f      	bne.n	800217a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f006 f977 	bl	8008458 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fb4b 	bl	800581a <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800218e:	d10f      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f006 f94a 	bl	8008434 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80021ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 fb30 	bl	800581a <USB_ReadInterrupts>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d10a      	bne.n	80021dc <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f006 f958 	bl	800847c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fb1a 	bl	800581a <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d115      	bne.n	800221c <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f006 f948 	bl	8008498 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	e000      	b.n	800221c <HAL_PCD_IRQHandler+0x740>
      return;
 800221a:	bf00      	nop
    }
  }
}
 800221c:	3734      	adds	r7, #52	; 0x34
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}

08002222 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_PCD_SetAddress+0x1a>
 8002238:	2302      	movs	r3, #2
 800223a:	e013      	b.n	8002264 <HAL_PCD_SetAddress+0x42>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f003 fa8a 	bl	800576e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	70fb      	strb	r3, [r7, #3]
 800227e:	460b      	mov	r3, r1
 8002280:	803b      	strh	r3, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800228a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da0f      	bge.n	80022b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 020f 	and.w	r2, r3, #15
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	3338      	adds	r3, #56	; 0x38
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	3304      	adds	r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	705a      	strb	r2, [r3, #1]
 80022b0:	e00f      	b.n	80022d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022de:	883a      	ldrh	r2, [r7, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	78ba      	ldrb	r2, [r7, #2]
 80022e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022fc:	78bb      	ldrb	r3, [r7, #2]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d102      	bne.n	8002308 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_PCD_EP_Open+0xaa>
 8002312:	2302      	movs	r3, #2
 8002314:	e00e      	b.n	8002334 <HAL_PCD_EP_Open+0xc8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68f9      	ldr	r1, [r7, #12]
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fc4d 	bl	8004bc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002332:	7afb      	ldrb	r3, [r7, #11]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0f      	bge.n	8002370 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3338      	adds	r3, #56	; 0x38
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00f      	b.n	8002390 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	b2da      	uxtb	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_PCD_EP_Close+0x6e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_Close+0x8c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fc8b 	bl	8004cd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e0:	7afb      	ldrb	r3, [r7, #11]
 80023e2:	f003 020f 	and.w	r2, r3, #15
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	3304      	adds	r3, #4
 80023f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2200      	movs	r2, #0
 8002410:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	b2da      	uxtb	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6979      	ldr	r1, [r7, #20]
 8002444:	f002 ff0e 	bl	8005264 <USB_EP0StartXfer>
 8002448:	e008      	b.n	800245c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	6979      	ldr	r1, [r7, #20]
 8002458:	f002 fcc0 	bl	8004ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002488:	681b      	ldr	r3, [r3, #0]
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	460b      	mov	r3, r1
 80024a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	3304      	adds	r3, #4
 80024bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2201      	movs	r2, #1
 80024d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d102      	bne.n	80024f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	6979      	ldr	r1, [r7, #20]
 8002508:	f002 feac 	bl	8005264 <USB_EP0StartXfer>
 800250c:	e008      	b.n	8002520 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	f002 fc5e 	bl	8004ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d901      	bls.n	8002548 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e050      	b.n	80025ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da0f      	bge.n	8002570 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 020f 	and.w	r2, r3, #15
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	3338      	adds	r3, #56	; 0x38
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	705a      	strb	r2, [r3, #1]
 800256e:	e00d      	b.n	800258c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_PCD_EP_SetStall+0x82>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e01e      	b.n	80025ea <HAL_PCD_EP_SetStall+0xc0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 f803 	bl	80055c6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	b2d9      	uxtb	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025da:	461a      	mov	r2, r3
 80025dc:	f003 f9f4 	bl	80059c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d901      	bls.n	8002610 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e042      	b.n	8002696 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002614:	2b00      	cmp	r3, #0
 8002616:	da0f      	bge.n	8002638 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4413      	add	r3, r2
 800262c:	3304      	adds	r3, #4
 800262e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	705a      	strb	r2, [r3, #1]
 8002636:	e00f      	b.n	8002658 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 020f 	and.w	r2, r3, #15
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_PCD_EP_ClrStall+0x86>
 8002674:	2302      	movs	r3, #2
 8002676:	e00e      	b.n	8002696 <HAL_PCD_EP_ClrStall+0xa4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 f80b 	bl	80056a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b08a      	sub	sp, #40	; 0x28
 80026a2:	af02      	add	r7, sp, #8
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	3338      	adds	r3, #56	; 0x38
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d901      	bls.n	80026d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06c      	b.n	80027b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d902      	bls.n	80026f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3303      	adds	r3, #3
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026fa:	e02b      	b.n	8002754 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	429a      	cmp	r2, r3
 8002710:	d902      	bls.n	8002718 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3303      	adds	r3, #3
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68d9      	ldr	r1, [r3, #12]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002730:	b2db      	uxtb	r3, r3
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4603      	mov	r3, r0
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f002 fee7 	bl	800550a <USB_WritePacket>

    ep->xfer_buff  += len;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	441a      	add	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	441a      	add	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	b29b      	uxth	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d809      	bhi.n	800277e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002772:	429a      	cmp	r2, r3
 8002774:	d203      	bcs.n	800277e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1be      	bne.n	80026fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	429a      	cmp	r2, r3
 8002788:	d811      	bhi.n	80027ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	2201      	movs	r2, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	6939      	ldr	r1, [r7, #16]
 80027a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027aa:	4013      	ands	r3, r2
 80027ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	333c      	adds	r3, #60	; 0x3c
 80027d0:	3304      	adds	r3, #4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	f040 80b3 	bne.w	8002956 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d028      	beq.n	800284c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4a70      	ldr	r2, [pc, #448]	; (80029c0 <PCD_EP_OutXfrComplete_int+0x208>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d90e      	bls.n	8002820 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f005 fd55 	bl	80082d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002830:	461a      	mov	r2, r3
 8002832:	2101      	movs	r1, #1
 8002834:	f003 f8c8 	bl	80059c8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002844:	461a      	mov	r2, r3
 8002846:	2308      	movs	r3, #8
 8002848:	6093      	str	r3, [r2, #8]
 800284a:	e0b3      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002862:	461a      	mov	r2, r3
 8002864:	2320      	movs	r3, #32
 8002866:	6093      	str	r3, [r2, #8]
 8002868:	e0a4      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 809f 	bne.w	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a51      	ldr	r2, [pc, #324]	; (80029c0 <PCD_EP_OutXfrComplete_int+0x208>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d90f      	bls.n	800289e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289a:	6093      	str	r3, [r2, #8]
 800289c:	e08a      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028b0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	0159      	lsls	r1, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80028c4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4403      	add	r3, r0
 80028d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028d8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4403      	add	r3, r0
 80028fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4419      	add	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002916:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f005 fce8 	bl	80082f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d144      	bne.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d138      	bne.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800294c:	461a      	mov	r2, r3
 800294e:	2101      	movs	r1, #1
 8002950:	f003 f83a 	bl	80059c8 <USB_EP0_OutStart>
 8002954:	e02e      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <PCD_EP_OutXfrComplete_int+0x20c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d124      	bne.n	80029a8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002974:	461a      	mov	r2, r3
 8002976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297a:	6093      	str	r3, [r2, #8]
 800297c:	e01a      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	2320      	movs	r3, #32
 8002998:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f005 fca7 	bl	80082f4 <HAL_PCD_DataOutStageCallback>
 80029a6:	e005      	b.n	80029b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f005 fca0 	bl	80082f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	4f54300a 	.word	0x4f54300a
 80029c4:	4f54310a 	.word	0x4f54310a

080029c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	333c      	adds	r3, #60	; 0x3c
 80029e0:	3304      	adds	r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d113      	bne.n	8002a26 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d922      	bls.n	8002a4c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01d      	beq.n	8002a4c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	6093      	str	r3, [r2, #8]
 8002a24:	e012      	b.n	8002a4c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <PCD_EP_OutSetupPacket_int+0xbc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10e      	bne.n	8002a4c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f005 fc3f 	bl	80082d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d90c      	bls.n	8002a74 <PCD_EP_OutSetupPacket_int+0xac>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d108      	bne.n	8002a74 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2101      	movs	r1, #1
 8002a70:	f002 ffaa 	bl	80059c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	4f54300a 	.word	0x4f54300a
 8002a84:	4f54310a 	.word	0x4f54310a

08002a88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
 8002a94:	4613      	mov	r3, r2
 8002a96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002aa6:	883b      	ldrh	r3, [r7, #0]
 8002aa8:	0419      	lsls	r1, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab4:	e028      	b.n	8002b08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e00d      	b.n	8002ae6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3340      	adds	r3, #64	; 0x40
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3ec      	bcc.n	8002aca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002af0:	883b      	ldrh	r3, [r7, #0]
 8002af2:	0418      	lsls	r0, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6819      	ldr	r1, [r3, #0]
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	4302      	orrs	r2, r0
 8002b00:	3340      	adds	r3, #64	; 0x40
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e22d      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d075      	beq.n	8002c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	4ba3      	ldr	r3, [pc, #652]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d00c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4ba0      	ldr	r3, [pc, #640]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d112      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b9d      	ldr	r3, [pc, #628]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4b99      	ldr	r3, [pc, #612]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d157      	bne.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e208      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x74>
 8002bb6:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a90      	ldr	r2, [pc, #576]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x98>
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a8a      	ldr	r2, [pc, #552]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a87      	ldr	r2, [pc, #540]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xb0>
 8002be8:	4b84      	ldr	r3, [pc, #528]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a83      	ldr	r2, [pc, #524]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fd fd20 	bl	800064c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fd fd1c 	bl	800064c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1cd      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd fd0c 	bl	800064c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fd fd08 	bl	800064c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1b9      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b6c      	ldr	r3, [pc, #432]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b5c      	ldr	r3, [pc, #368]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e18d      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4952      	ldr	r1, [pc, #328]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fd fcc1 	bl	800064c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fd fcbd 	bl	800064c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e16e      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b43      	ldr	r3, [pc, #268]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4940      	ldr	r1, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x2b0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fd fca0 	bl	800064c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d10:	f7fd fc9c 	bl	800064c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e14d      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d030      	beq.n	8002d9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fd fc80 	bl	800064c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d50:	f7fd fc7c 	bl	800064c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e12d      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x200>
 8002d6e:	e015      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_OscConfig+0x2b4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fd fc69 	bl	800064c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7fd fc65 	bl	800064c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e116      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a0 	beq.w	8002eea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d121      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fd fc2b 	bl	800064c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e011      	b.n	8002e1e <HAL_RCC_OscConfig+0x2ce>
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000
 8002e04:	42470e80 	.word	0x42470e80
 8002e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fd fc1e 	bl	800064c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0cf      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x478>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2f0>
 8002e32:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	e01c      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x312>
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a5f      	ldr	r2, [pc, #380]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	e00b      	b.n	8002e7a <HAL_RCC_OscConfig+0x32a>
 8002e62:	4b5a      	ldr	r3, [pc, #360]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a59      	ldr	r2, [pc, #356]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	4b57      	ldr	r3, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a56      	ldr	r2, [pc, #344]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d015      	beq.n	8002eae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fd fbe3 	bl	800064c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fd fbdf 	bl	800064c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e08e      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ee      	beq.n	8002e8a <HAL_RCC_OscConfig+0x33a>
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fd fbcd 	bl	800064c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fbc9 	bl	800064c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e078      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ee      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d064      	beq.n	8002fbc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d05c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d141      	bne.n	8002f8a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_OscConfig+0x480>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fd fb9e 	bl	800064c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fd fb9a 	bl	800064c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e04b      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	491d      	ldr	r1, [pc, #116]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_RCC_OscConfig+0x480>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fb73 	bl	800064c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fd fb6f 	bl	800064c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e020      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x41a>
 8002f88:	e018      	b.n	8002fbc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_OscConfig+0x480>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fd fb5c 	bl	800064c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fd fb58 	bl	800064c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_RCC_OscConfig+0x47c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x448>
 8002fb6:	e001      	b.n	8002fbc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	42470060 	.word	0x42470060

08002fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0ca      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b67      	ldr	r3, [pc, #412]	; (8003188 <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d90c      	bls.n	8003010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b64      	ldr	r3, [pc, #400]	; (8003188 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b62      	ldr	r3, [pc, #392]	; (8003188 <HAL_RCC_ClockConfig+0x1b4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b6      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b52      	ldr	r3, [pc, #328]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a51      	ldr	r2, [pc, #324]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800304a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b4f      	ldr	r3, [pc, #316]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494c      	ldr	r1, [pc, #304]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d044      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d119      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07d      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d003      	beq.n	8003092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308e:	2b03      	cmp	r3, #3
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	4b3e      	ldr	r3, [pc, #248]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06d      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e065      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f023 0203 	bic.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4933      	ldr	r1, [pc, #204]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c4:	f7fd fac2 	bl	800064c <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030cc:	f7fd fabe 	bl	800064c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e04d      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 020c 	and.w	r2, r3, #12
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d1eb      	bne.n	80030cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d20c      	bcs.n	800311c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_RCC_ClockConfig+0x1b4>)
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_RCC_ClockConfig+0x1b4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e030      	b.n	800317e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4915      	ldr	r1, [pc, #84]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490d      	ldr	r1, [pc, #52]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f81d 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 800315e:	4601      	mov	r1, r0
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	fa21 f303 	lsr.w	r3, r1, r3
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003176:	2000      	movs	r0, #0
 8003178:	f7fd fa24 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023c00 	.word	0x40023c00
 800318c:	40023800 	.word	0x40023800
 8003190:	0800939c 	.word	0x0800939c
 8003194:	20000118 	.word	0x20000118

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	2300      	movs	r3, #0
 80031a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ae:	4b63      	ldr	r3, [pc, #396]	; (800333c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d007      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x32>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d008      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x38>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 80b4 	bne.w	800332c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031c6:	60bb      	str	r3, [r7, #8]
       break;
 80031c8:	e0b3      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4b5e      	ldr	r3, [pc, #376]	; (8003344 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80031cc:	60bb      	str	r3, [r7, #8]
      break;
 80031ce:	e0b0      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4b58      	ldr	r3, [pc, #352]	; (800333c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04a      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b55      	ldr	r3, [pc, #340]	; (800333c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	f04f 0400 	mov.w	r4, #0
 80031f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	ea03 0501 	and.w	r5, r3, r1
 80031fc:	ea04 0602 	and.w	r6, r4, r2
 8003200:	4629      	mov	r1, r5
 8003202:	4632      	mov	r2, r6
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	f04f 0400 	mov.w	r4, #0
 800320c:	0154      	lsls	r4, r2, #5
 800320e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003212:	014b      	lsls	r3, r1, #5
 8003214:	4619      	mov	r1, r3
 8003216:	4622      	mov	r2, r4
 8003218:	1b49      	subs	r1, r1, r5
 800321a:	eb62 0206 	sbc.w	r2, r2, r6
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	f04f 0400 	mov.w	r4, #0
 8003226:	0194      	lsls	r4, r2, #6
 8003228:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800322c:	018b      	lsls	r3, r1, #6
 800322e:	1a5b      	subs	r3, r3, r1
 8003230:	eb64 0402 	sbc.w	r4, r4, r2
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	00e2      	lsls	r2, r4, #3
 800323e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003242:	00d9      	lsls	r1, r3, #3
 8003244:	460b      	mov	r3, r1
 8003246:	4614      	mov	r4, r2
 8003248:	195b      	adds	r3, r3, r5
 800324a:	eb44 0406 	adc.w	r4, r4, r6
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	0262      	lsls	r2, r4, #9
 8003258:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800325c:	0259      	lsls	r1, r3, #9
 800325e:	460b      	mov	r3, r1
 8003260:	4614      	mov	r4, r2
 8003262:	4618      	mov	r0, r3
 8003264:	4621      	mov	r1, r4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f04f 0400 	mov.w	r4, #0
 800326c:	461a      	mov	r2, r3
 800326e:	4623      	mov	r3, r4
 8003270:	f7fd f806 	bl	8000280 <__aeabi_uldivmod>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e049      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	f04f 0400 	mov.w	r4, #0
 8003286:	f240 11ff 	movw	r1, #511	; 0x1ff
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	ea03 0501 	and.w	r5, r3, r1
 8003292:	ea04 0602 	and.w	r6, r4, r2
 8003296:	4629      	mov	r1, r5
 8003298:	4632      	mov	r2, r6
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f04f 0400 	mov.w	r4, #0
 80032a2:	0154      	lsls	r4, r2, #5
 80032a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032a8:	014b      	lsls	r3, r1, #5
 80032aa:	4619      	mov	r1, r3
 80032ac:	4622      	mov	r2, r4
 80032ae:	1b49      	subs	r1, r1, r5
 80032b0:	eb62 0206 	sbc.w	r2, r2, r6
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	f04f 0400 	mov.w	r4, #0
 80032bc:	0194      	lsls	r4, r2, #6
 80032be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032c2:	018b      	lsls	r3, r1, #6
 80032c4:	1a5b      	subs	r3, r3, r1
 80032c6:	eb64 0402 	sbc.w	r4, r4, r2
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	00e2      	lsls	r2, r4, #3
 80032d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032d8:	00d9      	lsls	r1, r3, #3
 80032da:	460b      	mov	r3, r1
 80032dc:	4614      	mov	r4, r2
 80032de:	195b      	adds	r3, r3, r5
 80032e0:	eb44 0406 	adc.w	r4, r4, r6
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	02a2      	lsls	r2, r4, #10
 80032ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032f2:	0299      	lsls	r1, r3, #10
 80032f4:	460b      	mov	r3, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	4621      	mov	r1, r4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f04f 0400 	mov.w	r4, #0
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	f7fc ffbb 	bl	8000280 <__aeabi_uldivmod>
 800330a:	4603      	mov	r3, r0
 800330c:	460c      	mov	r4, r1
 800330e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	3301      	adds	r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	60bb      	str	r3, [r7, #8]
      break;
 800332a:	e002      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800332e:	60bb      	str	r3, [r7, #8]
      break;
 8003330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003332:	68bb      	ldr	r3, [r7, #8]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	00f42400 	.word	0x00f42400
 8003344:	007a1200 	.word	0x007a1200

08003348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <HAL_RCC_GetHCLKFreq+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000118 	.word	0x20000118

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003364:	f7ff fff0 	bl	8003348 <HAL_RCC_GetHCLKFreq>
 8003368:	4601      	mov	r1, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4a03      	ldr	r2, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	080093ac 	.word	0x080093ac

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d035      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033b0:	4b62      	ldr	r3, [pc, #392]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033b6:	f7fd f949 	bl	800064c <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033be:	f7fd f945 	bl	800064c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0b0      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033d0:	4b5b      	ldr	r3, [pc, #364]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	019a      	lsls	r2, r3, #6
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	071b      	lsls	r3, r3, #28
 80033e8:	4955      	ldr	r1, [pc, #340]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033f0:	4b52      	ldr	r3, [pc, #328]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033f6:	f7fd f929 	bl	800064c <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033fe:	f7fd f925 	bl	800064c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e090      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003410:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8083 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a43      	ldr	r2, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a3e      	ldr	r2, [pc, #248]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003452:	f7fd f8fb 	bl	800064c <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fd f8f7 	bl	800064c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e062      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003478:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02f      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d028      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d114      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034be:	f7fd f8c5 	bl	800064c <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fd f8c1 	bl	800064c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e02a      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ee      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f4:	d10d      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800350a:	490d      	ldr	r1, [pc, #52]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]
 8003510:	e005      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003518:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	4905      	ldr	r1, [pc, #20]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800352c:	4313      	orrs	r3, r2
 800352e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	42470068 	.word	0x42470068
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000
 8003548:	42470e40 	.word	0x42470e40

0800354c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d13d      	bne.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003572:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800357a:	2b01      	cmp	r3, #1
 800357c:	d12f      	bne.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003580:	617b      	str	r3, [r7, #20]
          break;
 8003582:	e02f      	b.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003590:	d108      	bne.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e007      	b.n	80035b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80035ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ce:	0f1b      	lsrs	r3, r3, #28
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
          break;
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
          break;
 80035e2:	bf00      	nop
        }
      }
      break;
 80035e4:	bf00      	nop
    }
  }
  return frequency;
 80035e6:	697b      	ldr	r3, [r7, #20]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40023800 	.word	0x40023800
 80035f8:	00bb8000 	.word	0x00bb8000
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	00f42400 	.word	0x00f42400

08003604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e056      	b.n	80036c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f004 fb21 	bl	8007c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	ea42 0103 	orr.w	r1, r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	f003 0104 	and.w	r1, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01d      	b.n	800371a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f004 fb08 	bl	8007d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f000 fb58 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b06      	cmp	r3, #6
 800374a:	d007      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e01d      	b.n	80037b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f815 	bl	80037c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f000 fb09 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fdd4 	bl	8004394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_TIM_PWM_Start+0x74>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_PWM_Start+0x2c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIM_PWM_Start+0x78>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_TIM_PWM_Start+0x30>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_TIM_PWM_Start+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b06      	cmp	r3, #6
 800382a:	d007      	beq.n	800383c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0202 	mvn.w	r2, #2
 800387c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa75 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa67 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fa78 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0204 	mvn.w	r2, #4
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa4b 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa3d 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa4e 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0208 	mvn.w	r2, #8
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa21 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa13 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fa24 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9f7 	bl	8003d82 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9e9 	bl	8003d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9fa 	bl	8003d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0201 	mvn.w	r2, #1
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f9c3 	bl	8003d5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fd90 	bl	8004520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9bf 	bl	8003daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0220 	mvn.w	r2, #32
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fd5a 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e0b4      	b.n	8003be4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	f200 809f 	bhi.w	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003acd 	.word	0x08003acd
 8003a9c:	08003bd1 	.word	0x08003bd1
 8003aa0:	08003bd1 	.word	0x08003bd1
 8003aa4:	08003bd1 	.word	0x08003bd1
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003bd1 	.word	0x08003bd1
 8003ab0:	08003bd1 	.word	0x08003bd1
 8003ab4:	08003bd1 	.word	0x08003bd1
 8003ab8:	08003b4f 	.word	0x08003b4f
 8003abc:	08003bd1 	.word	0x08003bd1
 8003ac0:	08003bd1 	.word	0x08003bd1
 8003ac4:	08003bd1 	.word	0x08003bd1
 8003ac8:	08003b8f 	.word	0x08003b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fa14 	bl	8003f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0208 	orr.w	r2, r2, #8
 8003ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0204 	bic.w	r2, r2, #4
 8003af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6999      	ldr	r1, [r3, #24]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	619a      	str	r2, [r3, #24]
      break;
 8003b0a:	e062      	b.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fa64 	bl	8003fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6999      	ldr	r1, [r3, #24]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	619a      	str	r2, [r3, #24]
      break;
 8003b4c:	e041      	b.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fab9 	bl	80040cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0208 	orr.w	r2, r2, #8
 8003b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0204 	bic.w	r2, r2, #4
 8003b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	61da      	str	r2, [r3, #28]
      break;
 8003b8c:	e021      	b.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fb0d 	bl	80041b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	021a      	lsls	r2, r3, #8
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	61da      	str	r2, [r3, #28]
      break;
 8003bce:	e000      	b.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003bd0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIM_ConfigClockSource+0x18>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0a6      	b.n	8003d52 <HAL_TIM_ConfigClockSource+0x166>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d067      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x120>
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d80b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x6c>
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d073      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0x140>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d802      	bhi.n	8003c4e <HAL_TIM_ConfigClockSource+0x62>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d06f      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c4c:	e078      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d06c      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0x140>
 8003c52:	2b30      	cmp	r3, #48	; 0x30
 8003c54:	d06a      	beq.n	8003d2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c56:	e073      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d00d      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x8c>
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d804      	bhi.n	8003c6a <HAL_TIM_ConfigClockSource+0x7e>
 8003c60:	2b50      	cmp	r3, #80	; 0x50
 8003c62:	d033      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0xe0>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d041      	beq.n	8003cec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c68:	e06a      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6e:	d066      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x152>
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c74:	d017      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c76:	e063      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f000 fb64 	bl	8004354 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	609a      	str	r2, [r3, #8]
      break;
 8003ca4:	e04c      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 fb4d 	bl	8004354 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc8:	609a      	str	r2, [r3, #8]
      break;
 8003cca:	e039      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f000 fac1 	bl	8004260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2150      	movs	r1, #80	; 0x50
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb1a 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003cea:	e029      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f000 fae0 	bl	80042be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2160      	movs	r1, #96	; 0x60
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb0a 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003d0a:	e019      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f000 faa1 	bl	8004260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2140      	movs	r1, #64	; 0x40
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fafa 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003d2a:	e009      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 faf1 	bl	800431e <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e000      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a40      	ldr	r2, [pc, #256]	; (8003ed4 <TIM_Base_SetConfig+0x114>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00f      	beq.n	8003e00 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3d      	ldr	r2, [pc, #244]	; (8003ed8 <TIM_Base_SetConfig+0x118>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3c      	ldr	r2, [pc, #240]	; (8003edc <TIM_Base_SetConfig+0x11c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3b      	ldr	r2, [pc, #236]	; (8003ee0 <TIM_Base_SetConfig+0x120>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3a      	ldr	r2, [pc, #232]	; (8003ee4 <TIM_Base_SetConfig+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d108      	bne.n	8003e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a2f      	ldr	r2, [pc, #188]	; (8003ed4 <TIM_Base_SetConfig+0x114>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d02b      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d027      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <TIM_Base_SetConfig+0x118>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d023      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2b      	ldr	r2, [pc, #172]	; (8003edc <TIM_Base_SetConfig+0x11c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01f      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <TIM_Base_SetConfig+0x120>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01b      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <TIM_Base_SetConfig+0x124>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d017      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a28      	ldr	r2, [pc, #160]	; (8003ee8 <TIM_Base_SetConfig+0x128>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <TIM_Base_SetConfig+0x12c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00f      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <TIM_Base_SetConfig+0x130>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00b      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <TIM_Base_SetConfig+0x134>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <TIM_Base_SetConfig+0x138>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <TIM_Base_SetConfig+0x13c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d108      	bne.n	8003e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <TIM_Base_SetConfig+0x114>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0xf8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <TIM_Base_SetConfig+0x124>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d103      	bne.n	8003ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40010400 	.word	0x40010400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800
 8003ef4:	40001800 	.word	0x40001800
 8003ef8:	40001c00 	.word	0x40001c00
 8003efc:	40002000 	.word	0x40002000

08003f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 0302 	bic.w	r3, r3, #2
 8003f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <TIM_OC1_SetConfig+0xd8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC1_SetConfig+0x64>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <TIM_OC1_SetConfig+0xdc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10c      	bne.n	8003f7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0308 	bic.w	r3, r3, #8
 8003f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <TIM_OC1_SetConfig+0xd8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_OC1_SetConfig+0x8e>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <TIM_OC1_SetConfig+0xdc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d111      	bne.n	8003fb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	621a      	str	r2, [r3, #32]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f023 0210 	bic.w	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0320 	bic.w	r3, r3, #32
 800402a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <TIM_OC2_SetConfig+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_OC2_SetConfig+0x68>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <TIM_OC2_SetConfig+0xe8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10d      	bne.n	8004064 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <TIM_OC2_SetConfig+0xe4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_OC2_SetConfig+0x94>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <TIM_OC2_SetConfig+0xe8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d113      	bne.n	800409c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a21      	ldr	r2, [pc, #132]	; (80041ac <TIM_OC3_SetConfig+0xe0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_OC3_SetConfig+0x66>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a20      	ldr	r2, [pc, #128]	; (80041b0 <TIM_OC3_SetConfig+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10d      	bne.n	800414e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800414c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a16      	ldr	r2, [pc, #88]	; (80041ac <TIM_OC3_SetConfig+0xe0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC3_SetConfig+0x92>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <TIM_OC3_SetConfig+0xe4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40010400 	.word	0x40010400

080041b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <TIM_OC4_SetConfig+0xa4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_OC4_SetConfig+0x68>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <TIM_OC4_SetConfig+0xa8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d109      	bne.n	8004230 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	019b      	lsls	r3, r3, #6
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40010400 	.word	0x40010400

08004260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 030a 	bic.w	r3, r3, #10
 800429c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f023 0210 	bic.w	r2, r3, #16
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	031b      	lsls	r3, r3, #12
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	f043 0307 	orr.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800436e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	021a      	lsls	r2, r3, #8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	431a      	orrs	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	609a      	str	r2, [r3, #8]
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2201      	movs	r2, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	401a      	ands	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e032      	b.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	4313      	orrs	r3, r2
 8004438:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004480:	2302      	movs	r3, #2
 8004482:	e03d      	b.n	8004500 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004534:	b084      	sub	sp, #16
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	f107 001c 	add.w	r0, r7, #28
 8004542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d122      	bne.n	8004592 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f001 fa7c 	bl	8005a84 <USB_CoreReset>
 800458c:	4603      	mov	r3, r0
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e01a      	b.n	80045c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 fa70 	bl	8005a84 <USB_CoreReset>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ba:	e005      	b.n	80045c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10b      	bne.n	80045e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f043 0206 	orr.w	r2, r3, #6
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045f2:	b004      	add	sp, #16
 80045f4:	4770      	bx	lr
	...

080045f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d165      	bne.n	80046d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4a41      	ldr	r2, [pc, #260]	; (8004714 <USB_SetTurnaroundTime+0x11c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d906      	bls.n	8004622 <USB_SetTurnaroundTime+0x2a>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a40      	ldr	r2, [pc, #256]	; (8004718 <USB_SetTurnaroundTime+0x120>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d802      	bhi.n	8004622 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800461c:	230f      	movs	r3, #15
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e062      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a3c      	ldr	r2, [pc, #240]	; (8004718 <USB_SetTurnaroundTime+0x120>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d906      	bls.n	8004638 <USB_SetTurnaroundTime+0x40>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a3b      	ldr	r2, [pc, #236]	; (800471c <USB_SetTurnaroundTime+0x124>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d802      	bhi.n	8004638 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004632:	230e      	movs	r3, #14
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e057      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4a38      	ldr	r2, [pc, #224]	; (800471c <USB_SetTurnaroundTime+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d906      	bls.n	800464e <USB_SetTurnaroundTime+0x56>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a37      	ldr	r2, [pc, #220]	; (8004720 <USB_SetTurnaroundTime+0x128>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d802      	bhi.n	800464e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004648:	230d      	movs	r3, #13
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e04c      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4a33      	ldr	r2, [pc, #204]	; (8004720 <USB_SetTurnaroundTime+0x128>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d906      	bls.n	8004664 <USB_SetTurnaroundTime+0x6c>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a32      	ldr	r2, [pc, #200]	; (8004724 <USB_SetTurnaroundTime+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d802      	bhi.n	8004664 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800465e:	230c      	movs	r3, #12
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e041      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <USB_SetTurnaroundTime+0x12c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d906      	bls.n	800467a <USB_SetTurnaroundTime+0x82>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a2e      	ldr	r2, [pc, #184]	; (8004728 <USB_SetTurnaroundTime+0x130>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d802      	bhi.n	800467a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004674:	230b      	movs	r3, #11
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e036      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <USB_SetTurnaroundTime+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d906      	bls.n	8004690 <USB_SetTurnaroundTime+0x98>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a29      	ldr	r2, [pc, #164]	; (800472c <USB_SetTurnaroundTime+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d802      	bhi.n	8004690 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800468a:	230a      	movs	r3, #10
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e02b      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4a26      	ldr	r2, [pc, #152]	; (800472c <USB_SetTurnaroundTime+0x134>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d906      	bls.n	80046a6 <USB_SetTurnaroundTime+0xae>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a25      	ldr	r2, [pc, #148]	; (8004730 <USB_SetTurnaroundTime+0x138>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d802      	bhi.n	80046a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046a0:	2309      	movs	r3, #9
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e020      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <USB_SetTurnaroundTime+0x138>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d906      	bls.n	80046bc <USB_SetTurnaroundTime+0xc4>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <USB_SetTurnaroundTime+0x13c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d802      	bhi.n	80046bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046b6:	2308      	movs	r3, #8
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	e015      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <USB_SetTurnaroundTime+0x13c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d906      	bls.n	80046d2 <USB_SetTurnaroundTime+0xda>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <USB_SetTurnaroundTime+0x140>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d802      	bhi.n	80046d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046cc:	2307      	movs	r3, #7
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e00a      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046d2:	2306      	movs	r3, #6
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e007      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046de:	2309      	movs	r3, #9
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e001      	b.n	80046e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046e4:	2309      	movs	r3, #9
 80046e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	00d8acbf 	.word	0x00d8acbf
 8004718:	00e4e1bf 	.word	0x00e4e1bf
 800471c:	00f423ff 	.word	0x00f423ff
 8004720:	0106737f 	.word	0x0106737f
 8004724:	011a499f 	.word	0x011a499f
 8004728:	01312cff 	.word	0x01312cff
 800472c:	014ca43f 	.word	0x014ca43f
 8004730:	016e35ff 	.word	0x016e35ff
 8004734:	01a6ab1f 	.word	0x01a6ab1f
 8004738:	01e847ff 	.word	0x01e847ff

0800473c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	e00b      	b.n	80047c4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	e001      	b.n	80047c4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e003      	b.n	80047cc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047c4:	2032      	movs	r0, #50	; 0x32
 80047c6:	f7fb ff4d 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d4:	b084      	sub	sp, #16
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	e009      	b.n	8004808 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3340      	adds	r3, #64	; 0x40
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3301      	adds	r3, #1
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b0e      	cmp	r3, #14
 800480c:	d9f2      	bls.n	80047f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d112      	bne.n	800483a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
 8004838:	e00b      	b.n	8004852 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004858:	461a      	mov	r2, r3
 800485a:	2300      	movs	r3, #0
 800485c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	4619      	mov	r1, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486c:	461a      	mov	r2, r3
 800486e:	680b      	ldr	r3, [r1, #0]
 8004870:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10c      	bne.n	8004892 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f961 	bl	8004b48 <USB_SetDevSpeed>
 8004886:	e008      	b.n	800489a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004888:	2101      	movs	r1, #1
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f95c 	bl	8004b48 <USB_SetDevSpeed>
 8004890:	e003      	b.n	800489a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004892:	2103      	movs	r1, #3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f957 	bl	8004b48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800489a:	2110      	movs	r1, #16
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f90b 	bl	8004ab8 <USB_FlushTxFifo>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f929 	bl	8004b04 <USB_FlushRxFifo>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	461a      	mov	r2, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	461a      	mov	r2, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	461a      	mov	r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	e043      	b.n	800496e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048fc:	d118      	bne.n	8004930 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	461a      	mov	r2, r3
 8004912:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	e013      	b.n	8004942 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	461a      	mov	r2, r3
 8004928:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e008      	b.n	8004942 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	461a      	mov	r2, r3
 8004950:	2300      	movs	r3, #0
 8004952:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004966:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	3301      	adds	r3, #1
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d3b7      	bcc.n	80048e6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e043      	b.n	8004a04 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800498e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004992:	d118      	bne.n	80049c6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e013      	b.n	80049d8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	461a      	mov	r2, r3
 80049be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e008      	b.n	80049d8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	461a      	mov	r2, r3
 80049d4:	2300      	movs	r3, #0
 80049d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	3301      	adds	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d3b7      	bcc.n	800497c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a1e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d111      	bne.n	8004a4a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <USB_DevInit+0x2dc>)
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	f043 0303 	orr.w	r3, r3, #3
 8004a48:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f043 0210 	orr.w	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <USB_DevInit+0x2e0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f043 0208 	orr.w	r2, r3, #8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aaa:	b004      	add	sp, #16
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	00800100 	.word	0x00800100
 8004ab4:	803c3800 	.word	0x803c3800

08004ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <USB_FlushTxFifo+0x48>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d0f0      	beq.n	8004ad2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	00030d40 	.word	0x00030d40

08004b04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2210      	movs	r2, #16
 8004b14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <USB_FlushRxFifo+0x40>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e006      	b.n	8004b36 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d0f0      	beq.n	8004b16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	00030d40 	.word	0x00030d40

08004b48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0306 	and.w	r3, r3, #6
 8004b92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]
 8004b9e:	e00a      	b.n	8004bb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d002      	beq.n	8004bac <USB_GetDevSpeed+0x32>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b06      	cmp	r3, #6
 8004baa:	d102      	bne.n	8004bb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bac:	2302      	movs	r3, #2
 8004bae:	75fb      	strb	r3, [r7, #23]
 8004bb0:	e001      	b.n	8004bb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bb2:	230f      	movs	r3, #15
 8004bb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d13a      	bne.n	8004c56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d155      	bne.n	8004cc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	78db      	ldrb	r3, [r3, #3]
 8004c32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	059b      	lsls	r3, r3, #22
 8004c3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e036      	b.n	8004cc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	2101      	movs	r1, #1
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d11a      	bne.n	8004cc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004caa:	430b      	orrs	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d135      	bne.n	8004d5c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d10:	4013      	ands	r3, r2
 8004d12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d34:	4013      	ands	r3, r2
 8004d36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	0159      	lsls	r1, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	440b      	add	r3, r1
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	4619      	mov	r1, r3
 8004d54:	4b1f      	ldr	r3, [pc, #124]	; (8004dd4 <USB_DeactivateEndpoint+0x100>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]
 8004d5a:	e034      	b.n	8004dc6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	43db      	mvns	r3, r3
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da0:	4013      	ands	r3, r2
 8004da2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	0159      	lsls	r1, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	440b      	add	r3, r1
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <USB_DeactivateEndpoint+0x104>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	ec337800 	.word	0xec337800
 8004dd8:	eff37800 	.word	0xeff37800

08004ddc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	; 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	f040 815c 	bne.w	80050b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d132      	bne.n	8004e6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	0cdb      	lsrs	r3, r3, #19
 8004e66:	04db      	lsls	r3, r3, #19
 8004e68:	6113      	str	r3, [r2, #16]
 8004e6a:	e074      	b.n	8004f56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e86:	0cdb      	lsrs	r3, r3, #19
 8004e88:	04db      	lsls	r3, r3, #19
 8004e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6959      	ldr	r1, [r3, #20]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	440b      	add	r3, r1
 8004ec8:	1e59      	subs	r1, r3, #1
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ed2:	04d9      	lsls	r1, r3, #19
 8004ed4:	4b9d      	ldr	r3, [pc, #628]	; (800514c <USB_EPStartXfer+0x370>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	0148      	lsls	r0, r1, #5
 8004edc:	69f9      	ldr	r1, [r7, #28]
 8004ede:	4401      	add	r1, r0
 8004ee0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efe:	69b9      	ldr	r1, [r7, #24]
 8004f00:	0148      	lsls	r0, r1, #5
 8004f02:	69f9      	ldr	r1, [r7, #28]
 8004f04:	4401      	add	r1, r0
 8004f06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	78db      	ldrb	r3, [r3, #3]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d11f      	bne.n	8004f56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d14b      	bne.n	8004ff4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	461a      	mov	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	78db      	ldrb	r3, [r3, #3]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d128      	bne.n	8004fd2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d110      	bne.n	8004fb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e00f      	b.n	8004fd2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e12f      	b.n	8005254 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005012:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	78db      	ldrb	r3, [r3, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d015      	beq.n	8005048 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8117 	beq.w	8005254 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005042:	4313      	orrs	r3, r2
 8005044:	634b      	str	r3, [r1, #52]	; 0x34
 8005046:	e105      	b.n	8005254 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d110      	bne.n	800507a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e00f      	b.n	800509a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	68d9      	ldr	r1, [r3, #12]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	b298      	uxth	r0, r3
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4603      	mov	r3, r0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fa2b 	bl	800550a <USB_WritePacket>
 80050b4:	e0ce      	b.n	8005254 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d0:	0cdb      	lsrs	r3, r3, #19
 80050d2:	04db      	lsls	r3, r3, #19
 80050d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d126      	bne.n	8005150 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	0148      	lsls	r0, r1, #5
 800511c:	69f9      	ldr	r1, [r7, #28]
 800511e:	4401      	add	r1, r0
 8005120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005124:	4313      	orrs	r3, r2
 8005126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005146:	6113      	str	r3, [r2, #16]
 8005148:	e036      	b.n	80051b8 <USB_EPStartXfer+0x3dc>
 800514a:	bf00      	nop
 800514c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4413      	add	r3, r2
 800515a:	1e5a      	subs	r2, r3, #1
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	8afb      	ldrh	r3, [r7, #22]
 8005176:	04d9      	lsls	r1, r3, #19
 8005178:	4b39      	ldr	r3, [pc, #228]	; (8005260 <USB_EPStartXfer+0x484>)
 800517a:	400b      	ands	r3, r1
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	4401      	add	r1, r0
 8005184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	8af9      	ldrh	r1, [r7, #22]
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a8:	69b9      	ldr	r1, [r7, #24]
 80051aa:	0148      	lsls	r0, r1, #5
 80051ac:	69f9      	ldr	r1, [r7, #28]
 80051ae:	4401      	add	r1, r0
 80051b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10d      	bne.n	80051da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68d9      	ldr	r1, [r3, #12]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	460a      	mov	r2, r1
 80051d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d128      	bne.n	8005234 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d110      	bne.n	8005214 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e00f      	b.n	8005234 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005232:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	1ff80000 	.word	0x1ff80000

08005264 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b01      	cmp	r3, #1
 8005282:	f040 80cd 	bne.w	8005420 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d132      	bne.n	80052f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	0cdb      	lsrs	r3, r3, #19
 80052ee:	04db      	lsls	r3, r3, #19
 80052f0:	6113      	str	r3, [r2, #16]
 80052f2:	e04e      	b.n	8005392 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530e:	0cdb      	lsrs	r3, r3, #19
 8005310:	04db      	lsls	r3, r3, #19
 8005312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005332:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005336:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	d903      	bls.n	800534c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800536a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005382:	6939      	ldr	r1, [r7, #16]
 8005384:	0148      	lsls	r0, r1, #5
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	4401      	add	r1, r0
 800538a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800538e:	4313      	orrs	r3, r2
 8005390:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d11e      	bne.n	80053d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	461a      	mov	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e092      	b.n	80054fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d07e      	beq.n	80054fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	2101      	movs	r1, #1
 8005410:	fa01 f303 	lsl.w	r3, r1, r3
 8005414:	6979      	ldr	r1, [r7, #20]
 8005416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541a:	4313      	orrs	r3, r2
 800541c:	634b      	str	r3, [r1, #52]	; 0x34
 800541e:	e06d      	b.n	80054fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543a:	0cdb      	lsrs	r3, r3, #19
 800543c:	04db      	lsls	r3, r3, #19
 800543e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800545e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005462:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054aa:	6939      	ldr	r1, [r7, #16]
 80054ac:	0148      	lsls	r0, r1, #5
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	4401      	add	r1, r0
 80054b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054b6:	4313      	orrs	r3, r2
 80054b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10d      	bne.n	80054dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68d9      	ldr	r1, [r3, #12]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	460a      	mov	r2, r1
 80054da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800550a:	b480      	push	{r7}
 800550c:	b089      	sub	sp, #36	; 0x24
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	4611      	mov	r1, r2
 8005516:	461a      	mov	r2, r3
 8005518:	460b      	mov	r3, r1
 800551a:	71fb      	strb	r3, [r7, #7]
 800551c:	4613      	mov	r3, r2
 800551e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005528:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11a      	bne.n	8005566 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005530:	88bb      	ldrh	r3, [r7, #4]
 8005532:	3303      	adds	r3, #3
 8005534:	089b      	lsrs	r3, r3, #2
 8005536:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e00f      	b.n	800555e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	031a      	lsls	r2, r3, #12
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554a:	461a      	mov	r2, r3
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3304      	adds	r3, #4
 8005556:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	3301      	adds	r3, #1
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	d3eb      	bcc.n	800553e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3724      	adds	r7, #36	; 0x24
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	3303      	adds	r3, #3
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e00b      	b.n	80055b0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	3304      	adds	r3, #4
 80055a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3ef      	bcc.n	8005598 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80055b8:	69fb      	ldr	r3, [r7, #28]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d12c      	bne.n	800563c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	db12      	blt.n	800561a <USB_EPSetStall+0x54>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00f      	beq.n	800561a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005618:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e02b      	b.n	8005694 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	db12      	blt.n	8005674 <USB_EPSetStall+0xae>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00f      	beq.n	8005674 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005672:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d128      	bne.n	8005710 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	78db      	ldrb	r3, [r3, #3]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d003      	beq.n	80056ee <USB_EPClearStall+0x4c>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d138      	bne.n	8005760 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e027      	b.n	8005760 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800572e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	78db      	ldrb	r3, [r3, #3]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d003      	beq.n	8005740 <USB_EPClearStall+0x9e>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d10f      	bne.n	8005760 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005790:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d4:	f023 0302 	bic.w	r3, r3, #2
 80057d8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80057da:	2003      	movs	r0, #3
 80057dc:	f7fa ff42 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005804:	f043 0302 	orr.w	r3, r3, #2
 8005808:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800580a:	2003      	movs	r0, #3
 800580c:	f7fa ff2a 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4013      	ands	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005832:	68fb      	ldr	r3, [r7, #12]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	0c1b      	lsrs	r3, r3, #16
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	b29b      	uxth	r3, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058d6:	68bb      	ldr	r3, [r7, #8]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
 8005914:	01db      	lsls	r3, r3, #7
 8005916:	b2db      	uxtb	r3, r3
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4013      	ands	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005932:	68bb      	ldr	r3, [r7, #8]
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f003 0301 	and.w	r3, r3, #1
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0306 	and.w	r3, r3, #6
 800598c:	2b04      	cmp	r3, #4
 800598e:	d109      	bne.n	80059a4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599e:	f043 0303 	orr.w	r3, r3, #3
 80059a2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	460b      	mov	r3, r1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	333c      	adds	r3, #60	; 0x3c
 80059de:	3304      	adds	r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <USB_EP0_OutStart+0xb8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d90a      	bls.n	8005a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059fc:	d101      	bne.n	8005a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e037      	b.n	8005a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f043 0318 	orr.w	r3, r3, #24
 8005a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	4f54300a 	.word	0x4f54300a

08005a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <USB_CoreReset+0x64>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e01b      	b.n	8005ada <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	daf2      	bge.n	8005a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f043 0201 	orr.w	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <USB_CoreReset+0x64>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e006      	b.n	8005ada <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d0f0      	beq.n	8005aba <USB_CoreReset+0x36>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	00030d40 	.word	0x00030d40

08005aec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	7c1b      	ldrb	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d115      	bne.n	8005b30 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b08:	2202      	movs	r2, #2
 8005b0a:	2181      	movs	r1, #129	; 0x81
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fd38 	bl	8008582 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	2101      	movs	r1, #1
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f002 fd2e 	bl	8008582 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005b2e:	e012      	b.n	8005b56 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	2202      	movs	r2, #2
 8005b34:	2181      	movs	r1, #129	; 0x81
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f002 fd23 	bl	8008582 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b42:	2340      	movs	r3, #64	; 0x40
 8005b44:	2202      	movs	r2, #2
 8005b46:	2101      	movs	r1, #1
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f002 fd1a 	bl	8008582 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b56:	2308      	movs	r3, #8
 8005b58:	2203      	movs	r2, #3
 8005b5a:	2182      	movs	r1, #130	; 0x82
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f002 fd10 	bl	8008582 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005b68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b6c:	f002 ffbe 	bl	8008aec <malloc>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	e026      	b.n	8005bd8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005b90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7c1b      	ldrb	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f002 fdcf 	bl	8008764 <USBD_LL_PrepareReceive>
 8005bc6:	e007      	b.n	8005bd8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bce:	2340      	movs	r3, #64	; 0x40
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f002 fdc6 	bl	8008764 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005bf2:	2181      	movs	r1, #129	; 0x81
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f002 fcea 	bl	80085ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c00:	2101      	movs	r1, #1
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f002 fce3 	bl	80085ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c10:	2182      	movs	r1, #130	; 0x82
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f002 fcdb 	bl	80085ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00e      	beq.n	8005c46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f002 ff5f 	bl	8008afc <free>
    pdev->pClassData = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d039      	beq.n	8005cee <USBD_CDC_Setup+0x9e>
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d17c      	bne.n	8005d78 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	88db      	ldrh	r3, [r3, #6]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d029      	beq.n	8005cda <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b25b      	sxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da11      	bge.n	8005cb4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005c9c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	88d2      	ldrh	r2, [r2, #6]
 8005ca2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005ca4:	6939      	ldr	r1, [r7, #16]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	88db      	ldrh	r3, [r3, #6]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 f9c9 	bl	8007044 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005cb2:	e068      	b.n	8005d86 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	785a      	ldrb	r2, [r3, #1]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	88db      	ldrh	r3, [r3, #6]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005cca:	6939      	ldr	r1, [r7, #16]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	88db      	ldrh	r3, [r3, #6]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 f9e4 	bl	80070a0 <USBD_CtlPrepareRx>
    break;
 8005cd8:	e055      	b.n	8005d86 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	7850      	ldrb	r0, [r2, #1]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	4798      	blx	r3
    break;
 8005cec:	e04b      	b.n	8005d86 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b0a      	cmp	r3, #10
 8005cf4:	d017      	beq.n	8005d26 <USBD_CDC_Setup+0xd6>
 8005cf6:	2b0b      	cmp	r3, #11
 8005cf8:	d029      	beq.n	8005d4e <USBD_CDC_Setup+0xfe>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d133      	bne.n	8005d66 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d107      	bne.n	8005d18 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 f997 	bl	8007044 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005d16:	e02e      	b.n	8005d76 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 f927 	bl	8006f6e <USBD_CtlError>
			  ret = USBD_FAIL;
 8005d20:	2302      	movs	r3, #2
 8005d22:	75fb      	strb	r3, [r7, #23]
      break;
 8005d24:	e027      	b.n	8005d76 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d107      	bne.n	8005d40 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005d30:	f107 030f 	add.w	r3, r7, #15
 8005d34:	2201      	movs	r2, #1
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f983 	bl	8007044 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005d3e:	e01a      	b.n	8005d76 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 f913 	bl	8006f6e <USBD_CtlError>
			  ret = USBD_FAIL;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4c:	e013      	b.n	8005d76 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d00d      	beq.n	8005d74 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 f907 	bl	8006f6e <USBD_CtlError>
			  ret = USBD_FAIL;
 8005d60:	2302      	movs	r3, #2
 8005d62:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005d64:	e006      	b.n	8005d74 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f900 	bl	8006f6e <USBD_CtlError>
      ret = USBD_FAIL;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	75fb      	strb	r3, [r7, #23]
      break;
 8005d72:	e000      	b.n	8005d76 <USBD_CDC_Setup+0x126>
      break;
 8005d74:	bf00      	nop
    }
    break;
 8005d76:	e006      	b.n	8005d86 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 f8f7 	bl	8006f6e <USBD_CtlError>
    ret = USBD_FAIL;
 8005d80:	2302      	movs	r3, #2
 8005d82:	75fb      	strb	r3, [r7, #23]
    break;
 8005d84:	bf00      	nop
  }

  return ret;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005da2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005daa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d03a      	beq.n	8005e2c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	331c      	adds	r3, #28
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d029      	beq.n	8005e20 <USBD_CDC_DataIn+0x90>
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	331c      	adds	r3, #28
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	78f9      	ldrb	r1, [r7, #3]
 8005de0:	68b8      	ldr	r0, [r7, #8]
 8005de2:	460b      	mov	r3, r1
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	1a5b      	subs	r3, r3, r1
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4403      	add	r3, r0
 8005dec:	3344      	adds	r3, #68	; 0x44
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005df4:	fb03 f301 	mul.w	r3, r3, r1
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d110      	bne.n	8005e20 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	331c      	adds	r3, #28
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005e12:	78f9      	ldrb	r1, [r7, #3]
 8005e14:	2300      	movs	r3, #0
 8005e16:	2200      	movs	r2, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f002 fc80 	bl	800871e <USBD_LL_Transmit>
 8005e1e:	e003      	b.n	8005e28 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e000      	b.n	8005e2e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005e2c:	2302      	movs	r3, #2
  }
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f002 fcab 	bl	80087aa <USBD_LL_GetRxDataSize>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	4798      	blx	r3

    return USBD_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005e82:	2302      	movs	r3, #2
  }
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e9a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d015      	beq.n	8005ed2 <USBD_CDC_EP0_RxReady+0x46>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005eac:	2bff      	cmp	r3, #255	; 0xff
 8005eae:	d010      	beq.n	8005ed2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005ebe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ec6:	b292      	uxth	r2, r2
 8005ec8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2243      	movs	r2, #67	; 0x43
 8005ee8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005eea:	4b03      	ldr	r3, [pc, #12]	; (8005ef8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	20000090 	.word	0x20000090

08005efc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2243      	movs	r2, #67	; 0x43
 8005f08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005f0a:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	2000004c 	.word	0x2000004c

08005f1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2243      	movs	r2, #67	; 0x43
 8005f28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005f2a:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	200000d4 	.word	0x200000d4

08005f3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	220a      	movs	r2, #10
 8005f48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005f4a:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	20000008 	.word	0x20000008

08005f5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	4613      	mov	r3, r2
 8005f96:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f9e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005fa8:	88fa      	ldrh	r2, [r7, #6]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ff4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01c      	beq.n	800603a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006006:	2b00      	cmp	r3, #0
 8006008:	d115      	bne.n	8006036 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006028:	b29b      	uxth	r3, r3
 800602a:	2181      	movs	r1, #129	; 0x81
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 fb76 	bl	800871e <USBD_LL_Transmit>

      return USBD_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e002      	b.n	800603c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006052:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800605a:	2b00      	cmp	r3, #0
 800605c:	d017      	beq.n	800608e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	7c1b      	ldrb	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800606c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006070:	2101      	movs	r1, #1
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f002 fb76 	bl	8008764 <USBD_LL_PrepareReceive>
 8006078:	e007      	b.n	800608a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	2101      	movs	r1, #1
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f002 fb6d 	bl	8008764 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e01a      	b.n	80060e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	79fa      	ldrb	r2, [r7, #7]
 80060dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f002 f9e8 	bl	80084b4 <USBD_LL_Init>

  return USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e001      	b.n	8006114 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006110:	2302      	movs	r3, #2
 8006112:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f002 fa0e 	bl	800854c <USBD_LL_Start>

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800615c:	2302      	movs	r3, #2
 800615e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	4611      	mov	r1, r2
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	78fa      	ldrb	r2, [r7, #3]
 80061a4:	4611      	mov	r1, r2
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fe94 	bl	8006ef4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d00c      	beq.n	800620a <USBD_LL_SetupStage+0x56>
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d302      	bcc.n	80061fa <USBD_LL_SetupStage+0x46>
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d010      	beq.n	800621a <USBD_LL_SetupStage+0x66>
 80061f8:	e017      	b.n	800622a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa04 	bl	8006610 <USBD_StdDevReq>
    break;
 8006208:	e01a      	b.n	8006240 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa66 	bl	80066e4 <USBD_StdItfReq>
    break;
 8006218:	e012      	b.n	8006240 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 faa4 	bl	8006770 <USBD_StdEPReq>
    break;
 8006228:	e00a      	b.n	8006240 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006230:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006234:	b2db      	uxtb	r3, r3
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f002 f9e7 	bl	800860c <USBD_LL_StallEP>
    break;
 800623e:	bf00      	nop
  }

  return USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	460b      	mov	r3, r1
 8006254:	607a      	str	r2, [r7, #4]
 8006256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d14b      	bne.n	80062f6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006264:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800626c:	2b03      	cmp	r3, #3
 800626e:	d134      	bne.n	80062da <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d919      	bls.n	80062b0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006292:	429a      	cmp	r2, r3
 8006294:	d203      	bcs.n	800629e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800629a:	b29b      	uxth	r3, r3
 800629c:	e002      	b.n	80062a4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 ff17 	bl	80070dc <USBD_CtlContinueRx>
 80062ae:	e038      	b.n	8006322 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d105      	bne.n	80062d2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 ff14 	bl	8007100 <USBD_CtlSendStatus>
 80062d8:	e023      	b.n	8006322 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	d11e      	bne.n	8006322 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80062ec:	2100      	movs	r1, #0
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f002 f98c 	bl	800860c <USBD_LL_StallEP>
 80062f4:	e015      	b.n	8006322 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00d      	beq.n	800631e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006308:	2b03      	cmp	r3, #3
 800630a:	d108      	bne.n	800631e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	7afa      	ldrb	r2, [r7, #11]
 8006316:	4611      	mov	r1, r2
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	4798      	blx	r3
 800631c:	e001      	b.n	8006322 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800631e:	2302      	movs	r3, #2
 8006320:	e000      	b.n	8006324 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	460b      	mov	r3, r1
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d17f      	bne.n	8006440 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3314      	adds	r3, #20
 8006344:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800634c:	2b02      	cmp	r3, #2
 800634e:	d15c      	bne.n	800640a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d915      	bls.n	8006388 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	1ad2      	subs	r2, r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	b29b      	uxth	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fe81 	bl	800707c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800637a:	2300      	movs	r3, #0
 800637c:	2200      	movs	r2, #0
 800637e:	2100      	movs	r1, #0
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f002 f9ef 	bl	8008764 <USBD_LL_PrepareReceive>
 8006386:	e04e      	b.n	8006426 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	6912      	ldr	r2, [r2, #16]
 8006390:	fbb3 f1f2 	udiv	r1, r3, r2
 8006394:	fb02 f201 	mul.w	r2, r2, r1
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11c      	bne.n	80063d8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d316      	bcc.n	80063d8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d20f      	bcs.n	80063d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fe5d 	bl	800707c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80063ca:	2300      	movs	r3, #0
 80063cc:	2200      	movs	r2, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f002 f9c7 	bl	8008764 <USBD_LL_PrepareReceive>
 80063d6:	e026      	b.n	8006426 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d105      	bne.n	80063fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f002 f905 	bl	800860c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fe8f 	bl	8007126 <USBD_CtlReceiveStatus>
 8006408:	e00d      	b.n	8006426 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006410:	2b04      	cmp	r3, #4
 8006412:	d004      	beq.n	800641e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f002 f8f3 	bl	800860c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800642c:	2b01      	cmp	r3, #1
 800642e:	d11d      	bne.n	800646c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fe82 	bl	800613a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800643e:	e015      	b.n	800646c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006452:	2b03      	cmp	r3, #3
 8006454:	d108      	bne.n	8006468 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	7afa      	ldrb	r2, [r7, #11]
 8006460:	4611      	mov	r1, r2
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	4798      	blx	r3
 8006466:	e001      	b.n	800646c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006468:	2302      	movs	r3, #2
 800646a:	e000      	b.n	800646e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800647e:	2340      	movs	r3, #64	; 0x40
 8006480:	2200      	movs	r2, #0
 8006482:	2100      	movs	r1, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f002 f87c 	bl	8008582 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800649a:	2340      	movs	r3, #64	; 0x40
 800649c:	2200      	movs	r2, #0
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f002 f86e 	bl	8008582 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6852      	ldr	r2, [r2, #4]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	4611      	mov	r1, r2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
  }

  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2204      	movs	r2, #4
 8006530:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006572:	2b03      	cmp	r3, #3
 8006574:	d10b      	bne.n	800658e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b082      	sub	sp, #8
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6852      	ldr	r2, [r2, #4]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	4611      	mov	r1, r2
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3

  return USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006626:	2b20      	cmp	r3, #32
 8006628:	d004      	beq.n	8006634 <USBD_StdDevReq+0x24>
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d002      	beq.n	8006634 <USBD_StdDevReq+0x24>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <USBD_StdDevReq+0x34>
 8006632:	e04c      	b.n	80066ce <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
    break;
 8006642:	e049      	b.n	80066d8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b09      	cmp	r3, #9
 800664a:	d83a      	bhi.n	80066c2 <USBD_StdDevReq+0xb2>
 800664c:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <USBD_StdDevReq+0x44>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	080066a5 	.word	0x080066a5
 8006658:	080066b9 	.word	0x080066b9
 800665c:	080066c3 	.word	0x080066c3
 8006660:	080066af 	.word	0x080066af
 8006664:	080066c3 	.word	0x080066c3
 8006668:	08006687 	.word	0x08006687
 800666c:	0800667d 	.word	0x0800667d
 8006670:	080066c3 	.word	0x080066c3
 8006674:	0800669b 	.word	0x0800669b
 8006678:	08006691 	.word	0x08006691
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9d2 	bl	8006a28 <USBD_GetDescriptor>
      break;
 8006684:	e022      	b.n	80066cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fac7 	bl	8006c1c <USBD_SetAddress>
      break;
 800668e:	e01d      	b.n	80066cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fb04 	bl	8006ca0 <USBD_SetConfig>
      break;
 8006698:	e018      	b.n	80066cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fb8d 	bl	8006dbc <USBD_GetConfig>
      break;
 80066a2:	e013      	b.n	80066cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fbbc 	bl	8006e24 <USBD_GetStatus>
      break;
 80066ac:	e00e      	b.n	80066cc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fbea 	bl	8006e8a <USBD_SetFeature>
      break;
 80066b6:	e009      	b.n	80066cc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fbf9 	bl	8006eb2 <USBD_ClrFeature>
      break;
 80066c0:	e004      	b.n	80066cc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fc52 	bl	8006f6e <USBD_CtlError>
      break;
 80066ca:	bf00      	nop
    }
    break;
 80066cc:	e004      	b.n	80066d8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fc4c 	bl	8006f6e <USBD_CtlError>
    break;
 80066d6:	bf00      	nop
  }

  return ret;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop

080066e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d003      	beq.n	8006706 <USBD_StdItfReq+0x22>
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d001      	beq.n	8006706 <USBD_StdItfReq+0x22>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d12a      	bne.n	800675c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800670c:	3b01      	subs	r3, #1
 800670e:	2b02      	cmp	r3, #2
 8006710:	d81d      	bhi.n	800674e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	889b      	ldrh	r3, [r3, #4]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	d813      	bhi.n	8006744 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	4798      	blx	r3
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	88db      	ldrh	r3, [r3, #6]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d110      	bne.n	8006758 <USBD_StdItfReq+0x74>
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fcdf 	bl	8007100 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006742:	e009      	b.n	8006758 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fc11 	bl	8006f6e <USBD_CtlError>
      break;
 800674c:	e004      	b.n	8006758 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc0c 	bl	8006f6e <USBD_CtlError>
      break;
 8006756:	e000      	b.n	800675a <USBD_StdItfReq+0x76>
      break;
 8006758:	bf00      	nop
    }
    break;
 800675a:	e004      	b.n	8006766 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fc05 	bl	8006f6e <USBD_CtlError>
    break;
 8006764:	bf00      	nop
  }

  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	889b      	ldrh	r3, [r3, #4]
 8006782:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800678c:	2b20      	cmp	r3, #32
 800678e:	d004      	beq.n	800679a <USBD_StdEPReq+0x2a>
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d002      	beq.n	800679a <USBD_StdEPReq+0x2a>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <USBD_StdEPReq+0x3a>
 8006798:	e13b      	b.n	8006a12 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	4798      	blx	r3
    break;
 80067a8:	e138      	b.n	8006a1c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d10a      	bne.n	80067cc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]

      return ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	e128      	b.n	8006a1e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d03e      	beq.n	8006852 <USBD_StdEPReq+0xe2>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d002      	beq.n	80067de <USBD_StdEPReq+0x6e>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d070      	beq.n	80068be <USBD_StdEPReq+0x14e>
 80067dc:	e113      	b.n	8006a06 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d002      	beq.n	80067ee <USBD_StdEPReq+0x7e>
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d015      	beq.n	8006818 <USBD_StdEPReq+0xa8>
 80067ec:	e02b      	b.n	8006846 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <USBD_StdEPReq+0x9e>
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	2b80      	cmp	r3, #128	; 0x80
 80067f8:	d009      	beq.n	800680e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 ff04 	bl	800860c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 ff00 	bl	800860c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800680c:	e020      	b.n	8006850 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fbac 	bl	8006f6e <USBD_CtlError>
        break;
 8006816:	e01b      	b.n	8006850 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	885b      	ldrh	r3, [r3, #2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10e      	bne.n	800683e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <USBD_StdEPReq+0xce>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d008      	beq.n	800683e <USBD_StdEPReq+0xce>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	88db      	ldrh	r3, [r3, #6]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fee7 	bl	800860c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fc5e 	bl	8007100 <USBD_CtlSendStatus>

        break;
 8006844:	e004      	b.n	8006850 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb90 	bl	8006f6e <USBD_CtlError>
        break;
 800684e:	bf00      	nop
      }
      break;
 8006850:	e0de      	b.n	8006a10 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006858:	2b02      	cmp	r3, #2
 800685a:	d002      	beq.n	8006862 <USBD_StdEPReq+0xf2>
 800685c:	2b03      	cmp	r3, #3
 800685e:	d015      	beq.n	800688c <USBD_StdEPReq+0x11c>
 8006860:	e026      	b.n	80068b0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00c      	beq.n	8006882 <USBD_StdEPReq+0x112>
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b80      	cmp	r3, #128	; 0x80
 800686c:	d009      	beq.n	8006882 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 feca 	bl	800860c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fec6 	bl	800860c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006880:	e01c      	b.n	80068bc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb72 	bl	8006f6e <USBD_CtlError>
        break;
 800688a:	e017      	b.n	80068bc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	885b      	ldrh	r3, [r3, #2]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d112      	bne.n	80068ba <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fed1 	bl	800864a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fc29 	bl	8007100 <USBD_CtlSendStatus>
        }
        break;
 80068ae:	e004      	b.n	80068ba <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb5b 	bl	8006f6e <USBD_CtlError>
        break;
 80068b8:	e000      	b.n	80068bc <USBD_StdEPReq+0x14c>
        break;
 80068ba:	bf00      	nop
      }
      break;
 80068bc:	e0a8      	b.n	8006a10 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d002      	beq.n	80068ce <USBD_StdEPReq+0x15e>
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d031      	beq.n	8006930 <USBD_StdEPReq+0x1c0>
 80068cc:	e095      	b.n	80069fa <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <USBD_StdEPReq+0x174>
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	2b80      	cmp	r3, #128	; 0x80
 80068d8:	d004      	beq.n	80068e4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb46 	bl	8006f6e <USBD_CtlError>
          break;
 80068e2:	e08f      	b.n	8006a04 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80068e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	da0b      	bge.n	8006904 <USBD_StdEPReq+0x194>
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	3310      	adds	r3, #16
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	3304      	adds	r3, #4
 8006902:	e00a      	b.n	800691a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4413      	add	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2202      	movs	r2, #2
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fb8b 	bl	8007044 <USBD_CtlSendData>
          break;
 800692e:	e069      	b.n	8006a04 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da11      	bge.n	800695c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	f003 020f 	and.w	r2, r3, #15
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	3318      	adds	r3, #24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d117      	bne.n	8006982 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb0a 	bl	8006f6e <USBD_CtlError>
            break;
 800695a:	e053      	b.n	8006a04 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	f003 020f 	and.w	r2, r3, #15
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 faf7 	bl	8006f6e <USBD_CtlError>
            break;
 8006980:	e040      	b.n	8006a04 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006986:	2b00      	cmp	r3, #0
 8006988:	da0b      	bge.n	80069a2 <USBD_StdEPReq+0x232>
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	3310      	adds	r3, #16
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	3304      	adds	r3, #4
 80069a0:	e00a      	b.n	80069b8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <USBD_StdEPReq+0x256>
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d103      	bne.n	80069ce <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e00e      	b.n	80069ec <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fe58 	bl	8008688 <USBD_LL_IsStallEP>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2201      	movs	r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e002      	b.n	80069ec <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2202      	movs	r2, #2
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fb26 	bl	8007044 <USBD_CtlSendData>
          break;
 80069f8:	e004      	b.n	8006a04 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fab6 	bl	8006f6e <USBD_CtlError>
        break;
 8006a02:	bf00      	nop
      }
      break;
 8006a04:	e004      	b.n	8006a10 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fab0 	bl	8006f6e <USBD_CtlError>
      break;
 8006a0e:	bf00      	nop
    }
    break;
 8006a10:	e004      	b.n	8006a1c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 faaa 	bl	8006f6e <USBD_CtlError>
    break;
 8006a1a:	bf00      	nop
  }

  return ret;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	885b      	ldrh	r3, [r3, #2]
 8006a36:	0a1b      	lsrs	r3, r3, #8
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	2b06      	cmp	r3, #6
 8006a3e:	f200 80c9 	bhi.w	8006bd4 <USBD_GetDescriptor+0x1ac>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <USBD_GetDescriptor+0x20>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a7d 	.word	0x08006a7d
 8006a50:	08006abd 	.word	0x08006abd
 8006a54:	08006bd5 	.word	0x08006bd5
 8006a58:	08006bd5 	.word	0x08006bd5
 8006a5c:	08006b81 	.word	0x08006b81
 8006a60:	08006ba7 	.word	0x08006ba7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	7c12      	ldrb	r2, [r2, #16]
 8006a70:	f107 010a 	add.w	r1, r7, #10
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
 8006a78:	60f8      	str	r0, [r7, #12]
    break;
 8006a7a:	e0b0      	b.n	8006bde <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7c1b      	ldrb	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10d      	bne.n	8006aa0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	f107 020a 	add.w	r2, r7, #10
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006a9e:	e09e      	b.n	8006bde <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	f107 020a 	add.w	r2, r7, #10
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
 8006ab0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	701a      	strb	r2, [r3, #0]
    break;
 8006aba:	e090      	b.n	8006bde <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	885b      	ldrh	r3, [r3, #2]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b05      	cmp	r3, #5
 8006ac4:	d856      	bhi.n	8006b74 <USBD_GetDescriptor+0x14c>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <USBD_GetDescriptor+0xa4>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006ae5 	.word	0x08006ae5
 8006ad0:	08006afd 	.word	0x08006afd
 8006ad4:	08006b15 	.word	0x08006b15
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006b5d 	.word	0x08006b5d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7c12      	ldrb	r2, [r2, #16]
 8006af0:	f107 010a 	add.w	r1, r7, #10
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
 8006af8:	60f8      	str	r0, [r7, #12]
      break;
 8006afa:	e040      	b.n	8006b7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	7c12      	ldrb	r2, [r2, #16]
 8006b08:	f107 010a 	add.w	r1, r7, #10
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4798      	blx	r3
 8006b10:	60f8      	str	r0, [r7, #12]
      break;
 8006b12:	e034      	b.n	8006b7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7c12      	ldrb	r2, [r2, #16]
 8006b20:	f107 010a 	add.w	r1, r7, #10
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
      break;
 8006b2a:	e028      	b.n	8006b7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	f107 010a 	add.w	r1, r7, #10
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
      break;
 8006b42:	e01c      	b.n	8006b7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	7c12      	ldrb	r2, [r2, #16]
 8006b50:	f107 010a 	add.w	r1, r7, #10
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
      break;
 8006b5a:	e010      	b.n	8006b7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	7c12      	ldrb	r2, [r2, #16]
 8006b68:	f107 010a 	add.w	r1, r7, #10
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	60f8      	str	r0, [r7, #12]
      break;
 8006b72:	e004      	b.n	8006b7e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9f9 	bl	8006f6e <USBD_CtlError>
      return;
 8006b7c:	e04b      	b.n	8006c16 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8006b7e:	e02e      	b.n	8006bde <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	7c1b      	ldrb	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b90:	f107 020a 	add.w	r2, r7, #10
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	60f8      	str	r0, [r7, #12]
      break;
 8006b9a:	e020      	b.n	8006bde <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f9e5 	bl	8006f6e <USBD_CtlError>
      return;
 8006ba4:	e037      	b.n	8006c16 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	7c1b      	ldrb	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10d      	bne.n	8006bca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f107 020a 	add.w	r2, r7, #10
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4798      	blx	r3
 8006bbe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	2207      	movs	r2, #7
 8006bc6:	701a      	strb	r2, [r3, #0]
      break;
 8006bc8:	e009      	b.n	8006bde <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f9ce 	bl	8006f6e <USBD_CtlError>
      return;
 8006bd2:	e020      	b.n	8006c16 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9c9 	bl	8006f6e <USBD_CtlError>
    return;
 8006bdc:	e01b      	b.n	8006c16 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006bde:	897b      	ldrh	r3, [r7, #10]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d011      	beq.n	8006c08 <USBD_GetDescriptor+0x1e0>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	88db      	ldrh	r3, [r3, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	88da      	ldrh	r2, [r3, #6]
 8006bf0:	897b      	ldrh	r3, [r7, #10]
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	bf28      	it	cs
 8006bf6:	4613      	movcs	r3, r2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006bfc:	897b      	ldrh	r3, [r7, #10]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68f9      	ldr	r1, [r7, #12]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa1e 	bl	8007044 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	88db      	ldrh	r3, [r3, #6]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa75 	bl	8007100 <USBD_CtlSendStatus>
  }
}
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	889b      	ldrh	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d130      	bne.n	8006c90 <USBD_SetAddress+0x74>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d12c      	bne.n	8006c90 <USBD_SetAddress+0x74>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3c:	d828      	bhi.n	8006c90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d104      	bne.n	8006c5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f989 	bl	8006f6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	e01c      	b.n	8006c98 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fd38 	bl	80086e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa45 	bl	8007100 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c84:	e008      	b.n	8006c98 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	e003      	b.n	8006c98 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f96b 	bl	8006f6e <USBD_CtlError>
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	885b      	ldrh	r3, [r3, #2]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	4b41      	ldr	r3, [pc, #260]	; (8006db8 <USBD_SetConfig+0x118>)
 8006cb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cb4:	4b40      	ldr	r3, [pc, #256]	; (8006db8 <USBD_SetConfig+0x118>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d904      	bls.n	8006cc6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f955 	bl	8006f6e <USBD_CtlError>
 8006cc4:	e075      	b.n	8006db2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d002      	beq.n	8006cd6 <USBD_SetConfig+0x36>
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d023      	beq.n	8006d1c <USBD_SetConfig+0x7c>
 8006cd4:	e062      	b.n	8006d9c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006cd6:	4b38      	ldr	r3, [pc, #224]	; (8006db8 <USBD_SetConfig+0x118>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01a      	beq.n	8006d14 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006cde:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <USBD_SetConfig+0x118>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2203      	movs	r2, #3
 8006cec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cf0:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <USBD_SetConfig+0x118>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fa2a 	bl	8006150 <USBD_SetClassConfig>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d104      	bne.n	8006d0c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f932 	bl	8006f6e <USBD_CtlError>
          return;
 8006d0a:	e052      	b.n	8006db2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9f7 	bl	8007100 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006d12:	e04e      	b.n	8006db2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9f3 	bl	8007100 <USBD_CtlSendStatus>
      break;
 8006d1a:	e04a      	b.n	8006db2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d1c:	4b26      	ldr	r3, [pc, #152]	; (8006db8 <USBD_SetConfig+0x118>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d112      	bne.n	8006d4a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006d2c:	4b22      	ldr	r3, [pc, #136]	; (8006db8 <USBD_SetConfig+0x118>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d36:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <USBD_SetConfig+0x118>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff fa26 	bl	800618e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9dc 	bl	8007100 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006d48:	e033      	b.n	8006db2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <USBD_SetConfig+0x118>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d01d      	beq.n	8006d94 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fa14 	bl	800618e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <USBD_SetConfig+0x118>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d70:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <USBD_SetConfig+0x118>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff f9ea 	bl	8006150 <USBD_SetClassConfig>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d104      	bne.n	8006d8c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f8f2 	bl	8006f6e <USBD_CtlError>
          return;
 8006d8a:	e012      	b.n	8006db2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9b7 	bl	8007100 <USBD_CtlSendStatus>
      break;
 8006d92:	e00e      	b.n	8006db2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f9b3 	bl	8007100 <USBD_CtlSendStatus>
      break;
 8006d9a:	e00a      	b.n	8006db2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f8e5 	bl	8006f6e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <USBD_SetConfig+0x118>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff f9ef 	bl	800618e <USBD_ClrClassConfig>
      break;
 8006db0:	bf00      	nop
    }
  }
}
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	200001fc 	.word	0x200001fc

08006dbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d004      	beq.n	8006dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8cc 	bl	8006f6e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006dd6:	e021      	b.n	8006e1c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	db17      	blt.n	8006e12 <USBD_GetConfig+0x56>
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	dd02      	ble.n	8006dec <USBD_GetConfig+0x30>
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d00b      	beq.n	8006e02 <USBD_GetConfig+0x46>
 8006dea:	e012      	b.n	8006e12 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3308      	adds	r3, #8
 8006df6:	2201      	movs	r2, #1
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f922 	bl	8007044 <USBD_CtlSendData>
      break;
 8006e00:	e00c      	b.n	8006e1c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	2201      	movs	r2, #1
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f91a 	bl	8007044 <USBD_CtlSendData>
      break;
 8006e10:	e004      	b.n	8006e1c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f8aa 	bl	8006f6e <USBD_CtlError>
      break;
 8006e1a:	bf00      	nop
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e34:	3b01      	subs	r3, #1
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d81e      	bhi.n	8006e78 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88db      	ldrh	r3, [r3, #6]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d004      	beq.n	8006e4c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f892 	bl	8006f6e <USBD_CtlError>
      break;
 8006e4a:	e01a      	b.n	8006e82 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f043 0202 	orr.w	r2, r3, #2
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f8e7 	bl	8007044 <USBD_CtlSendData>
    break;
 8006e76:	e004      	b.n	8006e82 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f877 	bl	8006f6e <USBD_CtlError>
    break;
 8006e80:	bf00      	nop
  }
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	885b      	ldrh	r3, [r3, #2]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f92b 	bl	8007100 <USBD_CtlSendStatus>
  }

}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d80b      	bhi.n	8006ee0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	885b      	ldrh	r3, [r3, #2]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d10c      	bne.n	8006eea <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f911 	bl	8007100 <USBD_CtlSendStatus>
    }
    break;
 8006ede:	e004      	b.n	8006eea <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f843 	bl	8006f6e <USBD_CtlError>
    break;
 8006ee8:	e000      	b.n	8006eec <USBD_ClrFeature+0x3a>
    break;
 8006eea:	bf00      	nop
  }
}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	785a      	ldrb	r2, [r3, #1]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	3302      	adds	r3, #2
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	3303      	adds	r3, #3
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	4413      	add	r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	3305      	adds	r3, #5
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	3306      	adds	r3, #6
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	3307      	adds	r3, #7
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	80da      	strh	r2, [r3, #6]

}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006f78:	2180      	movs	r1, #128	; 0x80
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fb46 	bl	800860c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006f80:	2100      	movs	r1, #0
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fb42 	bl	800860c <USBD_LL_StallEP>
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d032      	beq.n	800700c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f834 	bl	8007014 <USBD_GetLen>
 8006fac:	4603      	mov	r3, r0
 8006fae:	3301      	adds	r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	75fa      	strb	r2, [r7, #23]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	7812      	ldrb	r2, [r2, #0]
 8006fca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	75fa      	strb	r2, [r7, #23]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	2203      	movs	r2, #3
 8006fda:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006fdc:	e012      	b.n	8007004 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	60fa      	str	r2, [r7, #12]
 8006fe4:	7dfa      	ldrb	r2, [r7, #23]
 8006fe6:	1c51      	adds	r1, r2, #1
 8006fe8:	75f9      	strb	r1, [r7, #23]
 8006fea:	4611      	mov	r1, r2
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	440a      	add	r2, r1
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	75fa      	strb	r2, [r7, #23]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4413      	add	r3, r2
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e8      	bne.n	8006fde <USBD_GetString+0x4e>
    }
  }
}
 800700c:	bf00      	nop
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007020:	e005      	b.n	800702e <USBD_GetLen+0x1a>
    {
        len++;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	3301      	adds	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3301      	adds	r3, #1
 800702c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f5      	bne.n	8007022 <USBD_GetLen+0xe>
    }

    return len;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2202      	movs	r2, #2
 8007056:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007060:	88fa      	ldrh	r2, [r7, #6]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	2100      	movs	r1, #0
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f001 fb56 	bl	800871e <USBD_LL_Transmit>

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	2100      	movs	r1, #0
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 fb44 	bl	800871e <USBD_LL_Transmit>

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2203      	movs	r2, #3
 80070b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80070b6:	88fa      	ldrh	r2, [r7, #6]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	2100      	movs	r1, #0
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f001 fb49 	bl	8008764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	2100      	movs	r1, #0
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f001 fb37 	bl	8008764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2204      	movs	r2, #4
 800710c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007110:	2300      	movs	r3, #0
 8007112:	2200      	movs	r2, #0
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fb01 	bl	800871e <USBD_LL_Transmit>

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2205      	movs	r2, #5
 8007132:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007136:	2300      	movs	r3, #0
 8007138:	2200      	movs	r2, #0
 800713a:	2100      	movs	r1, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fb11 	bl	8008764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <driveForwards_pwm_setvalue>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void driveForwards_pwm_setvalue(uint16_t value)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007156:	2360      	movs	r3, #96	; 0x60
 8007158:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 800715a:	88fb      	ldrh	r3, [r7, #6]
 800715c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007166:	f107 030c 	add.w	r3, r7, #12
 800716a:	2200      	movs	r2, #0
 800716c:	4619      	mov	r1, r3
 800716e:	4808      	ldr	r0, [pc, #32]	; (8007190 <driveForwards_pwm_setvalue+0x44>)
 8007170:	f7fc fc76 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <driveForwards_pwm_setvalue+0x32>
	{
		Error_Handler();
 800717a:	f000 fc9d 	bl	8007ab8 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800717e:	2100      	movs	r1, #0
 8007180:	4803      	ldr	r0, [pc, #12]	; (8007190 <driveForwards_pwm_setvalue+0x44>)
 8007182:	f7fc fb27 	bl	80037d4 <HAL_TIM_PWM_Start>
}
 8007186:	bf00      	nop
 8007188:	3728      	adds	r7, #40	; 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000210 	.word	0x20000210

08007194 <drive_forward_PWM>:
}



void drive_forward_PWM(uint16_t *pwm_value, int *step)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(BPIN_GPIO_Port, BPIN_Pin, GPIO_PIN_RESET);
 800719e:	2200      	movs	r2, #0
 80071a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071a4:	482e      	ldr	r0, [pc, #184]	; (8007260 <drive_forward_PWM+0xcc>)
 80071a6:	f7f9 fd43 	bl	8000c30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(APIN_GPIO_Port, APIN_Pin, GPIO_PIN_SET);
 80071aa:	2201      	movs	r2, #1
 80071ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071b0:	482b      	ldr	r0, [pc, #172]	; (8007260 <drive_forward_PWM+0xcc>)
 80071b2:	f7f9 fd3d 	bl	8000c30 <HAL_GPIO_WritePin>

	//Car go forward
	if(pwm_value[0] == 0)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <drive_forward_PWM+0x30>
	{
		step[0] = 25;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2219      	movs	r2, #25
 80071c2:	601a      	str	r2, [r3, #0]
	}
	//Car go backward
	if(pwm_value[0] == 2000)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80071cc:	d103      	bne.n	80071d6 <drive_forward_PWM+0x42>
	{
		step[0] = -25;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	f06f 0218 	mvn.w	r2, #24
 80071d4:	601a      	str	r2, [r3, #0]
	}
	pwm_value[0] += step[0];
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	881a      	ldrh	r2, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	4413      	add	r3, r2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	801a      	strh	r2, [r3, #0]

	uint8_t Msg[] = "shieeet\r\n";
 80071e8:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <drive_forward_PWM+0xd0>)
 80071ea:	f107 030c 	add.w	r3, r7, #12
 80071ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80071f0:	c303      	stmia	r3!, {r0, r1}
 80071f2:	801a      	strh	r2, [r3, #0]
	sprintf(Msg, "%d\r\n", pwm_value[0]);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	491a      	ldr	r1, [pc, #104]	; (8007268 <drive_forward_PWM+0xd4>)
 8007200:	4618      	mov	r0, r3
 8007202:	f001 fd43 	bl	8008c8c <siprintf>
	CDC_Transmit_FS(Msg, strlen(Msg));
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	4618      	mov	r0, r3
 800720c:	f7f8 ffe0 	bl	80001d0 <strlen>
 8007210:	4602      	mov	r2, r0
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f000 ffd1 	bl	80081c0 <CDC_Transmit_FS>
	HAL_Delay(10);
 800721e:	200a      	movs	r0, #10
 8007220:	f7f9 fa20 	bl	8000664 <HAL_Delay>

	driveForwards_pwm_setvalue(pwm_value[0]);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff ff8f 	bl	800714c <driveForwards_pwm_setvalue>

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800722e:	2101      	movs	r1, #1
 8007230:	480e      	ldr	r0, [pc, #56]	; (800726c <drive_forward_PWM+0xd8>)
 8007232:	f7f9 fce5 	bl	8000c00 <HAL_GPIO_ReadPin>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <drive_forward_PWM+0xb6>
	{
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800723c:	2201      	movs	r2, #1
 800723e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007242:	4807      	ldr	r0, [pc, #28]	; (8007260 <drive_forward_PWM+0xcc>)
 8007244:	f7f9 fcf4 	bl	8000c30 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
	}
}
 8007248:	e005      	b.n	8007256 <drive_forward_PWM+0xc2>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800724a:	2200      	movs	r2, #0
 800724c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007250:	4803      	ldr	r0, [pc, #12]	; (8007260 <drive_forward_PWM+0xcc>)
 8007252:	f7f9 fced 	bl	8000c30 <HAL_GPIO_WritePin>
}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40020c00 	.word	0x40020c00
 8007264:	08009348 	.word	0x08009348
 8007268:	08009340 	.word	0x08009340
 800726c:	40020000 	.word	0x40020000

08007270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007276:	f7f9 f983 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800727a:	f000 f823 	bl	80072c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800727e:	f000 fb13 	bl	80078a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007282:	f000 f8a1 	bl	80073c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007286:	f000 f8cd 	bl	8007424 <MX_I2S3_Init>
  MX_SPI1_Init();
 800728a:	f000 f8fb 	bl	8007484 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800728e:	f000 fed9 	bl	8008044 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8007292:	f000 fa45 	bl	8007720 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007296:	f000 fa8f 	bl	80077b8 <MX_TIM4_Init>
  MX_TIM2_Init();
 800729a:	f000 f9cb 	bl	8007634 <MX_TIM2_Init>
  MX_TIM1_Init();
 800729e:	f000 f927 	bl	80074f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 80072a2:	4807      	ldr	r0, [pc, #28]	; (80072c0 <main+0x50>)
 80072a4:	f7fc fa3d 	bl	8003722 <HAL_TIM_Base_Start_IT>
	uint16_t pwm_value[1] = {0};
 80072a8:	2300      	movs	r3, #0
 80072aa:	80bb      	strh	r3, [r7, #4]
	int step[1] = {25};
 80072ac:	2319      	movs	r3, #25
 80072ae:	603b      	str	r3, [r7, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		drive_forward_PWM(pwm_value, step);
 80072b0:	463a      	mov	r2, r7
 80072b2:	1d3b      	adds	r3, r7, #4
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff ff6c 	bl	8007194 <drive_forward_PWM>
 80072bc:	e7f8      	b.n	80072b0 <main+0x40>
 80072be:	bf00      	nop
 80072c0:	200002a4 	.word	0x200002a4

080072c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b098      	sub	sp, #96	; 0x60
 80072c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072ce:	2230      	movs	r2, #48	; 0x30
 80072d0:	2100      	movs	r1, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 fc1a 	bl	8008b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072d8:	f107 031c 	add.w	r3, r7, #28
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	60da      	str	r2, [r3, #12]
 80072e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	609a      	str	r2, [r3, #8]
 80072f4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	4b31      	ldr	r3, [pc, #196]	; (80073c0 <SystemClock_Config+0xfc>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	4a30      	ldr	r2, [pc, #192]	; (80073c0 <SystemClock_Config+0xfc>)
 8007300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007304:	6413      	str	r3, [r2, #64]	; 0x40
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <SystemClock_Config+0xfc>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <SystemClock_Config+0x100>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2a      	ldr	r2, [pc, #168]	; (80073c4 <SystemClock_Config+0x100>)
 800731c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <SystemClock_Config+0x100>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732a:	607b      	str	r3, [r7, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800732e:	2301      	movs	r3, #1
 8007330:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007338:	2302      	movs	r3, #2
 800733a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800733c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007342:	2308      	movs	r3, #8
 8007344:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007346:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800734a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800734c:	2302      	movs	r3, #2
 800734e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007350:	2307      	movs	r3, #7
 8007352:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007358:	4618      	mov	r0, r3
 800735a:	f7fb fbf9 	bl	8002b50 <HAL_RCC_OscConfig>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007364:	f000 fba8 	bl	8007ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007368:	230f      	movs	r3, #15
 800736a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800736c:	2302      	movs	r3, #2
 800736e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007370:	2300      	movs	r3, #0
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800737a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007380:	f107 031c 	add.w	r3, r7, #28
 8007384:	2105      	movs	r1, #5
 8007386:	4618      	mov	r0, r3
 8007388:	f7fb fe24 	bl	8002fd4 <HAL_RCC_ClockConfig>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007392:	f000 fb91 	bl	8007ab8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007396:	2301      	movs	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800739a:	23c0      	movs	r3, #192	; 0xc0
 800739c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800739e:	2302      	movs	r3, #2
 80073a0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80073a2:	f107 030c 	add.w	r3, r7, #12
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fb ffee 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80073b2:	f000 fb81 	bl	8007ab8 <Error_Handler>
  }
}
 80073b6:	bf00      	nop
 80073b8:	3760      	adds	r7, #96	; 0x60
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40023800 	.word	0x40023800
 80073c4:	40007000 	.word	0x40007000

080073c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <MX_I2C1_Init+0x50>)
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <MX_I2C1_Init+0x54>)
 80073d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80073d2:	4b11      	ldr	r3, [pc, #68]	; (8007418 <MX_I2C1_Init+0x50>)
 80073d4:	4a12      	ldr	r2, [pc, #72]	; (8007420 <MX_I2C1_Init+0x58>)
 80073d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80073d8:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <MX_I2C1_Init+0x50>)
 80073da:	2200      	movs	r2, #0
 80073dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <MX_I2C1_Init+0x50>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80073e4:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <MX_I2C1_Init+0x50>)
 80073e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <MX_I2C1_Init+0x50>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <MX_I2C1_Init+0x50>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80073f8:	4b07      	ldr	r3, [pc, #28]	; (8007418 <MX_I2C1_Init+0x50>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <MX_I2C1_Init+0x50>)
 8007400:	2200      	movs	r2, #0
 8007402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007404:	4804      	ldr	r0, [pc, #16]	; (8007418 <MX_I2C1_Init+0x50>)
 8007406:	f7f9 fc51 	bl	8000cac <HAL_I2C_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007410:	f000 fb52 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007414:	bf00      	nop
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000250 	.word	0x20000250
 800741c:	40005400 	.word	0x40005400
 8007420:	000186a0 	.word	0x000186a0

08007424 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007428:	4b13      	ldr	r3, [pc, #76]	; (8007478 <MX_I2S3_Init+0x54>)
 800742a:	4a14      	ldr	r2, [pc, #80]	; (800747c <MX_I2S3_Init+0x58>)
 800742c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <MX_I2S3_Init+0x54>)
 8007430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007434:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <MX_I2S3_Init+0x54>)
 8007438:	2200      	movs	r2, #0
 800743a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <MX_I2S3_Init+0x54>)
 800743e:	2200      	movs	r2, #0
 8007440:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007442:	4b0d      	ldr	r3, [pc, #52]	; (8007478 <MX_I2S3_Init+0x54>)
 8007444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007448:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <MX_I2S3_Init+0x54>)
 800744c:	4a0c      	ldr	r2, [pc, #48]	; (8007480 <MX_I2S3_Init+0x5c>)
 800744e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <MX_I2S3_Init+0x54>)
 8007452:	2200      	movs	r2, #0
 8007454:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <MX_I2S3_Init+0x54>)
 8007458:	2200      	movs	r2, #0
 800745a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <MX_I2S3_Init+0x54>)
 800745e:	2200      	movs	r2, #0
 8007460:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007462:	4805      	ldr	r0, [pc, #20]	; (8007478 <MX_I2S3_Init+0x54>)
 8007464:	f7f9 fd4a 	bl	8000efc <HAL_I2S_Init>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800746e:	f000 fb23 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200003bc 	.word	0x200003bc
 800747c:	40003c00 	.word	0x40003c00
 8007480:	00017700 	.word	0x00017700

08007484 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007488:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <MX_SPI1_Init+0x64>)
 800748a:	4a18      	ldr	r2, [pc, #96]	; (80074ec <MX_SPI1_Init+0x68>)
 800748c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <MX_SPI1_Init+0x64>)
 8007490:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <MX_SPI1_Init+0x64>)
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800749c:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <MX_SPI1_Init+0x64>)
 800749e:	2200      	movs	r2, #0
 80074a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074a2:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074a8:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80074ae:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074be:	2200      	movs	r2, #0
 80074c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074d0:	220a      	movs	r2, #10
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074d4:	4804      	ldr	r0, [pc, #16]	; (80074e8 <MX_SPI1_Init+0x64>)
 80074d6:	f7fc f895 	bl	8003604 <HAL_SPI_Init>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80074e0:	f000 faea 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80074e4:	bf00      	nop
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000324 	.word	0x20000324
 80074ec:	40013000 	.word	0x40013000

080074f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b096      	sub	sp, #88	; 0x58
 80074f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	609a      	str	r2, [r3, #8]
 8007502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800750e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	605a      	str	r2, [r3, #4]
 8007518:	609a      	str	r2, [r3, #8]
 800751a:	60da      	str	r2, [r3, #12]
 800751c:	611a      	str	r2, [r3, #16]
 800751e:	615a      	str	r2, [r3, #20]
 8007520:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007522:	1d3b      	adds	r3, r7, #4
 8007524:	2220      	movs	r2, #32
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f001 faef 	bl	8008b0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800752e:	4b3f      	ldr	r3, [pc, #252]	; (800762c <MX_TIM1_Init+0x13c>)
 8007530:	4a3f      	ldr	r2, [pc, #252]	; (8007630 <MX_TIM1_Init+0x140>)
 8007532:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080;
 8007534:	4b3d      	ldr	r3, [pc, #244]	; (800762c <MX_TIM1_Init+0x13c>)
 8007536:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800753a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800753c:	4b3b      	ldr	r3, [pc, #236]	; (800762c <MX_TIM1_Init+0x13c>)
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8007542:	4b3a      	ldr	r3, [pc, #232]	; (800762c <MX_TIM1_Init+0x13c>)
 8007544:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800754a:	4b38      	ldr	r3, [pc, #224]	; (800762c <MX_TIM1_Init+0x13c>)
 800754c:	2200      	movs	r2, #0
 800754e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007550:	4b36      	ldr	r3, [pc, #216]	; (800762c <MX_TIM1_Init+0x13c>)
 8007552:	2200      	movs	r2, #0
 8007554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007556:	4b35      	ldr	r3, [pc, #212]	; (800762c <MX_TIM1_Init+0x13c>)
 8007558:	2200      	movs	r2, #0
 800755a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800755c:	4833      	ldr	r0, [pc, #204]	; (800762c <MX_TIM1_Init+0x13c>)
 800755e:	f7fc f8b5 	bl	80036cc <HAL_TIM_Base_Init>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8007568:	f000 faa6 	bl	8007ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800756c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007570:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007576:	4619      	mov	r1, r3
 8007578:	482c      	ldr	r0, [pc, #176]	; (800762c <MX_TIM1_Init+0x13c>)
 800757a:	f7fc fb37 	bl	8003bec <HAL_TIM_ConfigClockSource>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8007584:	f000 fa98 	bl	8007ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <MX_TIM1_Init+0x13c>)
 800758a:	f7fc f8ee 	bl	800376a <HAL_TIM_PWM_Init>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8007594:	f000 fa90 	bl	8007ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007598:	2300      	movs	r3, #0
 800759a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800759c:	2300      	movs	r3, #0
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80075a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80075a4:	4619      	mov	r1, r3
 80075a6:	4821      	ldr	r0, [pc, #132]	; (800762c <MX_TIM1_Init+0x13c>)
 80075a8:	f7fc ff19 	bl	80043de <HAL_TIMEx_MasterConfigSynchronization>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80075b2:	f000 fa81 	bl	8007ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075b6:	2360      	movs	r3, #96	; 0x60
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075be:	2300      	movs	r3, #0
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80075c2:	2300      	movs	r3, #0
 80075c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80075ca:	2300      	movs	r3, #0
 80075cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80075ce:	2300      	movs	r3, #0
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075d6:	2200      	movs	r2, #0
 80075d8:	4619      	mov	r1, r3
 80075da:	4814      	ldr	r0, [pc, #80]	; (800762c <MX_TIM1_Init+0x13c>)
 80075dc:	f7fc fa40 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80075e6:	f000 fa67 	bl	8007ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80075fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007602:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007604:	2300      	movs	r3, #0
 8007606:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007608:	1d3b      	adds	r3, r7, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4807      	ldr	r0, [pc, #28]	; (800762c <MX_TIM1_Init+0x13c>)
 800760e:	f7fc ff2b 	bl	8004468 <HAL_TIMEx_ConfigBreakDeadTime>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8007618:	f000 fa4e 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800761c:	4803      	ldr	r0, [pc, #12]	; (800762c <MX_TIM1_Init+0x13c>)
 800761e:	f000 fbdb 	bl	8007dd8 <HAL_TIM_MspPostInit>

}
 8007622:	bf00      	nop
 8007624:	3758      	adds	r7, #88	; 0x58
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	200002e4 	.word	0x200002e4
 8007630:	40010000 	.word	0x40010000

08007634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08e      	sub	sp, #56	; 0x38
 8007638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800763a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	609a      	str	r2, [r3, #8]
 8007646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007648:	f107 0320 	add.w	r3, r7, #32
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	60da      	str	r2, [r3, #12]
 800765e:	611a      	str	r2, [r3, #16]
 8007660:	615a      	str	r2, [r3, #20]
 8007662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007664:	4b2d      	ldr	r3, [pc, #180]	; (800771c <MX_TIM2_Init+0xe8>)
 8007666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800766a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080;
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <MX_TIM2_Init+0xe8>)
 800766e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8007672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007674:	4b29      	ldr	r3, [pc, #164]	; (800771c <MX_TIM2_Init+0xe8>)
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800767a:	4b28      	ldr	r3, [pc, #160]	; (800771c <MX_TIM2_Init+0xe8>)
 800767c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007682:	4b26      	ldr	r3, [pc, #152]	; (800771c <MX_TIM2_Init+0xe8>)
 8007684:	2200      	movs	r2, #0
 8007686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007688:	4b24      	ldr	r3, [pc, #144]	; (800771c <MX_TIM2_Init+0xe8>)
 800768a:	2200      	movs	r2, #0
 800768c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800768e:	4823      	ldr	r0, [pc, #140]	; (800771c <MX_TIM2_Init+0xe8>)
 8007690:	f7fc f81c 	bl	80036cc <HAL_TIM_Base_Init>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800769a:	f000 fa0d 	bl	8007ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800769e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80076a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076a8:	4619      	mov	r1, r3
 80076aa:	481c      	ldr	r0, [pc, #112]	; (800771c <MX_TIM2_Init+0xe8>)
 80076ac:	f7fc fa9e 	bl	8003bec <HAL_TIM_ConfigClockSource>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80076b6:	f000 f9ff 	bl	8007ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80076ba:	4818      	ldr	r0, [pc, #96]	; (800771c <MX_TIM2_Init+0xe8>)
 80076bc:	f7fc f855 	bl	800376a <HAL_TIM_PWM_Init>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80076c6:	f000 f9f7 	bl	8007ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076ca:	2300      	movs	r3, #0
 80076cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80076d2:	f107 0320 	add.w	r3, r7, #32
 80076d6:	4619      	mov	r1, r3
 80076d8:	4810      	ldr	r0, [pc, #64]	; (800771c <MX_TIM2_Init+0xe8>)
 80076da:	f7fc fe80 	bl	80043de <HAL_TIMEx_MasterConfigSynchronization>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80076e4:	f000 f9e8 	bl	8007ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076e8:	2360      	movs	r3, #96	; 0x60
 80076ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	2200      	movs	r2, #0
 80076fc:	4619      	mov	r1, r3
 80076fe:	4807      	ldr	r0, [pc, #28]	; (800771c <MX_TIM2_Init+0xe8>)
 8007700:	f7fc f9ae 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800770a:	f000 f9d5 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800770e:	4803      	ldr	r0, [pc, #12]	; (800771c <MX_TIM2_Init+0xe8>)
 8007710:	f000 fb62 	bl	8007dd8 <HAL_TIM_MspPostInit>

}
 8007714:	bf00      	nop
 8007716:	3738      	adds	r7, #56	; 0x38
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	2000037c 	.word	0x2000037c

08007720 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	605a      	str	r2, [r3, #4]
 8007730:	609a      	str	r2, [r3, #8]
 8007732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007734:	463b      	mov	r3, r7
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800773c:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <MX_TIM3_Init+0x90>)
 800773e:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <MX_TIM3_Init+0x94>)
 8007740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007742:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <MX_TIM3_Init+0x90>)
 8007744:	2200      	movs	r2, #0
 8007746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007748:	4b19      	ldr	r3, [pc, #100]	; (80077b0 <MX_TIM3_Init+0x90>)
 800774a:	2200      	movs	r2, #0
 800774c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800774e:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <MX_TIM3_Init+0x90>)
 8007750:	2200      	movs	r2, #0
 8007752:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007754:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <MX_TIM3_Init+0x90>)
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800775a:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <MX_TIM3_Init+0x90>)
 800775c:	2200      	movs	r2, #0
 800775e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007760:	4813      	ldr	r0, [pc, #76]	; (80077b0 <MX_TIM3_Init+0x90>)
 8007762:	f7fb ffb3 	bl	80036cc <HAL_TIM_Base_Init>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800776c:	f000 f9a4 	bl	8007ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4619      	mov	r1, r3
 800777c:	480c      	ldr	r0, [pc, #48]	; (80077b0 <MX_TIM3_Init+0x90>)
 800777e:	f7fc fa35 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8007788:	f000 f996 	bl	8007ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800778c:	2300      	movs	r3, #0
 800778e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007790:	2300      	movs	r3, #0
 8007792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007794:	463b      	mov	r3, r7
 8007796:	4619      	mov	r1, r3
 8007798:	4805      	ldr	r0, [pc, #20]	; (80077b0 <MX_TIM3_Init+0x90>)
 800779a:	f7fc fe20 	bl	80043de <HAL_TIMEx_MasterConfigSynchronization>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80077a4:	f000 f988 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	200002a4 	.word	0x200002a4
 80077b4:	40000400 	.word	0x40000400

080077b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08e      	sub	sp, #56	; 0x38
 80077bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	605a      	str	r2, [r3, #4]
 80077c8:	609a      	str	r2, [r3, #8]
 80077ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077cc:	f107 0320 	add.w	r3, r7, #32
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077d6:	1d3b      	adds	r3, r7, #4
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	605a      	str	r2, [r3, #4]
 80077de:	609a      	str	r2, [r3, #8]
 80077e0:	60da      	str	r2, [r3, #12]
 80077e2:	611a      	str	r2, [r3, #16]
 80077e4:	615a      	str	r2, [r3, #20]
 80077e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80077e8:	4b2d      	ldr	r3, [pc, #180]	; (80078a0 <MX_TIM4_Init+0xe8>)
 80077ea:	4a2e      	ldr	r2, [pc, #184]	; (80078a4 <MX_TIM4_Init+0xec>)
 80077ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1080-1;
 80077ee:	4b2c      	ldr	r3, [pc, #176]	; (80078a0 <MX_TIM4_Init+0xe8>)
 80077f0:	f240 4237 	movw	r2, #1079	; 0x437
 80077f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077f6:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <MX_TIM4_Init+0xe8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80077fc:	4b28      	ldr	r3, [pc, #160]	; (80078a0 <MX_TIM4_Init+0xe8>)
 80077fe:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007802:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007804:	4b26      	ldr	r3, [pc, #152]	; (80078a0 <MX_TIM4_Init+0xe8>)
 8007806:	2200      	movs	r2, #0
 8007808:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800780a:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <MX_TIM4_Init+0xe8>)
 800780c:	2200      	movs	r2, #0
 800780e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007810:	4823      	ldr	r0, [pc, #140]	; (80078a0 <MX_TIM4_Init+0xe8>)
 8007812:	f7fb ff5b 	bl	80036cc <HAL_TIM_Base_Init>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800781c:	f000 f94c 	bl	8007ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800782a:	4619      	mov	r1, r3
 800782c:	481c      	ldr	r0, [pc, #112]	; (80078a0 <MX_TIM4_Init+0xe8>)
 800782e:	f7fc f9dd 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8007838:	f000 f93e 	bl	8007ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800783c:	4818      	ldr	r0, [pc, #96]	; (80078a0 <MX_TIM4_Init+0xe8>)
 800783e:	f7fb ff94 	bl	800376a <HAL_TIM_PWM_Init>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8007848:	f000 f936 	bl	8007ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800784c:	2300      	movs	r3, #0
 800784e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007850:	2300      	movs	r3, #0
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007854:	f107 0320 	add.w	r3, r7, #32
 8007858:	4619      	mov	r1, r3
 800785a:	4811      	ldr	r0, [pc, #68]	; (80078a0 <MX_TIM4_Init+0xe8>)
 800785c:	f7fc fdbf 	bl	80043de <HAL_TIMEx_MasterConfigSynchronization>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8007866:	f000 f927 	bl	8007ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800786a:	2360      	movs	r3, #96	; 0x60
 800786c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2399;
 800786e:	f640 135f 	movw	r3, #2399	; 0x95f
 8007872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800787c:	1d3b      	adds	r3, r7, #4
 800787e:	2200      	movs	r2, #0
 8007880:	4619      	mov	r1, r3
 8007882:	4807      	ldr	r0, [pc, #28]	; (80078a0 <MX_TIM4_Init+0xe8>)
 8007884:	f7fc f8ec 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800788e:	f000 f913 	bl	8007ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007892:	4803      	ldr	r0, [pc, #12]	; (80078a0 <MX_TIM4_Init+0xe8>)
 8007894:	f000 faa0 	bl	8007dd8 <HAL_TIM_MspPostInit>

}
 8007898:	bf00      	nop
 800789a:	3738      	adds	r7, #56	; 0x38
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	20000210 	.word	0x20000210
 80078a4:	40000800 	.word	0x40000800

080078a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08c      	sub	sp, #48	; 0x30
 80078ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ae:	f107 031c 	add.w	r3, r7, #28
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	605a      	str	r2, [r3, #4]
 80078b8:	609a      	str	r2, [r3, #8]
 80078ba:	60da      	str	r2, [r3, #12]
 80078bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	4b75      	ldr	r3, [pc, #468]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	4a74      	ldr	r2, [pc, #464]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078c8:	f043 0310 	orr.w	r3, r3, #16
 80078cc:	6313      	str	r3, [r2, #48]	; 0x30
 80078ce:	4b72      	ldr	r3, [pc, #456]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	4b6e      	ldr	r3, [pc, #440]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	4a6d      	ldr	r2, [pc, #436]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078e4:	f043 0304 	orr.w	r3, r3, #4
 80078e8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ea:	4b6b      	ldr	r3, [pc, #428]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	4b67      	ldr	r3, [pc, #412]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	4a66      	ldr	r2, [pc, #408]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007904:	6313      	str	r3, [r2, #48]	; 0x30
 8007906:	4b64      	ldr	r3, [pc, #400]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	4b60      	ldr	r3, [pc, #384]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	4a5f      	ldr	r2, [pc, #380]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	6313      	str	r3, [r2, #48]	; 0x30
 8007922:	4b5d      	ldr	r3, [pc, #372]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	4b59      	ldr	r3, [pc, #356]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	4a58      	ldr	r2, [pc, #352]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007938:	f043 0302 	orr.w	r3, r3, #2
 800793c:	6313      	str	r3, [r2, #48]	; 0x30
 800793e:	4b56      	ldr	r3, [pc, #344]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	607b      	str	r3, [r7, #4]
 800794e:	4b52      	ldr	r3, [pc, #328]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007952:	4a51      	ldr	r2, [pc, #324]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 8007954:	f043 0308 	orr.w	r3, r3, #8
 8007958:	6313      	str	r3, [r2, #48]	; 0x30
 800795a:	4b4f      	ldr	r3, [pc, #316]	; (8007a98 <MX_GPIO_Init+0x1f0>)
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	607b      	str	r3, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007966:	2200      	movs	r2, #0
 8007968:	2108      	movs	r1, #8
 800796a:	484c      	ldr	r0, [pc, #304]	; (8007a9c <MX_GPIO_Init+0x1f4>)
 800796c:	f7f9 f960 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007970:	2201      	movs	r2, #1
 8007972:	2101      	movs	r1, #1
 8007974:	484a      	ldr	r0, [pc, #296]	; (8007aa0 <MX_GPIO_Init+0x1f8>)
 8007976:	f7f9 f95b 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|APIN_Pin|BPIN_Pin|LD3_Pin 
 800797a:	2200      	movs	r2, #0
 800797c:	f64e 6110 	movw	r1, #60944	; 0xee10
 8007980:	4848      	ldr	r0, [pc, #288]	; (8007aa4 <MX_GPIO_Init+0x1fc>)
 8007982:	f7f9 f955 	bl	8000c30 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007986:	2308      	movs	r3, #8
 8007988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800798a:	2301      	movs	r3, #1
 800798c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007992:	2300      	movs	r3, #0
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007996:	f107 031c 	add.w	r3, r7, #28
 800799a:	4619      	mov	r1, r3
 800799c:	483f      	ldr	r0, [pc, #252]	; (8007a9c <MX_GPIO_Init+0x1f4>)
 800799e:	f7f8 ff95 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079a6:	2301      	movs	r3, #1
 80079a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ae:	2300      	movs	r3, #0
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80079b2:	f107 031c 	add.w	r3, r7, #28
 80079b6:	4619      	mov	r1, r3
 80079b8:	4839      	ldr	r0, [pc, #228]	; (8007aa0 <MX_GPIO_Init+0x1f8>)
 80079ba:	f7f8 ff87 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80079be:	2308      	movs	r3, #8
 80079c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c2:	2302      	movs	r3, #2
 80079c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ca:	2300      	movs	r3, #0
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80079ce:	2305      	movs	r3, #5
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80079d2:	f107 031c 	add.w	r3, r7, #28
 80079d6:	4619      	mov	r1, r3
 80079d8:	4831      	ldr	r0, [pc, #196]	; (8007aa0 <MX_GPIO_Init+0x1f8>)
 80079da:	f7f8 ff77 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80079de:	2301      	movs	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80079e2:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <MX_GPIO_Init+0x200>)
 80079e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80079ea:	f107 031c 	add.w	r3, r7, #28
 80079ee:	4619      	mov	r1, r3
 80079f0:	482e      	ldr	r0, [pc, #184]	; (8007aac <MX_GPIO_Init+0x204>)
 80079f2:	f7f8 ff6b 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80079f6:	2304      	movs	r3, #4
 80079f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079fa:	2300      	movs	r3, #0
 80079fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007a02:	f107 031c 	add.w	r3, r7, #28
 8007a06:	4619      	mov	r1, r3
 8007a08:	4829      	ldr	r0, [pc, #164]	; (8007ab0 <MX_GPIO_Init+0x208>)
 8007a0a:	f7f8 ff5f 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a14:	2302      	movs	r3, #2
 8007a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a20:	2305      	movs	r3, #5
 8007a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007a24:	f107 031c 	add.w	r3, r7, #28
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4821      	ldr	r0, [pc, #132]	; (8007ab0 <MX_GPIO_Init+0x208>)
 8007a2c:	f7f8 ff4e 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 APIN_Pin BPIN_Pin LD3_Pin 
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|APIN_Pin|BPIN_Pin|LD3_Pin 
 8007a30:	f64e 6310 	movw	r3, #60944	; 0xee10
 8007a34:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a36:	2301      	movs	r3, #1
 8007a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a42:	f107 031c 	add.w	r3, r7, #28
 8007a46:	4619      	mov	r1, r3
 8007a48:	4816      	ldr	r0, [pc, #88]	; (8007aa4 <MX_GPIO_Init+0x1fc>)
 8007a4a:	f7f8 ff3f 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007a4e:	2320      	movs	r3, #32
 8007a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a52:	2300      	movs	r3, #0
 8007a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007a5a:	f107 031c 	add.w	r3, r7, #28
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4810      	ldr	r0, [pc, #64]	; (8007aa4 <MX_GPIO_Init+0x1fc>)
 8007a62:	f7f8 ff33 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007a66:	2302      	movs	r3, #2
 8007a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <MX_GPIO_Init+0x20c>)
 8007a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007a72:	f107 031c 	add.w	r3, r7, #28
 8007a76:	4619      	mov	r1, r3
 8007a78:	4808      	ldr	r0, [pc, #32]	; (8007a9c <MX_GPIO_Init+0x1f4>)
 8007a7a:	f7f8 ff27 	bl	80008cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	2006      	movs	r0, #6
 8007a84:	f7f8 feeb 	bl	800085e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007a88:	2006      	movs	r0, #6
 8007a8a:	f7f8 ff04 	bl	8000896 <HAL_NVIC_EnableIRQ>

}
 8007a8e:	bf00      	nop
 8007a90:	3730      	adds	r7, #48	; 0x30
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	40021000 	.word	0x40021000
 8007aa0:	40020800 	.word	0x40020800
 8007aa4:	40020c00 	.word	0x40020c00
 8007aa8:	10110000 	.word	0x10110000
 8007aac:	40020000 	.word	0x40020000
 8007ab0:	40020400 	.word	0x40020400
 8007ab4:	10120000 	.word	0x10120000

08007ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007abc:	bf00      	nop
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	607b      	str	r3, [r7, #4]
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <HAL_MspInit+0x4c>)
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	4a0f      	ldr	r2, [pc, #60]	; (8007b14 <HAL_MspInit+0x4c>)
 8007ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007adc:	6453      	str	r3, [r2, #68]	; 0x44
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <HAL_MspInit+0x4c>)
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae6:	607b      	str	r3, [r7, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007aea:	2300      	movs	r3, #0
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <HAL_MspInit+0x4c>)
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <HAL_MspInit+0x4c>)
 8007af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af8:	6413      	str	r3, [r2, #64]	; 0x40
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <HAL_MspInit+0x4c>)
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007b06:	2007      	movs	r0, #7
 8007b08:	f7f8 fe9e 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40023800 	.word	0x40023800

08007b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <HAL_I2C_MspInit+0x84>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d12c      	bne.n	8007b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <HAL_I2C_MspInit+0x88>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <HAL_I2C_MspInit+0x88>)
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	6313      	str	r3, [r2, #48]	; 0x30
 8007b4a:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <HAL_I2C_MspInit+0x88>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007b56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b5c:	2312      	movs	r3, #18
 8007b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b60:	2301      	movs	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b64:	2300      	movs	r3, #0
 8007b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b68:	2304      	movs	r3, #4
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b6c:	f107 0314 	add.w	r3, r7, #20
 8007b70:	4619      	mov	r1, r3
 8007b72:	480c      	ldr	r0, [pc, #48]	; (8007ba4 <HAL_I2C_MspInit+0x8c>)
 8007b74:	f7f8 feaa 	bl	80008cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	4b08      	ldr	r3, [pc, #32]	; (8007ba0 <HAL_I2C_MspInit+0x88>)
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	4a07      	ldr	r2, [pc, #28]	; (8007ba0 <HAL_I2C_MspInit+0x88>)
 8007b82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b86:	6413      	str	r3, [r2, #64]	; 0x40
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <HAL_I2C_MspInit+0x88>)
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007b94:	bf00      	nop
 8007b96:	3728      	adds	r7, #40	; 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40005400 	.word	0x40005400
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40020400 	.word	0x40020400

08007ba8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a28      	ldr	r2, [pc, #160]	; (8007c68 <HAL_I2S_MspInit+0xc0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d14a      	bne.n	8007c60 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf6:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007c0c:	f043 0304 	orr.w	r3, r3, #4
 8007c10:	6313      	str	r3, [r2, #48]	; 0x30
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <HAL_I2S_MspInit+0xc4>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	60bb      	str	r3, [r7, #8]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007c1e:	2310      	movs	r3, #16
 8007c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c22:	2302      	movs	r3, #2
 8007c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c2e:	2306      	movs	r3, #6
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007c32:	f107 0314 	add.w	r3, r7, #20
 8007c36:	4619      	mov	r1, r3
 8007c38:	480d      	ldr	r0, [pc, #52]	; (8007c70 <HAL_I2S_MspInit+0xc8>)
 8007c3a:	f7f8 fe47 	bl	80008cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007c3e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c44:	2302      	movs	r3, #2
 8007c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c50:	2306      	movs	r3, #6
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4806      	ldr	r0, [pc, #24]	; (8007c74 <HAL_I2S_MspInit+0xcc>)
 8007c5c:	f7f8 fe36 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007c60:	bf00      	nop
 8007c62:	3728      	adds	r7, #40	; 0x28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40003c00 	.word	0x40003c00
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40020000 	.word	0x40020000
 8007c74:	40020800 	.word	0x40020800

08007c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c80:	f107 0314 	add.w	r3, r7, #20
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <HAL_SPI_MspInit+0x84>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d12b      	bne.n	8007cf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <HAL_SPI_MspInit+0x88>)
 8007ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_SPI_MspInit+0x88>)
 8007ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <HAL_SPI_MspInit+0x88>)
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <HAL_SPI_MspInit+0x88>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <HAL_SPI_MspInit+0x88>)
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <HAL_SPI_MspInit+0x88>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007cd2:	23e0      	movs	r3, #224	; 0xe0
 8007cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007ce2:	2305      	movs	r3, #5
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce6:	f107 0314 	add.w	r3, r7, #20
 8007cea:	4619      	mov	r1, r3
 8007cec:	4805      	ldr	r0, [pc, #20]	; (8007d04 <HAL_SPI_MspInit+0x8c>)
 8007cee:	f7f8 fded 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007cf2:	bf00      	nop
 8007cf4:	3728      	adds	r7, #40	; 0x28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40013000 	.word	0x40013000
 8007d00:	40023800 	.word	0x40023800
 8007d04:	40020000 	.word	0x40020000

08007d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a2c      	ldr	r2, [pc, #176]	; (8007dc8 <HAL_TIM_Base_MspInit+0xc0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10e      	bne.n	8007d38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	4b2b      	ldr	r3, [pc, #172]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	4a2a      	ldr	r2, [pc, #168]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d24:	f043 0301 	orr.w	r3, r3, #1
 8007d28:	6453      	str	r3, [r2, #68]	; 0x44
 8007d2a:	4b28      	ldr	r3, [pc, #160]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007d36:	e042      	b.n	8007dbe <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d40:	d10e      	bne.n	8007d60 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	613b      	str	r3, [r7, #16]
 8007d46:	4b21      	ldr	r3, [pc, #132]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d4c:	f043 0301 	orr.w	r3, r3, #1
 8007d50:	6413      	str	r3, [r2, #64]	; 0x40
 8007d52:	4b1e      	ldr	r3, [pc, #120]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	693b      	ldr	r3, [r7, #16]
}
 8007d5e:	e02e      	b.n	8007dbe <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a1a      	ldr	r2, [pc, #104]	; (8007dd0 <HAL_TIM_Base_MspInit+0xc8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d116      	bne.n	8007d98 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	4a16      	ldr	r2, [pc, #88]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	6413      	str	r3, [r2, #64]	; 0x40
 8007d7a:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2100      	movs	r1, #0
 8007d8a:	201d      	movs	r0, #29
 8007d8c:	f7f8 fd67 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007d90:	201d      	movs	r0, #29
 8007d92:	f7f8 fd80 	bl	8000896 <HAL_NVIC_EnableIRQ>
}
 8007d96:	e012      	b.n	8007dbe <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a0d      	ldr	r2, [pc, #52]	; (8007dd4 <HAL_TIM_Base_MspInit+0xcc>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10d      	bne.n	8007dbe <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007da2:	2300      	movs	r3, #0
 8007da4:	60bb      	str	r3, [r7, #8]
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	4a08      	ldr	r2, [pc, #32]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007dac:	f043 0304 	orr.w	r3, r3, #4
 8007db0:	6413      	str	r3, [r2, #64]	; 0x40
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <HAL_TIM_Base_MspInit+0xc4>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800

08007dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a37      	ldr	r2, [pc, #220]	; (8007ed4 <HAL_TIM_MspPostInit+0xfc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d11f      	bne.n	8007e3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	4b36      	ldr	r3, [pc, #216]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	4a35      	ldr	r2, [pc, #212]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e04:	f043 0310 	orr.w	r3, r3, #16
 8007e08:	6313      	str	r3, [r2, #48]	; 0x30
 8007e0a:	4b33      	ldr	r3, [pc, #204]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e24:	2300      	movs	r3, #0
 8007e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e2c:	f107 0314 	add.w	r3, r7, #20
 8007e30:	4619      	mov	r1, r3
 8007e32:	482a      	ldr	r0, [pc, #168]	; (8007edc <HAL_TIM_MspPostInit+0x104>)
 8007e34:	f7f8 fd4a 	bl	80008cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007e38:	e048      	b.n	8007ecc <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM2)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d11f      	bne.n	8007e84 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	4b23      	ldr	r3, [pc, #140]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e4e:	f043 0301 	orr.w	r3, r3, #1
 8007e52:	6313      	str	r3, [r2, #48]	; 0x30
 8007e54:	4b20      	ldr	r3, [pc, #128]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e66:	2302      	movs	r3, #2
 8007e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007e72:	2301      	movs	r3, #1
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e76:	f107 0314 	add.w	r3, r7, #20
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4818      	ldr	r0, [pc, #96]	; (8007ee0 <HAL_TIM_MspPostInit+0x108>)
 8007e7e:	f7f8 fd25 	bl	80008cc <HAL_GPIO_Init>
}
 8007e82:	e023      	b.n	8007ecc <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <HAL_TIM_MspPostInit+0x10c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d11e      	bne.n	8007ecc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007e98:	f043 0308 	orr.w	r3, r3, #8
 8007e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <HAL_TIM_MspPostInit+0x100>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	60bb      	str	r3, [r7, #8]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ec0:	f107 0314 	add.w	r3, r7, #20
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4808      	ldr	r0, [pc, #32]	; (8007ee8 <HAL_TIM_MspPostInit+0x110>)
 8007ec8:	f7f8 fd00 	bl	80008cc <HAL_GPIO_Init>
}
 8007ecc:	bf00      	nop
 8007ece:	3728      	adds	r7, #40	; 0x28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40010000 	.word	0x40010000
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	40021000 	.word	0x40021000
 8007ee0:	40020000 	.word	0x40020000
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40020c00 	.word	0x40020c00

08007eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007ef0:	bf00      	nop
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007efa:	b480      	push	{r7}
 8007efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007efe:	e7fe      	b.n	8007efe <HardFault_Handler+0x4>

08007f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007f04:	e7fe      	b.n	8007f04 <MemManage_Handler+0x4>

08007f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007f06:	b480      	push	{r7}
 8007f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007f0a:	e7fe      	b.n	8007f0a <BusFault_Handler+0x4>

08007f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007f10:	e7fe      	b.n	8007f10 <UsageFault_Handler+0x4>

08007f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007f12:	b480      	push	{r7}
 8007f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007f32:	bf00      	nop
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f40:	f7f8 fb70 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7f8 fe89 	bl	8000c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007f5c:	4802      	ldr	r0, [pc, #8]	; (8007f68 <TIM3_IRQHandler+0x10>)
 8007f5e:	f7fb fc77 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	200002a4 	.word	0x200002a4

08007f6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007f70:	4802      	ldr	r0, [pc, #8]	; (8007f7c <OTG_FS_IRQHandler+0x10>)
 8007f72:	f7f9 fdb3 	bl	8001adc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007f76:	bf00      	nop
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200016a0 	.word	0x200016a0

08007f80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <_sbrk+0x50>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <_sbrk+0x16>
		heap_end = &end;
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <_sbrk+0x50>)
 8007f92:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <_sbrk+0x54>)
 8007f94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <_sbrk+0x50>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <_sbrk+0x50>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	466a      	mov	r2, sp
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d907      	bls.n	8007fba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007faa:	f000 fd75 	bl	8008a98 <__errno>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	e006      	b.n	8007fc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <_sbrk+0x50>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4a03      	ldr	r2, [pc, #12]	; (8007fd0 <_sbrk+0x50>)
 8007fc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20000200 	.word	0x20000200
 8007fd4:	20001cb0 	.word	0x20001cb0

08007fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007fdc:	4b16      	ldr	r3, [pc, #88]	; (8008038 <SystemInit+0x60>)
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe2:	4a15      	ldr	r2, [pc, #84]	; (8008038 <SystemInit+0x60>)
 8007fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007fec:	4b13      	ldr	r3, [pc, #76]	; (800803c <SystemInit+0x64>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a12      	ldr	r2, [pc, #72]	; (800803c <SystemInit+0x64>)
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007ff8:	4b10      	ldr	r3, [pc, #64]	; (800803c <SystemInit+0x64>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <SystemInit+0x64>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a0e      	ldr	r2, [pc, #56]	; (800803c <SystemInit+0x64>)
 8008004:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800800e:	4b0b      	ldr	r3, [pc, #44]	; (800803c <SystemInit+0x64>)
 8008010:	4a0b      	ldr	r2, [pc, #44]	; (8008040 <SystemInit+0x68>)
 8008012:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <SystemInit+0x64>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <SystemInit+0x64>)
 800801a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800801e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <SystemInit+0x64>)
 8008022:	2200      	movs	r2, #0
 8008024:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008026:	4b04      	ldr	r3, [pc, #16]	; (8008038 <SystemInit+0x60>)
 8008028:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800802c:	609a      	str	r2, [r3, #8]
#endif
}
 800802e:	bf00      	nop
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	e000ed00 	.word	0xe000ed00
 800803c:	40023800 	.word	0x40023800
 8008040:	24003010 	.word	0x24003010

08008044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008048:	2200      	movs	r2, #0
 800804a:	4912      	ldr	r1, [pc, #72]	; (8008094 <MX_USB_DEVICE_Init+0x50>)
 800804c:	4812      	ldr	r0, [pc, #72]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 800804e:	f7fe f823 	bl	8006098 <USBD_Init>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008058:	f7ff fd2e 	bl	8007ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800805c:	490f      	ldr	r1, [pc, #60]	; (800809c <MX_USB_DEVICE_Init+0x58>)
 800805e:	480e      	ldr	r0, [pc, #56]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 8008060:	f7fe f845 	bl	80060ee <USBD_RegisterClass>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800806a:	f7ff fd25 	bl	8007ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800806e:	490c      	ldr	r1, [pc, #48]	; (80080a0 <MX_USB_DEVICE_Init+0x5c>)
 8008070:	4809      	ldr	r0, [pc, #36]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 8008072:	f7fd ff73 	bl	8005f5c <USBD_CDC_RegisterInterface>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800807c:	f7ff fd1c 	bl	8007ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008080:	4805      	ldr	r0, [pc, #20]	; (8008098 <MX_USB_DEVICE_Init+0x54>)
 8008082:	f7fe f84e 	bl	8006122 <USBD_Start>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800808c:	f7ff fd14 	bl	8007ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	2000012c 	.word	0x2000012c
 8008098:	20000404 	.word	0x20000404
 800809c:	20000014 	.word	0x20000014
 80080a0:	2000011c 	.word	0x2000011c

080080a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080a8:	2200      	movs	r2, #0
 80080aa:	4905      	ldr	r1, [pc, #20]	; (80080c0 <CDC_Init_FS+0x1c>)
 80080ac:	4805      	ldr	r0, [pc, #20]	; (80080c4 <CDC_Init_FS+0x20>)
 80080ae:	f7fd ff6c 	bl	8005f8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080b2:	4905      	ldr	r1, [pc, #20]	; (80080c8 <CDC_Init_FS+0x24>)
 80080b4:	4803      	ldr	r0, [pc, #12]	; (80080c4 <CDC_Init_FS+0x20>)
 80080b6:	f7fd ff82 	bl	8005fbe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20000ea0 	.word	0x20000ea0
 80080c4:	20000404 	.word	0x20000404
 80080c8:	200006a0 	.word	0x200006a0

080080cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	71fb      	strb	r3, [r7, #7]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2b23      	cmp	r3, #35	; 0x23
 80080f0:	d84a      	bhi.n	8008188 <CDC_Control_FS+0xac>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <CDC_Control_FS+0x1c>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008189 	.word	0x08008189
 80080fc:	08008189 	.word	0x08008189
 8008100:	08008189 	.word	0x08008189
 8008104:	08008189 	.word	0x08008189
 8008108:	08008189 	.word	0x08008189
 800810c:	08008189 	.word	0x08008189
 8008110:	08008189 	.word	0x08008189
 8008114:	08008189 	.word	0x08008189
 8008118:	08008189 	.word	0x08008189
 800811c:	08008189 	.word	0x08008189
 8008120:	08008189 	.word	0x08008189
 8008124:	08008189 	.word	0x08008189
 8008128:	08008189 	.word	0x08008189
 800812c:	08008189 	.word	0x08008189
 8008130:	08008189 	.word	0x08008189
 8008134:	08008189 	.word	0x08008189
 8008138:	08008189 	.word	0x08008189
 800813c:	08008189 	.word	0x08008189
 8008140:	08008189 	.word	0x08008189
 8008144:	08008189 	.word	0x08008189
 8008148:	08008189 	.word	0x08008189
 800814c:	08008189 	.word	0x08008189
 8008150:	08008189 	.word	0x08008189
 8008154:	08008189 	.word	0x08008189
 8008158:	08008189 	.word	0x08008189
 800815c:	08008189 	.word	0x08008189
 8008160:	08008189 	.word	0x08008189
 8008164:	08008189 	.word	0x08008189
 8008168:	08008189 	.word	0x08008189
 800816c:	08008189 	.word	0x08008189
 8008170:	08008189 	.word	0x08008189
 8008174:	08008189 	.word	0x08008189
 8008178:	08008189 	.word	0x08008189
 800817c:	08008189 	.word	0x08008189
 8008180:	08008189 	.word	0x08008189
 8008184:	08008189 	.word	0x08008189
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008188:	bf00      	nop
  }

  return (USBD_OK);
 800818a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4805      	ldr	r0, [pc, #20]	; (80081bc <CDC_Receive_FS+0x24>)
 80081a6:	f7fd ff0a 	bl	8005fbe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081aa:	4804      	ldr	r0, [pc, #16]	; (80081bc <CDC_Receive_FS+0x24>)
 80081ac:	f7fd ff4a 	bl	8006044 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000404 	.word	0x20000404

080081c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <CDC_Transmit_FS+0x48>)
 80081d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80081d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e00b      	b.n	80081fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081e6:	887b      	ldrh	r3, [r7, #2]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	4806      	ldr	r0, [pc, #24]	; (8008208 <CDC_Transmit_FS+0x48>)
 80081ee:	f7fd fecc 	bl	8005f8a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <CDC_Transmit_FS+0x48>)
 80081f4:	f7fd fef7 	bl	8005fe6 <USBD_CDC_TransmitPacket>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000404 	.word	0x20000404

0800820c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008214:	f107 0314 	add.w	r3, r7, #20
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	60da      	str	r2, [r3, #12]
 8008222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800822c:	d147      	bne.n	80082be <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	4b25      	ldr	r3, [pc, #148]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	4a24      	ldr	r2, [pc, #144]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	6313      	str	r3, [r2, #48]	; 0x30
 800823e:	4b22      	ldr	r3, [pc, #136]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 8008240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800824a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800824e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	4619      	mov	r1, r3
 800825e:	481b      	ldr	r0, [pc, #108]	; (80082cc <HAL_PCD_MspInit+0xc0>)
 8008260:	f7f8 fb34 	bl	80008cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008264:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800826a:	2302      	movs	r3, #2
 800826c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008272:	2300      	movs	r3, #0
 8008274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008276:	230a      	movs	r3, #10
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800827a:	f107 0314 	add.w	r3, r7, #20
 800827e:	4619      	mov	r1, r3
 8008280:	4812      	ldr	r0, [pc, #72]	; (80082cc <HAL_PCD_MspInit+0xc0>)
 8008282:	f7f8 fb23 	bl	80008cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 8008288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828a:	4a0f      	ldr	r2, [pc, #60]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 800828c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008290:	6353      	str	r3, [r2, #52]	; 0x34
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 8008298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829a:	4a0b      	ldr	r2, [pc, #44]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 800829c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082a0:	6453      	str	r3, [r2, #68]	; 0x44
 80082a2:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <HAL_PCD_MspInit+0xbc>)
 80082a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	2043      	movs	r0, #67	; 0x43
 80082b4:	f7f8 fad3 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082b8:	2043      	movs	r0, #67	; 0x43
 80082ba:	f7f8 faec 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082be:	bf00      	nop
 80082c0:	3728      	adds	r7, #40	; 0x28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40023800 	.word	0x40023800
 80082cc:	40020000 	.word	0x40020000

080082d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80082e4:	4619      	mov	r1, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	f7fd ff64 	bl	80061b4 <USBD_LL_SetupStage>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	4619      	mov	r1, r3
 800831e:	f7fd ff94 	bl	800624a <USBD_LL_DataOutStage>
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	3348      	adds	r3, #72	; 0x48
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	4619      	mov	r1, r3
 8008352:	f7fd ffeb 	bl	800632c <USBD_LL_DataInStage>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800836c:	4618      	mov	r0, r3
 800836e:	f7fe f8f9 	bl	8006564 <USBD_LL_SOF>
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008382:	2301      	movs	r3, #1
 8008384:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
 8008392:	e008      	b.n	80083a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d102      	bne.n	80083a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
 80083a0:	e001      	b.n	80083a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083a2:	f7ff fb89 	bl	8007ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083ac:	7bfa      	ldrb	r2, [r7, #15]
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe f8a1 	bl	80064f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe f85a 	bl	8006476 <USBD_LL_Reset>
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe f89c 	bl	8006518 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083f2:	f043 0301 	orr.w	r3, r3, #1
 80083f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <HAL_PCD_SuspendCallback+0x48>)
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	4a03      	ldr	r2, [pc, #12]	; (8008414 <HAL_PCD_SuspendCallback+0x48>)
 8008406:	f043 0306 	orr.w	r3, r3, #6
 800840a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	e000ed00 	.word	0xe000ed00

08008418 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe f88b 	bl	8006542 <USBD_LL_Resume>
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe f8b1 	bl	80065b2 <USBD_LL_IsoOUTIncomplete>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe f892 	bl	8006598 <USBD_LL_IsoINIncomplete>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe f89e 	bl	80065cc <USBD_LL_DevConnected>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe f89b 	bl	80065e2 <USBD_LL_DevDisconnected>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d13c      	bne.n	800853e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084c4:	4a20      	ldr	r2, [pc, #128]	; (8008548 <USBD_LL_Init+0x94>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a1e      	ldr	r2, [pc, #120]	; (8008548 <USBD_LL_Init+0x94>)
 80084d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084d4:	4b1c      	ldr	r3, [pc, #112]	; (8008548 <USBD_LL_Init+0x94>)
 80084d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084dc:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <USBD_LL_Init+0x94>)
 80084de:	2204      	movs	r2, #4
 80084e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084e2:	4b19      	ldr	r3, [pc, #100]	; (8008548 <USBD_LL_Init+0x94>)
 80084e4:	2202      	movs	r2, #2
 80084e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084e8:	4b17      	ldr	r3, [pc, #92]	; (8008548 <USBD_LL_Init+0x94>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084ee:	4b16      	ldr	r3, [pc, #88]	; (8008548 <USBD_LL_Init+0x94>)
 80084f0:	2202      	movs	r2, #2
 80084f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084f4:	4b14      	ldr	r3, [pc, #80]	; (8008548 <USBD_LL_Init+0x94>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <USBD_LL_Init+0x94>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008500:	4b11      	ldr	r3, [pc, #68]	; (8008548 <USBD_LL_Init+0x94>)
 8008502:	2200      	movs	r2, #0
 8008504:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008506:	4b10      	ldr	r3, [pc, #64]	; (8008548 <USBD_LL_Init+0x94>)
 8008508:	2200      	movs	r2, #0
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800850c:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <USBD_LL_Init+0x94>)
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008512:	480d      	ldr	r0, [pc, #52]	; (8008548 <USBD_LL_Init+0x94>)
 8008514:	f7f9 f992 	bl	800183c <HAL_PCD_Init>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800851e:	f7ff facb 	bl	8007ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	4808      	ldr	r0, [pc, #32]	; (8008548 <USBD_LL_Init+0x94>)
 8008526:	f7fa faf6 	bl	8002b16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800852a:	2240      	movs	r2, #64	; 0x40
 800852c:	2100      	movs	r1, #0
 800852e:	4806      	ldr	r0, [pc, #24]	; (8008548 <USBD_LL_Init+0x94>)
 8008530:	f7fa faaa 	bl	8002a88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008534:	2280      	movs	r2, #128	; 0x80
 8008536:	2101      	movs	r1, #1
 8008538:	4803      	ldr	r0, [pc, #12]	; (8008548 <USBD_LL_Init+0x94>)
 800853a:	f7fa faa5 	bl	8002a88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	200016a0 	.word	0x200016a0

0800854c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008562:	4618      	mov	r0, r3
 8008564:	f7f9 fa87 	bl	8001a76 <HAL_PCD_Start>
 8008568:	4603      	mov	r3, r0
 800856a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f92e 	bl	80087d0 <USBD_Get_USB_Status>
 8008574:	4603      	mov	r3, r0
 8008576:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008578:	7bbb      	ldrb	r3, [r7, #14]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	461a      	mov	r2, r3
 8008590:	4603      	mov	r3, r0
 8008592:	70fb      	strb	r3, [r7, #3]
 8008594:	460b      	mov	r3, r1
 8008596:	70bb      	strb	r3, [r7, #2]
 8008598:	4613      	mov	r3, r2
 800859a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085aa:	78bb      	ldrb	r3, [r7, #2]
 80085ac:	883a      	ldrh	r2, [r7, #0]
 80085ae:	78f9      	ldrb	r1, [r7, #3]
 80085b0:	f7f9 fe5c 	bl	800226c <HAL_PCD_EP_Open>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f908 	bl	80087d0 <USBD_Get_USB_Status>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	460b      	mov	r3, r1
 80085d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	4611      	mov	r1, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f9 fea5 	bl	800233c <HAL_PCD_EP_Close>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f8e9 	bl	80087d0 <USBD_Get_USB_Status>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008602:	7bbb      	ldrb	r3, [r7, #14]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f7f9 ff7d 	bl	800252a <HAL_PCD_EP_SetStall>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f8ca 	bl	80087d0 <USBD_Get_USB_Status>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008640:	7bbb      	ldrb	r3, [r7, #14]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008664:	78fa      	ldrb	r2, [r7, #3]
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f7f9 ffc2 	bl	80025f2 <HAL_PCD_EP_ClrStall>
 800866e:	4603      	mov	r3, r0
 8008670:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f8ab 	bl	80087d0 <USBD_Get_USB_Status>
 800867a:	4603      	mov	r3, r0
 800867c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800867e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800869a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800869c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da0b      	bge.n	80086bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	4613      	mov	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	333e      	adds	r3, #62	; 0x3e
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	e00b      	b.n	80086d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	4611      	mov	r1, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f9 fd8f 	bl	8002222 <HAL_PCD_SetAddress>
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f860 	bl	80087d0 <USBD_Get_USB_Status>
 8008710:	4603      	mov	r3, r0
 8008712:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008714:	7bbb      	ldrb	r3, [r7, #14]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	461a      	mov	r2, r3
 800872a:	460b      	mov	r3, r1
 800872c:	72fb      	strb	r3, [r7, #11]
 800872e:	4613      	mov	r3, r2
 8008730:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	7af9      	ldrb	r1, [r7, #11]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	f7f9 fea6 	bl	8002496 <HAL_PCD_EP_Transmit>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f83d 	bl	80087d0 <USBD_Get_USB_Status>
 8008756:	4603      	mov	r3, r0
 8008758:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800875a:	7dbb      	ldrb	r3, [r7, #22]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	461a      	mov	r2, r3
 8008770:	460b      	mov	r3, r1
 8008772:	72fb      	strb	r3, [r7, #11]
 8008774:	4613      	mov	r3, r2
 8008776:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008786:	893b      	ldrh	r3, [r7, #8]
 8008788:	7af9      	ldrb	r1, [r7, #11]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	f7f9 fe20 	bl	80023d0 <HAL_PCD_EP_Receive>
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f81a 	bl	80087d0 <USBD_Get_USB_Status>
 800879c:	4603      	mov	r3, r0
 800879e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80087a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7f9 fe50 	bl	8002466 <HAL_PCD_EP_GetRxCount>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d817      	bhi.n	8008814 <USBD_Get_USB_Status+0x44>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <USBD_Get_USB_Status+0x1c>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008803 	.word	0x08008803
 80087f4:	08008809 	.word	0x08008809
 80087f8:	0800880f 	.word	0x0800880f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008800:	e00b      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008802:	2302      	movs	r3, #2
 8008804:	73fb      	strb	r3, [r7, #15]
    break;
 8008806:	e008      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008808:	2301      	movs	r3, #1
 800880a:	73fb      	strb	r3, [r7, #15]
    break;
 800880c:	e005      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800880e:	2302      	movs	r3, #2
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e002      	b.n	800881a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008814:	2302      	movs	r3, #2
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	bf00      	nop
  }
  return usb_status;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2212      	movs	r2, #18
 8008838:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800883a:	4b03      	ldr	r3, [pc, #12]	; (8008848 <USBD_FS_DeviceDescriptor+0x20>)
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000148 	.word	0x20000148

0800884c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2204      	movs	r2, #4
 800885c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800885e:	4b03      	ldr	r3, [pc, #12]	; (800886c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	2000015c 	.word	0x2000015c

08008870 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d105      	bne.n	800888e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4907      	ldr	r1, [pc, #28]	; (80088a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008886:	4808      	ldr	r0, [pc, #32]	; (80088a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008888:	f7fe fb82 	bl	8006f90 <USBD_GetString>
 800888c:	e004      	b.n	8008898 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008892:	4805      	ldr	r0, [pc, #20]	; (80088a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008894:	f7fe fb7c 	bl	8006f90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20001aa8 	.word	0x20001aa8
 80088a8:	08009354 	.word	0x08009354

080088ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	4904      	ldr	r1, [pc, #16]	; (80088cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088bc:	4804      	ldr	r0, [pc, #16]	; (80088d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088be:	f7fe fb67 	bl	8006f90 <USBD_GetString>
  return USBD_StrDesc;
 80088c2:	4b02      	ldr	r3, [pc, #8]	; (80088cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20001aa8 	.word	0x20001aa8
 80088d0:	0800936c 	.word	0x0800936c

080088d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	221a      	movs	r2, #26
 80088e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80088e6:	f000 f843 	bl	8008970 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80088ea:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20000160 	.word	0x20000160

080088f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4907      	ldr	r1, [pc, #28]	; (800892c <USBD_FS_ConfigStrDescriptor+0x34>)
 800890e:	4808      	ldr	r0, [pc, #32]	; (8008930 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008910:	f7fe fb3e 	bl	8006f90 <USBD_GetString>
 8008914:	e004      	b.n	8008920 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4904      	ldr	r1, [pc, #16]	; (800892c <USBD_FS_ConfigStrDescriptor+0x34>)
 800891a:	4805      	ldr	r0, [pc, #20]	; (8008930 <USBD_FS_ConfigStrDescriptor+0x38>)
 800891c:	f7fe fb38 	bl	8006f90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008920:	4b02      	ldr	r3, [pc, #8]	; (800892c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20001aa8 	.word	0x20001aa8
 8008930:	08009380 	.word	0x08009380

08008934 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	4907      	ldr	r1, [pc, #28]	; (8008968 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800894a:	4808      	ldr	r0, [pc, #32]	; (800896c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800894c:	f7fe fb20 	bl	8006f90 <USBD_GetString>
 8008950:	e004      	b.n	800895c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	4904      	ldr	r1, [pc, #16]	; (8008968 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008956:	4805      	ldr	r0, [pc, #20]	; (800896c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008958:	f7fe fb1a 	bl	8006f90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20001aa8 	.word	0x20001aa8
 800896c:	0800938c 	.word	0x0800938c

08008970 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <Get_SerialNum+0x44>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800897c:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <Get_SerialNum+0x48>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008982:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <Get_SerialNum+0x4c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d009      	beq.n	80089aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008996:	2208      	movs	r2, #8
 8008998:	4909      	ldr	r1, [pc, #36]	; (80089c0 <Get_SerialNum+0x50>)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f814 	bl	80089c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089a0:	2204      	movs	r2, #4
 80089a2:	4908      	ldr	r1, [pc, #32]	; (80089c4 <Get_SerialNum+0x54>)
 80089a4:	68b8      	ldr	r0, [r7, #8]
 80089a6:	f000 f80f 	bl	80089c8 <IntToUnicode>
  }
}
 80089aa:	bf00      	nop
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	1fff7a10 	.word	0x1fff7a10
 80089b8:	1fff7a14 	.word	0x1fff7a14
 80089bc:	1fff7a18 	.word	0x1fff7a18
 80089c0:	20000162 	.word	0x20000162
 80089c4:	20000172 	.word	0x20000172

080089c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]
 80089de:	e027      	b.n	8008a30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	0f1b      	lsrs	r3, r3, #28
 80089e4:	2b09      	cmp	r3, #9
 80089e6:	d80b      	bhi.n	8008a00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	0f1b      	lsrs	r3, r3, #28
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	4619      	mov	r1, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	440b      	add	r3, r1
 80089f8:	3230      	adds	r2, #48	; 0x30
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	e00a      	b.n	8008a16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	0f1b      	lsrs	r3, r3, #28
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	440b      	add	r3, r1
 8008a10:	3237      	adds	r2, #55	; 0x37
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	3301      	adds	r3, #1
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	4413      	add	r3, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	75fb      	strb	r3, [r7, #23]
 8008a30:	7dfa      	ldrb	r2, [r7, #23]
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d3d3      	bcc.n	80089e0 <IntToUnicode+0x18>
  }
}
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008a4a:	e003      	b.n	8008a54 <LoopCopyDataInit>

08008a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008a52:	3104      	adds	r1, #4

08008a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008a54:	480b      	ldr	r0, [pc, #44]	; (8008a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008a5c:	d3f6      	bcc.n	8008a4c <CopyDataInit>
  ldr  r2, =_sbss
 8008a5e:	4a0b      	ldr	r2, [pc, #44]	; (8008a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008a60:	e002      	b.n	8008a68 <LoopFillZerobss>

08008a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008a64:	f842 3b04 	str.w	r3, [r2], #4

08008a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008a68:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008a6c:	d3f9      	bcc.n	8008a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008a6e:	f7ff fab3 	bl	8007fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a72:	f000 f817 	bl	8008aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a76:	f7fe fbfb 	bl	8007270 <main>
  bx  lr    
 8008a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008a80:	080093f8 	.word	0x080093f8
  ldr  r0, =_sdata
 8008a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008a88:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8008a8c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008a90:	20001cac 	.word	0x20001cac

08008a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a94:	e7fe      	b.n	8008a94 <ADC_IRQHandler>
	...

08008a98 <__errno>:
 8008a98:	4b01      	ldr	r3, [pc, #4]	; (8008aa0 <__errno+0x8>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	2000017c 	.word	0x2000017c

08008aa4 <__libc_init_array>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4e0d      	ldr	r6, [pc, #52]	; (8008adc <__libc_init_array+0x38>)
 8008aa8:	4c0d      	ldr	r4, [pc, #52]	; (8008ae0 <__libc_init_array+0x3c>)
 8008aaa:	1ba4      	subs	r4, r4, r6
 8008aac:	10a4      	asrs	r4, r4, #2
 8008aae:	2500      	movs	r5, #0
 8008ab0:	42a5      	cmp	r5, r4
 8008ab2:	d109      	bne.n	8008ac8 <__libc_init_array+0x24>
 8008ab4:	4e0b      	ldr	r6, [pc, #44]	; (8008ae4 <__libc_init_array+0x40>)
 8008ab6:	4c0c      	ldr	r4, [pc, #48]	; (8008ae8 <__libc_init_array+0x44>)
 8008ab8:	f000 fc36 	bl	8009328 <_init>
 8008abc:	1ba4      	subs	r4, r4, r6
 8008abe:	10a4      	asrs	r4, r4, #2
 8008ac0:	2500      	movs	r5, #0
 8008ac2:	42a5      	cmp	r5, r4
 8008ac4:	d105      	bne.n	8008ad2 <__libc_init_array+0x2e>
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008acc:	4798      	blx	r3
 8008ace:	3501      	adds	r5, #1
 8008ad0:	e7ee      	b.n	8008ab0 <__libc_init_array+0xc>
 8008ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ad6:	4798      	blx	r3
 8008ad8:	3501      	adds	r5, #1
 8008ada:	e7f2      	b.n	8008ac2 <__libc_init_array+0x1e>
 8008adc:	080093f0 	.word	0x080093f0
 8008ae0:	080093f0 	.word	0x080093f0
 8008ae4:	080093f0 	.word	0x080093f0
 8008ae8:	080093f4 	.word	0x080093f4

08008aec <malloc>:
 8008aec:	4b02      	ldr	r3, [pc, #8]	; (8008af8 <malloc+0xc>)
 8008aee:	4601      	mov	r1, r0
 8008af0:	6818      	ldr	r0, [r3, #0]
 8008af2:	f000 b861 	b.w	8008bb8 <_malloc_r>
 8008af6:	bf00      	nop
 8008af8:	2000017c 	.word	0x2000017c

08008afc <free>:
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <free+0xc>)
 8008afe:	4601      	mov	r1, r0
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	f000 b80b 	b.w	8008b1c <_free_r>
 8008b06:	bf00      	nop
 8008b08:	2000017c 	.word	0x2000017c

08008b0c <memset>:
 8008b0c:	4402      	add	r2, r0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d100      	bne.n	8008b16 <memset+0xa>
 8008b14:	4770      	bx	lr
 8008b16:	f803 1b01 	strb.w	r1, [r3], #1
 8008b1a:	e7f9      	b.n	8008b10 <memset+0x4>

08008b1c <_free_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4605      	mov	r5, r0
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d045      	beq.n	8008bb0 <_free_r+0x94>
 8008b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b28:	1f0c      	subs	r4, r1, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	bfb8      	it	lt
 8008b2e:	18e4      	addlt	r4, r4, r3
 8008b30:	f000 f8cc 	bl	8008ccc <__malloc_lock>
 8008b34:	4a1f      	ldr	r2, [pc, #124]	; (8008bb4 <_free_r+0x98>)
 8008b36:	6813      	ldr	r3, [r2, #0]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	b933      	cbnz	r3, 8008b4a <_free_r+0x2e>
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	6014      	str	r4, [r2, #0]
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b46:	f000 b8c2 	b.w	8008cce <__malloc_unlock>
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	d90c      	bls.n	8008b68 <_free_r+0x4c>
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	1862      	adds	r2, r4, r1
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bf04      	itt	eq
 8008b56:	681a      	ldreq	r2, [r3, #0]
 8008b58:	685b      	ldreq	r3, [r3, #4]
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	bf04      	itt	eq
 8008b5e:	1852      	addeq	r2, r2, r1
 8008b60:	6022      	streq	r2, [r4, #0]
 8008b62:	6004      	str	r4, [r0, #0]
 8008b64:	e7ec      	b.n	8008b40 <_free_r+0x24>
 8008b66:	4613      	mov	r3, r2
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	b10a      	cbz	r2, 8008b70 <_free_r+0x54>
 8008b6c:	42a2      	cmp	r2, r4
 8008b6e:	d9fa      	bls.n	8008b66 <_free_r+0x4a>
 8008b70:	6819      	ldr	r1, [r3, #0]
 8008b72:	1858      	adds	r0, r3, r1
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d10b      	bne.n	8008b90 <_free_r+0x74>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	1858      	adds	r0, r3, r1
 8008b7e:	4282      	cmp	r2, r0
 8008b80:	6019      	str	r1, [r3, #0]
 8008b82:	d1dd      	bne.n	8008b40 <_free_r+0x24>
 8008b84:	6810      	ldr	r0, [r2, #0]
 8008b86:	6852      	ldr	r2, [r2, #4]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	4401      	add	r1, r0
 8008b8c:	6019      	str	r1, [r3, #0]
 8008b8e:	e7d7      	b.n	8008b40 <_free_r+0x24>
 8008b90:	d902      	bls.n	8008b98 <_free_r+0x7c>
 8008b92:	230c      	movs	r3, #12
 8008b94:	602b      	str	r3, [r5, #0]
 8008b96:	e7d3      	b.n	8008b40 <_free_r+0x24>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428a      	cmp	r2, r1
 8008b9e:	bf04      	itt	eq
 8008ba0:	6811      	ldreq	r1, [r2, #0]
 8008ba2:	6852      	ldreq	r2, [r2, #4]
 8008ba4:	6062      	str	r2, [r4, #4]
 8008ba6:	bf04      	itt	eq
 8008ba8:	1809      	addeq	r1, r1, r0
 8008baa:	6021      	streq	r1, [r4, #0]
 8008bac:	605c      	str	r4, [r3, #4]
 8008bae:	e7c7      	b.n	8008b40 <_free_r+0x24>
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000204 	.word	0x20000204

08008bb8 <_malloc_r>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	1ccd      	adds	r5, r1, #3
 8008bbc:	f025 0503 	bic.w	r5, r5, #3
 8008bc0:	3508      	adds	r5, #8
 8008bc2:	2d0c      	cmp	r5, #12
 8008bc4:	bf38      	it	cc
 8008bc6:	250c      	movcc	r5, #12
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	4606      	mov	r6, r0
 8008bcc:	db01      	blt.n	8008bd2 <_malloc_r+0x1a>
 8008bce:	42a9      	cmp	r1, r5
 8008bd0:	d903      	bls.n	8008bda <_malloc_r+0x22>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	f000 f877 	bl	8008ccc <__malloc_lock>
 8008bde:	4a21      	ldr	r2, [pc, #132]	; (8008c64 <_malloc_r+0xac>)
 8008be0:	6814      	ldr	r4, [r2, #0]
 8008be2:	4621      	mov	r1, r4
 8008be4:	b991      	cbnz	r1, 8008c0c <_malloc_r+0x54>
 8008be6:	4c20      	ldr	r4, [pc, #128]	; (8008c68 <_malloc_r+0xb0>)
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	b91b      	cbnz	r3, 8008bf4 <_malloc_r+0x3c>
 8008bec:	4630      	mov	r0, r6
 8008bee:	f000 f83d 	bl	8008c6c <_sbrk_r>
 8008bf2:	6020      	str	r0, [r4, #0]
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 f838 	bl	8008c6c <_sbrk_r>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d124      	bne.n	8008c4a <_malloc_r+0x92>
 8008c00:	230c      	movs	r3, #12
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	4630      	mov	r0, r6
 8008c06:	f000 f862 	bl	8008cce <__malloc_unlock>
 8008c0a:	e7e4      	b.n	8008bd6 <_malloc_r+0x1e>
 8008c0c:	680b      	ldr	r3, [r1, #0]
 8008c0e:	1b5b      	subs	r3, r3, r5
 8008c10:	d418      	bmi.n	8008c44 <_malloc_r+0x8c>
 8008c12:	2b0b      	cmp	r3, #11
 8008c14:	d90f      	bls.n	8008c36 <_malloc_r+0x7e>
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	50cd      	str	r5, [r1, r3]
 8008c1a:	18cc      	adds	r4, r1, r3
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f856 	bl	8008cce <__malloc_unlock>
 8008c22:	f104 000b 	add.w	r0, r4, #11
 8008c26:	1d23      	adds	r3, r4, #4
 8008c28:	f020 0007 	bic.w	r0, r0, #7
 8008c2c:	1ac3      	subs	r3, r0, r3
 8008c2e:	d0d3      	beq.n	8008bd8 <_malloc_r+0x20>
 8008c30:	425a      	negs	r2, r3
 8008c32:	50e2      	str	r2, [r4, r3]
 8008c34:	e7d0      	b.n	8008bd8 <_malloc_r+0x20>
 8008c36:	428c      	cmp	r4, r1
 8008c38:	684b      	ldr	r3, [r1, #4]
 8008c3a:	bf16      	itet	ne
 8008c3c:	6063      	strne	r3, [r4, #4]
 8008c3e:	6013      	streq	r3, [r2, #0]
 8008c40:	460c      	movne	r4, r1
 8008c42:	e7eb      	b.n	8008c1c <_malloc_r+0x64>
 8008c44:	460c      	mov	r4, r1
 8008c46:	6849      	ldr	r1, [r1, #4]
 8008c48:	e7cc      	b.n	8008be4 <_malloc_r+0x2c>
 8008c4a:	1cc4      	adds	r4, r0, #3
 8008c4c:	f024 0403 	bic.w	r4, r4, #3
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d005      	beq.n	8008c60 <_malloc_r+0xa8>
 8008c54:	1a21      	subs	r1, r4, r0
 8008c56:	4630      	mov	r0, r6
 8008c58:	f000 f808 	bl	8008c6c <_sbrk_r>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d0cf      	beq.n	8008c00 <_malloc_r+0x48>
 8008c60:	6025      	str	r5, [r4, #0]
 8008c62:	e7db      	b.n	8008c1c <_malloc_r+0x64>
 8008c64:	20000204 	.word	0x20000204
 8008c68:	20000208 	.word	0x20000208

08008c6c <_sbrk_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4c06      	ldr	r4, [pc, #24]	; (8008c88 <_sbrk_r+0x1c>)
 8008c70:	2300      	movs	r3, #0
 8008c72:	4605      	mov	r5, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	f7ff f982 	bl	8007f80 <_sbrk>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_sbrk_r+0x1a>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_sbrk_r+0x1a>
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20001ca8 	.word	0x20001ca8

08008c8c <siprintf>:
 8008c8c:	b40e      	push	{r1, r2, r3}
 8008c8e:	b500      	push	{lr}
 8008c90:	b09c      	sub	sp, #112	; 0x70
 8008c92:	ab1d      	add	r3, sp, #116	; 0x74
 8008c94:	9002      	str	r0, [sp, #8]
 8008c96:	9006      	str	r0, [sp, #24]
 8008c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c9c:	4809      	ldr	r0, [pc, #36]	; (8008cc4 <siprintf+0x38>)
 8008c9e:	9107      	str	r1, [sp, #28]
 8008ca0:	9104      	str	r1, [sp, #16]
 8008ca2:	4909      	ldr	r1, [pc, #36]	; (8008cc8 <siprintf+0x3c>)
 8008ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca8:	9105      	str	r1, [sp, #20]
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	a902      	add	r1, sp, #8
 8008cb0:	f000 f868 	bl	8008d84 <_svfiprintf_r>
 8008cb4:	9b02      	ldr	r3, [sp, #8]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	b01c      	add	sp, #112	; 0x70
 8008cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc0:	b003      	add	sp, #12
 8008cc2:	4770      	bx	lr
 8008cc4:	2000017c 	.word	0x2000017c
 8008cc8:	ffff0208 	.word	0xffff0208

08008ccc <__malloc_lock>:
 8008ccc:	4770      	bx	lr

08008cce <__malloc_unlock>:
 8008cce:	4770      	bx	lr

08008cd0 <__ssputs_r>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	688e      	ldr	r6, [r1, #8]
 8008cd6:	429e      	cmp	r6, r3
 8008cd8:	4682      	mov	sl, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	4690      	mov	r8, r2
 8008cde:	4699      	mov	r9, r3
 8008ce0:	d837      	bhi.n	8008d52 <__ssputs_r+0x82>
 8008ce2:	898a      	ldrh	r2, [r1, #12]
 8008ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ce8:	d031      	beq.n	8008d4e <__ssputs_r+0x7e>
 8008cea:	6825      	ldr	r5, [r4, #0]
 8008cec:	6909      	ldr	r1, [r1, #16]
 8008cee:	1a6f      	subs	r7, r5, r1
 8008cf0:	6965      	ldr	r5, [r4, #20]
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008cfc:	f109 0301 	add.w	r3, r9, #1
 8008d00:	443b      	add	r3, r7
 8008d02:	429d      	cmp	r5, r3
 8008d04:	bf38      	it	cc
 8008d06:	461d      	movcc	r5, r3
 8008d08:	0553      	lsls	r3, r2, #21
 8008d0a:	d530      	bpl.n	8008d6e <__ssputs_r+0x9e>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f7ff ff53 	bl	8008bb8 <_malloc_r>
 8008d12:	4606      	mov	r6, r0
 8008d14:	b950      	cbnz	r0, 8008d2c <__ssputs_r+0x5c>
 8008d16:	230c      	movs	r3, #12
 8008d18:	f8ca 3000 	str.w	r3, [sl]
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2c:	463a      	mov	r2, r7
 8008d2e:	6921      	ldr	r1, [r4, #16]
 8008d30:	f000 faa8 	bl	8009284 <memcpy>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	6126      	str	r6, [r4, #16]
 8008d42:	6165      	str	r5, [r4, #20]
 8008d44:	443e      	add	r6, r7
 8008d46:	1bed      	subs	r5, r5, r7
 8008d48:	6026      	str	r6, [r4, #0]
 8008d4a:	60a5      	str	r5, [r4, #8]
 8008d4c:	464e      	mov	r6, r9
 8008d4e:	454e      	cmp	r6, r9
 8008d50:	d900      	bls.n	8008d54 <__ssputs_r+0x84>
 8008d52:	464e      	mov	r6, r9
 8008d54:	4632      	mov	r2, r6
 8008d56:	4641      	mov	r1, r8
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	f000 fa9e 	bl	800929a <memmove>
 8008d5e:	68a3      	ldr	r3, [r4, #8]
 8008d60:	1b9b      	subs	r3, r3, r6
 8008d62:	60a3      	str	r3, [r4, #8]
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	441e      	add	r6, r3
 8008d68:	6026      	str	r6, [r4, #0]
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e7dc      	b.n	8008d28 <__ssputs_r+0x58>
 8008d6e:	462a      	mov	r2, r5
 8008d70:	f000 faac 	bl	80092cc <_realloc_r>
 8008d74:	4606      	mov	r6, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d1e2      	bne.n	8008d40 <__ssputs_r+0x70>
 8008d7a:	6921      	ldr	r1, [r4, #16]
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	f7ff fecd 	bl	8008b1c <_free_r>
 8008d82:	e7c8      	b.n	8008d16 <__ssputs_r+0x46>

08008d84 <_svfiprintf_r>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	461d      	mov	r5, r3
 8008d8a:	898b      	ldrh	r3, [r1, #12]
 8008d8c:	061f      	lsls	r7, r3, #24
 8008d8e:	b09d      	sub	sp, #116	; 0x74
 8008d90:	4680      	mov	r8, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	4616      	mov	r6, r2
 8008d96:	d50f      	bpl.n	8008db8 <_svfiprintf_r+0x34>
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	b96b      	cbnz	r3, 8008db8 <_svfiprintf_r+0x34>
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	f7ff ff0b 	bl	8008bb8 <_malloc_r>
 8008da2:	6020      	str	r0, [r4, #0]
 8008da4:	6120      	str	r0, [r4, #16]
 8008da6:	b928      	cbnz	r0, 8008db4 <_svfiprintf_r+0x30>
 8008da8:	230c      	movs	r3, #12
 8008daa:	f8c8 3000 	str.w	r3, [r8]
 8008dae:	f04f 30ff 	mov.w	r0, #4294967295
 8008db2:	e0c8      	b.n	8008f46 <_svfiprintf_r+0x1c2>
 8008db4:	2340      	movs	r3, #64	; 0x40
 8008db6:	6163      	str	r3, [r4, #20]
 8008db8:	2300      	movs	r3, #0
 8008dba:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc2:	2330      	movs	r3, #48	; 0x30
 8008dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dc8:	9503      	str	r5, [sp, #12]
 8008dca:	f04f 0b01 	mov.w	fp, #1
 8008dce:	4637      	mov	r7, r6
 8008dd0:	463d      	mov	r5, r7
 8008dd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008dd6:	b10b      	cbz	r3, 8008ddc <_svfiprintf_r+0x58>
 8008dd8:	2b25      	cmp	r3, #37	; 0x25
 8008dda:	d13e      	bne.n	8008e5a <_svfiprintf_r+0xd6>
 8008ddc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008de0:	d00b      	beq.n	8008dfa <_svfiprintf_r+0x76>
 8008de2:	4653      	mov	r3, sl
 8008de4:	4632      	mov	r2, r6
 8008de6:	4621      	mov	r1, r4
 8008de8:	4640      	mov	r0, r8
 8008dea:	f7ff ff71 	bl	8008cd0 <__ssputs_r>
 8008dee:	3001      	adds	r0, #1
 8008df0:	f000 80a4 	beq.w	8008f3c <_svfiprintf_r+0x1b8>
 8008df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df6:	4453      	add	r3, sl
 8008df8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfa:	783b      	ldrb	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 809d 	beq.w	8008f3c <_svfiprintf_r+0x1b8>
 8008e02:	2300      	movs	r3, #0
 8008e04:	f04f 32ff 	mov.w	r2, #4294967295
 8008e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	9307      	str	r3, [sp, #28]
 8008e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e14:	931a      	str	r3, [sp, #104]	; 0x68
 8008e16:	462f      	mov	r7, r5
 8008e18:	2205      	movs	r2, #5
 8008e1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e1e:	4850      	ldr	r0, [pc, #320]	; (8008f60 <_svfiprintf_r+0x1dc>)
 8008e20:	f7f7 f9de 	bl	80001e0 <memchr>
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	b9d0      	cbnz	r0, 8008e5e <_svfiprintf_r+0xda>
 8008e28:	06d9      	lsls	r1, r3, #27
 8008e2a:	bf44      	itt	mi
 8008e2c:	2220      	movmi	r2, #32
 8008e2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e32:	071a      	lsls	r2, r3, #28
 8008e34:	bf44      	itt	mi
 8008e36:	222b      	movmi	r2, #43	; 0x2b
 8008e38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e3c:	782a      	ldrb	r2, [r5, #0]
 8008e3e:	2a2a      	cmp	r2, #42	; 0x2a
 8008e40:	d015      	beq.n	8008e6e <_svfiprintf_r+0xea>
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	462f      	mov	r7, r5
 8008e46:	2000      	movs	r0, #0
 8008e48:	250a      	movs	r5, #10
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e50:	3b30      	subs	r3, #48	; 0x30
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	d94d      	bls.n	8008ef2 <_svfiprintf_r+0x16e>
 8008e56:	b1b8      	cbz	r0, 8008e88 <_svfiprintf_r+0x104>
 8008e58:	e00f      	b.n	8008e7a <_svfiprintf_r+0xf6>
 8008e5a:	462f      	mov	r7, r5
 8008e5c:	e7b8      	b.n	8008dd0 <_svfiprintf_r+0x4c>
 8008e5e:	4a40      	ldr	r2, [pc, #256]	; (8008f60 <_svfiprintf_r+0x1dc>)
 8008e60:	1a80      	subs	r0, r0, r2
 8008e62:	fa0b f000 	lsl.w	r0, fp, r0
 8008e66:	4318      	orrs	r0, r3
 8008e68:	9004      	str	r0, [sp, #16]
 8008e6a:	463d      	mov	r5, r7
 8008e6c:	e7d3      	b.n	8008e16 <_svfiprintf_r+0x92>
 8008e6e:	9a03      	ldr	r2, [sp, #12]
 8008e70:	1d11      	adds	r1, r2, #4
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	9103      	str	r1, [sp, #12]
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	db01      	blt.n	8008e7e <_svfiprintf_r+0xfa>
 8008e7a:	9207      	str	r2, [sp, #28]
 8008e7c:	e004      	b.n	8008e88 <_svfiprintf_r+0x104>
 8008e7e:	4252      	negs	r2, r2
 8008e80:	f043 0302 	orr.w	r3, r3, #2
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	783b      	ldrb	r3, [r7, #0]
 8008e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e8c:	d10c      	bne.n	8008ea8 <_svfiprintf_r+0x124>
 8008e8e:	787b      	ldrb	r3, [r7, #1]
 8008e90:	2b2a      	cmp	r3, #42	; 0x2a
 8008e92:	d133      	bne.n	8008efc <_svfiprintf_r+0x178>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	1d1a      	adds	r2, r3, #4
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	9203      	str	r2, [sp, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb8      	it	lt
 8008ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ea4:	3702      	adds	r7, #2
 8008ea6:	9305      	str	r3, [sp, #20]
 8008ea8:	4d2e      	ldr	r5, [pc, #184]	; (8008f64 <_svfiprintf_r+0x1e0>)
 8008eaa:	7839      	ldrb	r1, [r7, #0]
 8008eac:	2203      	movs	r2, #3
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7f7 f996 	bl	80001e0 <memchr>
 8008eb4:	b138      	cbz	r0, 8008ec6 <_svfiprintf_r+0x142>
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	1b40      	subs	r0, r0, r5
 8008eba:	fa03 f000 	lsl.w	r0, r3, r0
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	4303      	orrs	r3, r0
 8008ec2:	3701      	adds	r7, #1
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	7839      	ldrb	r1, [r7, #0]
 8008ec8:	4827      	ldr	r0, [pc, #156]	; (8008f68 <_svfiprintf_r+0x1e4>)
 8008eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ece:	2206      	movs	r2, #6
 8008ed0:	1c7e      	adds	r6, r7, #1
 8008ed2:	f7f7 f985 	bl	80001e0 <memchr>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d038      	beq.n	8008f4c <_svfiprintf_r+0x1c8>
 8008eda:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <_svfiprintf_r+0x1e8>)
 8008edc:	bb13      	cbnz	r3, 8008f24 <_svfiprintf_r+0x1a0>
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	f023 0307 	bic.w	r3, r3, #7
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	9303      	str	r3, [sp, #12]
 8008eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eec:	444b      	add	r3, r9
 8008eee:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef0:	e76d      	b.n	8008dce <_svfiprintf_r+0x4a>
 8008ef2:	fb05 3202 	mla	r2, r5, r2, r3
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	460f      	mov	r7, r1
 8008efa:	e7a6      	b.n	8008e4a <_svfiprintf_r+0xc6>
 8008efc:	2300      	movs	r3, #0
 8008efe:	3701      	adds	r7, #1
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	4619      	mov	r1, r3
 8008f04:	250a      	movs	r5, #10
 8008f06:	4638      	mov	r0, r7
 8008f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f0c:	3a30      	subs	r2, #48	; 0x30
 8008f0e:	2a09      	cmp	r2, #9
 8008f10:	d903      	bls.n	8008f1a <_svfiprintf_r+0x196>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0c8      	beq.n	8008ea8 <_svfiprintf_r+0x124>
 8008f16:	9105      	str	r1, [sp, #20]
 8008f18:	e7c6      	b.n	8008ea8 <_svfiprintf_r+0x124>
 8008f1a:	fb05 2101 	mla	r1, r5, r1, r2
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4607      	mov	r7, r0
 8008f22:	e7f0      	b.n	8008f06 <_svfiprintf_r+0x182>
 8008f24:	ab03      	add	r3, sp, #12
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	4622      	mov	r2, r4
 8008f2a:	4b11      	ldr	r3, [pc, #68]	; (8008f70 <_svfiprintf_r+0x1ec>)
 8008f2c:	a904      	add	r1, sp, #16
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f3af 8000 	nop.w
 8008f34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f38:	4681      	mov	r9, r0
 8008f3a:	d1d6      	bne.n	8008eea <_svfiprintf_r+0x166>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	065b      	lsls	r3, r3, #25
 8008f40:	f53f af35 	bmi.w	8008dae <_svfiprintf_r+0x2a>
 8008f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f46:	b01d      	add	sp, #116	; 0x74
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	ab03      	add	r3, sp, #12
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	4622      	mov	r2, r4
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <_svfiprintf_r+0x1ec>)
 8008f54:	a904      	add	r1, sp, #16
 8008f56:	4640      	mov	r0, r8
 8008f58:	f000 f882 	bl	8009060 <_printf_i>
 8008f5c:	e7ea      	b.n	8008f34 <_svfiprintf_r+0x1b0>
 8008f5e:	bf00      	nop
 8008f60:	080093b4 	.word	0x080093b4
 8008f64:	080093ba 	.word	0x080093ba
 8008f68:	080093be 	.word	0x080093be
 8008f6c:	00000000 	.word	0x00000000
 8008f70:	08008cd1 	.word	0x08008cd1

08008f74 <_printf_common>:
 8008f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	4691      	mov	r9, r2
 8008f7a:	461f      	mov	r7, r3
 8008f7c:	688a      	ldr	r2, [r1, #8]
 8008f7e:	690b      	ldr	r3, [r1, #16]
 8008f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	bfb8      	it	lt
 8008f88:	4613      	movlt	r3, r2
 8008f8a:	f8c9 3000 	str.w	r3, [r9]
 8008f8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f92:	4606      	mov	r6, r0
 8008f94:	460c      	mov	r4, r1
 8008f96:	b112      	cbz	r2, 8008f9e <_printf_common+0x2a>
 8008f98:	3301      	adds	r3, #1
 8008f9a:	f8c9 3000 	str.w	r3, [r9]
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	0699      	lsls	r1, r3, #26
 8008fa2:	bf42      	ittt	mi
 8008fa4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008fa8:	3302      	addmi	r3, #2
 8008faa:	f8c9 3000 	strmi.w	r3, [r9]
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	f015 0506 	ands.w	r5, r5, #6
 8008fb4:	d107      	bne.n	8008fc6 <_printf_common+0x52>
 8008fb6:	f104 0a19 	add.w	sl, r4, #25
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008fc0:	1a9b      	subs	r3, r3, r2
 8008fc2:	42ab      	cmp	r3, r5
 8008fc4:	dc28      	bgt.n	8009018 <_printf_common+0xa4>
 8008fc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	3300      	adds	r3, #0
 8008fce:	bf18      	it	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	0692      	lsls	r2, r2, #26
 8008fd4:	d42d      	bmi.n	8009032 <_printf_common+0xbe>
 8008fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fda:	4639      	mov	r1, r7
 8008fdc:	4630      	mov	r0, r6
 8008fde:	47c0      	blx	r8
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d020      	beq.n	8009026 <_printf_common+0xb2>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	68e5      	ldr	r5, [r4, #12]
 8008fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8008fec:	f003 0306 	and.w	r3, r3, #6
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	bf08      	it	eq
 8008ff4:	1aad      	subeq	r5, r5, r2
 8008ff6:	68a3      	ldr	r3, [r4, #8]
 8008ff8:	6922      	ldr	r2, [r4, #16]
 8008ffa:	bf0c      	ite	eq
 8008ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009000:	2500      	movne	r5, #0
 8009002:	4293      	cmp	r3, r2
 8009004:	bfc4      	itt	gt
 8009006:	1a9b      	subgt	r3, r3, r2
 8009008:	18ed      	addgt	r5, r5, r3
 800900a:	f04f 0900 	mov.w	r9, #0
 800900e:	341a      	adds	r4, #26
 8009010:	454d      	cmp	r5, r9
 8009012:	d11a      	bne.n	800904a <_printf_common+0xd6>
 8009014:	2000      	movs	r0, #0
 8009016:	e008      	b.n	800902a <_printf_common+0xb6>
 8009018:	2301      	movs	r3, #1
 800901a:	4652      	mov	r2, sl
 800901c:	4639      	mov	r1, r7
 800901e:	4630      	mov	r0, r6
 8009020:	47c0      	blx	r8
 8009022:	3001      	adds	r0, #1
 8009024:	d103      	bne.n	800902e <_printf_common+0xba>
 8009026:	f04f 30ff 	mov.w	r0, #4294967295
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902e:	3501      	adds	r5, #1
 8009030:	e7c3      	b.n	8008fba <_printf_common+0x46>
 8009032:	18e1      	adds	r1, r4, r3
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	2030      	movs	r0, #48	; 0x30
 8009038:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800903c:	4422      	add	r2, r4
 800903e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009042:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009046:	3302      	adds	r3, #2
 8009048:	e7c5      	b.n	8008fd6 <_printf_common+0x62>
 800904a:	2301      	movs	r3, #1
 800904c:	4622      	mov	r2, r4
 800904e:	4639      	mov	r1, r7
 8009050:	4630      	mov	r0, r6
 8009052:	47c0      	blx	r8
 8009054:	3001      	adds	r0, #1
 8009056:	d0e6      	beq.n	8009026 <_printf_common+0xb2>
 8009058:	f109 0901 	add.w	r9, r9, #1
 800905c:	e7d8      	b.n	8009010 <_printf_common+0x9c>
	...

08009060 <_printf_i>:
 8009060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009064:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009068:	460c      	mov	r4, r1
 800906a:	7e09      	ldrb	r1, [r1, #24]
 800906c:	b085      	sub	sp, #20
 800906e:	296e      	cmp	r1, #110	; 0x6e
 8009070:	4617      	mov	r7, r2
 8009072:	4606      	mov	r6, r0
 8009074:	4698      	mov	r8, r3
 8009076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009078:	f000 80b3 	beq.w	80091e2 <_printf_i+0x182>
 800907c:	d822      	bhi.n	80090c4 <_printf_i+0x64>
 800907e:	2963      	cmp	r1, #99	; 0x63
 8009080:	d036      	beq.n	80090f0 <_printf_i+0x90>
 8009082:	d80a      	bhi.n	800909a <_printf_i+0x3a>
 8009084:	2900      	cmp	r1, #0
 8009086:	f000 80b9 	beq.w	80091fc <_printf_i+0x19c>
 800908a:	2958      	cmp	r1, #88	; 0x58
 800908c:	f000 8083 	beq.w	8009196 <_printf_i+0x136>
 8009090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009094:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009098:	e032      	b.n	8009100 <_printf_i+0xa0>
 800909a:	2964      	cmp	r1, #100	; 0x64
 800909c:	d001      	beq.n	80090a2 <_printf_i+0x42>
 800909e:	2969      	cmp	r1, #105	; 0x69
 80090a0:	d1f6      	bne.n	8009090 <_printf_i+0x30>
 80090a2:	6820      	ldr	r0, [r4, #0]
 80090a4:	6813      	ldr	r3, [r2, #0]
 80090a6:	0605      	lsls	r5, r0, #24
 80090a8:	f103 0104 	add.w	r1, r3, #4
 80090ac:	d52a      	bpl.n	8009104 <_printf_i+0xa4>
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6011      	str	r1, [r2, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da03      	bge.n	80090be <_printf_i+0x5e>
 80090b6:	222d      	movs	r2, #45	; 0x2d
 80090b8:	425b      	negs	r3, r3
 80090ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80090be:	486f      	ldr	r0, [pc, #444]	; (800927c <_printf_i+0x21c>)
 80090c0:	220a      	movs	r2, #10
 80090c2:	e039      	b.n	8009138 <_printf_i+0xd8>
 80090c4:	2973      	cmp	r1, #115	; 0x73
 80090c6:	f000 809d 	beq.w	8009204 <_printf_i+0x1a4>
 80090ca:	d808      	bhi.n	80090de <_printf_i+0x7e>
 80090cc:	296f      	cmp	r1, #111	; 0x6f
 80090ce:	d020      	beq.n	8009112 <_printf_i+0xb2>
 80090d0:	2970      	cmp	r1, #112	; 0x70
 80090d2:	d1dd      	bne.n	8009090 <_printf_i+0x30>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f043 0320 	orr.w	r3, r3, #32
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	e003      	b.n	80090e6 <_printf_i+0x86>
 80090de:	2975      	cmp	r1, #117	; 0x75
 80090e0:	d017      	beq.n	8009112 <_printf_i+0xb2>
 80090e2:	2978      	cmp	r1, #120	; 0x78
 80090e4:	d1d4      	bne.n	8009090 <_printf_i+0x30>
 80090e6:	2378      	movs	r3, #120	; 0x78
 80090e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ec:	4864      	ldr	r0, [pc, #400]	; (8009280 <_printf_i+0x220>)
 80090ee:	e055      	b.n	800919c <_printf_i+0x13c>
 80090f0:	6813      	ldr	r3, [r2, #0]
 80090f2:	1d19      	adds	r1, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6011      	str	r1, [r2, #0]
 80090f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009100:	2301      	movs	r3, #1
 8009102:	e08c      	b.n	800921e <_printf_i+0x1be>
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6011      	str	r1, [r2, #0]
 8009108:	f010 0f40 	tst.w	r0, #64	; 0x40
 800910c:	bf18      	it	ne
 800910e:	b21b      	sxthne	r3, r3
 8009110:	e7cf      	b.n	80090b2 <_printf_i+0x52>
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	6825      	ldr	r5, [r4, #0]
 8009116:	1d18      	adds	r0, r3, #4
 8009118:	6010      	str	r0, [r2, #0]
 800911a:	0628      	lsls	r0, r5, #24
 800911c:	d501      	bpl.n	8009122 <_printf_i+0xc2>
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	e002      	b.n	8009128 <_printf_i+0xc8>
 8009122:	0668      	lsls	r0, r5, #25
 8009124:	d5fb      	bpl.n	800911e <_printf_i+0xbe>
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	4854      	ldr	r0, [pc, #336]	; (800927c <_printf_i+0x21c>)
 800912a:	296f      	cmp	r1, #111	; 0x6f
 800912c:	bf14      	ite	ne
 800912e:	220a      	movne	r2, #10
 8009130:	2208      	moveq	r2, #8
 8009132:	2100      	movs	r1, #0
 8009134:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009138:	6865      	ldr	r5, [r4, #4]
 800913a:	60a5      	str	r5, [r4, #8]
 800913c:	2d00      	cmp	r5, #0
 800913e:	f2c0 8095 	blt.w	800926c <_printf_i+0x20c>
 8009142:	6821      	ldr	r1, [r4, #0]
 8009144:	f021 0104 	bic.w	r1, r1, #4
 8009148:	6021      	str	r1, [r4, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d13d      	bne.n	80091ca <_printf_i+0x16a>
 800914e:	2d00      	cmp	r5, #0
 8009150:	f040 808e 	bne.w	8009270 <_printf_i+0x210>
 8009154:	4665      	mov	r5, ip
 8009156:	2a08      	cmp	r2, #8
 8009158:	d10b      	bne.n	8009172 <_printf_i+0x112>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	07db      	lsls	r3, r3, #31
 800915e:	d508      	bpl.n	8009172 <_printf_i+0x112>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	6862      	ldr	r2, [r4, #4]
 8009164:	429a      	cmp	r2, r3
 8009166:	bfde      	ittt	le
 8009168:	2330      	movle	r3, #48	; 0x30
 800916a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800916e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009172:	ebac 0305 	sub.w	r3, ip, r5
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	f8cd 8000 	str.w	r8, [sp]
 800917c:	463b      	mov	r3, r7
 800917e:	aa03      	add	r2, sp, #12
 8009180:	4621      	mov	r1, r4
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff fef6 	bl	8008f74 <_printf_common>
 8009188:	3001      	adds	r0, #1
 800918a:	d14d      	bne.n	8009228 <_printf_i+0x1c8>
 800918c:	f04f 30ff 	mov.w	r0, #4294967295
 8009190:	b005      	add	sp, #20
 8009192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009196:	4839      	ldr	r0, [pc, #228]	; (800927c <_printf_i+0x21c>)
 8009198:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800919c:	6813      	ldr	r3, [r2, #0]
 800919e:	6821      	ldr	r1, [r4, #0]
 80091a0:	1d1d      	adds	r5, r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6015      	str	r5, [r2, #0]
 80091a6:	060a      	lsls	r2, r1, #24
 80091a8:	d50b      	bpl.n	80091c2 <_printf_i+0x162>
 80091aa:	07ca      	lsls	r2, r1, #31
 80091ac:	bf44      	itt	mi
 80091ae:	f041 0120 	orrmi.w	r1, r1, #32
 80091b2:	6021      	strmi	r1, [r4, #0]
 80091b4:	b91b      	cbnz	r3, 80091be <_printf_i+0x15e>
 80091b6:	6822      	ldr	r2, [r4, #0]
 80091b8:	f022 0220 	bic.w	r2, r2, #32
 80091bc:	6022      	str	r2, [r4, #0]
 80091be:	2210      	movs	r2, #16
 80091c0:	e7b7      	b.n	8009132 <_printf_i+0xd2>
 80091c2:	064d      	lsls	r5, r1, #25
 80091c4:	bf48      	it	mi
 80091c6:	b29b      	uxthmi	r3, r3
 80091c8:	e7ef      	b.n	80091aa <_printf_i+0x14a>
 80091ca:	4665      	mov	r5, ip
 80091cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80091d0:	fb02 3311 	mls	r3, r2, r1, r3
 80091d4:	5cc3      	ldrb	r3, [r0, r3]
 80091d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80091da:	460b      	mov	r3, r1
 80091dc:	2900      	cmp	r1, #0
 80091de:	d1f5      	bne.n	80091cc <_printf_i+0x16c>
 80091e0:	e7b9      	b.n	8009156 <_printf_i+0xf6>
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	6825      	ldr	r5, [r4, #0]
 80091e6:	6961      	ldr	r1, [r4, #20]
 80091e8:	1d18      	adds	r0, r3, #4
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	0628      	lsls	r0, r5, #24
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	d501      	bpl.n	80091f6 <_printf_i+0x196>
 80091f2:	6019      	str	r1, [r3, #0]
 80091f4:	e002      	b.n	80091fc <_printf_i+0x19c>
 80091f6:	066a      	lsls	r2, r5, #25
 80091f8:	d5fb      	bpl.n	80091f2 <_printf_i+0x192>
 80091fa:	8019      	strh	r1, [r3, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	4665      	mov	r5, ip
 8009202:	e7b9      	b.n	8009178 <_printf_i+0x118>
 8009204:	6813      	ldr	r3, [r2, #0]
 8009206:	1d19      	adds	r1, r3, #4
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	681d      	ldr	r5, [r3, #0]
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	2100      	movs	r1, #0
 8009210:	4628      	mov	r0, r5
 8009212:	f7f6 ffe5 	bl	80001e0 <memchr>
 8009216:	b108      	cbz	r0, 800921c <_printf_i+0x1bc>
 8009218:	1b40      	subs	r0, r0, r5
 800921a:	6060      	str	r0, [r4, #4]
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	6123      	str	r3, [r4, #16]
 8009220:	2300      	movs	r3, #0
 8009222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009226:	e7a7      	b.n	8009178 <_printf_i+0x118>
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	462a      	mov	r2, r5
 800922c:	4639      	mov	r1, r7
 800922e:	4630      	mov	r0, r6
 8009230:	47c0      	blx	r8
 8009232:	3001      	adds	r0, #1
 8009234:	d0aa      	beq.n	800918c <_printf_i+0x12c>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	079b      	lsls	r3, r3, #30
 800923a:	d413      	bmi.n	8009264 <_printf_i+0x204>
 800923c:	68e0      	ldr	r0, [r4, #12]
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	4298      	cmp	r0, r3
 8009242:	bfb8      	it	lt
 8009244:	4618      	movlt	r0, r3
 8009246:	e7a3      	b.n	8009190 <_printf_i+0x130>
 8009248:	2301      	movs	r3, #1
 800924a:	464a      	mov	r2, r9
 800924c:	4639      	mov	r1, r7
 800924e:	4630      	mov	r0, r6
 8009250:	47c0      	blx	r8
 8009252:	3001      	adds	r0, #1
 8009254:	d09a      	beq.n	800918c <_printf_i+0x12c>
 8009256:	3501      	adds	r5, #1
 8009258:	68e3      	ldr	r3, [r4, #12]
 800925a:	9a03      	ldr	r2, [sp, #12]
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	42ab      	cmp	r3, r5
 8009260:	dcf2      	bgt.n	8009248 <_printf_i+0x1e8>
 8009262:	e7eb      	b.n	800923c <_printf_i+0x1dc>
 8009264:	2500      	movs	r5, #0
 8009266:	f104 0919 	add.w	r9, r4, #25
 800926a:	e7f5      	b.n	8009258 <_printf_i+0x1f8>
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1ac      	bne.n	80091ca <_printf_i+0x16a>
 8009270:	7803      	ldrb	r3, [r0, #0]
 8009272:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009276:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800927a:	e76c      	b.n	8009156 <_printf_i+0xf6>
 800927c:	080093c5 	.word	0x080093c5
 8009280:	080093d6 	.word	0x080093d6

08009284 <memcpy>:
 8009284:	b510      	push	{r4, lr}
 8009286:	1e43      	subs	r3, r0, #1
 8009288:	440a      	add	r2, r1
 800928a:	4291      	cmp	r1, r2
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	bd10      	pop	{r4, pc}
 8009290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009298:	e7f7      	b.n	800928a <memcpy+0x6>

0800929a <memmove>:
 800929a:	4288      	cmp	r0, r1
 800929c:	b510      	push	{r4, lr}
 800929e:	eb01 0302 	add.w	r3, r1, r2
 80092a2:	d807      	bhi.n	80092b4 <memmove+0x1a>
 80092a4:	1e42      	subs	r2, r0, #1
 80092a6:	4299      	cmp	r1, r3
 80092a8:	d00a      	beq.n	80092c0 <memmove+0x26>
 80092aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80092b2:	e7f8      	b.n	80092a6 <memmove+0xc>
 80092b4:	4283      	cmp	r3, r0
 80092b6:	d9f5      	bls.n	80092a4 <memmove+0xa>
 80092b8:	1881      	adds	r1, r0, r2
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	42d3      	cmn	r3, r2
 80092be:	d100      	bne.n	80092c2 <memmove+0x28>
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092ca:	e7f7      	b.n	80092bc <memmove+0x22>

080092cc <_realloc_r>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	4607      	mov	r7, r0
 80092d0:	4614      	mov	r4, r2
 80092d2:	460e      	mov	r6, r1
 80092d4:	b921      	cbnz	r1, 80092e0 <_realloc_r+0x14>
 80092d6:	4611      	mov	r1, r2
 80092d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092dc:	f7ff bc6c 	b.w	8008bb8 <_malloc_r>
 80092e0:	b922      	cbnz	r2, 80092ec <_realloc_r+0x20>
 80092e2:	f7ff fc1b 	bl	8008b1c <_free_r>
 80092e6:	4625      	mov	r5, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ec:	f000 f814 	bl	8009318 <_malloc_usable_size_r>
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d20f      	bcs.n	8009314 <_realloc_r+0x48>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4638      	mov	r0, r7
 80092f8:	f7ff fc5e 	bl	8008bb8 <_malloc_r>
 80092fc:	4605      	mov	r5, r0
 80092fe:	2800      	cmp	r0, #0
 8009300:	d0f2      	beq.n	80092e8 <_realloc_r+0x1c>
 8009302:	4631      	mov	r1, r6
 8009304:	4622      	mov	r2, r4
 8009306:	f7ff ffbd 	bl	8009284 <memcpy>
 800930a:	4631      	mov	r1, r6
 800930c:	4638      	mov	r0, r7
 800930e:	f7ff fc05 	bl	8008b1c <_free_r>
 8009312:	e7e9      	b.n	80092e8 <_realloc_r+0x1c>
 8009314:	4635      	mov	r5, r6
 8009316:	e7e7      	b.n	80092e8 <_realloc_r+0x1c>

08009318 <_malloc_usable_size_r>:
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f18      	subs	r0, r3, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfbc      	itt	lt
 8009322:	580b      	ldrlt	r3, [r1, r0]
 8009324:	18c0      	addlt	r0, r0, r3
 8009326:	4770      	bx	lr

08009328 <_init>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr

08009334 <_fini>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr
