
ELEC3850 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800dec0  0800dec0  0001dec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e310  0800e310  0002034c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e310  0800e310  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e318  0800e318  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e318  0800e318  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e31c  0800e31c  0001e31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800e320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  20000350  0800e66c  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fdc  0800e66c  00021fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002220c  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004686  00000000  00000000  00042588  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc0  00000000  00000000  00046c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  000487d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027eaa  00000000  00000000  0004a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018fdf  00000000  00000000  00072052  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d994c  00000000  00000000  0008b031  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016497d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084f4  00000000  00000000  001649f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dea8 	.word	0x0800dea8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800dea8 	.word	0x0800dea8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fd37 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f009 f960 	bl	800a1a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd4f 	bl	80019ae <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fd17 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000118 	.word	0x20000118
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000390 	.word	0x20000390

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000390 	.word	0x20000390

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_Delay+0x40>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e033      	b.n	800104e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f009 f8fe 	bl	800a1f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001016:	f023 0302 	bic.w	r3, r3, #2
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fa40 	bl	80014a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f023 0303 	bic.w	r3, r3, #3
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	e001      	b.n	8001044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Start_DMA+0x1e>
 8001072:	2302      	movs	r3, #2
 8001074:	e0cc      	b.n	8001210 <HAL_ADC_Start_DMA+0x1b8>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	d018      	beq.n	80010be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <HAL_ADC_Start_DMA+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5e      	ldr	r2, [pc, #376]	; (800121c <HAL_ADC_Start_DMA+0x1c4>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9a      	lsrs	r2, r3, #18
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b0:	e002      	b.n	80010b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f9      	bne.n	80010b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 80a0 	bne.w	800120e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110c:	d106      	bne.n	800111c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f023 0206 	bic.w	r2, r3, #6
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
 800111a:	e002      	b.n	8001122 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 800112c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	4a3c      	ldr	r2, [pc, #240]	; (8001224 <HAL_ADC_Start_DMA+0x1cc>)
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <HAL_ADC_Start_DMA+0x1d0>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	4a3a      	ldr	r2, [pc, #232]	; (800122c <HAL_ADC_Start_DMA+0x1d4>)
 8001144:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800114e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800115e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	334c      	adds	r3, #76	; 0x4c
 800117a:	4619      	mov	r1, r3
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f000 fcd0 	bl	8001b24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_ADC_Start_DMA+0x1d8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d015      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x16e>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <HAL_ADC_Start_DMA+0x1dc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Start_DMA+0x158>
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_ADC_Start_DMA+0x1e0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d129      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d823      	bhi.n	800120e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11c      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e013      	b.n	800120e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_ADC_Start_DMA+0x1d8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10e      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000118 	.word	0x20000118
 800121c:	431bde83 	.word	0x431bde83
 8001220:	40012300 	.word	0x40012300
 8001224:	080016a1 	.word	0x080016a1
 8001228:	0800175b 	.word	0x0800175b
 800122c:	08001777 	.word	0x08001777
 8001230:	40012000 	.word	0x40012000
 8001234:	40012100 	.word	0x40012100
 8001238:	40012200 	.word	0x40012200

0800123c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c>
 800127c:	2302      	movs	r3, #2
 800127e:	e105      	b.n	800148c <HAL_ADC_ConfigChannel+0x228>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d925      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	2207      	movs	r2, #7
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68d9      	ldr	r1, [r3, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4403      	add	r3, r0
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	409a      	lsls	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e022      	b.n	8001322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4403      	add	r3, r0
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d824      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b05      	subs	r3, #5
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e04c      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b23      	subs	r3, #35	; 0x23
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	e023      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_ADC_ConfigChannel+0x234>)
 8001410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d109      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d105      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d003      	beq.n	800144a <HAL_ADC_ConfigChannel+0x1e6>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b11      	cmp	r3, #17
 8001448:	d11b      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d111      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_ConfigChannel+0x240>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000
 80014a0:	20000118 	.word	0x20000118
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <ADC_Init+0x1f0>)
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <ADC_Init+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d022      	beq.n	8001586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800154e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e00f      	b.n	80015a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0202 	bic.w	r2, r2, #2
 80015b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e1b      	ldrb	r3, [r3, #24]
 80015c0:	005a      	lsls	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	3b01      	subs	r3, #1
 8001600:	035a      	lsls	r2, r3, #13
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e007      	b.n	800161c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	3b01      	subs	r3, #1
 8001638:	051a      	lsls	r2, r3, #20
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165e:	025a      	lsls	r2, r3, #9
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	029a      	lsls	r2, r3, #10
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40012300 	.word	0x40012300
 800169c:	0f000001 	.word	0x0f000001

080016a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d13c      	bne.n	8001734 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d12b      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d127      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d119      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0220 	bic.w	r2, r2, #32
 8001706:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f008 fc1f 	bl	8009f70 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001732:	e00e      	b.n	8001752 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fd85 	bl	8001250 <HAL_ADC_ErrorCallback>
}
 8001746:	e004      	b.n	8001752 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fd67 	bl	800123c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fd5a 	bl	8001250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff face 	bl	8000f74 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e099      	b.n	8001b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e00f      	b.n	8001a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fab5 	bl	8000f74 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d908      	bls.n	8001a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e078      	b.n	8001b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e8      	bne.n	8001a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_DMA_Init+0x158>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d117      	bne.n	8001aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fa77 	bl	8001fc0 <DMA_CheckFifoParam>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fa2e 	bl	8001f54 <DMA_CalcBaseAndBitshift>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	f010803f 	.word	0xf010803f

08001b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_Start_IT+0x26>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e048      	b.n	8001bdc <HAL_DMA_Start_IT+0xb8>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d137      	bne.n	8001bce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f9c0 	bl	8001ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0216 	orr.w	r2, r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0208 	orr.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e005      	b.n	8001bda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <HAL_DMA_IRQHandler+0x258>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a92      	ldr	r2, [pc, #584]	; (8001e40 <HAL_DMA_IRQHandler+0x25c>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2208      	movs	r2, #8
 8001c10:	409a      	lsls	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2201      	movs	r2, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f043 0202 	orr.w	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	2204      	movs	r2, #4
 8001caa:	409a      	lsls	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f043 0204 	orr.w	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d03c      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2210      	movs	r2, #16
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d108      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d024      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
 8001d12:	e01f      	b.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0208 	bic.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2220      	movs	r2, #32
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 808e 	beq.w	8001e82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8086 	beq.w	8001e82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d136      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0216 	bic.w	r2, r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_DMA_IRQHandler+0x1da>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	223f      	movs	r2, #63	; 0x3f
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d07d      	beq.n	8001eee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
        }
        return;
 8001dfa:	e078      	b.n	8001eee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01c      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d108      	bne.n	8001e2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d030      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
 8001e28:	e02b      	b.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d027      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
 8001e3a:	e022      	b.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
 8001e3c:	20000118 	.word	0x20000118
 8001e40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0210 	bic.w	r2, r2, #16
 8001e60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d032      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d022      	beq.n	8001edc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d307      	bcc.n	8001eca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f2      	bne.n	8001eae <HAL_DMA_IRQHandler+0x2ca>
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001eca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e000      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001eee:	bf00      	nop
    }
  }
}
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop

08001ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d108      	bne.n	8001f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f36:	e007      	b.n	8001f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3b10      	subs	r3, #16
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <DMA_CalcBaseAndBitshift+0x68>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d909      	bls.n	8001f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
 8001f94:	e007      	b.n	8001fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	aaaaaaab 	.word	0xaaaaaaab
 8001fbc:	0800e030 	.word	0x0800e030

08001fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11f      	bne.n	800201a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d855      	bhi.n	800208c <DMA_CheckFifoParam+0xcc>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x28>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	0800200b 	.word	0x0800200b
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	0800208d 	.word	0x0800208d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d045      	beq.n	8002090 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e042      	b.n	8002090 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002012:	d13f      	bne.n	8002094 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e03c      	b.n	8002094 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d121      	bne.n	8002068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d836      	bhi.n	8002098 <DMA_CheckFifoParam+0xd8>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <DMA_CheckFifoParam+0x70>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002047 	.word	0x08002047
 8002038:	08002041 	.word	0x08002041
 800203c:	08002059 	.word	0x08002059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e02f      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d024      	beq.n	800209c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002056:	e021      	b.n	800209c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002060:	d11e      	bne.n	80020a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002066:	e01b      	b.n	80020a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d902      	bls.n	8002074 <DMA_CheckFifoParam+0xb4>
 800206e:	2b03      	cmp	r3, #3
 8002070:	d003      	beq.n	800207a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002072:	e018      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e015      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      break;
 800208a:	e00b      	b.n	80020a4 <DMA_CheckFifoParam+0xe4>
      break;
 800208c:	bf00      	nop
 800208e:	e00a      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002090:	bf00      	nop
 8002092:	e008      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002094:	bf00      	nop
 8002096:	e006      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002098:	bf00      	nop
 800209a:	e004      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 800209c:	bf00      	nop
 800209e:	e002      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 80020a4:	bf00      	nop
    }
  } 
  
  return status; 
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e16b      	b.n	80023a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 815a 	bne.w	80023a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x4a>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00b      	beq.n	800219a <HAL_GPIO_Init+0xe6>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218e:	2b11      	cmp	r3, #17
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b12      	cmp	r3, #18
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80b4 	beq.w	80023a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_GPIO_Init+0x308>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_GPIO_Init+0x308>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_GPIO_Init+0x308>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002256:	4a5a      	ldr	r2, [pc, #360]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a51      	ldr	r2, [pc, #324]	; (80023c4 <HAL_GPIO_Init+0x310>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02b      	beq.n	80022da <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_GPIO_Init+0x314>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d025      	beq.n	80022d6 <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4f      	ldr	r2, [pc, #316]	; (80023cc <HAL_GPIO_Init+0x318>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4e      	ldr	r2, [pc, #312]	; (80023d0 <HAL_GPIO_Init+0x31c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x21a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4d      	ldr	r2, [pc, #308]	; (80023d4 <HAL_GPIO_Init+0x320>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x216>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4c      	ldr	r2, [pc, #304]	; (80023d8 <HAL_GPIO_Init+0x324>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x212>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	; (80023dc <HAL_GPIO_Init+0x328>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x20e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4a      	ldr	r2, [pc, #296]	; (80023e0 <HAL_GPIO_Init+0x32c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x20a>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00e      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022be:	2308      	movs	r3, #8
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4934      	ldr	r1, [pc, #208]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_GPIO_Init+0x330>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231e:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae90 	bls.w	80020d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	3724      	adds	r7, #36	; 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40021c00 	.word	0x40021c00
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e001      	b.n	800240a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	4618      	mov	r0, r3
 800246c:	f007 fd9c 	bl	8009fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e10f      	b.n	80026ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f007 ff1c 	bl	800a2e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c0:	f002 fe32 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	; (80026b8 <HAL_I2C_Init+0x23c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d807      	bhi.n	80024e0 <HAL_I2C_Init+0x64>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7a      	ldr	r2, [pc, #488]	; (80026bc <HAL_I2C_Init+0x240>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e006      	b.n	80024ee <HAL_I2C_Init+0x72>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_I2C_Init+0x244>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0db      	b.n	80026ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a72      	ldr	r2, [pc, #456]	; (80026c4 <HAL_I2C_Init+0x248>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0c9b      	lsrs	r3, r3, #18
 8002500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_I2C_Init+0x23c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d802      	bhi.n	8002530 <HAL_I2C_Init+0xb4>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3301      	adds	r3, #1
 800252e:	e009      	b.n	8002544 <HAL_I2C_Init+0xc8>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_I2C_Init+0x24c>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	3301      	adds	r3, #1
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4956      	ldr	r1, [pc, #344]	; (80026b8 <HAL_I2C_Init+0x23c>)
 8002560:	428b      	cmp	r3, r1
 8002562:	d80d      	bhi.n	8002580 <HAL_I2C_Init+0x104>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e59      	subs	r1, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b04      	cmp	r3, #4
 800257a:	bf38      	it	cc
 800257c:	2304      	movcc	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x130>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x156>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x15e>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x184>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	461a      	mov	r2, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	817b      	strh	r3, [r7, #10]
 80026dc:	4613      	mov	r3, r2
 80026de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7fe fc48 	bl	8000f74 <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80e0 	bne.w	80028b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2319      	movs	r3, #25
 80026fa:	2201      	movs	r2, #1
 80026fc:	4970      	ldr	r1, [pc, #448]	; (80028c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f958 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	e0d3      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2C_Master_Transmit+0x50>
 8002718:	2302      	movs	r3, #2
 800271a:	e0cc      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d007      	beq.n	8002742 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2221      	movs	r2, #33	; 0x21
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2210      	movs	r2, #16
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	893a      	ldrh	r2, [r7, #8]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6a3a      	ldr	r2, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f89c 	bl	80028c8 <I2C_MasterRequestWrite>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e08d      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027b0:	e066      	b.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	6a39      	ldr	r1, [r7, #32]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f9d2 	bl	8002b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11b      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x188>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f9c2 	bl	8002be2 <I2C_WaitOnBTFFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b04      	cmp	r3, #4
 800286a:	d107      	bne.n	800287c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e01a      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d194      	bne.n	80027b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d006      	beq.n	80028f2 <I2C_MasterRequestWrite+0x2a>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d003      	beq.n	80028f2 <I2C_MasterRequestWrite+0x2a>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f0:	d108      	bne.n	8002904 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e00b      	b.n	800291c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	2b12      	cmp	r3, #18
 800290a:	d107      	bne.n	800291c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f843 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e035      	b.n	80029a4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002940:	d108      	bne.n	8002954 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002942:	897b      	ldrh	r3, [r7, #10]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002950:	611a      	str	r2, [r3, #16]
 8002952:	e01b      	b.n	800298c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002954:	897b      	ldrh	r3, [r7, #10]
 8002956:	11db      	asrs	r3, r3, #7
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 0306 	and.w	r3, r3, #6
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f063 030f 	orn	r3, r3, #15
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <I2C_MasterRequestWrite+0xe4>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f875 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e010      	b.n	80029a4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <I2C_MasterRequestWrite+0xe8>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f865 	bl	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	00010008 	.word	0x00010008
 80029b0:	00010002 	.word	0x00010002

080029b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	e025      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d021      	beq.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe fad1 	bl	8000f74 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e023      	b.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10d      	bne.n	8002a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	e00c      	b.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d0b6      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a70:	e051      	b.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d123      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e046      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d021      	beq.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad2:	f7fe fa4f 	bl	8000f74 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d116      	bne.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0220 	orr.w	r2, r3, #32
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e020      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e00b      	b.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d18d      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b6c:	e02d      	b.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f878 	bl	8002c64 <I2C_IsAcknowledgeFailed>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e02d      	b.n	8002bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d021      	beq.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7fe f9f5 	bl	8000f74 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e007      	b.n	8002bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d1ca      	bne.n	8002b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bee:	e02d      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f837 	bl	8002c64 <I2C_IsAcknowledgeFailed>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e02d      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d021      	beq.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c08:	f7fe f9b4 	bl	8000f74 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d302      	bcc.n	8002c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d1ca      	bne.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d11b      	bne.n	8002cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e128      	b.n	8002f28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a90      	ldr	r2, [pc, #576]	; (8002f30 <HAL_I2S_Init+0x26c>)
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f007 fb3d 	bl	800a370 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d0c:	f023 030f 	bic.w	r3, r3, #15
 8002d10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2202      	movs	r2, #2
 8002d18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d060      	beq.n	8002de4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e001      	b.n	8002d34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d802      	bhi.n	8002d42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f002 fafa 	bl	800533c <HAL_RCCEx_GetPeriphCLKFreq>
 8002d48:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d52:	d125      	bne.n	8002da0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	461a      	mov	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	3305      	adds	r3, #5
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e01f      	b.n	8002dbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	e00e      	b.n	8002dbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	461a      	mov	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	3305      	adds	r3, #5
 8002dbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_I2S_Init+0x270>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	08db      	lsrs	r3, r3, #3
 8002dc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002de4:	2302      	movs	r3, #2
 8002de6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d902      	bls.n	8002df8 <HAL_I2S_Init+0x134>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	2bff      	cmp	r3, #255	; 0xff
 8002df6:	d907      	bls.n	8002e08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0210 	orr.w	r2, r3, #16
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e08f      	b.n	8002f28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	ea42 0103 	orr.w	r1, r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e26:	f023 030f 	bic.w	r3, r3, #15
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6851      	ldr	r1, [r2, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6892      	ldr	r2, [r2, #8]
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68d2      	ldr	r2, [r2, #12]
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6992      	ldr	r2, [r2, #24]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d161      	bne.n	8002f18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <HAL_I2S_Init+0x274>)
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_I2S_Init+0x278>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_I2S_Init+0x1a4>
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_I2S_Init+0x27c>)
 8002e66:	e001      	b.n	8002e6c <HAL_I2S_Init+0x1a8>
 8002e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4932      	ldr	r1, [pc, #200]	; (8002f3c <HAL_I2S_Init+0x278>)
 8002e74:	428a      	cmp	r2, r1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2S_Init+0x1b8>
 8002e78:	4a31      	ldr	r2, [pc, #196]	; (8002f40 <HAL_I2S_Init+0x27c>)
 8002e7a:	e001      	b.n	8002e80 <HAL_I2S_Init+0x1bc>
 8002e7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e84:	f023 030f 	bic.w	r3, r3, #15
 8002e88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2b      	ldr	r2, [pc, #172]	; (8002f3c <HAL_I2S_Init+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d101      	bne.n	8002e98 <HAL_I2S_Init+0x1d4>
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_I2S_Init+0x27c>)
 8002e96:	e001      	b.n	8002e9c <HAL_I2S_Init+0x1d8>
 8002e98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_I2S_Init+0x278>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d101      	bne.n	8002eae <HAL_I2S_Init+0x1ea>
 8002eaa:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_I2S_Init+0x27c>)
 8002eac:	e001      	b.n	8002eb2 <HAL_I2S_Init+0x1ee>
 8002eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebe:	d003      	beq.n	8002ec8 <HAL_I2S_Init+0x204>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e001      	b.n	8002ed4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	b299      	uxth	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002eea:	4303      	orrs	r3, r0
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_I2S_Init+0x278>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2S_Init+0x24c>
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_I2S_Init+0x27c>)
 8002f0e:	e001      	b.n	8002f14 <HAL_I2S_Init+0x250>
 8002f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f14:	897a      	ldrh	r2, [r7, #10]
 8002f16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	0800303b 	.word	0x0800303b
 8002f34:	cccccccd 	.word	0xcccccccd
 8002f38:	08003151 	.word	0x08003151
 8002f3c:	40003800 	.word	0x40003800
 8002f40:	40003400 	.word	0x40003400

08002f44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	881a      	ldrh	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c9a      	adds	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fc4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffb8 	bl	8002f44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	b292      	uxth	r2, r2
 8002ff0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	1c9a      	adds	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10e      	bne.n	8003032 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003022:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff93 	bl	8002f58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b04      	cmp	r3, #4
 8003054:	d13a      	bne.n	80030cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d109      	bne.n	8003074 <I2S_IRQHandler+0x3a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d102      	bne.n	8003074 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ffb4 	bl	8002fdc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d126      	bne.n	80030cc <I2S_IRQHandler+0x92>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b20      	cmp	r3, #32
 800308a:	d11f      	bne.n	80030cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800309a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ff50 	bl	8002f6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d136      	bne.n	8003146 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d109      	bne.n	80030f6 <I2S_IRQHandler+0xbc>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ec:	2b80      	cmp	r3, #128	; 0x80
 80030ee:	d102      	bne.n	80030f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff45 	bl	8002f80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d122      	bne.n	8003146 <I2S_IRQHandler+0x10c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b20      	cmp	r3, #32
 800310c:	d11b      	bne.n	8003146 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800311c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f043 0204 	orr.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff13 	bl	8002f6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4aa2      	ldr	r2, [pc, #648]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800316a:	4ba2      	ldr	r3, [pc, #648]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800316c:	e001      	b.n	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800316e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a9b      	ldr	r2, [pc, #620]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003188:	4b9a      	ldr	r3, [pc, #616]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800318a:	e001      	b.n	8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800318c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d004      	beq.n	80031a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 8099 	bne.w	80032da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f925 	bl	800340c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9c8 	bl	800356c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d13a      	bne.n	800325c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d035      	beq.n	800325c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7e      	ldr	r2, [pc, #504]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80031fa:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031fc:	e001      	b.n	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80031fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4979      	ldr	r1, [pc, #484]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800320a:	428b      	cmp	r3, r1
 800320c:	d101      	bne.n	8003212 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800320e:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003210:	e001      	b.n	8003216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003216:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800321a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800322a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fe88 	bl	8002f6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	f040 80be 	bne.w	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80b8 	beq.w	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003282:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a59      	ldr	r2, [pc, #356]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800328e:	4b59      	ldr	r3, [pc, #356]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003290:	e001      	b.n	8003296 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4954      	ldr	r1, [pc, #336]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800329e:	428b      	cmp	r3, r1
 80032a0:	d101      	bne.n	80032a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032a4:	e001      	b.n	80032aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80032a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fe4a 	bl	8002f6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032d8:	e084      	b.n	80033e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d107      	bne.n	80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8be 	bl	8003470 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f8fd 	bl	8003508 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d12f      	bne.n	8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d02a      	beq.n	8003378 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003330:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800333e:	e001      	b.n	8003344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4929      	ldr	r1, [pc, #164]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800334c:	428b      	cmp	r3, r1
 800334e:	d101      	bne.n	8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003352:	e001      	b.n	8003358 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff fdfa 	bl	8002f6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	d131      	bne.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d02c      	beq.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003396:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003398:	e001      	b.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800339a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4912      	ldr	r1, [pc, #72]	; (80033f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033a6:	428b      	cmp	r3, r1
 80033a8:	d101      	bne.n	80033ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033ac:	e001      	b.n	80033b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80033ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fdc5 	bl	8002f6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e2:	e000      	b.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033e4:	bf00      	nop
}
 80033e6:	bf00      	nop
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40003800 	.word	0x40003800
 80033f4:	40003400 	.word	0x40003400

080033f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c99      	adds	r1, r3, #2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6251      	str	r1, [r2, #36]	; 0x24
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800344c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffc9 	bl	80033f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c99      	adds	r1, r3, #2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6251      	str	r1, [r2, #36]	; 0x24
 8003482:	8819      	ldrh	r1, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <I2SEx_TxISR_I2SExt+0x90>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <I2SEx_TxISR_I2SExt+0x22>
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <I2SEx_TxISR_I2SExt+0x94>)
 8003490:	e001      	b.n	8003496 <I2SEx_TxISR_I2SExt+0x26>
 8003492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003496:	460a      	mov	r2, r1
 8003498:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d121      	bne.n	80034f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <I2SEx_TxISR_I2SExt+0x90>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <I2SEx_TxISR_I2SExt+0x50>
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <I2SEx_TxISR_I2SExt+0x94>)
 80034be:	e001      	b.n	80034c4 <I2SEx_TxISR_I2SExt+0x54>
 80034c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	490d      	ldr	r1, [pc, #52]	; (8003500 <I2SEx_TxISR_I2SExt+0x90>)
 80034cc:	428b      	cmp	r3, r1
 80034ce:	d101      	bne.n	80034d4 <I2SEx_TxISR_I2SExt+0x64>
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <I2SEx_TxISR_I2SExt+0x94>)
 80034d2:	e001      	b.n	80034d8 <I2SEx_TxISR_I2SExt+0x68>
 80034d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff ff81 	bl	80033f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40003800 	.word	0x40003800
 8003504:	40003400 	.word	0x40003400

08003508 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68d8      	ldr	r0, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	1c99      	adds	r1, r3, #2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003520:	b282      	uxth	r2, r0
 8003522:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d113      	bne.n	8003564 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff4a 	bl	80033f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a20      	ldr	r2, [pc, #128]	; (80035fc <I2SEx_RxISR_I2SExt+0x90>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <I2SEx_RxISR_I2SExt+0x16>
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <I2SEx_RxISR_I2SExt+0x94>)
 8003580:	e001      	b.n	8003586 <I2SEx_RxISR_I2SExt+0x1a>
 8003582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003586:	68d8      	ldr	r0, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	1c99      	adds	r1, r3, #2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003592:	b282      	uxth	r2, r0
 8003594:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d121      	bne.n	80035f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <I2SEx_RxISR_I2SExt+0x90>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <I2SEx_RxISR_I2SExt+0x50>
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <I2SEx_RxISR_I2SExt+0x94>)
 80035ba:	e001      	b.n	80035c0 <I2SEx_RxISR_I2SExt+0x54>
 80035bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	490d      	ldr	r1, [pc, #52]	; (80035fc <I2SEx_RxISR_I2SExt+0x90>)
 80035c8:	428b      	cmp	r3, r1
 80035ca:	d101      	bne.n	80035d0 <I2SEx_RxISR_I2SExt+0x64>
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <I2SEx_RxISR_I2SExt+0x94>)
 80035ce:	e001      	b.n	80035d4 <I2SEx_RxISR_I2SExt+0x68>
 80035d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ff03 	bl	80033f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40003800 	.word	0x40003800
 8003600:	40003400 	.word	0x40003400

08003604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b08f      	sub	sp, #60	; 0x3c
 8003608:	af0a      	add	r7, sp, #40	; 0x28
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e10f      	b.n	8003836 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f007 fa53 	bl	800aadc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f003 f9ba 	bl	80069ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	687e      	ldr	r6, [r7, #4]
 8003662:	466d      	mov	r5, sp
 8003664:	f106 0410 	add.w	r4, r6, #16
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003674:	e885 0003 	stmia.w	r5, {r0, r1}
 8003678:	1d33      	adds	r3, r6, #4
 800367a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f003 f891 	bl	80067a4 <USB_CoreInit>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d0      	b.n	8003836 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f003 f9a8 	bl	80069f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e04a      	b.n	800373c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	333d      	adds	r3, #61	; 0x3d
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	333c      	adds	r3, #60	; 0x3c
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	b298      	uxth	r0, r3
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3342      	adds	r3, #66	; 0x42
 80036e2:	4602      	mov	r2, r0
 80036e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	333f      	adds	r3, #63	; 0x3f
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3344      	adds	r3, #68	; 0x44
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3348      	adds	r3, #72	; 0x48
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3350      	adds	r3, #80	; 0x50
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	3301      	adds	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3af      	bcc.n	80036a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e044      	b.n	80037d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	3301      	adds	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d3b5      	bcc.n	800374c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	687e      	ldr	r6, [r7, #4]
 80037e8:	466d      	mov	r5, sp
 80037ea:	f106 0410 	add.w	r4, r6, #16
 80037ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fe:	1d33      	adds	r3, r6, #4
 8003800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f003 f91e 	bl	8006a44 <USB_DevInit>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00d      	b.n	8003836 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f004 f913 	bl	8007a5a <USB_DevDisconnect>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800383e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_Start+0x1c>
 8003856:	2302      	movs	r3, #2
 8003858:	e020      	b.n	800389c <HAL_PCD_Start+0x5e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	2b01      	cmp	r3, #1
 8003868:	d109      	bne.n	800387e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f004 f8d1 	bl	8007a2a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f003 f88d 	bl	80069ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b08d      	sub	sp, #52	; 0x34
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 f978 	bl	8007bb0 <USB_GetMode>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 838e 	bne.w	8003fe4 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 f8dc 	bl	8007a8a <USB_ReadInterrupts>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8384 	beq.w	8003fe2 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 f8d3 	bl	8007a8a <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d107      	bne.n	80038fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f002 0202 	and.w	r2, r2, #2
 80038fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f004 f8c1 	bl	8007a8a <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003912:	d17b      	bne.n	8003a0c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f004 f8c7 	bl	8007ab0 <USB_ReadDevAllOutEpInterrupt>
 8003922:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003924:	e06f      	b.n	8003a06 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d064      	beq.n	80039fa <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f004 f8ec 	bl	8007b18 <USB_ReadDevOutEPInterrupt>
 8003940:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00c      	beq.n	8003966 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	2301      	movs	r3, #1
 800395c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800395e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fe0d 	bl	8004580 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 ff0c 	bl	8004790 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	461a      	mov	r2, r3
 8003986:	2308      	movs	r3, #8
 8003988:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	2310      	movs	r3, #16
 80039a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d108      	bne.n	80039ca <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039c2:	461a      	mov	r2, r3
 80039c4:	2101      	movs	r1, #1
 80039c6:	f004 f937 	bl	8007c38 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	461a      	mov	r2, r3
 80039d8:	2320      	movs	r3, #32
 80039da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	3301      	adds	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d18c      	bne.n	8003926 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f004 f83a 	bl	8007a8a <USB_ReadInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a20:	f040 80c4 	bne.w	8003bac <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 f85b 	bl	8007ae4 <USB_ReadDevAllInEpInterrupt>
 8003a2e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a34:	e0b6      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80ab 	beq.w	8003b98 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 f881 	bl	8007b54 <USB_ReadDevInEPInterrupt>
 8003a52:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d05b      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	2201      	movs	r2, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69f9      	ldr	r1, [r7, #28]
 8003a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a7e:	4013      	ands	r3, r2
 8003a80:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2301      	movs	r3, #1
 8003a92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3348      	adds	r3, #72	; 0x48
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4403      	add	r3, r0
 8003abc:	3344      	adds	r3, #68	; 0x44
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4419      	add	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4403      	add	r3, r0
 8003ad0:	3348      	adds	r3, #72	; 0x48
 8003ad2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f007 f88d 	bl	800abfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d116      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d113      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x272>
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3350      	adds	r3, #80	; 0x50
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2101      	movs	r1, #1
 8003b12:	f004 f891 	bl	8007c38 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2308      	movs	r3, #8
 8003b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	461a      	mov	r2, r3
 8003b82:	2302      	movs	r3, #2
 8003b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fc67 	bl	8004466 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f47f af45 	bne.w	8003a36 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f003 ff6a 	bl	8007a8a <USB_ReadInterrupts>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc0:	d122      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003be8:	2100      	movs	r1, #0
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fe88 	bl	8004900 <HAL_PCDEx_LPM_Callback>
 8003bf0:	e002      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f007 f878 	bl	800ace8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f003 ff3c 	bl	8007a8a <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c1c:	d112      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f007 f834 	bl	800ac9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c42:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 ff1e 	bl	8007a8a <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	f040 80a7 	bne.w	8003daa <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2110      	movs	r1, #16
 8003c76:	4618      	mov	r0, r3
 8003c78:	f003 f856 	bl	8006d28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c80:	e036      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca6:	0151      	lsls	r1, r2, #5
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	440a      	add	r2, r1
 8003cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	3301      	adds	r3, #1
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3c3      	bcc.n	8003c82 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d26:	f043 030b 	orr.w	r3, r3, #11
 8003d2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3c:	f043 030b 	orr.w	r3, r3, #11
 8003d40:	6453      	str	r3, [r2, #68]	; 0x44
 8003d42:	e015      	b.n	8003d70 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6a:	f043 030b 	orr.w	r3, r3, #11
 8003d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d94:	461a      	mov	r2, r3
 8003d96:	f003 ff4f 	bl	8007c38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fe6b 	bl	8007a8a <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbe:	d124      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 ff01 	bl	8007bcc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 f80b 	bl	8006dea <USB_GetDevSpeed>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681c      	ldr	r4, [r3, #0]
 8003de0:	f001 f996 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8003de4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	4620      	mov	r0, r4
 8003df0:	f002 fd3a 	bl	8006868 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f006 ff28 	bl	800ac4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f003 fe3b 	bl	8007a8a <USB_ReadInterrupts>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d161      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0210 	bic.w	r2, r2, #16
 8003e2c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	0c5b      	lsrs	r3, r3, #17
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d124      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d035      	beq.n	8003ed2 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6a38      	ldr	r0, [r7, #32]
 8003e7a:	f003 fcb3 	bl	80077e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	619a      	str	r2, [r3, #24]
 8003ea2:	e016      	b.n	8003ed2 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	0c5b      	lsrs	r3, r3, #17
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d110      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6a38      	ldr	r0, [r7, #32]
 8003ebc:	f003 fc92 	bl	80077e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ecc:	441a      	add	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0210 	orr.w	r2, r2, #16
 8003ee0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f003 fdcf 	bl	8007a8a <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d10a      	bne.n	8003f0c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f006 fe99 	bl	800ac2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f002 0208 	and.w	r2, r2, #8
 8003f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 fdba 	bl	8007a8a <USB_ReadInterrupts>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f20:	d10f      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f006 fefb 	bl	800ad28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 fd9f 	bl	8007a8a <USB_ReadInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f56:	d10f      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f006 fece 	bl	800ad04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 fd84 	bl	8007a8a <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f006 fedc 	bl	800ad4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 fd6e 	bl	8007a8a <USB_ReadInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d115      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f006 fecc 	bl	800ad68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	e000      	b.n	8003fe4 <HAL_PCD_IRQHandler+0x740>
      return;
 8003fe2:	bf00      	nop
    }
  }
}
 8003fe4:	3734      	adds	r7, #52	; 0x34
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd90      	pop	{r4, r7, pc}

08003fea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_PCD_SetAddress+0x1a>
 8004000:	2302      	movs	r3, #2
 8004002:	e013      	b.n	800402c <HAL_PCD_SetAddress+0x42>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f003 fcde 	bl	80079de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	70fb      	strb	r3, [r7, #3]
 8004046:	460b      	mov	r3, r1
 8004048:	803b      	strh	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0f      	bge.n	800407a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3338      	adds	r3, #56	; 0x38
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	705a      	strb	r2, [r3, #1]
 8004078:	e00f      	b.n	800409a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	3304      	adds	r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040a6:	883a      	ldrh	r2, [r7, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	78ba      	ldrb	r2, [r7, #2]
 80040b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040c4:	78bb      	ldrb	r3, [r7, #2]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d102      	bne.n	80040d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_PCD_EP_Open+0xaa>
 80040da:	2302      	movs	r3, #2
 80040dc:	e00e      	b.n	80040fc <HAL_PCD_EP_Open+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 fea1 	bl	8006e34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040fa:	7afb      	ldrb	r3, [r7, #11]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004114:	2b00      	cmp	r3, #0
 8004116:	da0f      	bge.n	8004138 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3338      	adds	r3, #56	; 0x38
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
 8004136:	e00f      	b.n	8004158 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_PCD_EP_Close+0x6e>
 800416e:	2302      	movs	r3, #2
 8004170:	e00e      	b.n	8004190 <HAL_PCD_EP_Close+0x8c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4618      	mov	r0, r3
 8004182:	f002 fedf 	bl	8006f44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	460b      	mov	r3, r1
 80041a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	f003 020f 	and.w	r2, r3, #15
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041da:	7afb      	ldrb	r3, [r7, #11]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d102      	bne.n	80041f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	6979      	ldr	r1, [r7, #20]
 800420c:	f003 f962 	bl	80074d4 <USB_EP0StartXfer>
 8004210:	e008      	b.n	8004224 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6979      	ldr	r1, [r7, #20]
 8004220:	f002 ff14 	bl	800704c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004250:	681b      	ldr	r3, [r3, #0]
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	460b      	mov	r3, r1
 800426c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	f003 020f 	and.w	r2, r3, #15
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	3338      	adds	r3, #56	; 0x38
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	3304      	adds	r3, #4
 8004284:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2201      	movs	r2, #1
 800429c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b8:	7afb      	ldrb	r3, [r7, #11]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	6979      	ldr	r1, [r7, #20]
 80042d0:	f003 f900 	bl	80074d4 <USB_EP0StartXfer>
 80042d4:	e008      	b.n	80042e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	f002 feb2 	bl	800704c <USB_EPStartXfer>
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d901      	bls.n	8004310 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e050      	b.n	80043b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da0f      	bge.n	8004338 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	3338      	adds	r3, #56	; 0x38
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	705a      	strb	r2, [r3, #1]
 8004336:	e00d      	b.n	8004354 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_PCD_EP_SetStall+0x82>
 8004370:	2302      	movs	r3, #2
 8004372:	e01e      	b.n	80043b2 <HAL_PCD_EP_SetStall+0xc0>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	4618      	mov	r0, r3
 8004384:	f003 fa57 	bl	8007836 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	b2d9      	uxtb	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043a2:	461a      	mov	r2, r3
 80043a4:	f003 fc48 	bl	8007c38 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	460b      	mov	r3, r1
 80043c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d901      	bls.n	80043d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e042      	b.n	800445e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da0f      	bge.n	8004400 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	3338      	adds	r3, #56	; 0x38
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	3304      	adds	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	705a      	strb	r2, [r3, #1]
 80043fe:	e00f      	b.n	8004420 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 020f 	and.w	r2, r3, #15
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_PCD_EP_ClrStall+0x86>
 800443c:	2302      	movs	r3, #2
 800443e:	e00e      	b.n	800445e <HAL_PCD_EP_ClrStall+0xa4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68f9      	ldr	r1, [r7, #12]
 800444e:	4618      	mov	r0, r3
 8004450:	f003 fa5f 	bl	8007912 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08a      	sub	sp, #40	; 0x28
 800446a:	af02      	add	r7, sp, #8
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	3338      	adds	r3, #56	; 0x38
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	3304      	adds	r3, #4
 800448c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	429a      	cmp	r2, r3
 8004498:	d901      	bls.n	800449e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06c      	b.n	8004578 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3303      	adds	r3, #3
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044c2:	e02b      	b.n	800451c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d902      	bls.n	80044e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3303      	adds	r3, #3
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68d9      	ldr	r1, [r3, #12]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	4603      	mov	r3, r0
 80044fe:	6978      	ldr	r0, [r7, #20]
 8004500:	f003 f93b 	bl	800777a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699a      	ldr	r2, [r3, #24]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	b29b      	uxth	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	429a      	cmp	r2, r3
 8004530:	d809      	bhi.n	8004546 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800453a:	429a      	cmp	r2, r3
 800453c:	d203      	bcs.n	8004546 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1be      	bne.n	80044c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	429a      	cmp	r2, r3
 8004550:	d811      	bhi.n	8004576 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	2201      	movs	r2, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	43db      	mvns	r3, r3
 800456c:	6939      	ldr	r1, [r7, #16]
 800456e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004572:	4013      	ands	r3, r2
 8004574:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	333c      	adds	r3, #60	; 0x3c
 8004598:	3304      	adds	r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f040 80b3 	bne.w	800471e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d028      	beq.n	8004614 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a70      	ldr	r2, [pc, #448]	; (8004788 <PCD_EP_OutXfrComplete_int+0x208>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d90e      	bls.n	80045e8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f006 fad9 	bl	800aba0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045f8:	461a      	mov	r2, r3
 80045fa:	2101      	movs	r1, #1
 80045fc:	f003 fb1c 	bl	8007c38 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	2308      	movs	r3, #8
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e0b3      	b.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	2320      	movs	r3, #32
 800462e:	6093      	str	r3, [r2, #8]
 8004630:	e0a4      	b.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	f040 809f 	bne.w	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a51      	ldr	r2, [pc, #324]	; (8004788 <PCD_EP_OutXfrComplete_int+0x208>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d90f      	bls.n	8004666 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	461a      	mov	r2, r3
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	6093      	str	r3, [r2, #8]
 8004664:	e08a      	b.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004678:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	0159      	lsls	r1, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	440b      	add	r3, r1
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800468c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4403      	add	r3, r0
 800469c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046a0:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4403      	add	r3, r0
 80046c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4419      	add	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4403      	add	r3, r0
 80046da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046de:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f006 fa6c 	bl	800abc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d144      	bne.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d138      	bne.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004714:	461a      	mov	r2, r3
 8004716:	2101      	movs	r1, #1
 8004718:	f003 fa8e 	bl	8007c38 <USB_EP0_OutStart>
 800471c:	e02e      	b.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a1a      	ldr	r2, [pc, #104]	; (800478c <PCD_EP_OutXfrComplete_int+0x20c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d124      	bne.n	8004770 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	461a      	mov	r2, r3
 800473e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004742:	6093      	str	r3, [r2, #8]
 8004744:	e01a      	b.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	2320      	movs	r3, #32
 8004760:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f006 fa2b 	bl	800abc4 <HAL_PCD_DataOutStageCallback>
 800476e:	e005      	b.n	800477c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f006 fa24 	bl	800abc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	4f54300a 	.word	0x4f54300a
 800478c:	4f54310a 	.word	0x4f54310a

08004790 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	333c      	adds	r3, #60	; 0x3c
 80047a8:	3304      	adds	r3, #4
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d113      	bne.n	80047ee <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <PCD_EP_OutSetupPacket_int+0xb8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d922      	bls.n	8004814 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01d      	beq.n	8004814 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	e012      	b.n	8004814 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <PCD_EP_OutSetupPacket_int+0xbc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10e      	bne.n	8004814 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	461a      	mov	r2, r3
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f006 f9c3 	bl	800aba0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <PCD_EP_OutSetupPacket_int+0xb8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d90c      	bls.n	800483c <PCD_EP_OutSetupPacket_int+0xac>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d108      	bne.n	800483c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004834:	461a      	mov	r2, r3
 8004836:	2101      	movs	r1, #1
 8004838:	f003 f9fe 	bl	8007c38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	4f54300a 	.word	0x4f54300a
 800484c:	4f54310a 	.word	0x4f54310a

08004850 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
 800485c:	4613      	mov	r3, r2
 800485e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800486e:	883b      	ldrh	r3, [r7, #0]
 8004870:	0419      	lsls	r1, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	430a      	orrs	r2, r1
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
 800487c:	e028      	b.n	80048d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e00d      	b.n	80048ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	3340      	adds	r3, #64	; 0x40
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	3301      	adds	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3ec      	bcc.n	8004892 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048b8:	883b      	ldrh	r3, [r7, #0]
 80048ba:	0418      	lsls	r0, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4302      	orrs	r2, r0
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e22d      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d075      	beq.n	8004a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004936:	4ba3      	ldr	r3, [pc, #652]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00c      	beq.n	800495c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4ba0      	ldr	r3, [pc, #640]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494a:	2b08      	cmp	r3, #8
 800494c:	d112      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4b9d      	ldr	r3, [pc, #628]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495a:	d10b      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	4b99      	ldr	r3, [pc, #612]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x108>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d157      	bne.n	8004a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e208      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x74>
 800497e:	4b91      	ldr	r3, [pc, #580]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a90      	ldr	r2, [pc, #576]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b8b      	ldr	r3, [pc, #556]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a8a      	ldr	r2, [pc, #552]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b88      	ldr	r3, [pc, #544]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a87      	ldr	r2, [pc, #540]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 80049b0:	4b84      	ldr	r3, [pc, #528]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a80      	ldr	r2, [pc, #512]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fc fad0 	bl	8000f74 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fc facc 	bl	8000f74 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1cd      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xc0>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fc fabc 	bl	8000f74 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fc fab8 	bl	8000f74 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1b9      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0xe8>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d063      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a2e:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b62      	ldr	r3, [pc, #392]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b5c      	ldr	r3, [pc, #368]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e18d      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4952      	ldr	r1, [pc, #328]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <HAL_RCC_OscConfig+0x2b0>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fc fa71 	bl	8000f74 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fc fa6d 	bl	8000f74 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e16e      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4940      	ldr	r1, [pc, #256]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
 8004ac8:	e015      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <HAL_RCC_OscConfig+0x2b0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fc fa50 	bl	8000f74 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fc fa4c 	bl	8000f74 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e14d      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d030      	beq.n	8004b64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_OscConfig+0x2b4>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fc fa30 	bl	8000f74 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fc fa2c 	bl	8000f74 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e12d      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x200>
 8004b36:	e015      	b.n	8004b64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b38:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCC_OscConfig+0x2b4>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fc fa19 	bl	8000f74 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fc fa15 	bl	8000f74 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e116      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a0 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_OscConfig+0x2b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d121      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_RCC_OscConfig+0x2b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_RCC_OscConfig+0x2b8>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bba:	f7fc f9db 	bl	8000f74 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	e011      	b.n	8004be6 <HAL_RCC_OscConfig+0x2ce>
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470000 	.word	0x42470000
 8004bcc:	42470e80 	.word	0x42470e80
 8004bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd4:	f7fc f9ce 	bl	8000f74 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0cf      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
 8004bfa:	4b66      	ldr	r3, [pc, #408]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a65      	ldr	r2, [pc, #404]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	e01c      	b.n	8004c42 <HAL_RCC_OscConfig+0x32a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d10c      	bne.n	8004c2a <HAL_RCC_OscConfig+0x312>
 8004c10:	4b60      	ldr	r3, [pc, #384]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a5f      	ldr	r2, [pc, #380]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c16:	f043 0304 	orr.w	r3, r3, #4
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	4b5d      	ldr	r3, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a5c      	ldr	r2, [pc, #368]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	e00b      	b.n	8004c42 <HAL_RCC_OscConfig+0x32a>
 8004c2a:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a59      	ldr	r2, [pc, #356]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
 8004c36:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a56      	ldr	r2, [pc, #344]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d015      	beq.n	8004c76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fc f993 	bl	8000f74 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fc f98f 	bl	8000f74 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e08e      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c68:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ee      	beq.n	8004c52 <HAL_RCC_OscConfig+0x33a>
 8004c74:	e014      	b.n	8004ca0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fc f97d 	bl	8000f74 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fc f979 	bl	8000f74 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e078      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c94:	4b3f      	ldr	r3, [pc, #252]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ee      	bne.n	8004c7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca6:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a3a      	ldr	r2, [pc, #232]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d064      	beq.n	8004d84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d05c      	beq.n	8004d80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d141      	bne.n	8004d52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cce:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <HAL_RCC_OscConfig+0x480>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fc f94e 	bl	8000f74 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fc f94a 	bl	8000f74 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e04b      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	3b01      	subs	r3, #1
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	061b      	lsls	r3, r3, #24
 8004d1e:	491d      	ldr	r1, [pc, #116]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <HAL_RCC_OscConfig+0x480>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fc f923 	bl	8000f74 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fc f91f 	bl	8000f74 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e020      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x41a>
 8004d50:	e018      	b.n	8004d84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCC_OscConfig+0x480>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fc f90c 	bl	8000f74 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fc f908 	bl	8000f74 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e009      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <HAL_RCC_OscConfig+0x47c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x448>
 8004d7e:	e001      	b.n	8004d84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40007000 	.word	0x40007000
 8004d94:	40023800 	.word	0x40023800
 8004d98:	42470060 	.word	0x42470060

08004d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0ca      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db0:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCC_ClockConfig+0x1b4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d90c      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b64      	ldr	r3, [pc, #400]	; (8004f50 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b62      	ldr	r3, [pc, #392]	; (8004f50 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0b6      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e08:	4b52      	ldr	r3, [pc, #328]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a51      	ldr	r2, [pc, #324]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b4f      	ldr	r3, [pc, #316]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	494c      	ldr	r1, [pc, #304]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d044      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d119      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07d      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d003      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06d      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e065      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4933      	ldr	r1, [pc, #204]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e8c:	f7fc f872 	bl	8000f74 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fc f86e 	bl	8000f74 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e04d      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCC_ClockConfig+0x1b4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d20c      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCC_ClockConfig+0x1b4>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e030      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef0:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4915      	ldr	r1, [pc, #84]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	490d      	ldr	r1, [pc, #52]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f22:	f000 f81d 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f26:	4601      	mov	r1, r0
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	5cd3      	ldrb	r3, [r2, r3]
 8004f36:	fa21 f303 	lsr.w	r3, r1, r3
 8004f3a:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f7fb ffd4 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	0800e038 	.word	0x0800e038
 8004f5c:	20000118 	.word	0x20000118

08004f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f76:	4b63      	ldr	r3, [pc, #396]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d007      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x32>
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d008      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x38>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f040 80b4 	bne.w	80050f4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b5e      	ldr	r3, [pc, #376]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f8e:	60bb      	str	r3, [r7, #8]
       break;
 8004f90:	e0b3      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f92:	4b5e      	ldr	r3, [pc, #376]	; (800510c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f94:	60bb      	str	r3, [r7, #8]
      break;
 8004f96:	e0b0      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f98:	4b5a      	ldr	r3, [pc, #360]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa2:	4b58      	ldr	r3, [pc, #352]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d04a      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b55      	ldr	r3, [pc, #340]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	ea03 0501 	and.w	r5, r3, r1
 8004fc4:	ea04 0602 	and.w	r6, r4, r2
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4632      	mov	r2, r6
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	0154      	lsls	r4, r2, #5
 8004fd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fda:	014b      	lsls	r3, r1, #5
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4622      	mov	r2, r4
 8004fe0:	1b49      	subs	r1, r1, r5
 8004fe2:	eb62 0206 	sbc.w	r2, r2, r6
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	f04f 0400 	mov.w	r4, #0
 8004fee:	0194      	lsls	r4, r2, #6
 8004ff0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ff4:	018b      	lsls	r3, r1, #6
 8004ff6:	1a5b      	subs	r3, r3, r1
 8004ff8:	eb64 0402 	sbc.w	r4, r4, r2
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	00e2      	lsls	r2, r4, #3
 8005006:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	460b      	mov	r3, r1
 800500e:	4614      	mov	r4, r2
 8005010:	195b      	adds	r3, r3, r5
 8005012:	eb44 0406 	adc.w	r4, r4, r6
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	0262      	lsls	r2, r4, #9
 8005020:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005024:	0259      	lsls	r1, r3, #9
 8005026:	460b      	mov	r3, r1
 8005028:	4614      	mov	r4, r2
 800502a:	4618      	mov	r0, r3
 800502c:	4621      	mov	r1, r4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	461a      	mov	r2, r3
 8005036:	4623      	mov	r3, r4
 8005038:	f7fb fdb6 	bl	8000ba8 <__aeabi_uldivmod>
 800503c:	4603      	mov	r3, r0
 800503e:	460c      	mov	r4, r1
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e049      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005044:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	099b      	lsrs	r3, r3, #6
 800504a:	f04f 0400 	mov.w	r4, #0
 800504e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	ea03 0501 	and.w	r5, r3, r1
 800505a:	ea04 0602 	and.w	r6, r4, r2
 800505e:	4629      	mov	r1, r5
 8005060:	4632      	mov	r2, r6
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	f04f 0400 	mov.w	r4, #0
 800506a:	0154      	lsls	r4, r2, #5
 800506c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005070:	014b      	lsls	r3, r1, #5
 8005072:	4619      	mov	r1, r3
 8005074:	4622      	mov	r2, r4
 8005076:	1b49      	subs	r1, r1, r5
 8005078:	eb62 0206 	sbc.w	r2, r2, r6
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f04f 0400 	mov.w	r4, #0
 8005084:	0194      	lsls	r4, r2, #6
 8005086:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800508a:	018b      	lsls	r3, r1, #6
 800508c:	1a5b      	subs	r3, r3, r1
 800508e:	eb64 0402 	sbc.w	r4, r4, r2
 8005092:	f04f 0100 	mov.w	r1, #0
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	00e2      	lsls	r2, r4, #3
 800509c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050a0:	00d9      	lsls	r1, r3, #3
 80050a2:	460b      	mov	r3, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	195b      	adds	r3, r3, r5
 80050a8:	eb44 0406 	adc.w	r4, r4, r6
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	02a2      	lsls	r2, r4, #10
 80050b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050ba:	0299      	lsls	r1, r3, #10
 80050bc:	460b      	mov	r3, r1
 80050be:	4614      	mov	r4, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	4621      	mov	r1, r4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4623      	mov	r3, r4
 80050ce:	f7fb fd6b 	bl	8000ba8 <__aeabi_uldivmod>
 80050d2:	4603      	mov	r3, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	3301      	adds	r3, #1
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	60bb      	str	r3, [r7, #8]
      break;
 80050f2:	e002      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050f6:	60bb      	str	r3, [r7, #8]
      break;
 80050f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fa:	68bb      	ldr	r3, [r7, #8]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005104:	40023800 	.word	0x40023800
 8005108:	00f42400 	.word	0x00f42400
 800510c:	007a1200 	.word	0x007a1200

08005110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <HAL_RCC_GetHCLKFreq+0x14>)
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000118 	.word	0x20000118

08005128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800512c:	f7ff fff0 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005130:	4601      	mov	r1, r0
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	0a9b      	lsrs	r3, r3, #10
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4a03      	ldr	r2, [pc, #12]	; (800514c <HAL_RCC_GetPCLK1Freq+0x24>)
 800513e:	5cd3      	ldrb	r3, [r2, r3]
 8005140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40023800 	.word	0x40023800
 800514c:	0800e048 	.word	0x0800e048

08005150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005154:	f7ff ffdc 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005158:	4601      	mov	r1, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	0b5b      	lsrs	r3, r3, #13
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4a03      	ldr	r2, [pc, #12]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40023800 	.word	0x40023800
 8005174:	0800e048 	.word	0x0800e048

08005178 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800519c:	2b00      	cmp	r3, #0
 800519e:	d035      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051a0:	4b62      	ldr	r3, [pc, #392]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a6:	f7fb fee5 	bl	8000f74 <HAL_GetTick>
 80051aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ae:	f7fb fee1 	bl	8000f74 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0b0      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c0:	4b5b      	ldr	r3, [pc, #364]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	019a      	lsls	r2, r3, #6
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	071b      	lsls	r3, r3, #28
 80051d8:	4955      	ldr	r1, [pc, #340]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e0:	4b52      	ldr	r3, [pc, #328]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e6:	f7fb fec5 	bl	8000f74 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ee:	f7fb fec1 	bl	8000f74 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e090      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8083 	beq.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	4b44      	ldr	r3, [pc, #272]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	4a43      	ldr	r2, [pc, #268]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6413      	str	r3, [r2, #64]	; 0x40
 800522a:	4b41      	ldr	r3, [pc, #260]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005236:	4b3f      	ldr	r3, [pc, #252]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3e      	ldr	r2, [pc, #248]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fb fe97 	bl	8000f74 <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fb fe93 	bl	8000f74 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e062      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800525c:	4b35      	ldr	r3, [pc, #212]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005268:	4b31      	ldr	r3, [pc, #196]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d028      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005286:	4b2a      	ldr	r3, [pc, #168]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005290:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005296:	4b28      	ldr	r3, [pc, #160]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800529c:	4a24      	ldr	r2, [pc, #144]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a2:	4b23      	ldr	r3, [pc, #140]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d114      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052ae:	f7fb fe61 	bl	8000f74 <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b4:	e00a      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fb fe5d 	bl	8000f74 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e02a      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	4b18      	ldr	r3, [pc, #96]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ee      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e4:	d10d      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052e6:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fa:	490d      	ldr	r1, [pc, #52]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]
 8005300:	e005      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a0a      	ldr	r2, [pc, #40]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005308:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800530c:	6093      	str	r3, [r2, #8]
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531a:	4905      	ldr	r1, [pc, #20]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	42470068 	.word	0x42470068
 8005330:	40023800 	.word	0x40023800
 8005334:	40007000 	.word	0x40007000
 8005338:	42470e40 	.word	0x42470e40

0800533c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d13d      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800535a:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005362:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800536a:	2b01      	cmp	r3, #1
 800536c:	d12f      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800536e:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005370:	617b      	str	r3, [r7, #20]
          break;
 8005372:	e02f      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005374:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005380:	d108      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005382:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	e007      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005394:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053be:	0f1b      	lsrs	r3, r3, #28
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	617b      	str	r3, [r7, #20]
          break;
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
          break;
 80053d2:	bf00      	nop
        }
      }
      break;
 80053d4:	bf00      	nop
    }
  }
  return frequency;
 80053d6:	697b      	ldr	r3, [r7, #20]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40023800 	.word	0x40023800
 80053e8:	00bb8000 	.word	0x00bb8000
 80053ec:	007a1200 	.word	0x007a1200
 80053f0:	00f42400 	.word	0x00f42400

080053f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e056      	b.n	80054b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d106      	bne.n	8005426 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f005 f80d 	bl	800a440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	ea42 0103 	orr.w	r1, r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	f003 0104 	and.w	r1, r3, #4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e01d      	b.n	800550a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f004 fff4 	bl	800a4d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f000 fa1e 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b06      	cmp	r3, #6
 8005532:	d007      	beq.n	8005544 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e01d      	b.n	80055a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f815 	bl	80055b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f9cf 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fc9a 	bl	8005f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_TIM_PWM_Start+0x74>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_PWM_Start+0x2c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <HAL_TIM_PWM_Start+0x78>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_TIM_PWM_Start+0x30>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_PWM_Start+0x32>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d007      	beq.n	800562c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40010400 	.word	0x40010400

08005640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005656:	2302      	movs	r3, #2
 8005658:	e0b4      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f200 809f 	bhi.w	80057b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080057b1 	.word	0x080057b1
 8005680:	080057b1 	.word	0x080057b1
 8005684:	080057b1 	.word	0x080057b1
 8005688:	080056ed 	.word	0x080056ed
 800568c:	080057b1 	.word	0x080057b1
 8005690:	080057b1 	.word	0x080057b1
 8005694:	080057b1 	.word	0x080057b1
 8005698:	0800572f 	.word	0x0800572f
 800569c:	080057b1 	.word	0x080057b1
 80056a0:	080057b1 	.word	0x080057b1
 80056a4:	080057b1 	.word	0x080057b1
 80056a8:	0800576f 	.word	0x0800576f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f9e2 	bl	8005a7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e062      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fa32 	bl	8005b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
      break;
 800572c:	e041      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fa87 	bl	8005c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0208 	orr.w	r2, r2, #8
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0204 	bic.w	r2, r2, #4
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
      break;
 800576c:	e021      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fadb 	bl	8005d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	021a      	lsls	r2, r3, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e000      	b.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80057b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIM_ConfigClockSource+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0a6      	b.n	8005932 <HAL_TIM_ConfigClockSource+0x166>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b40      	cmp	r3, #64	; 0x40
 800581a:	d067      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0x120>
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d80b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x6c>
 8005820:	2b10      	cmp	r3, #16
 8005822:	d073      	beq.n	800590c <HAL_TIM_ConfigClockSource+0x140>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d802      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x62>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d06f      	beq.n	800590c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800582c:	e078      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800582e:	2b20      	cmp	r3, #32
 8005830:	d06c      	beq.n	800590c <HAL_TIM_ConfigClockSource+0x140>
 8005832:	2b30      	cmp	r3, #48	; 0x30
 8005834:	d06a      	beq.n	800590c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005836:	e073      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005838:	2b70      	cmp	r3, #112	; 0x70
 800583a:	d00d      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0x8c>
 800583c:	2b70      	cmp	r3, #112	; 0x70
 800583e:	d804      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x7e>
 8005840:	2b50      	cmp	r3, #80	; 0x50
 8005842:	d033      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0xe0>
 8005844:	2b60      	cmp	r3, #96	; 0x60
 8005846:	d041      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005848:	e06a      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d066      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x152>
 8005850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005854:	d017      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005856:	e063      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f000 fb32 	bl	8005ed0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800587a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
      break;
 8005884:	e04c      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6899      	ldr	r1, [r3, #8]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f000 fb1b 	bl	8005ed0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a8:	609a      	str	r2, [r3, #8]
      break;
 80058aa:	e039      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f000 fa8f 	bl	8005ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2150      	movs	r1, #80	; 0x50
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fae8 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 80058ca:	e029      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6859      	ldr	r1, [r3, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	461a      	mov	r2, r3
 80058da:	f000 faae 	bl	8005e3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2160      	movs	r1, #96	; 0x60
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fad8 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 80058ea:	e019      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	461a      	mov	r2, r3
 80058fa:	f000 fa6f 	bl	8005ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2140      	movs	r1, #64	; 0x40
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fac8 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 800590a:	e009      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f000 fabf 	bl	8005e9a <TIM_ITRx_SetConfig>
      break;
 800591c:	e000      	b.n	8005920 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800591e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a40      	ldr	r2, [pc, #256]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595a:	d00f      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3d      	ldr	r2, [pc, #244]	; (8005a54 <TIM_Base_SetConfig+0x118>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3c      	ldr	r2, [pc, #240]	; (8005a58 <TIM_Base_SetConfig+0x11c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <TIM_Base_SetConfig+0x120>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3a      	ldr	r2, [pc, #232]	; (8005a60 <TIM_Base_SetConfig+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d108      	bne.n	800598e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599c:	d027      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <TIM_Base_SetConfig+0x118>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d023      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2b      	ldr	r2, [pc, #172]	; (8005a58 <TIM_Base_SetConfig+0x11c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01f      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <TIM_Base_SetConfig+0x120>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <TIM_Base_SetConfig+0x124>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d017      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <TIM_Base_SetConfig+0x128>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a27      	ldr	r2, [pc, #156]	; (8005a68 <TIM_Base_SetConfig+0x12c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a26      	ldr	r2, [pc, #152]	; (8005a6c <TIM_Base_SetConfig+0x130>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a25      	ldr	r2, [pc, #148]	; (8005a70 <TIM_Base_SetConfig+0x134>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <TIM_Base_SetConfig+0x138>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <TIM_Base_SetConfig+0x13c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0xf8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <TIM_Base_SetConfig+0x124>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d103      	bne.n	8005a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	615a      	str	r2, [r3, #20]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40010400 	.word	0x40010400
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800
 8005a70:	40001800 	.word	0x40001800
 8005a74:	40001c00 	.word	0x40001c00
 8005a78:	40002000 	.word	0x40002000

08005a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0302 	bic.w	r3, r3, #2
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <TIM_OC1_SetConfig+0xd8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x64>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <TIM_OC1_SetConfig+0xdc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0308 	bic.w	r3, r3, #8
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC1_SetConfig+0xd8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC1_SetConfig+0x8e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <TIM_OC1_SetConfig+0xdc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d111      	bne.n	8005b2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0210 	bic.w	r2, r3, #16
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0320 	bic.w	r3, r3, #32
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <TIM_OC2_SetConfig+0xe4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_OC2_SetConfig+0x68>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <TIM_OC2_SetConfig+0xe8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10d      	bne.n	8005be0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a17      	ldr	r2, [pc, #92]	; (8005c40 <TIM_OC2_SetConfig+0xe4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC2_SetConfig+0x94>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <TIM_OC2_SetConfig+0xe8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d113      	bne.n	8005c18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <TIM_OC3_SetConfig+0xe0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC3_SetConfig+0x66>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <TIM_OC3_SetConfig+0xe4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10d      	bne.n	8005cca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <TIM_OC3_SetConfig+0xe0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC3_SetConfig+0x92>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <TIM_OC3_SetConfig+0xe4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d113      	bne.n	8005d02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400

08005d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <TIM_OC4_SetConfig+0xa4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC4_SetConfig+0x68>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <TIM_OC4_SetConfig+0xa8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40010400 	.word	0x40010400

08005ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f023 030a 	bic.w	r3, r3, #10
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b087      	sub	sp, #28
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0210 	bic.w	r2, r3, #16
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	031b      	lsls	r3, r3, #12
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f043 0307 	orr.w	r3, r3, #7
 8005ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	609a      	str	r2, [r3, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	401a      	ands	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e032      	b.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005faa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e03f      	b.n	8006076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f004 fb24 	bl	800a658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f9b1 	bl	8006390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800605c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af02      	add	r7, sp, #8
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b20      	cmp	r3, #32
 800609c:	f040 8083 	bne.w	80061a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Transmit+0x2e>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e07b      	b.n	80061a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_UART_Transmit+0x40>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e074      	b.n	80061a8 <HAL_UART_Transmit+0x12a>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2221      	movs	r2, #33	; 0x21
 80060d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80060d4:	f7fa ff4e 	bl	8000f74 <HAL_GetTick>
 80060d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	88fa      	ldrh	r2, [r7, #6]
 80060de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	88fa      	ldrh	r2, [r7, #6]
 80060e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060e6:	e042      	b.n	800616e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d122      	bne.n	8006146 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	2180      	movs	r1, #128	; 0x80
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f8f6 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e046      	b.n	80061a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800612c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3302      	adds	r3, #2
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	e017      	b.n	800616e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3301      	adds	r3, #1
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	e013      	b.n	800616e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f8d3 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e023      	b.n	80061a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	60ba      	str	r2, [r7, #8]
 8006166:	781a      	ldrb	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1b7      	bne.n	80060e8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f8ba 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e00a      	b.n	80061a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	f040 8090 	bne.w	80062f2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_UART_Receive+0x2e>
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e088      	b.n	80062f4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_UART_Receive+0x40>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e081      	b.n	80062f4 <HAL_UART_Receive+0x144>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2222      	movs	r2, #34	; 0x22
 8006202:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006206:	f7fa feb5 	bl	8000f74 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006218:	e05c      	b.n	80062d4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d12b      	bne.n	800628a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2200      	movs	r2, #0
 800623a:	2120      	movs	r1, #32
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f85d 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e053      	b.n	80062f4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	b29a      	uxth	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3302      	adds	r3, #2
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	e030      	b.n	80062d4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	b29b      	uxth	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	b29a      	uxth	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	3301      	adds	r3, #1
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	e024      	b.n	80062d4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	2120      	movs	r1, #32
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 f831 	bl	80062fc <UART_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e027      	b.n	80062f4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	60ba      	str	r2, [r7, #8]
 80062b8:	b2ca      	uxtb	r2, r1
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e00a      	b.n	80062d4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d19d      	bne.n	800621a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e000      	b.n	80062f4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80062f2:	2302      	movs	r3, #2
  }
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	4613      	mov	r3, r2
 800630a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630c:	e02c      	b.n	8006368 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d028      	beq.n	8006368 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0x30>
 800631c:	f7fa fe2a 	bl	8000f74 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	429a      	cmp	r2, r3
 800632a:	d21d      	bcs.n	8006368 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800633a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e00f      	b.n	8006388 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4013      	ands	r3, r2
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	429a      	cmp	r2, r3
 8006376:	bf0c      	ite	eq
 8006378:	2301      	moveq	r3, #1
 800637a:	2300      	movne	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	429a      	cmp	r2, r3
 8006384:	d0c3      	beq.n	800630e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006390:	b5b0      	push	{r4, r5, r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063d0:	f023 030c 	bic.w	r3, r3, #12
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	430b      	orrs	r3, r1
 80063dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fc:	f040 80e4 	bne.w	80065c8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4aab      	ldr	r2, [pc, #684]	; (80066b4 <UART_SetConfig+0x324>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <UART_SetConfig+0x84>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4aaa      	ldr	r2, [pc, #680]	; (80066b8 <UART_SetConfig+0x328>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d16c      	bne.n	80064ee <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006414:	f7fe fe9c 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006418:	4602      	mov	r2, r0
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009a      	lsls	r2, r3, #2
 8006422:	441a      	add	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	4aa3      	ldr	r2, [pc, #652]	; (80066bc <UART_SetConfig+0x32c>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	011c      	lsls	r4, r3, #4
 8006438:	f7fe fe8a 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 800643c:	4602      	mov	r2, r0
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009a      	lsls	r2, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006452:	f7fe fe7d 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006456:	4602      	mov	r2, r0
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009a      	lsls	r2, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	fbb2 f3f3 	udiv	r3, r2, r3
 800646c:	4a93      	ldr	r2, [pc, #588]	; (80066bc <UART_SetConfig+0x32c>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	2264      	movs	r2, #100	; 0x64
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	1aeb      	subs	r3, r5, r3
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	3332      	adds	r3, #50	; 0x32
 8006480:	4a8e      	ldr	r2, [pc, #568]	; (80066bc <UART_SetConfig+0x32c>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800648e:	441c      	add	r4, r3
 8006490:	f7fe fe5e 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006494:	4602      	mov	r2, r0
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009a      	lsls	r2, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80064aa:	f7fe fe51 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 80064ae:	4602      	mov	r2, r0
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009a      	lsls	r2, r3, #2
 80064b8:	441a      	add	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	4a7d      	ldr	r2, [pc, #500]	; (80066bc <UART_SetConfig+0x32c>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2264      	movs	r2, #100	; 0x64
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	1aeb      	subs	r3, r5, r3
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	3332      	adds	r3, #50	; 0x32
 80064d8:	4a78      	ldr	r2, [pc, #480]	; (80066bc <UART_SetConfig+0x32c>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	f003 0207 	and.w	r2, r3, #7
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4422      	add	r2, r4
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	e154      	b.n	8006798 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80064ee:	f7fe fe1b 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009a      	lsls	r2, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	4a6c      	ldr	r2, [pc, #432]	; (80066bc <UART_SetConfig+0x32c>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	011c      	lsls	r4, r3, #4
 8006512:	f7fe fe09 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006516:	4602      	mov	r2, r0
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009a      	lsls	r2, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	fbb2 f5f3 	udiv	r5, r2, r3
 800652c:	f7fe fdfc 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006530:	4602      	mov	r2, r0
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009a      	lsls	r2, r3, #2
 800653a:	441a      	add	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	fbb2 f3f3 	udiv	r3, r2, r3
 8006546:	4a5d      	ldr	r2, [pc, #372]	; (80066bc <UART_SetConfig+0x32c>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	2264      	movs	r2, #100	; 0x64
 8006550:	fb02 f303 	mul.w	r3, r2, r3
 8006554:	1aeb      	subs	r3, r5, r3
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	3332      	adds	r3, #50	; 0x32
 800655a:	4a58      	ldr	r2, [pc, #352]	; (80066bc <UART_SetConfig+0x32c>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006568:	441c      	add	r4, r3
 800656a:	f7fe fddd 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 800656e:	4602      	mov	r2, r0
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009a      	lsls	r2, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	fbb2 f5f3 	udiv	r5, r2, r3
 8006584:	f7fe fdd0 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006588:	4602      	mov	r2, r0
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009a      	lsls	r2, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	4a47      	ldr	r2, [pc, #284]	; (80066bc <UART_SetConfig+0x32c>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2264      	movs	r2, #100	; 0x64
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	1aeb      	subs	r3, r5, r3
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a42      	ldr	r2, [pc, #264]	; (80066bc <UART_SetConfig+0x32c>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 0207 	and.w	r2, r3, #7
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4422      	add	r2, r4
 80065c4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80065c6:	e0e7      	b.n	8006798 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a39      	ldr	r2, [pc, #228]	; (80066b4 <UART_SetConfig+0x324>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <UART_SetConfig+0x24c>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <UART_SetConfig+0x328>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d171      	bne.n	80066c0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80065dc:	f7fe fdb8 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 80065e0:	4602      	mov	r2, r0
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009a      	lsls	r2, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	4a31      	ldr	r2, [pc, #196]	; (80066bc <UART_SetConfig+0x32c>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	011c      	lsls	r4, r3, #4
 8006600:	f7fe fda6 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006604:	4602      	mov	r2, r0
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009a      	lsls	r2, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	fbb2 f5f3 	udiv	r5, r2, r3
 800661a:	f7fe fd99 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 800661e:	4602      	mov	r2, r0
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009a      	lsls	r2, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	4a21      	ldr	r2, [pc, #132]	; (80066bc <UART_SetConfig+0x32c>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	2264      	movs	r2, #100	; 0x64
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	1aeb      	subs	r3, r5, r3
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	3332      	adds	r3, #50	; 0x32
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <UART_SetConfig+0x32c>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006654:	441c      	add	r4, r3
 8006656:	f7fe fd7b 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 800665a:	4602      	mov	r2, r0
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	009a      	lsls	r2, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006670:	f7fe fd6e 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8006674:	4602      	mov	r2, r0
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009a      	lsls	r2, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <UART_SetConfig+0x32c>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	2264      	movs	r2, #100	; 0x64
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	1aeb      	subs	r3, r5, r3
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	3332      	adds	r3, #50	; 0x32
 800669e:	4a07      	ldr	r2, [pc, #28]	; (80066bc <UART_SetConfig+0x32c>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f003 020f 	and.w	r2, r3, #15
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4422      	add	r2, r4
 80066b0:	609a      	str	r2, [r3, #8]
 80066b2:	e071      	b.n	8006798 <UART_SetConfig+0x408>
 80066b4:	40011000 	.word	0x40011000
 80066b8:	40011400 	.word	0x40011400
 80066bc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80066c0:	f7fe fd32 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009a      	lsls	r2, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	4a31      	ldr	r2, [pc, #196]	; (80067a0 <UART_SetConfig+0x410>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	011c      	lsls	r4, r3, #4
 80066e4:	f7fe fd20 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009a      	lsls	r2, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	fbb2 f5f3 	udiv	r5, r2, r3
 80066fe:	f7fe fd13 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006702:	4602      	mov	r2, r0
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009a      	lsls	r2, r3, #2
 800670c:	441a      	add	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	fbb2 f3f3 	udiv	r3, r2, r3
 8006718:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <UART_SetConfig+0x410>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2264      	movs	r2, #100	; 0x64
 8006722:	fb02 f303 	mul.w	r3, r2, r3
 8006726:	1aeb      	subs	r3, r5, r3
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	3332      	adds	r3, #50	; 0x32
 800672c:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <UART_SetConfig+0x410>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006738:	441c      	add	r4, r3
 800673a:	f7fe fcf5 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 800673e:	4602      	mov	r2, r0
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009a      	lsls	r2, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	fbb2 f5f3 	udiv	r5, r2, r3
 8006754:	f7fe fce8 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8006758:	4602      	mov	r2, r0
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009a      	lsls	r2, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	fbb2 f3f3 	udiv	r3, r2, r3
 800676e:	4a0c      	ldr	r2, [pc, #48]	; (80067a0 <UART_SetConfig+0x410>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	2264      	movs	r2, #100	; 0x64
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	1aeb      	subs	r3, r5, r3
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	3332      	adds	r3, #50	; 0x32
 8006782:	4a07      	ldr	r2, [pc, #28]	; (80067a0 <UART_SetConfig+0x410>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4422      	add	r2, r4
 8006794:	609a      	str	r2, [r3, #8]
}
 8006796:	e7ff      	b.n	8006798 <UART_SetConfig+0x408>
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bdb0      	pop	{r4, r5, r7, pc}
 80067a0:	51eb851f 	.word	0x51eb851f

080067a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a4:	b084      	sub	sp, #16
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	f107 001c 	add.w	r0, r7, #28
 80067b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d122      	bne.n	8006802 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d105      	bne.n	80067f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fa7c 	bl	8007cf4 <USB_CoreReset>
 80067fc:	4603      	mov	r3, r0
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e01a      	b.n	8006838 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 fa70 	bl	8007cf4 <USB_CoreReset>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
 800682a:	e005      	b.n	8006838 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10b      	bne.n	8006856 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f043 0206 	orr.w	r2, r3, #6
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006862:	b004      	add	sp, #16
 8006864:	4770      	bx	lr
	...

08006868 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d165      	bne.n	8006948 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4a41      	ldr	r2, [pc, #260]	; (8006984 <USB_SetTurnaroundTime+0x11c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d906      	bls.n	8006892 <USB_SetTurnaroundTime+0x2a>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4a40      	ldr	r2, [pc, #256]	; (8006988 <USB_SetTurnaroundTime+0x120>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d802      	bhi.n	8006892 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800688c:	230f      	movs	r3, #15
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e062      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4a3c      	ldr	r2, [pc, #240]	; (8006988 <USB_SetTurnaroundTime+0x120>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d906      	bls.n	80068a8 <USB_SetTurnaroundTime+0x40>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4a3b      	ldr	r2, [pc, #236]	; (800698c <USB_SetTurnaroundTime+0x124>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d802      	bhi.n	80068a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068a2:	230e      	movs	r3, #14
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	e057      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4a38      	ldr	r2, [pc, #224]	; (800698c <USB_SetTurnaroundTime+0x124>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d906      	bls.n	80068be <USB_SetTurnaroundTime+0x56>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4a37      	ldr	r2, [pc, #220]	; (8006990 <USB_SetTurnaroundTime+0x128>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d802      	bhi.n	80068be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068b8:	230d      	movs	r3, #13
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e04c      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4a33      	ldr	r2, [pc, #204]	; (8006990 <USB_SetTurnaroundTime+0x128>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d906      	bls.n	80068d4 <USB_SetTurnaroundTime+0x6c>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4a32      	ldr	r2, [pc, #200]	; (8006994 <USB_SetTurnaroundTime+0x12c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d802      	bhi.n	80068d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068ce:	230c      	movs	r3, #12
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	e041      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <USB_SetTurnaroundTime+0x12c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d906      	bls.n	80068ea <USB_SetTurnaroundTime+0x82>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4a2e      	ldr	r2, [pc, #184]	; (8006998 <USB_SetTurnaroundTime+0x130>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d802      	bhi.n	80068ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068e4:	230b      	movs	r3, #11
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e036      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <USB_SetTurnaroundTime+0x130>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d906      	bls.n	8006900 <USB_SetTurnaroundTime+0x98>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a29      	ldr	r2, [pc, #164]	; (800699c <USB_SetTurnaroundTime+0x134>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d802      	bhi.n	8006900 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068fa:	230a      	movs	r3, #10
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e02b      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4a26      	ldr	r2, [pc, #152]	; (800699c <USB_SetTurnaroundTime+0x134>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d906      	bls.n	8006916 <USB_SetTurnaroundTime+0xae>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <USB_SetTurnaroundTime+0x138>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d802      	bhi.n	8006916 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006910:	2309      	movs	r3, #9
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	e020      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4a21      	ldr	r2, [pc, #132]	; (80069a0 <USB_SetTurnaroundTime+0x138>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d906      	bls.n	800692c <USB_SetTurnaroundTime+0xc4>
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <USB_SetTurnaroundTime+0x13c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d802      	bhi.n	800692c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006926:	2308      	movs	r3, #8
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e015      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <USB_SetTurnaroundTime+0x13c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d906      	bls.n	8006942 <USB_SetTurnaroundTime+0xda>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4a1c      	ldr	r2, [pc, #112]	; (80069a8 <USB_SetTurnaroundTime+0x140>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d802      	bhi.n	8006942 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800693c:	2307      	movs	r3, #7
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e00a      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006942:	2306      	movs	r3, #6
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e007      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800694e:	2309      	movs	r3, #9
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e001      	b.n	8006958 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006954:	2309      	movs	r3, #9
 8006956:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	029b      	lsls	r3, r3, #10
 800696c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	00d8acbf 	.word	0x00d8acbf
 8006988:	00e4e1bf 	.word	0x00e4e1bf
 800698c:	00f423ff 	.word	0x00f423ff
 8006990:	0106737f 	.word	0x0106737f
 8006994:	011a499f 	.word	0x011a499f
 8006998:	01312cff 	.word	0x01312cff
 800699c:	014ca43f 	.word	0x014ca43f
 80069a0:	016e35ff 	.word	0x016e35ff
 80069a4:	01a6ab1f 	.word	0x01a6ab1f
 80069a8:	01e847ff 	.word	0x01e847ff

080069ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f043 0201 	orr.w	r2, r3, #1
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d106      	bne.n	8006a1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e00b      	b.n	8006a34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	e001      	b.n	8006a34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e003      	b.n	8006a3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a34:	2032      	movs	r0, #50	; 0x32
 8006a36:	f7fa faa9 	bl	8000f8c <HAL_Delay>

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a44:	b084      	sub	sp, #16
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	e009      	b.n	8006a78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3340      	adds	r3, #64	; 0x40
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b0e      	cmp	r3, #14
 8006a7c:	d9f2      	bls.n	8006a64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d112      	bne.n	8006aaa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8006aa8:	e00b      	b.n	8006ac2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	461a      	mov	r2, r3
 8006ade:	680b      	ldr	r3, [r1, #0]
 8006ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d10c      	bne.n	8006b02 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006aee:	2100      	movs	r1, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f961 	bl	8006db8 <USB_SetDevSpeed>
 8006af6:	e008      	b.n	8006b0a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006af8:	2101      	movs	r1, #1
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f95c 	bl	8006db8 <USB_SetDevSpeed>
 8006b00:	e003      	b.n	8006b0a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b02:	2103      	movs	r1, #3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f957 	bl	8006db8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b0a:	2110      	movs	r1, #16
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f90b 	bl	8006d28 <USB_FlushTxFifo>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f929 	bl	8006d74 <USB_FlushRxFifo>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	461a      	mov	r2, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2300      	movs	r3, #0
 8006b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	e043      	b.n	8006bde <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b6c:	d118      	bne.n	8006ba0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10a      	bne.n	8006b8a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	461a      	mov	r2, r3
 8006b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	e013      	b.n	8006bb2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	e008      	b.n	8006bb2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3b7      	bcc.n	8006b56 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e043      	b.n	8006c74 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c02:	d118      	bne.n	8006c36 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	461a      	mov	r2, r3
 8006c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e013      	b.n	8006c48 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	e008      	b.n	8006c48 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	461a      	mov	r2, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3301      	adds	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d3b7      	bcc.n	8006bec <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c8e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d111      	bne.n	8006cba <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <USB_DevInit+0x2dc>)
 8006ca0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	f043 0303 	orr.w	r3, r3, #3
 8006cb8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f043 0210 	orr.w	r2, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <USB_DevInit+0x2e0>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f043 0208 	orr.w	r2, r3, #8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d107      	bne.n	8006d0e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d06:	f043 0304 	orr.w	r3, r3, #4
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d1a:	b004      	add	sp, #16
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	00800100 	.word	0x00800100
 8006d24:	803c3800 	.word	0x803c3800

08006d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	019b      	lsls	r3, r3, #6
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <USB_FlushTxFifo+0x48>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d901      	bls.n	8006d54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e006      	b.n	8006d62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d0f0      	beq.n	8006d42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	00030d40 	.word	0x00030d40

08006d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2210      	movs	r2, #16
 8006d84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <USB_FlushRxFifo+0x40>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d901      	bls.n	8006d98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e006      	b.n	8006da6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d0f0      	beq.n	8006d86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	00030d40 	.word	0x00030d40

08006db8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	68f9      	ldr	r1, [r7, #12]
 8006dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b087      	sub	sp, #28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 0306 	and.w	r3, r3, #6
 8006e02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d102      	bne.n	8006e10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
 8006e0e:	e00a      	b.n	8006e26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d002      	beq.n	8006e1c <USB_GetDevSpeed+0x32>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	d102      	bne.n	8006e22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	75fb      	strb	r3, [r7, #23]
 8006e20:	e001      	b.n	8006e26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e22:	230f      	movs	r3, #15
 8006e24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d13a      	bne.n	8006ec6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e56:	69da      	ldr	r2, [r3, #28]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	2101      	movs	r1, #1
 8006e62:	fa01 f303 	lsl.w	r3, r1, r3
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d155      	bne.n	8006f34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ea4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	059b      	lsls	r3, r3, #22
 8006eaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006eac:	4313      	orrs	r3, r2
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	e036      	b.n	8006f34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d11a      	bne.n	8006f34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	78db      	ldrb	r3, [r3, #3]
 8006f18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d135      	bne.n	8006fcc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	2101      	movs	r1, #1
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	68f9      	ldr	r1, [r7, #12]
 8006f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f80:	4013      	ands	r3, r2
 8006f82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0159      	lsls	r1, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	440b      	add	r3, r1
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <USB_DeactivateEndpoint+0x100>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
 8006fca:	e034      	b.n	8007036 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2101      	movs	r1, #1
 8006fde:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fec:	4013      	ands	r3, r2
 8006fee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	2101      	movs	r1, #1
 8007002:	fa01 f303 	lsl.w	r3, r1, r3
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	43db      	mvns	r3, r3
 800700a:	68f9      	ldr	r1, [r7, #12]
 800700c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007010:	4013      	ands	r3, r2
 8007012:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	0159      	lsls	r1, r3, #5
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	440b      	add	r3, r1
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	4619      	mov	r1, r3
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <USB_DeactivateEndpoint+0x104>)
 8007032:	4013      	ands	r3, r2
 8007034:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	ec337800 	.word	0xec337800
 8007048:	eff37800 	.word	0xeff37800

0800704c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	f040 815c 	bne.w	8007326 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d132      	bne.n	80070dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007090:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007094:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007098:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d4:	0cdb      	lsrs	r3, r3, #19
 80070d6:	04db      	lsls	r3, r3, #19
 80070d8:	6113      	str	r3, [r2, #16]
 80070da:	e074      	b.n	80071c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f6:	0cdb      	lsrs	r3, r3, #19
 80070f8:	04db      	lsls	r3, r3, #19
 80070fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007116:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800711a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800711e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6959      	ldr	r1, [r3, #20]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	440b      	add	r3, r1
 8007138:	1e59      	subs	r1, r3, #1
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007142:	04d9      	lsls	r1, r3, #19
 8007144:	4b9d      	ldr	r3, [pc, #628]	; (80073bc <USB_EPStartXfer+0x370>)
 8007146:	400b      	ands	r3, r1
 8007148:	69b9      	ldr	r1, [r7, #24]
 800714a:	0148      	lsls	r0, r1, #5
 800714c:	69f9      	ldr	r1, [r7, #28]
 800714e:	4401      	add	r1, r0
 8007150:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007154:	4313      	orrs	r3, r2
 8007156:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716e:	69b9      	ldr	r1, [r7, #24]
 8007170:	0148      	lsls	r0, r1, #5
 8007172:	69f9      	ldr	r1, [r7, #28]
 8007174:	4401      	add	r1, r0
 8007176:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800717a:	4313      	orrs	r3, r2
 800717c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	78db      	ldrb	r3, [r3, #3]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d11f      	bne.n	80071c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	0151      	lsls	r1, r2, #5
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	440a      	add	r2, r1
 800719c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80071a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d14b      	bne.n	8007264 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d009      	beq.n	80071e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	461a      	mov	r2, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	78db      	ldrb	r3, [r3, #3]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d128      	bne.n	8007242 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d110      	bne.n	8007222 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	440a      	add	r2, r1
 8007216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	e00f      	b.n	8007242 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007240:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e12f      	b.n	80074c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007282:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	78db      	ldrb	r3, [r3, #3]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d015      	beq.n	80072b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8117 	beq.w	80074c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	2101      	movs	r1, #1
 80072a8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ac:	69f9      	ldr	r1, [r7, #28]
 80072ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b2:	4313      	orrs	r3, r2
 80072b4:	634b      	str	r3, [r1, #52]	; 0x34
 80072b6:	e105      	b.n	80074c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d110      	bne.n	80072ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	e00f      	b.n	800730a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69ba      	ldr	r2, [r7, #24]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007308:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	68d9      	ldr	r1, [r3, #12]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	b298      	uxth	r0, r3
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4603      	mov	r3, r0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fa2b 	bl	800777a <USB_WritePacket>
 8007324:	e0ce      	b.n	80074c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007340:	0cdb      	lsrs	r3, r3, #19
 8007342:	04db      	lsls	r3, r3, #19
 8007344:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007360:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007364:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007368:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d126      	bne.n	80073c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	0148      	lsls	r0, r1, #5
 800738c:	69f9      	ldr	r1, [r7, #28]
 800738e:	4401      	add	r1, r0
 8007390:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007394:	4313      	orrs	r3, r2
 8007396:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b6:	6113      	str	r3, [r2, #16]
 80073b8:	e036      	b.n	8007428 <USB_EPStartXfer+0x3dc>
 80073ba:	bf00      	nop
 80073bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	1e5a      	subs	r2, r3, #1
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	8afb      	ldrh	r3, [r7, #22]
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	4b39      	ldr	r3, [pc, #228]	; (80074d0 <USB_EPStartXfer+0x484>)
 80073ea:	400b      	ands	r3, r1
 80073ec:	69b9      	ldr	r1, [r7, #24]
 80073ee:	0148      	lsls	r0, r1, #5
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	4401      	add	r1, r0
 80073f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073f8:	4313      	orrs	r3, r2
 80073fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	8af9      	ldrh	r1, [r7, #22]
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007418:	69b9      	ldr	r1, [r7, #24]
 800741a:	0148      	lsls	r0, r1, #5
 800741c:	69f9      	ldr	r1, [r7, #28]
 800741e:	4401      	add	r1, r0
 8007420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007424:	4313      	orrs	r3, r2
 8007426:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d10d      	bne.n	800744a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	68d9      	ldr	r1, [r3, #12]
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	460a      	mov	r2, r1
 8007448:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	78db      	ldrb	r3, [r3, #3]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d128      	bne.n	80074a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d110      	bne.n	8007484 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e00f      	b.n	80074a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	1ff80000 	.word	0x1ff80000

080074d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4613      	mov	r3, r2
 80074e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	f040 80cd 	bne.w	8007690 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d132      	bne.n	8007564 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007518:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800751c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755c:	0cdb      	lsrs	r3, r3, #19
 800755e:	04db      	lsls	r3, r3, #19
 8007560:	6113      	str	r3, [r2, #16]
 8007562:	e04e      	b.n	8007602 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757e:	0cdb      	lsrs	r3, r3, #19
 8007580:	04db      	lsls	r3, r3, #19
 8007582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	0151      	lsls	r1, r2, #5
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	440a      	add	r2, r1
 800759a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	695a      	ldr	r2, [r3, #20]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d903      	bls.n	80075bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f2:	6939      	ldr	r1, [r7, #16]
 80075f4:	0148      	lsls	r0, r1, #5
 80075f6:	6979      	ldr	r1, [r7, #20]
 80075f8:	4401      	add	r1, r0
 80075fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80075fe:	4313      	orrs	r3, r2
 8007600:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d11e      	bne.n	8007646 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	461a      	mov	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e092      	b.n	800776c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	440a      	add	r2, r1
 800765c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007660:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007664:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d07e      	beq.n	800776c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	2101      	movs	r1, #1
 8007680:	fa01 f303 	lsl.w	r3, r1, r3
 8007684:	6979      	ldr	r1, [r7, #20]
 8007686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768a:	4313      	orrs	r3, r2
 800768c:	634b      	str	r3, [r1, #52]	; 0x34
 800768e:	e06d      	b.n	800776c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076aa:	0cdb      	lsrs	r3, r3, #19
 80076ac:	04db      	lsls	r3, r3, #19
 80076ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	0151      	lsls	r1, r2, #5
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	440a      	add	r2, r1
 80076fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007702:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800771a:	6939      	ldr	r1, [r7, #16]
 800771c:	0148      	lsls	r0, r1, #5
 800771e:	6979      	ldr	r1, [r7, #20]
 8007720:	4401      	add	r1, r0
 8007722:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007726:	4313      	orrs	r3, r2
 8007728:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10d      	bne.n	800774c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	68d9      	ldr	r1, [r3, #12]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	460a      	mov	r2, r1
 800774a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007766:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800776a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800777a:	b480      	push	{r7}
 800777c:	b089      	sub	sp, #36	; 0x24
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	460b      	mov	r3, r1
 800778a:	71fb      	strb	r3, [r7, #7]
 800778c:	4613      	mov	r3, r2
 800778e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007798:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11a      	bne.n	80077d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077a0:	88bb      	ldrh	r3, [r7, #4]
 80077a2:	3303      	adds	r3, #3
 80077a4:	089b      	lsrs	r3, r3, #2
 80077a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	e00f      	b.n	80077ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	031a      	lsls	r2, r3, #12
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ba:	461a      	mov	r2, r3
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	3304      	adds	r3, #4
 80077c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3eb      	bcc.n	80077ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3724      	adds	r7, #36	; 0x24
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b089      	sub	sp, #36	; 0x24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	3303      	adds	r3, #3
 80077fe:	089b      	lsrs	r3, r3, #2
 8007800:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007802:	2300      	movs	r3, #0
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	e00b      	b.n	8007820 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	601a      	str	r2, [r3, #0]
    pDest++;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	3304      	adds	r3, #4
 8007818:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	3301      	adds	r3, #1
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d3ef      	bcc.n	8007808 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007828:	69fb      	ldr	r3, [r7, #28]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3724      	adds	r7, #36	; 0x24
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d12c      	bne.n	80078ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	db12      	blt.n	800788a <USB_EPSetStall+0x54>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00f      	beq.n	800788a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007884:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007888:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e02b      	b.n	8007904 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	db12      	blt.n	80078e4 <USB_EPSetStall+0xae>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00f      	beq.n	80078e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007902:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d128      	bne.n	8007980 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	0151      	lsls	r1, r2, #5
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	440a      	add	r2, r1
 8007944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007948:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800794c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	78db      	ldrb	r3, [r3, #3]
 8007952:	2b03      	cmp	r3, #3
 8007954:	d003      	beq.n	800795e <USB_EPClearStall+0x4c>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	78db      	ldrb	r3, [r3, #3]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d138      	bne.n	80079d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	0151      	lsls	r1, r2, #5
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	440a      	add	r2, r1
 8007974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e027      	b.n	80079d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800799e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	78db      	ldrb	r3, [r3, #3]
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d003      	beq.n	80079b0 <USB_EPClearStall+0x9e>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	78db      	ldrb	r3, [r3, #3]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d10f      	bne.n	80079d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079de:	b480      	push	{r7}
 80079e0:	b085      	sub	sp, #20
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a44:	f023 0302 	bic.w	r3, r3, #2
 8007a48:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007a4a:	2003      	movs	r0, #3
 8007a4c:	f7f9 fa9e 	bl	8000f8c <HAL_Delay>

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007a7a:	2003      	movs	r0, #3
 8007a7c:	f7f9 fa86 	bl	8000f8c <HAL_Delay>

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	0c1b      	lsrs	r3, r3, #16
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	b29b      	uxth	r3, r3
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b46:	68bb      	ldr	r3, [r7, #8]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b76:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	01db      	lsls	r3, r3, #7
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007bea:	f023 0307 	bic.w	r3, r3, #7
 8007bee:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0306 	and.w	r3, r3, #6
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d109      	bne.n	8007c14 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0e:	f043 0303 	orr.w	r3, r3, #3
 8007c12:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	460b      	mov	r3, r1
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	333c      	adds	r3, #60	; 0x3c
 8007c4e:	3304      	adds	r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <USB_EP0_OutStart+0xb8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d90a      	bls.n	8007c72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6c:	d101      	bne.n	8007c72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e037      	b.n	8007ce2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca0:	f043 0318 	orr.w	r3, r3, #24
 8007ca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d10f      	bne.n	8007ce0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	4f54300a 	.word	0x4f54300a

08007cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <USB_CoreReset+0x64>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01b      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	daf2      	bge.n	8007d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <USB_CoreReset+0x64>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d0f0      	beq.n	8007d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	00030d40 	.word	0x00030d40

08007d5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7c1b      	ldrb	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d115      	bne.n	8007da0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d78:	2202      	movs	r2, #2
 8007d7a:	2181      	movs	r1, #129	; 0x81
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f003 f868 	bl	800ae52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	2101      	movs	r1, #1
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f003 f85e 	bl	800ae52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007d9e:	e012      	b.n	8007dc6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007da0:	2340      	movs	r3, #64	; 0x40
 8007da2:	2202      	movs	r2, #2
 8007da4:	2181      	movs	r1, #129	; 0x81
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f003 f853 	bl	800ae52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007db2:	2340      	movs	r3, #64	; 0x40
 8007db4:	2202      	movs	r2, #2
 8007db6:	2101      	movs	r1, #1
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f003 f84a 	bl	800ae52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dc6:	2308      	movs	r3, #8
 8007dc8:	2203      	movs	r2, #3
 8007dca:	2182      	movs	r1, #130	; 0x82
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f003 f840 	bl	800ae52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007dd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ddc:	f003 fca8 	bl	800b730 <malloc>
 8007de0:	4603      	mov	r3, r0
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007df4:	2301      	movs	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	e026      	b.n	8007e48 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e00:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7c1b      	ldrb	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e2e:	2101      	movs	r1, #1
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f003 f8ff 	bl	800b034 <USBD_LL_PrepareReceive>
 8007e36:	e007      	b.n	8007e48 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e3e:	2340      	movs	r3, #64	; 0x40
 8007e40:	2101      	movs	r1, #1
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f003 f8f6 	bl	800b034 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e62:	2181      	movs	r1, #129	; 0x81
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f003 f81a 	bl	800ae9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e70:	2101      	movs	r1, #1
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f003 f813 	bl	800ae9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e80:	2182      	movs	r1, #130	; 0x82
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f003 f80b 	bl	800ae9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f003 fc49 	bl	800b740 <free>
    pdev->pClassData = NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ed0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d039      	beq.n	8007f5e <USBD_CDC_Setup+0x9e>
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d17c      	bne.n	8007fe8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88db      	ldrh	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d029      	beq.n	8007f4a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da11      	bge.n	8007f24 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007f0c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	88d2      	ldrh	r2, [r2, #6]
 8007f12:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f14:	6939      	ldr	r1, [r7, #16]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88db      	ldrh	r3, [r3, #6]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f99b 	bl	8009258 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007f22:	e068      	b.n	8007ff6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	785a      	ldrb	r2, [r3, #1]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	88db      	ldrh	r3, [r3, #6]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f3a:	6939      	ldr	r1, [r7, #16]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f9b6 	bl	80092b4 <USBD_CtlPrepareRx>
    break;
 8007f48:	e055      	b.n	8007ff6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	7850      	ldrb	r0, [r2, #1]
 8007f56:	2200      	movs	r2, #0
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	4798      	blx	r3
    break;
 8007f5c:	e04b      	b.n	8007ff6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b0a      	cmp	r3, #10
 8007f64:	d017      	beq.n	8007f96 <USBD_CDC_Setup+0xd6>
 8007f66:	2b0b      	cmp	r3, #11
 8007f68:	d029      	beq.n	8007fbe <USBD_CDC_Setup+0xfe>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d133      	bne.n	8007fd6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d107      	bne.n	8007f88 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f78:	f107 030c 	add.w	r3, r7, #12
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 f969 	bl	8009258 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007f86:	e02e      	b.n	8007fe6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 f8f9 	bl	8009182 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007f90:	2302      	movs	r3, #2
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	e027      	b.n	8007fe6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d107      	bne.n	8007fb0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007fa0:	f107 030f 	add.w	r3, r7, #15
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f955 	bl	8009258 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007fae:	e01a      	b.n	8007fe6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 f8e5 	bl	8009182 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbc:	e013      	b.n	8007fe6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d00d      	beq.n	8007fe4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 f8d9 	bl	8009182 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007fd4:	e006      	b.n	8007fe4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f8d2 	bl	8009182 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe2:	e000      	b.n	8007fe6 <USBD_CDC_Setup+0x126>
      break;
 8007fe4:	bf00      	nop
    }
    break;
 8007fe6:	e006      	b.n	8007ff6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 f8c9 	bl	8009182 <USBD_CtlError>
    ret = USBD_FAIL;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	75fb      	strb	r3, [r7, #23]
    break;
 8007ff4:	bf00      	nop
  }

  return ret;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008012:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800801a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008022:	2b00      	cmp	r3, #0
 8008024:	d03a      	beq.n	800809c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	331c      	adds	r3, #28
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d029      	beq.n	8008090 <USBD_CDC_DataIn+0x90>
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	331c      	adds	r3, #28
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	78f9      	ldrb	r1, [r7, #3]
 8008050:	68b8      	ldr	r0, [r7, #8]
 8008052:	460b      	mov	r3, r1
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	1a5b      	subs	r3, r3, r1
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4403      	add	r3, r0
 800805c:	3344      	adds	r3, #68	; 0x44
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	fbb2 f1f3 	udiv	r1, r2, r3
 8008064:	fb03 f301 	mul.w	r3, r3, r1
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d110      	bne.n	8008090 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	331c      	adds	r3, #28
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008082:	78f9      	ldrb	r1, [r7, #3]
 8008084:	2300      	movs	r3, #0
 8008086:	2200      	movs	r2, #0
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f002 ffb0 	bl	800afee <USBD_LL_Transmit>
 800808e:	e003      	b.n	8008098 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e000      	b.n	800809e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800809c:	2302      	movs	r3, #2
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f002 ffdb 	bl	800b07a <USBD_LL_GetRxDataSize>
 80080c4:	4602      	mov	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080ea:	4611      	mov	r1, r2
 80080ec:	4798      	blx	r3

    return USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	e000      	b.n	80080f4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80080f2:	2302      	movs	r3, #2
  }
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800810a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008112:	2b00      	cmp	r3, #0
 8008114:	d015      	beq.n	8008142 <USBD_CDC_EP0_RxReady+0x46>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800811c:	2bff      	cmp	r3, #255	; 0xff
 800811e:	d010      	beq.n	8008142 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800812e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008136:	b292      	uxth	r2, r2
 8008138:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	22ff      	movs	r2, #255	; 0xff
 800813e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2243      	movs	r2, #67	; 0x43
 8008158:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800815a:	4b03      	ldr	r3, [pc, #12]	; (8008168 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	20000090 	.word	0x20000090

0800816c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2243      	movs	r2, #67	; 0x43
 8008178:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800817a:	4b03      	ldr	r3, [pc, #12]	; (8008188 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	2000004c 	.word	0x2000004c

0800818c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2243      	movs	r2, #67	; 0x43
 8008198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800819a:	4b03      	ldr	r3, [pc, #12]	; (80081a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	200000d4 	.word	0x200000d4

080081ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	220a      	movs	r2, #10
 80081b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	20000008 	.word	0x20000008

080081cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081d6:	2302      	movs	r3, #2
 80081d8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b087      	sub	sp, #28
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	4613      	mov	r3, r2
 8008206:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800820e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008218:	88fa      	ldrh	r2, [r7, #6]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800823e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008264:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800826c:	2b00      	cmp	r3, #0
 800826e:	d017      	beq.n	80082a0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7c1b      	ldrb	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800827e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008282:	2101      	movs	r1, #1
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f002 fed5 	bl	800b034 <USBD_LL_PrepareReceive>
 800828a:	e007      	b.n	800829c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	2101      	movs	r1, #1
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f002 fecc 	bl	800b034 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	4613      	mov	r3, r2
 80082b6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082be:	2302      	movs	r3, #2
 80082c0:	e01a      	b.n	80082f8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	79fa      	ldrb	r2, [r7, #7]
 80082ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f002 fd47 	bl	800ad84 <USBD_LL_Init>

  return USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	e001      	b.n	8008326 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f002 fd6d 	bl	800ae1c <USBD_LL_Start>

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800836e:	2302      	movs	r3, #2
 8008370:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00c      	beq.n	8008396 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	78fa      	ldrb	r2, [r7, #3]
 8008386:	4611      	mov	r1, r2
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	4611      	mov	r1, r2
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fe95 	bl	8009108 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80083ec:	461a      	mov	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d00c      	beq.n	800841c <USBD_LL_SetupStage+0x56>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d302      	bcc.n	800840c <USBD_LL_SetupStage+0x46>
 8008406:	2b02      	cmp	r3, #2
 8008408:	d010      	beq.n	800842c <USBD_LL_SetupStage+0x66>
 800840a:	e017      	b.n	800843c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa05 	bl	8008824 <USBD_StdDevReq>
    break;
 800841a:	e01a      	b.n	8008452 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa67 	bl	80088f8 <USBD_StdItfReq>
    break;
 800842a:	e012      	b.n	8008452 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 faa5 	bl	8008984 <USBD_StdEPReq>
    break;
 800843a:	e00a      	b.n	8008452 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008446:	b2db      	uxtb	r3, r3
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f002 fd46 	bl	800aedc <USBD_LL_StallEP>
    break;
 8008450:	bf00      	nop
  }

  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	460b      	mov	r3, r1
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d14b      	bne.n	8008508 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008476:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800847e:	2b03      	cmp	r3, #3
 8008480:	d134      	bne.n	80084ec <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	429a      	cmp	r2, r3
 800848c:	d919      	bls.n	80084c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	1ad2      	subs	r2, r2, r3
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d203      	bcs.n	80084b0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	e002      	b.n	80084b6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 ff18 	bl	80092f0 <USBD_CtlContinueRx>
 80084c0:	e038      	b.n	8008534 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d105      	bne.n	80084e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 ff15 	bl	8009314 <USBD_CtlSendStatus>
 80084ea:	e023      	b.n	8008534 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d11e      	bne.n	8008534 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80084fe:	2100      	movs	r1, #0
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f002 fceb 	bl	800aedc <USBD_LL_StallEP>
 8008506:	e015      	b.n	8008534 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00d      	beq.n	8008530 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800851a:	2b03      	cmp	r3, #3
 800851c:	d108      	bne.n	8008530 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	7afa      	ldrb	r2, [r7, #11]
 8008528:	4611      	mov	r1, r2
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	4798      	blx	r3
 800852e:	e001      	b.n	8008534 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008530:	2302      	movs	r3, #2
 8008532:	e000      	b.n	8008536 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	460b      	mov	r3, r1
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d17f      	bne.n	8008652 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3314      	adds	r3, #20
 8008556:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800855e:	2b02      	cmp	r3, #2
 8008560:	d15c      	bne.n	800861c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	d915      	bls.n	800859a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	b29b      	uxth	r3, r3
 8008582:	461a      	mov	r2, r3
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fe82 	bl	8009290 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f002 fd4e 	bl	800b034 <USBD_LL_PrepareReceive>
 8008598:	e04e      	b.n	8008638 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	6912      	ldr	r2, [r2, #16]
 80085a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a6:	fb02 f201 	mul.w	r2, r2, r1
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11c      	bne.n	80085ea <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d316      	bcc.n	80085ea <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d20f      	bcs.n	80085ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ca:	2200      	movs	r2, #0
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fe5e 	bl	8009290 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f002 fd26 	bl	800b034 <USBD_LL_PrepareReceive>
 80085e8:	e026      	b.n	8008638 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d105      	bne.n	800860c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800860c:	2180      	movs	r1, #128	; 0x80
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f002 fc64 	bl	800aedc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fe90 	bl	800933a <USBD_CtlReceiveStatus>
 800861a:	e00d      	b.n	8008638 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008622:	2b04      	cmp	r3, #4
 8008624:	d004      	beq.n	8008630 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800862c:	2b00      	cmp	r3, #0
 800862e:	d103      	bne.n	8008638 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f002 fc52 	bl	800aedc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800863e:	2b01      	cmp	r3, #1
 8008640:	d11d      	bne.n	800867e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f7ff fe82 	bl	800834c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008650:	e015      	b.n	800867e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008664:	2b03      	cmp	r3, #3
 8008666:	d108      	bne.n	800867a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	7afa      	ldrb	r2, [r7, #11]
 8008672:	4611      	mov	r1, r2
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	4798      	blx	r3
 8008678:	e001      	b.n	800867e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800867a:	2302      	movs	r3, #2
 800867c:	e000      	b.n	8008680 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	2200      	movs	r2, #0
 8008694:	2100      	movs	r1, #0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f002 fbdb 	bl	800ae52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2240      	movs	r2, #64	; 0x40
 80086a8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	2200      	movs	r2, #0
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f002 fbcd 	bl	800ae52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2240      	movs	r2, #64	; 0x40
 80086c2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6852      	ldr	r2, [r2, #4]
 80086f8:	b2d2      	uxtb	r2, r2
 80086fa:	4611      	mov	r1, r2
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
  }

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2204      	movs	r2, #4
 8008742:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008784:	2b03      	cmp	r3, #3
 8008786:	d10b      	bne.n	80087a0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6852      	ldr	r2, [r2, #4]
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	4611      	mov	r1, r2
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800883a:	2b20      	cmp	r3, #32
 800883c:	d004      	beq.n	8008848 <USBD_StdDevReq+0x24>
 800883e:	2b40      	cmp	r3, #64	; 0x40
 8008840:	d002      	beq.n	8008848 <USBD_StdDevReq+0x24>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <USBD_StdDevReq+0x34>
 8008846:	e04c      	b.n	80088e2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
    break;
 8008856:	e049      	b.n	80088ec <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	2b09      	cmp	r3, #9
 800885e:	d83a      	bhi.n	80088d6 <USBD_StdDevReq+0xb2>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBD_StdDevReq+0x44>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	080088b9 	.word	0x080088b9
 800886c:	080088cd 	.word	0x080088cd
 8008870:	080088d7 	.word	0x080088d7
 8008874:	080088c3 	.word	0x080088c3
 8008878:	080088d7 	.word	0x080088d7
 800887c:	0800889b 	.word	0x0800889b
 8008880:	08008891 	.word	0x08008891
 8008884:	080088d7 	.word	0x080088d7
 8008888:	080088af 	.word	0x080088af
 800888c:	080088a5 	.word	0x080088a5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9d2 	bl	8008c3c <USBD_GetDescriptor>
      break;
 8008898:	e022      	b.n	80088e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fac7 	bl	8008e30 <USBD_SetAddress>
      break;
 80088a2:	e01d      	b.n	80088e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fb04 	bl	8008eb4 <USBD_SetConfig>
      break;
 80088ac:	e018      	b.n	80088e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fb8d 	bl	8008fd0 <USBD_GetConfig>
      break;
 80088b6:	e013      	b.n	80088e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fbbc 	bl	8009038 <USBD_GetStatus>
      break;
 80088c0:	e00e      	b.n	80088e0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fbea 	bl	800909e <USBD_SetFeature>
      break;
 80088ca:	e009      	b.n	80088e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fbf9 	bl	80090c6 <USBD_ClrFeature>
      break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc52 	bl	8009182 <USBD_CtlError>
      break;
 80088de:	bf00      	nop
    }
    break;
 80088e0:	e004      	b.n	80088ec <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fc4c 	bl	8009182 <USBD_CtlError>
    break;
 80088ea:	bf00      	nop
  }

  return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop

080088f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800890e:	2b20      	cmp	r3, #32
 8008910:	d003      	beq.n	800891a <USBD_StdItfReq+0x22>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d001      	beq.n	800891a <USBD_StdItfReq+0x22>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d12a      	bne.n	8008970 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008920:	3b01      	subs	r3, #1
 8008922:	2b02      	cmp	r3, #2
 8008924:	d81d      	bhi.n	8008962 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	889b      	ldrh	r3, [r3, #4]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	d813      	bhi.n	8008958 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	88db      	ldrh	r3, [r3, #6]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d110      	bne.n	800896c <USBD_StdItfReq+0x74>
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10d      	bne.n	800896c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fcdf 	bl	8009314 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008956:	e009      	b.n	800896c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fc11 	bl	8009182 <USBD_CtlError>
      break;
 8008960:	e004      	b.n	800896c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fc0c 	bl	8009182 <USBD_CtlError>
      break;
 800896a:	e000      	b.n	800896e <USBD_StdItfReq+0x76>
      break;
 800896c:	bf00      	nop
    }
    break;
 800896e:	e004      	b.n	800897a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fc05 	bl	8009182 <USBD_CtlError>
    break;
 8008978:	bf00      	nop
  }

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089a0:	2b20      	cmp	r3, #32
 80089a2:	d004      	beq.n	80089ae <USBD_StdEPReq+0x2a>
 80089a4:	2b40      	cmp	r3, #64	; 0x40
 80089a6:	d002      	beq.n	80089ae <USBD_StdEPReq+0x2a>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <USBD_StdEPReq+0x3a>
 80089ac:	e13b      	b.n	8008c26 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
    break;
 80089bc:	e138      	b.n	8008c30 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d10a      	bne.n	80089e0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

      return ret;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	e128      	b.n	8008c32 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d03e      	beq.n	8008a66 <USBD_StdEPReq+0xe2>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d002      	beq.n	80089f2 <USBD_StdEPReq+0x6e>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d070      	beq.n	8008ad2 <USBD_StdEPReq+0x14e>
 80089f0:	e113      	b.n	8008c1a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d002      	beq.n	8008a02 <USBD_StdEPReq+0x7e>
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d015      	beq.n	8008a2c <USBD_StdEPReq+0xa8>
 8008a00:	e02b      	b.n	8008a5a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <USBD_StdEPReq+0x9e>
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	2b80      	cmp	r3, #128	; 0x80
 8008a0c:	d009      	beq.n	8008a22 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f002 fa62 	bl	800aedc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008a18:	2180      	movs	r1, #128	; 0x80
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f002 fa5e 	bl	800aedc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a20:	e020      	b.n	8008a64 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fbac 	bl	8009182 <USBD_CtlError>
        break;
 8008a2a:	e01b      	b.n	8008a64 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	885b      	ldrh	r3, [r3, #2]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10e      	bne.n	8008a52 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00b      	beq.n	8008a52 <USBD_StdEPReq+0xce>
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b80      	cmp	r3, #128	; 0x80
 8008a3e:	d008      	beq.n	8008a52 <USBD_StdEPReq+0xce>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	88db      	ldrh	r3, [r3, #6]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f002 fa45 	bl	800aedc <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc5e 	bl	8009314 <USBD_CtlSendStatus>

        break;
 8008a58:	e004      	b.n	8008a64 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fb90 	bl	8009182 <USBD_CtlError>
        break;
 8008a62:	bf00      	nop
      }
      break;
 8008a64:	e0de      	b.n	8008c24 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d002      	beq.n	8008a76 <USBD_StdEPReq+0xf2>
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d015      	beq.n	8008aa0 <USBD_StdEPReq+0x11c>
 8008a74:	e026      	b.n	8008ac4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00c      	beq.n	8008a96 <USBD_StdEPReq+0x112>
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b80      	cmp	r3, #128	; 0x80
 8008a80:	d009      	beq.n	8008a96 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f002 fa28 	bl	800aedc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008a8c:	2180      	movs	r1, #128	; 0x80
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f002 fa24 	bl	800aedc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a94:	e01c      	b.n	8008ad0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008a96:	6839      	ldr	r1, [r7, #0]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fb72 	bl	8009182 <USBD_CtlError>
        break;
 8008a9e:	e017      	b.n	8008ad0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	885b      	ldrh	r3, [r3, #2]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d112      	bne.n	8008ace <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f002 fa2f 	bl	800af1a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc29 	bl	8009314 <USBD_CtlSendStatus>
        }
        break;
 8008ac2:	e004      	b.n	8008ace <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fb5b 	bl	8009182 <USBD_CtlError>
        break;
 8008acc:	e000      	b.n	8008ad0 <USBD_StdEPReq+0x14c>
        break;
 8008ace:	bf00      	nop
      }
      break;
 8008ad0:	e0a8      	b.n	8008c24 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d002      	beq.n	8008ae2 <USBD_StdEPReq+0x15e>
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d031      	beq.n	8008b44 <USBD_StdEPReq+0x1c0>
 8008ae0:	e095      	b.n	8008c0e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d007      	beq.n	8008af8 <USBD_StdEPReq+0x174>
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b80      	cmp	r3, #128	; 0x80
 8008aec:	d004      	beq.n	8008af8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fb46 	bl	8009182 <USBD_CtlError>
          break;
 8008af6:	e08f      	b.n	8008c18 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da0b      	bge.n	8008b18 <USBD_StdEPReq+0x194>
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	3310      	adds	r3, #16
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	4413      	add	r3, r2
 8008b14:	3304      	adds	r3, #4
 8008b16:	e00a      	b.n	8008b2e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2202      	movs	r2, #2
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb8b 	bl	8009258 <USBD_CtlSendData>
          break;
 8008b42:	e069      	b.n	8008c18 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da11      	bge.n	8008b70 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	f003 020f 	and.w	r2, r3, #15
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	3318      	adds	r3, #24
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d117      	bne.n	8008b96 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fb0a 	bl	8009182 <USBD_CtlError>
            break;
 8008b6e:	e053      	b.n	8008c18 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	f003 020f 	and.w	r2, r3, #15
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 faf7 	bl	8009182 <USBD_CtlError>
            break;
 8008b94:	e040      	b.n	8008c18 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da0b      	bge.n	8008bb6 <USBD_StdEPReq+0x232>
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	3310      	adds	r3, #16
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	e00a      	b.n	8008bcc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <USBD_StdEPReq+0x256>
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d103      	bne.n	8008be2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e00e      	b.n	8008c00 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f002 f9b6 	bl	800af58 <USBD_LL_IsStallEP>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	e002      	b.n	8008c00 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2202      	movs	r2, #2
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fb26 	bl	8009258 <USBD_CtlSendData>
          break;
 8008c0c:	e004      	b.n	8008c18 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fab6 	bl	8009182 <USBD_CtlError>
        break;
 8008c16:	bf00      	nop
      }
      break;
 8008c18:	e004      	b.n	8008c24 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fab0 	bl	8009182 <USBD_CtlError>
      break;
 8008c22:	bf00      	nop
    }
    break;
 8008c24:	e004      	b.n	8008c30 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 faaa 	bl	8009182 <USBD_CtlError>
    break;
 8008c2e:	bf00      	nop
  }

  return ret;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	885b      	ldrh	r3, [r3, #2]
 8008c4a:	0a1b      	lsrs	r3, r3, #8
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b06      	cmp	r3, #6
 8008c52:	f200 80c9 	bhi.w	8008de8 <USBD_GetDescriptor+0x1ac>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <USBD_GetDescriptor+0x20>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c79 	.word	0x08008c79
 8008c60:	08008c91 	.word	0x08008c91
 8008c64:	08008cd1 	.word	0x08008cd1
 8008c68:	08008de9 	.word	0x08008de9
 8008c6c:	08008de9 	.word	0x08008de9
 8008c70:	08008d95 	.word	0x08008d95
 8008c74:	08008dbb 	.word	0x08008dbb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7c12      	ldrb	r2, [r2, #16]
 8008c84:	f107 010a 	add.w	r1, r7, #10
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
    break;
 8008c8e:	e0b0      	b.n	8008df2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7c1b      	ldrb	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10d      	bne.n	8008cb4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca0:	f107 020a 	add.w	r2, r7, #10
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	2202      	movs	r2, #2
 8008cb0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008cb2:	e09e      	b.n	8008df2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	f107 020a 	add.w	r2, r7, #10
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	2202      	movs	r2, #2
 8008ccc:	701a      	strb	r2, [r3, #0]
    break;
 8008cce:	e090      	b.n	8008df2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	885b      	ldrh	r3, [r3, #2]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d856      	bhi.n	8008d88 <USBD_GetDescriptor+0x14c>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <USBD_GetDescriptor+0xa4>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008cf9 	.word	0x08008cf9
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d29 	.word	0x08008d29
 8008cec:	08008d41 	.word	0x08008d41
 8008cf0:	08008d59 	.word	0x08008d59
 8008cf4:	08008d71 	.word	0x08008d71
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 010a 	add.w	r1, r7, #10
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
      break;
 8008d0e:	e040      	b.n	8008d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 010a 	add.w	r1, r7, #10
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
      break;
 8008d26:	e034      	b.n	8008d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7c12      	ldrb	r2, [r2, #16]
 8008d34:	f107 010a 	add.w	r1, r7, #10
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	60f8      	str	r0, [r7, #12]
      break;
 8008d3e:	e028      	b.n	8008d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 010a 	add.w	r1, r7, #10
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
      break;
 8008d56:	e01c      	b.n	8008d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 010a 	add.w	r1, r7, #10
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
      break;
 8008d6e:	e010      	b.n	8008d92 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7c12      	ldrb	r2, [r2, #16]
 8008d7c:	f107 010a 	add.w	r1, r7, #10
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	60f8      	str	r0, [r7, #12]
      break;
 8008d86:	e004      	b.n	8008d92 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f9f9 	bl	8009182 <USBD_CtlError>
      return;
 8008d90:	e04b      	b.n	8008e2a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008d92:	e02e      	b.n	8008df2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	7c1b      	ldrb	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d109      	bne.n	8008db0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da4:	f107 020a 	add.w	r2, r7, #10
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
      break;
 8008dae:	e020      	b.n	8008df2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f9e5 	bl	8009182 <USBD_CtlError>
      return;
 8008db8:	e037      	b.n	8008e2a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7c1b      	ldrb	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10d      	bne.n	8008dde <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	f107 020a 	add.w	r2, r7, #10
 8008dce:	4610      	mov	r0, r2
 8008dd0:	4798      	blx	r3
 8008dd2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	2207      	movs	r2, #7
 8008dda:	701a      	strb	r2, [r3, #0]
      break;
 8008ddc:	e009      	b.n	8008df2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9ce 	bl	8009182 <USBD_CtlError>
      return;
 8008de6:	e020      	b.n	8008e2a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f9c9 	bl	8009182 <USBD_CtlError>
    return;
 8008df0:	e01b      	b.n	8008e2a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008df2:	897b      	ldrh	r3, [r7, #10]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d011      	beq.n	8008e1c <USBD_GetDescriptor+0x1e0>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	88db      	ldrh	r3, [r3, #6]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00d      	beq.n	8008e1c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	88da      	ldrh	r2, [r3, #6]
 8008e04:	897b      	ldrh	r3, [r7, #10]
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bf28      	it	cs
 8008e0a:	4613      	movcs	r3, r2
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008e10:	897b      	ldrh	r3, [r7, #10]
 8008e12:	461a      	mov	r2, r3
 8008e14:	68f9      	ldr	r1, [r7, #12]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa1e 	bl	8009258 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	88db      	ldrh	r3, [r3, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa75 	bl	8009314 <USBD_CtlSendStatus>
  }
}
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	889b      	ldrh	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d130      	bne.n	8008ea4 <USBD_SetAddress+0x74>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d12c      	bne.n	8008ea4 <USBD_SetAddress+0x74>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e50:	d828      	bhi.n	8008ea4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	885b      	ldrh	r3, [r3, #2]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d104      	bne.n	8008e72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f989 	bl	8009182 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e70:	e01c      	b.n	8008eac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7bfa      	ldrb	r2, [r7, #15]
 8008e76:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f002 f896 	bl	800afb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fa45 	bl	8009314 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e98:	e008      	b.n	8008eac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	e003      	b.n	8008eac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f96b 	bl	8009182 <USBD_CtlError>
  }
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	4b41      	ldr	r3, [pc, #260]	; (8008fcc <USBD_SetConfig+0x118>)
 8008ec6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ec8:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <USBD_SetConfig+0x118>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d904      	bls.n	8008eda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f955 	bl	8009182 <USBD_CtlError>
 8008ed8:	e075      	b.n	8008fc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d002      	beq.n	8008eea <USBD_SetConfig+0x36>
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d023      	beq.n	8008f30 <USBD_SetConfig+0x7c>
 8008ee8:	e062      	b.n	8008fb0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008eea:	4b38      	ldr	r3, [pc, #224]	; (8008fcc <USBD_SetConfig+0x118>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01a      	beq.n	8008f28 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <USBD_SetConfig+0x118>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2203      	movs	r2, #3
 8008f00:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f04:	4b31      	ldr	r3, [pc, #196]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fa29 	bl	8008362 <USBD_SetClassConfig>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d104      	bne.n	8008f20 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f932 	bl	8009182 <USBD_CtlError>
          return;
 8008f1e:	e052      	b.n	8008fc6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f9f7 	bl	8009314 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008f26:	e04e      	b.n	8008fc6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f9f3 	bl	8009314 <USBD_CtlSendStatus>
      break;
 8008f2e:	e04a      	b.n	8008fc6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f30:	4b26      	ldr	r3, [pc, #152]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d112      	bne.n	8008f5e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008f40:	4b22      	ldr	r3, [pc, #136]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f4a:	4b20      	ldr	r3, [pc, #128]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff fa25 	bl	80083a0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f9dc 	bl	8009314 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008f5c:	e033      	b.n	8008fc6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008f5e:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d01d      	beq.n	8008fa8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fa13 	bl	80083a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <USBD_SetConfig+0x118>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff f9e9 	bl	8008362 <USBD_SetClassConfig>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d104      	bne.n	8008fa0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8f2 	bl	8009182 <USBD_CtlError>
          return;
 8008f9e:	e012      	b.n	8008fc6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f9b7 	bl	8009314 <USBD_CtlSendStatus>
      break;
 8008fa6:	e00e      	b.n	8008fc6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f9b3 	bl	8009314 <USBD_CtlSendStatus>
      break;
 8008fae:	e00a      	b.n	8008fc6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8e5 	bl	8009182 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008fb8:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <USBD_SetConfig+0x118>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff f9ee 	bl	80083a0 <USBD_ClrClassConfig>
      break;
 8008fc4:	bf00      	nop
    }
  }
}
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	2000036c 	.word	0x2000036c

08008fd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	88db      	ldrh	r3, [r3, #6]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d004      	beq.n	8008fec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8cc 	bl	8009182 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008fea:	e021      	b.n	8009030 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	db17      	blt.n	8009026 <USBD_GetConfig+0x56>
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	dd02      	ble.n	8009000 <USBD_GetConfig+0x30>
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d00b      	beq.n	8009016 <USBD_GetConfig+0x46>
 8008ffe:	e012      	b.n	8009026 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3308      	adds	r3, #8
 800900a:	2201      	movs	r2, #1
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f922 	bl	8009258 <USBD_CtlSendData>
      break;
 8009014:	e00c      	b.n	8009030 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	2201      	movs	r2, #1
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f91a 	bl	8009258 <USBD_CtlSendData>
      break;
 8009024:	e004      	b.n	8009030 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f8aa 	bl	8009182 <USBD_CtlError>
      break;
 800902e:	bf00      	nop
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009048:	3b01      	subs	r3, #1
 800904a:	2b02      	cmp	r3, #2
 800904c:	d81e      	bhi.n	800908c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	88db      	ldrh	r3, [r3, #6]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d004      	beq.n	8009060 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f892 	bl	8009182 <USBD_CtlError>
      break;
 800905e:	e01a      	b.n	8009096 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f043 0202 	orr.w	r2, r3, #2
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	330c      	adds	r3, #12
 8009080:	2202      	movs	r2, #2
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f8e7 	bl	8009258 <USBD_CtlSendData>
    break;
 800908a:	e004      	b.n	8009096 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f877 	bl	8009182 <USBD_CtlError>
    break;
 8009094:	bf00      	nop
  }
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	885b      	ldrh	r3, [r3, #2]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d106      	bne.n	80090be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f92b 	bl	8009314 <USBD_CtlSendStatus>
  }

}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090d6:	3b01      	subs	r3, #1
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d80b      	bhi.n	80090f4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d10c      	bne.n	80090fe <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 f911 	bl	8009314 <USBD_CtlSendStatus>
    }
    break;
 80090f2:	e004      	b.n	80090fe <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f843 	bl	8009182 <USBD_CtlError>
    break;
 80090fc:	e000      	b.n	8009100 <USBD_ClrFeature+0x3a>
    break;
 80090fe:	bf00      	nop
  }
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781a      	ldrb	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	785a      	ldrb	r2, [r3, #1]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	3302      	adds	r3, #2
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b29a      	uxth	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	3303      	adds	r3, #3
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	b29b      	uxth	r3, r3
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	b29b      	uxth	r3, r3
 8009136:	4413      	add	r3, r2
 8009138:	b29a      	uxth	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	3304      	adds	r3, #4
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	b29a      	uxth	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	3305      	adds	r3, #5
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	021b      	lsls	r3, r3, #8
 8009150:	b29b      	uxth	r3, r3
 8009152:	4413      	add	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	3306      	adds	r3, #6
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	b29a      	uxth	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	3307      	adds	r3, #7
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	b29b      	uxth	r3, r3
 800916e:	4413      	add	r3, r2
 8009170:	b29a      	uxth	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	80da      	strh	r2, [r3, #6]

}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 fea4 	bl	800aedc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009194:	2100      	movs	r1, #0
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 fea0 	bl	800aedc <USBD_LL_StallEP>
}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d032      	beq.n	8009220 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f000 f834 	bl	8009228 <USBD_GetLen>
 80091c0:	4603      	mov	r3, r0
 80091c2:	3301      	adds	r3, #1
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	75fa      	strb	r2, [r7, #23]
 80091d4:	461a      	mov	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	75fa      	strb	r2, [r7, #23]
 80091e6:	461a      	mov	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4413      	add	r3, r2
 80091ec:	2203      	movs	r2, #3
 80091ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091f0:	e012      	b.n	8009218 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	60fa      	str	r2, [r7, #12]
 80091f8:	7dfa      	ldrb	r2, [r7, #23]
 80091fa:	1c51      	adds	r1, r2, #1
 80091fc:	75f9      	strb	r1, [r7, #23]
 80091fe:	4611      	mov	r1, r2
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	440a      	add	r2, r1
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	75fa      	strb	r2, [r7, #23]
 800920e:	461a      	mov	r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	4413      	add	r3, r2
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e8      	bne.n	80091f2 <USBD_GetString+0x4e>
    }
  }
}
 8009220:	bf00      	nop
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009234:	e005      	b.n	8009242 <USBD_GetLen+0x1a>
    {
        len++;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	3301      	adds	r3, #1
 800923a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3301      	adds	r3, #1
 8009240:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1f5      	bne.n	8009236 <USBD_GetLen+0xe>
    }

    return len;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2202      	movs	r2, #2
 800926a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800926e:	88fa      	ldrh	r2, [r7, #6]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009274:	88fa      	ldrh	r2, [r7, #6]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800927a:	88fb      	ldrh	r3, [r7, #6]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	2100      	movs	r1, #0
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f001 feb4 	bl	800afee <USBD_LL_Transmit>

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	4613      	mov	r3, r2
 800929c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	2100      	movs	r1, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f001 fea2 	bl	800afee <USBD_LL_Transmit>

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2203      	movs	r2, #3
 80092c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	2100      	movs	r1, #0
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f001 fea7 	bl	800b034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	2100      	movs	r1, #0
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f001 fe95 	bl	800b034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2204      	movs	r2, #4
 8009320:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009324:	2300      	movs	r3, #0
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fe5f 	bl	800afee <USBD_LL_Transmit>

  return USBD_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2205      	movs	r2, #5
 8009346:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800934a:	2300      	movs	r3, #0
 800934c:	2200      	movs	r2, #0
 800934e:	2100      	movs	r1, #0
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 fe6f 	bl	800b034 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <DWT_Init>:
  DWT->LAR = 0xC5ACCE55
 */
//#define DWT_DELAY_NEWBIE

void DWT_Init(void)
{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009364:	4b09      	ldr	r3, [pc, #36]	; (800938c <DWT_Init+0x2c>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	4a08      	ldr	r2, [pc, #32]	; (800938c <DWT_Init+0x2c>)
 800936a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800936e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <DWT_Init+0x30>)
 8009372:	2200      	movs	r2, #0
 8009374:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8009376:	4b06      	ldr	r3, [pc, #24]	; (8009390 <DWT_Init+0x30>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a05      	ldr	r2, [pc, #20]	; (8009390 <DWT_Init+0x30>)
 800937c:	f043 0301 	orr.w	r3, r3, #1
 8009380:	6013      	str	r3, [r2, #0]
    //}
}
 8009382:	bf00      	nop
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	e000edf0 	.word	0xe000edf0
 8009390:	e0001000 	.word	0xe0001000

08009394 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 800939c:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <DWT_Delay+0x40>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 80093a2:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <DWT_Delay+0x44>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a0d      	ldr	r2, [pc, #52]	; (80093dc <DWT_Delay+0x48>)
 80093a8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ac:	0c9a      	lsrs	r2, r3, #18
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	fb02 f303 	mul.w	r3, r2, r3
 80093b4:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80093b6:	bf00      	nop
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <DWT_Delay+0x40>)
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d8f8      	bhi.n	80093b8 <DWT_Delay+0x24>
}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	e0001000 	.word	0xe0001000
 80093d8:	20000118 	.word	0x20000118
 80093dc:	431bde83 	.word	0x431bde83

080093e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	stdio_setup();
 80093ea:	f000 fe87 	bl	800a0fc <stdio_setup>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093ee:	f7f7 fd5b 	bl	8000ea8 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 80093f2:	f7ff ffb5 	bl	8009360 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093f6:	f000 f8cf 	bl	8009598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093fa:	f000 fbeb 	bl	8009bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80093fe:	f000 fbc9 	bl	8009b94 <MX_DMA_Init>
  MX_I2S3_Init();
 8009402:	f000 f9d9 	bl	80097b8 <MX_I2S3_Init>
  MX_USB_DEVICE_Init();
 8009406:	f001 faab 	bl	800a960 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800940a:	f000 fab1 	bl	8009970 <MX_TIM3_Init>
  MX_TIM4_Init();
 800940e:	f000 fafd 	bl	8009a0c <MX_TIM4_Init>
  MX_TIM2_Init();
 8009412:	f000 fa37 	bl	8009884 <MX_TIM2_Init>
  MX_ADC1_Init();
 8009416:	f000 f941 	bl	800969c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800941a:	f000 fb91 	bl	8009b40 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800941e:	f000 f99d 	bl	800975c <MX_I2C1_Init>
  MX_SPI1_Init();
 8009422:	f000 f9f9 	bl	8009818 <MX_SPI1_Init>
  MX_TIM14_Init();
 8009426:	f000 fb67 	bl	8009af8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800942a:	4852      	ldr	r0, [pc, #328]	; (8009574 <main+0x194>)
 800942c:	f7fc f871 	bl	8005512 <HAL_TIM_Base_Start>
  initalise_LSM9DS1();
 8009430:	f000 fcec 	bl	8009e0c <initalise_LSM9DS1>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, BUFF*NOM_ADC);
 8009434:	2202      	movs	r2, #2
 8009436:	4950      	ldr	r1, [pc, #320]	; (8009578 <main+0x198>)
 8009438:	4850      	ldr	r0, [pc, #320]	; (800957c <main+0x19c>)
 800943a:	f7f7 fe0d 	bl	8001058 <HAL_ADC_Start_DMA>
  FLAG1 = 0;
 800943e:	4b50      	ldr	r3, [pc, #320]	; (8009580 <main+0x1a0>)
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
  	start = HAL_GetTick();
 8009444:	f7f7 fd96 	bl	8000f74 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	4b4e      	ldr	r3, [pc, #312]	; (8009584 <main+0x1a4>)
 800944c:	601a      	str	r2, [r3, #0]
  	count = 0;
 800944e:	4b4e      	ldr	r3, [pc, #312]	; (8009588 <main+0x1a8>)
 8009450:	2200      	movs	r2, #0
 8009452:	601a      	str	r2, [r3, #0]
	double Vset;
  	Vset = VEL;
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	4c4c      	ldr	r4, [pc, #304]	; (800958c <main+0x1ac>)
 800945a:	f607 72f8 	addw	r2, r7, #4088	; 0xff8
 800945e:	e9c2 3400 	strd	r3, r4, [r2]
  	uint32_t pwm = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
  	uint32_t adaptive = Loop2;		//Counter to time distance loop
 8009468:	2350      	movs	r3, #80	; 0x50
 800946a:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
  	double dist = ultrasonic();
 800946e:	f000 fdbb 	bl	8009fe8 <ultrasonic>
 8009472:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8009476:	ed83 0b00 	vstr	d0, [r3]
  	uint16_t timcount = LoopFreq;	//Counter to time inner/outer loops
 800947a:	230a      	movs	r3, #10
 800947c:	f8a7 3fe6 	strh.w	r3, [r7, #4070]	; 0xfe6
  	steer_straight();
 8009480:	f000 fe5a 	bl	800a138 <steer_straight>
  	double u3 = VEL;		//Input for Adaptive Cruise Control (cm), should maintain 1s gap at Cruise Control speed
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	4c40      	ldr	r4, [pc, #256]	; (800958c <main+0x1ac>)
 800948a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800948e:	e9c2 3400 	strd	r3, r4, [r2]
  	double buf1[500];
  	int loop=0;
 8009492:	2300      	movs	r3, #0
 8009494:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009498:	f102 0204 	add.w	r2, r2, #4
 800949c:	6013      	str	r3, [r2, #0]
	char c;
	uint8_t inp[30];
	double direc;
	double cardist = 0;
 800949e:	f04f 0300 	mov.w	r3, #0
 80094a2:	f04f 0400 	mov.w	r4, #0
 80094a6:	f507 627d 	add.w	r2, r7, #4048	; 0xfd0
 80094aa:	e9c2 3400 	strd	r3, r4, [r2]
	double heading;
	double turn;
	double dist2;
	int k = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	f8c7 3fcc 	str.w	r3, [r7, #4044]	; 0xfcc
	int d = 1;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f8c7 3fc8 	str.w	r3, [r7, #4040]	; 0xfc8
	double accel;
	double aref;

	//steer_right();
	//steer_straight();
	HAL_Delay(100);
 80094ba:	2064      	movs	r0, #100	; 0x64
 80094bc:	f7f7 fd66 	bl	8000f8c <HAL_Delay>
	printf("\nSTART\n");
 80094c0:	4833      	ldr	r0, [pc, #204]	; (8009590 <main+0x1b0>)
 80094c2:	f002 fec5 	bl	800c250 <puts>

	//pwm_setvalue(1, 25);
	steer_straight();
 80094c6:	f000 fe37 	bl	800a138 <steer_straight>
	while (1)
	{
	  c = getchar();
 80094ca:	f002 f8fb 	bl	800b6c4 <getchar>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 3fc7 	strb.w	r3, [r7, #4039]	; 0xfc7

		inp[loop] = c;
 80094d4:	f107 0308 	add.w	r3, r7, #8
 80094d8:	3b08      	subs	r3, #8
 80094da:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80094de:	f102 0204 	add.w	r2, r2, #4
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	4413      	add	r3, r2
 80094e6:	f897 2fc7 	ldrb.w	r2, [r7, #4039]	; 0xfc7
 80094ea:	701a      	strb	r2, [r3, #0]

		if(c == '\0')
 80094ec:	f897 3fc7 	ldrb.w	r3, [r7, #4039]	; 0xfc7
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d106      	bne.n	8009502 <main+0x122>
		{
			loop = -1;
 80094f4:	f04f 33ff 	mov.w	r3, #4294967295
 80094f8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80094fc:	f102 0204 	add.w	r2, r2, #4
 8009500:	6013      	str	r3, [r2, #0]
		}


		if(c == '\r')
 8009502:	f897 3fc7 	ldrb.w	r3, [r7, #4039]	; 0xfc7
 8009506:	2b0d      	cmp	r3, #13
 8009508:	d1df      	bne.n	80094ca <main+0xea>
		{
			inp[loop] = '\0';
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	3b08      	subs	r3, #8
 8009510:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009514:	f102 0204 	add.w	r2, r2, #4
 8009518:	6812      	ldr	r2, [r2, #0]
 800951a:	4413      	add	r3, r2
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
			printf("%d: inp = %s\r\n", loop, inp);
 8009520:	f107 0308 	add.w	r3, r7, #8
 8009524:	3b08      	subs	r3, #8
 8009526:	461a      	mov	r2, r3
 8009528:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800952c:	f103 0304 	add.w	r3, r3, #4
 8009530:	6819      	ldr	r1, [r3, #0]
 8009532:	4818      	ldr	r0, [pc, #96]	; (8009594 <main+0x1b4>)
 8009534:	f002 fe18 	bl	800c168 <iprintf>
			loop = -1;
 8009538:	f04f 33ff 	mov.w	r3, #4294967295
 800953c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009540:	f102 0204 	add.w	r2, r2, #4
 8009544:	6013      	str	r3, [r2, #0]

			break;
 8009546:	bf00      	nop
		}
	}

		loop++;
 8009548:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800954c:	f103 0304 	add.w	r3, r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009558:	f102 0204 	add.w	r2, r2, #4
 800955c:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */

		/*Hill Hold*/

	while(0)
 800955e:	bf00      	nop
		}
	}

	/*Reverse Parallel Park*/

	while(0)
 8009560:	bf00      	nop
		}
	}
}

	/*Curise control & adaptive cruise control*/
	while(0)
 8009562:	bf00      	nop
			}
		}
	}

	/*Line following*/
	while(0)
 8009564:	bf00      	nop
 8009566:	2300      	movs	r3, #0
			  }
	}

  /* USER CODE END 3 */

}
 8009568:	4618      	mov	r0, r3
 800956a:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	bd90      	pop	{r4, r7, pc}
 8009574:	20000490 	.word	0x20000490
 8009578:	200005b4 	.word	0x200005b4
 800957c:	200004e4 	.word	0x200004e4
 8009580:	20000534 	.word	0x20000534
 8009584:	200006c8 	.word	0x200006c8
 8009588:	200005bc 	.word	0x200005bc
 800958c:	40590000 	.word	0x40590000
 8009590:	0800dec0 	.word	0x0800dec0
 8009594:	0800dec8 	.word	0x0800dec8

08009598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b098      	sub	sp, #96	; 0x60
 800959c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800959e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095a2:	2230      	movs	r2, #48	; 0x30
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f002 f8d2 	bl	800b750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095ac:	f107 031c 	add.w	r3, r7, #28
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	609a      	str	r2, [r3, #8]
 80095b8:	60da      	str	r2, [r3, #12]
 80095ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	609a      	str	r2, [r3, #8]
 80095c8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80095ca:	2300      	movs	r3, #0
 80095cc:	60bb      	str	r3, [r7, #8]
 80095ce:	4b31      	ldr	r3, [pc, #196]	; (8009694 <SystemClock_Config+0xfc>)
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	4a30      	ldr	r2, [pc, #192]	; (8009694 <SystemClock_Config+0xfc>)
 80095d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d8:	6413      	str	r3, [r2, #64]	; 0x40
 80095da:	4b2e      	ldr	r3, [pc, #184]	; (8009694 <SystemClock_Config+0xfc>)
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e2:	60bb      	str	r3, [r7, #8]
 80095e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80095e6:	2300      	movs	r3, #0
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <SystemClock_Config+0x100>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a2a      	ldr	r2, [pc, #168]	; (8009698 <SystemClock_Config+0x100>)
 80095f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	4b28      	ldr	r3, [pc, #160]	; (8009698 <SystemClock_Config+0x100>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009602:	2301      	movs	r3, #1
 8009604:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800960c:	2302      	movs	r3, #2
 800960e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009616:	2308      	movs	r3, #8
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800961a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800961e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009620:	2302      	movs	r3, #2
 8009622:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009624:	2307      	movs	r3, #7
 8009626:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800962c:	4618      	mov	r0, r3
 800962e:	f7fb f973 	bl	8004918 <HAL_RCC_OscConfig>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8009638:	f000 fdaa 	bl	800a190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800963c:	230f      	movs	r3, #15
 800963e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009640:	2302      	movs	r3, #2
 8009642:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009644:	2300      	movs	r3, #0
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800964e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009652:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009654:	f107 031c 	add.w	r3, r7, #28
 8009658:	2105      	movs	r1, #5
 800965a:	4618      	mov	r0, r3
 800965c:	f7fb fb9e 	bl	8004d9c <HAL_RCC_ClockConfig>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8009666:	f000 fd93 	bl	800a190 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800966a:	2301      	movs	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800966e:	23c0      	movs	r3, #192	; 0xc0
 8009670:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009672:	2302      	movs	r3, #2
 8009674:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009676:	f107 030c 	add.w	r3, r7, #12
 800967a:	4618      	mov	r0, r3
 800967c:	f7fb fd7c 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009686:	f000 fd83 	bl	800a190 <Error_Handler>
  }
}
 800968a:	bf00      	nop
 800968c:	3760      	adds	r7, #96	; 0x60
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	40023800 	.word	0x40023800
 8009698:	40007000 	.word	0x40007000

0800969c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80096a2:	463b      	mov	r3, r7
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	605a      	str	r2, [r3, #4]
 80096aa:	609a      	str	r2, [r3, #8]
 80096ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80096ae:	4b29      	ldr	r3, [pc, #164]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096b0:	4a29      	ldr	r2, [pc, #164]	; (8009758 <MX_ADC1_Init+0xbc>)
 80096b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80096b4:	4b27      	ldr	r3, [pc, #156]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80096ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80096bc:	4b25      	ldr	r3, [pc, #148]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096be:	2200      	movs	r2, #0
 80096c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80096c2:	4b24      	ldr	r3, [pc, #144]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80096c8:	4b22      	ldr	r3, [pc, #136]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80096ce:	4b21      	ldr	r3, [pc, #132]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80096d6:	4b1f      	ldr	r3, [pc, #124]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80096de:	4b1d      	ldr	r3, [pc, #116]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80096e6:	4b1b      	ldr	r3, [pc, #108]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80096ec:	4b19      	ldr	r3, [pc, #100]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096ee:	2202      	movs	r2, #2
 80096f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80096f2:	4b18      	ldr	r3, [pc, #96]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80096fa:	4b16      	ldr	r3, [pc, #88]	; (8009754 <MX_ADC1_Init+0xb8>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009700:	4814      	ldr	r0, [pc, #80]	; (8009754 <MX_ADC1_Init+0xb8>)
 8009702:	f7f7 fc65 	bl	8000fd0 <HAL_ADC_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800970c:	f000 fd40 	bl	800a190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009710:	2301      	movs	r3, #1
 8009712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8009714:	2301      	movs	r3, #1
 8009716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8009718:	2305      	movs	r3, #5
 800971a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800971c:	463b      	mov	r3, r7
 800971e:	4619      	mov	r1, r3
 8009720:	480c      	ldr	r0, [pc, #48]	; (8009754 <MX_ADC1_Init+0xb8>)
 8009722:	f7f7 fd9f 	bl	8001264 <HAL_ADC_ConfigChannel>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800972c:	f000 fd30 	bl	800a190 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009730:	2302      	movs	r3, #2
 8009732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8009734:	2302      	movs	r3, #2
 8009736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009738:	463b      	mov	r3, r7
 800973a:	4619      	mov	r1, r3
 800973c:	4805      	ldr	r0, [pc, #20]	; (8009754 <MX_ADC1_Init+0xb8>)
 800973e:	f7f7 fd91 	bl	8001264 <HAL_ADC_ConfigChannel>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8009748:	f000 fd22 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	200004e4 	.word	0x200004e4
 8009758:	40012000 	.word	0x40012000

0800975c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009760:	4b12      	ldr	r3, [pc, #72]	; (80097ac <MX_I2C1_Init+0x50>)
 8009762:	4a13      	ldr	r2, [pc, #76]	; (80097b0 <MX_I2C1_Init+0x54>)
 8009764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009766:	4b11      	ldr	r3, [pc, #68]	; (80097ac <MX_I2C1_Init+0x50>)
 8009768:	4a12      	ldr	r2, [pc, #72]	; (80097b4 <MX_I2C1_Init+0x58>)
 800976a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800976c:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <MX_I2C1_Init+0x50>)
 800976e:	2200      	movs	r2, #0
 8009770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009772:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <MX_I2C1_Init+0x50>)
 8009774:	2200      	movs	r2, #0
 8009776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009778:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <MX_I2C1_Init+0x50>)
 800977a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800977e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <MX_I2C1_Init+0x50>)
 8009782:	2200      	movs	r2, #0
 8009784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009786:	4b09      	ldr	r3, [pc, #36]	; (80097ac <MX_I2C1_Init+0x50>)
 8009788:	2200      	movs	r2, #0
 800978a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <MX_I2C1_Init+0x50>)
 800978e:	2200      	movs	r2, #0
 8009790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <MX_I2C1_Init+0x50>)
 8009794:	2200      	movs	r2, #0
 8009796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009798:	4804      	ldr	r0, [pc, #16]	; (80097ac <MX_I2C1_Init+0x50>)
 800979a:	f7f8 fe6f 	bl	800247c <HAL_I2C_Init>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80097a4:	f000 fcf4 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80097a8:	bf00      	nop
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	2000042c 	.word	0x2000042c
 80097b0:	40005400 	.word	0x40005400
 80097b4:	000186a0 	.word	0x000186a0

080097b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80097bc:	4b13      	ldr	r3, [pc, #76]	; (800980c <MX_I2S3_Init+0x54>)
 80097be:	4a14      	ldr	r2, [pc, #80]	; (8009810 <MX_I2S3_Init+0x58>)
 80097c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <MX_I2S3_Init+0x54>)
 80097c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80097ca:	4b10      	ldr	r3, [pc, #64]	; (800980c <MX_I2S3_Init+0x54>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80097d0:	4b0e      	ldr	r3, [pc, #56]	; (800980c <MX_I2S3_Init+0x54>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <MX_I2S3_Init+0x54>)
 80097d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80097de:	4b0b      	ldr	r3, [pc, #44]	; (800980c <MX_I2S3_Init+0x54>)
 80097e0:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <MX_I2S3_Init+0x5c>)
 80097e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <MX_I2S3_Init+0x54>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80097ea:	4b08      	ldr	r3, [pc, #32]	; (800980c <MX_I2S3_Init+0x54>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <MX_I2S3_Init+0x54>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80097f6:	4805      	ldr	r0, [pc, #20]	; (800980c <MX_I2S3_Init+0x54>)
 80097f8:	f7f9 fa64 	bl	8002cc4 <HAL_I2S_Init>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8009802:	f000 fcc5 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8009806:	bf00      	nop
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	200006e4 	.word	0x200006e4
 8009810:	40003c00 	.word	0x40003c00
 8009814:	00017700 	.word	0x00017700

08009818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800981c:	4b17      	ldr	r3, [pc, #92]	; (800987c <MX_SPI1_Init+0x64>)
 800981e:	4a18      	ldr	r2, [pc, #96]	; (8009880 <MX_SPI1_Init+0x68>)
 8009820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009822:	4b16      	ldr	r3, [pc, #88]	; (800987c <MX_SPI1_Init+0x64>)
 8009824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <MX_SPI1_Init+0x64>)
 800982c:	2200      	movs	r2, #0
 800982e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009830:	4b12      	ldr	r3, [pc, #72]	; (800987c <MX_SPI1_Init+0x64>)
 8009832:	2200      	movs	r2, #0
 8009834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009836:	4b11      	ldr	r3, [pc, #68]	; (800987c <MX_SPI1_Init+0x64>)
 8009838:	2200      	movs	r2, #0
 800983a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <MX_SPI1_Init+0x64>)
 800983e:	2200      	movs	r2, #0
 8009840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009842:	4b0e      	ldr	r3, [pc, #56]	; (800987c <MX_SPI1_Init+0x64>)
 8009844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <MX_SPI1_Init+0x64>)
 800984c:	2218      	movs	r2, #24
 800984e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <MX_SPI1_Init+0x64>)
 8009852:	2200      	movs	r2, #0
 8009854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009856:	4b09      	ldr	r3, [pc, #36]	; (800987c <MX_SPI1_Init+0x64>)
 8009858:	2200      	movs	r2, #0
 800985a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800985c:	4b07      	ldr	r3, [pc, #28]	; (800987c <MX_SPI1_Init+0x64>)
 800985e:	2200      	movs	r2, #0
 8009860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <MX_SPI1_Init+0x64>)
 8009864:	220a      	movs	r2, #10
 8009866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009868:	4804      	ldr	r0, [pc, #16]	; (800987c <MX_SPI1_Init+0x64>)
 800986a:	f7fb fdc3 	bl	80053f4 <HAL_SPI_Init>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009874:	f000 fc8c 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009878:	bf00      	nop
 800987a:	bd80      	pop	{r7, pc}
 800987c:	200005dc 	.word	0x200005dc
 8009880:	40013000 	.word	0x40013000

08009884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08e      	sub	sp, #56	; 0x38
 8009888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800988a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	605a      	str	r2, [r3, #4]
 8009894:	609a      	str	r2, [r3, #8]
 8009896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009898:	f107 0320 	add.w	r3, r7, #32
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098a2:	1d3b      	adds	r3, r7, #4
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	605a      	str	r2, [r3, #4]
 80098aa:	609a      	str	r2, [r3, #8]
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	611a      	str	r2, [r3, #16]
 80098b0:	615a      	str	r2, [r3, #20]
 80098b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80098b4:	4b2d      	ldr	r3, [pc, #180]	; (800996c <MX_TIM2_Init+0xe8>)
 80098b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80098ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 540;
 80098bc:	4b2b      	ldr	r3, [pc, #172]	; (800996c <MX_TIM2_Init+0xe8>)
 80098be:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80098c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098c4:	4b29      	ldr	r3, [pc, #164]	; (800996c <MX_TIM2_Init+0xe8>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80098ca:	4b28      	ldr	r3, [pc, #160]	; (800996c <MX_TIM2_Init+0xe8>)
 80098cc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80098d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098d2:	4b26      	ldr	r3, [pc, #152]	; (800996c <MX_TIM2_Init+0xe8>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098d8:	4b24      	ldr	r3, [pc, #144]	; (800996c <MX_TIM2_Init+0xe8>)
 80098da:	2200      	movs	r2, #0
 80098dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80098de:	4823      	ldr	r0, [pc, #140]	; (800996c <MX_TIM2_Init+0xe8>)
 80098e0:	f7fb fdec 	bl	80054bc <HAL_TIM_Base_Init>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80098ea:	f000 fc51 	bl	800a190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80098f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098f8:	4619      	mov	r1, r3
 80098fa:	481c      	ldr	r0, [pc, #112]	; (800996c <MX_TIM2_Init+0xe8>)
 80098fc:	f7fb ff66 	bl	80057cc <HAL_TIM_ConfigClockSource>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8009906:	f000 fc43 	bl	800a190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800990a:	4818      	ldr	r0, [pc, #96]	; (800996c <MX_TIM2_Init+0xe8>)
 800990c:	f7fb fe25 	bl	800555a <HAL_TIM_PWM_Init>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8009916:	f000 fc3b 	bl	800a190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800991a:	2300      	movs	r3, #0
 800991c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800991e:	2300      	movs	r3, #0
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009922:	f107 0320 	add.w	r3, r7, #32
 8009926:	4619      	mov	r1, r3
 8009928:	4810      	ldr	r0, [pc, #64]	; (800996c <MX_TIM2_Init+0xe8>)
 800992a:	f7fc fb16 	bl	8005f5a <HAL_TIMEx_MasterConfigSynchronization>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8009934:	f000 fc2c 	bl	800a190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009938:	2360      	movs	r3, #96	; 0x60
 800993a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 234;
 800993c:	23ea      	movs	r3, #234	; 0xea
 800993e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009940:	2300      	movs	r3, #0
 8009942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009944:	2300      	movs	r3, #0
 8009946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009948:	1d3b      	adds	r3, r7, #4
 800994a:	2200      	movs	r2, #0
 800994c:	4619      	mov	r1, r3
 800994e:	4807      	ldr	r0, [pc, #28]	; (800996c <MX_TIM2_Init+0xe8>)
 8009950:	f7fb fe76 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800995a:	f000 fc19 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800995e:	4803      	ldr	r0, [pc, #12]	; (800996c <MX_TIM2_Init+0xe8>)
 8009960:	f000 fe18 	bl	800a594 <HAL_TIM_MspPostInit>

}
 8009964:	bf00      	nop
 8009966:	3738      	adds	r7, #56	; 0x38
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20000634 	.word	0x20000634

08009970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	605a      	str	r2, [r3, #4]
 8009980:	609a      	str	r2, [r3, #8]
 8009982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009984:	463b      	mov	r3, r7
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800998c:	4b1d      	ldr	r3, [pc, #116]	; (8009a04 <MX_TIM3_Init+0x94>)
 800998e:	4a1e      	ldr	r2, [pc, #120]	; (8009a08 <MX_TIM3_Init+0x98>)
 8009990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 8009992:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <MX_TIM3_Init+0x94>)
 8009994:	f44f 7252 	mov.w	r2, #840	; 0x348
 8009998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800999a:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <MX_TIM3_Init+0x94>)
 800999c:	2200      	movs	r2, #0
 800999e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80099a0:	4b18      	ldr	r3, [pc, #96]	; (8009a04 <MX_TIM3_Init+0x94>)
 80099a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <MX_TIM3_Init+0x94>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099ae:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <MX_TIM3_Init+0x94>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80099b4:	4813      	ldr	r0, [pc, #76]	; (8009a04 <MX_TIM3_Init+0x94>)
 80099b6:	f7fb fd81 	bl	80054bc <HAL_TIM_Base_Init>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80099c0:	f000 fbe6 	bl	800a190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80099ca:	f107 0308 	add.w	r3, r7, #8
 80099ce:	4619      	mov	r1, r3
 80099d0:	480c      	ldr	r0, [pc, #48]	; (8009a04 <MX_TIM3_Init+0x94>)
 80099d2:	f7fb fefb 	bl	80057cc <HAL_TIM_ConfigClockSource>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80099dc:	f000 fbd8 	bl	800a190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80099e0:	2320      	movs	r3, #32
 80099e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80099e8:	463b      	mov	r3, r7
 80099ea:	4619      	mov	r1, r3
 80099ec:	4805      	ldr	r0, [pc, #20]	; (8009a04 <MX_TIM3_Init+0x94>)
 80099ee:	f7fc fab4 	bl	8005f5a <HAL_TIMEx_MasterConfigSynchronization>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80099f8:	f000 fbca 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80099fc:	bf00      	nop
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000490 	.word	0x20000490
 8009a08:	40000400 	.word	0x40000400

08009a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08e      	sub	sp, #56	; 0x38
 8009a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a16:	2200      	movs	r2, #0
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	605a      	str	r2, [r3, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
 8009a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a20:	f107 0320 	add.w	r3, r7, #32
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a2a:	1d3b      	adds	r3, r7, #4
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	609a      	str	r2, [r3, #8]
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	611a      	str	r2, [r3, #16]
 8009a38:	615a      	str	r2, [r3, #20]
 8009a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009a3c:	4b2c      	ldr	r3, [pc, #176]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a3e:	4a2d      	ldr	r2, [pc, #180]	; (8009af4 <MX_TIM4_Init+0xe8>)
 8009a40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 8009a42:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a44:	22a7      	movs	r2, #167	; 0xa7
 8009a46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a48:	4b29      	ldr	r3, [pc, #164]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8009a4e:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a50:	2263      	movs	r2, #99	; 0x63
 8009a52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a54:	4b26      	ldr	r3, [pc, #152]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a5a:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009a60:	4823      	ldr	r0, [pc, #140]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a62:	f7fb fd2b 	bl	80054bc <HAL_TIM_Base_Init>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8009a6c:	f000 fb90 	bl	800a190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	481c      	ldr	r0, [pc, #112]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a7e:	f7fb fea5 	bl	80057cc <HAL_TIM_ConfigClockSource>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8009a88:	f000 fb82 	bl	800a190 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009a8c:	4818      	ldr	r0, [pc, #96]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009a8e:	f7fb fd64 	bl	800555a <HAL_TIM_PWM_Init>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8009a98:	f000 fb7a 	bl	800a190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009aa4:	f107 0320 	add.w	r3, r7, #32
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4811      	ldr	r0, [pc, #68]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009aac:	f7fc fa55 	bl	8005f5a <HAL_TIMEx_MasterConfigSynchronization>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8009ab6:	f000 fb6b 	bl	800a190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009aba:	2360      	movs	r3, #96	; 0x60
 8009abc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009aca:	1d3b      	adds	r3, r7, #4
 8009acc:	2200      	movs	r2, #0
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4807      	ldr	r0, [pc, #28]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009ad2:	f7fb fdb5 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8009adc:	f000 fb58 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009ae0:	4803      	ldr	r0, [pc, #12]	; (8009af0 <MX_TIM4_Init+0xe4>)
 8009ae2:	f000 fd57 	bl	800a594 <HAL_TIM_MspPostInit>

}
 8009ae6:	bf00      	nop
 8009ae8:	3738      	adds	r7, #56	; 0x38
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200003a8 	.word	0x200003a8
 8009af4:	40000800 	.word	0x40000800

08009af8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8009afc:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009afe:	4a0f      	ldr	r2, [pc, #60]	; (8009b3c <MX_TIM14_Init+0x44>)
 8009b00:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84;
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009b04:	2254      	movs	r2, #84	; 0x54
 8009b06:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b08:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b14:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b16:	4b08      	ldr	r3, [pc, #32]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009b1e:	2280      	movs	r2, #128	; 0x80
 8009b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009b22:	4805      	ldr	r0, [pc, #20]	; (8009b38 <MX_TIM14_Init+0x40>)
 8009b24:	f7fb fcca 	bl	80054bc <HAL_TIM_Base_Init>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8009b2e:	f000 fb2f 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8009b32:	bf00      	nop
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000688 	.word	0x20000688
 8009b3c:	40002000 	.word	0x40002000

08009b40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009b44:	4b11      	ldr	r3, [pc, #68]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b46:	4a12      	ldr	r2, [pc, #72]	; (8009b90 <MX_USART3_UART_Init+0x50>)
 8009b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009b4a:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009b52:	4b0e      	ldr	r3, [pc, #56]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009b64:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b66:	220c      	movs	r2, #12
 8009b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b6a:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009b76:	4805      	ldr	r0, [pc, #20]	; (8009b8c <MX_USART3_UART_Init+0x4c>)
 8009b78:	f7fc fa34 	bl	8005fe4 <HAL_UART_Init>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009b82:	f000 fb05 	bl	800a190 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009b86:	bf00      	nop
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200003e8 	.word	0x200003e8
 8009b90:	40004800 	.word	0x40004800

08009b94 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	607b      	str	r3, [r7, #4]
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <MX_DMA_Init+0x3c>)
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba2:	4a0b      	ldr	r2, [pc, #44]	; (8009bd0 <MX_DMA_Init+0x3c>)
 8009ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <MX_DMA_Init+0x3c>)
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bb2:	607b      	str	r3, [r7, #4]
 8009bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	2038      	movs	r0, #56	; 0x38
 8009bbc:	f7f7 fecd 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009bc0:	2038      	movs	r0, #56	; 0x38
 8009bc2:	f7f7 fee6 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8009bc6:	bf00      	nop
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	40023800 	.word	0x40023800

08009bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08c      	sub	sp, #48	; 0x30
 8009bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bda:	f107 031c 	add.w	r3, r7, #28
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	609a      	str	r2, [r3, #8]
 8009be6:	60da      	str	r2, [r3, #12]
 8009be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009bea:	2300      	movs	r3, #0
 8009bec:	61bb      	str	r3, [r7, #24]
 8009bee:	4b7f      	ldr	r3, [pc, #508]	; (8009dec <MX_GPIO_Init+0x218>)
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	4a7e      	ldr	r2, [pc, #504]	; (8009dec <MX_GPIO_Init+0x218>)
 8009bf4:	f043 0310 	orr.w	r3, r3, #16
 8009bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8009bfa:	4b7c      	ldr	r3, [pc, #496]	; (8009dec <MX_GPIO_Init+0x218>)
 8009bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfe:	f003 0310 	and.w	r3, r3, #16
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	4b78      	ldr	r3, [pc, #480]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0e:	4a77      	ldr	r2, [pc, #476]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c10:	f043 0304 	orr.w	r3, r3, #4
 8009c14:	6313      	str	r3, [r2, #48]	; 0x30
 8009c16:	4b75      	ldr	r3, [pc, #468]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	f003 0304 	and.w	r3, r3, #4
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009c22:	2300      	movs	r3, #0
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	4b71      	ldr	r3, [pc, #452]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2a:	4a70      	ldr	r2, [pc, #448]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c30:	6313      	str	r3, [r2, #48]	; 0x30
 8009c32:	4b6e      	ldr	r3, [pc, #440]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3a:	613b      	str	r3, [r7, #16]
 8009c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	4b6a      	ldr	r3, [pc, #424]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c46:	4a69      	ldr	r2, [pc, #420]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c48:	f043 0301 	orr.w	r3, r3, #1
 8009c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c4e:	4b67      	ldr	r3, [pc, #412]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]
 8009c5e:	4b63      	ldr	r3, [pc, #396]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	4a62      	ldr	r2, [pc, #392]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	6313      	str	r3, [r2, #48]	; 0x30
 8009c6a:	4b60      	ldr	r3, [pc, #384]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	60bb      	str	r3, [r7, #8]
 8009c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009c76:	2300      	movs	r3, #0
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	4b5c      	ldr	r3, [pc, #368]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7e:	4a5b      	ldr	r2, [pc, #364]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c80:	f043 0308 	orr.w	r3, r3, #8
 8009c84:	6313      	str	r3, [r2, #48]	; 0x30
 8009c86:	4b59      	ldr	r3, [pc, #356]	; (8009dec <MX_GPIO_Init+0x218>)
 8009c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8a:	f003 0308 	and.w	r3, r3, #8
 8009c8e:	607b      	str	r3, [r7, #4]
 8009c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8009c92:	2200      	movs	r2, #0
 8009c94:	2108      	movs	r1, #8
 8009c96:	4856      	ldr	r0, [pc, #344]	; (8009df0 <MX_GPIO_Init+0x21c>)
 8009c98:	f7f8 fbbe 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4854      	ldr	r0, [pc, #336]	; (8009df4 <MX_GPIO_Init+0x220>)
 8009ca2:	f7f8 fbb9 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, INA_Pin|INB_Pin|TRIG2_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f246 0114 	movw	r1, #24596	; 0x6014
 8009cac:	4852      	ldr	r0, [pc, #328]	; (8009df8 <MX_GPIO_Init+0x224>)
 8009cae:	f7f8 fbb3 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_RESET);
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009cb8:	484e      	ldr	r0, [pc, #312]	; (8009df4 <MX_GPIO_Init+0x220>)
 8009cba:	f7f8 fbad 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8009cce:	f107 031c 	add.w	r3, r7, #28
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	4846      	ldr	r0, [pc, #280]	; (8009df0 <MX_GPIO_Init+0x21c>)
 8009cd6:	f7f8 f9ed 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin TRIGL_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|TRIGL_Pin;
 8009cda:	f240 2301 	movw	r3, #513	; 0x201
 8009cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009cec:	f107 031c 	add.w	r3, r7, #28
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4840      	ldr	r0, [pc, #256]	; (8009df4 <MX_GPIO_Init+0x220>)
 8009cf4:	f7f8 f9de 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d04:	2300      	movs	r3, #0
 8009d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009d08:	2305      	movs	r3, #5
 8009d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8009d0c:	f107 031c 	add.w	r3, r7, #28
 8009d10:	4619      	mov	r1, r3
 8009d12:	4838      	ldr	r0, [pc, #224]	; (8009df4 <MX_GPIO_Init+0x220>)
 8009d14:	f7f8 f9ce 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009d1c:	4b37      	ldr	r3, [pc, #220]	; (8009dfc <MX_GPIO_Init+0x228>)
 8009d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009d24:	f107 031c 	add.w	r3, r7, #28
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4835      	ldr	r0, [pc, #212]	; (8009e00 <MX_GPIO_Init+0x22c>)
 8009d2c:	f7f8 f9c2 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8009d30:	2304      	movs	r3, #4
 8009d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d34:	2300      	movs	r3, #0
 8009d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8009d3c:	f107 031c 	add.w	r3, r7, #28
 8009d40:	4619      	mov	r1, r3
 8009d42:	4830      	ldr	r0, [pc, #192]	; (8009e04 <MX_GPIO_Init+0x230>)
 8009d44:	f7f8 f9b6 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8009d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d52:	2300      	movs	r3, #0
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d56:	2300      	movs	r3, #0
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009d5a:	2305      	movs	r3, #5
 8009d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8009d5e:	f107 031c 	add.w	r3, r7, #28
 8009d62:	4619      	mov	r1, r3
 8009d64:	4827      	ldr	r0, [pc, #156]	; (8009e04 <MX_GPIO_Init+0x230>)
 8009d66:	f7f8 f9a5 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA_Pin INB_Pin TRIG2_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = INA_Pin|INB_Pin|TRIG2_Pin|Audio_RST_Pin;
 8009d6a:	f246 0314 	movw	r3, #24596	; 0x6014
 8009d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009d70:	2301      	movs	r3, #1
 8009d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009d7c:	f107 031c 	add.w	r3, r7, #28
 8009d80:	4619      	mov	r1, r3
 8009d82:	481d      	ldr	r0, [pc, #116]	; (8009df8 <MX_GPIO_Init+0x224>)
 8009d84:	f7f8 f996 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_left_Pin ECHO2_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = A0_left_Pin|ECHO2_Pin|OTG_FS_OverCurrent_Pin;
 8009d88:	f248 0322 	movw	r3, #32802	; 0x8022
 8009d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009d96:	f107 031c 	add.w	r3, r7, #28
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4816      	ldr	r0, [pc, #88]	; (8009df8 <MX_GPIO_Init+0x224>)
 8009d9e:	f7f8 f989 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_right_Pin ECHOL_Pin */
  GPIO_InitStruct.Pin = A0_right_Pin|ECHOL_Pin;
 8009da2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009da8:	2300      	movs	r3, #0
 8009daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dac:	2300      	movs	r3, #0
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009db0:	f107 031c 	add.w	r3, r7, #28
 8009db4:	4619      	mov	r1, r3
 8009db6:	480f      	ldr	r0, [pc, #60]	; (8009df4 <MX_GPIO_Init+0x220>)
 8009db8:	f7f8 f97c 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009dc0:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <MX_GPIO_Init+0x234>)
 8009dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8009dc8:	f107 031c 	add.w	r3, r7, #28
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4808      	ldr	r0, [pc, #32]	; (8009df0 <MX_GPIO_Init+0x21c>)
 8009dd0:	f7f8 f970 	bl	80020b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	2006      	movs	r0, #6
 8009dda:	f7f7 fdbe 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009dde:	2006      	movs	r0, #6
 8009de0:	f7f7 fdd7 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8009de4:	bf00      	nop
 8009de6:	3730      	adds	r7, #48	; 0x30
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	40023800 	.word	0x40023800
 8009df0:	40021000 	.word	0x40021000
 8009df4:	40020800 	.word	0x40020800
 8009df8:	40020c00 	.word	0x40020c00
 8009dfc:	10110000 	.word	0x10110000
 8009e00:	40020000 	.word	0x40020000
 8009e04:	40020400 	.word	0x40020400
 8009e08:	10120000 	.word	0x10120000

08009e0c <initalise_LSM9DS1>:

/* USER CODE BEGIN 4 */

void initalise_LSM9DS1(void)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af02      	add	r7, sp, #8


	*/

	// Setup Angular rate sensor Control Register 1
	i2cBuf[0] = CTRL_REG1_G;
 8009e12:	4b53      	ldr	r3, [pc, #332]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e14:	2210      	movs	r2, #16
 8009e16:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG1_G_VALUE;
 8009e18:	4b51      	ldr	r3, [pc, #324]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e1a:	22ab      	movs	r2, #171	; 0xab
 8009e1c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 8009e1e:	230a      	movs	r3, #10
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	2302      	movs	r3, #2
 8009e24:	4a4e      	ldr	r2, [pc, #312]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e26:	21d6      	movs	r1, #214	; 0xd6
 8009e28:	484e      	ldr	r0, [pc, #312]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009e2a:	f7f8 fc4f 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Angular rate sensor Control Register 3
	i2cBuf[0] = CTRL_REG3_G;
 8009e2e:	4b4c      	ldr	r3, [pc, #304]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e30:	2212      	movs	r2, #18
 8009e32:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG3_G_VALUE;
 8009e34:	4b4a      	ldr	r3, [pc, #296]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e36:	2240      	movs	r2, #64	; 0x40
 8009e38:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 8009e3a:	230a      	movs	r3, #10
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	2302      	movs	r3, #2
 8009e40:	4a47      	ldr	r2, [pc, #284]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e42:	21d6      	movs	r1, #214	; 0xd6
 8009e44:	4847      	ldr	r0, [pc, #284]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009e46:	f7f8 fc41 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Linear acceleration sensor Control Register 6
	i2cBuf[0] = CTRL_REG6_XL;
 8009e4a:	4b45      	ldr	r3, [pc, #276]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e4c:	2220      	movs	r2, #32
 8009e4e:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG6_XL_VALUE;
 8009e50:	4b43      	ldr	r3, [pc, #268]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e52:	22b0      	movs	r2, #176	; 0xb0
 8009e54:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 8009e56:	230a      	movs	r3, #10
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	4a40      	ldr	r2, [pc, #256]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e5e:	21d6      	movs	r1, #214	; 0xd6
 8009e60:	4840      	ldr	r0, [pc, #256]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009e62:	f7f8 fc33 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Linear acceleration sensor Control Register 7
	i2cBuf[0] = CTRL_REG7_XL;
 8009e66:	4b3e      	ldr	r3, [pc, #248]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e68:	2221      	movs	r2, #33	; 0x21
 8009e6a:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG7_XL_VALUE;
 8009e6c:	4b3c      	ldr	r3, [pc, #240]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e6e:	22e0      	movs	r2, #224	; 0xe0
 8009e70:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 8009e72:	230a      	movs	r3, #10
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	2302      	movs	r3, #2
 8009e78:	4a39      	ldr	r2, [pc, #228]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e7a:	21d6      	movs	r1, #214	; 0xd6
 8009e7c:	4839      	ldr	r0, [pc, #228]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009e7e:	f7f8 fc25 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Magnetometer register 1
	i2cBuf[0] = CTRL_REG1_M;
 8009e82:	4b37      	ldr	r3, [pc, #220]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e84:	2220      	movs	r2, #32
 8009e86:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG1_M_VALUE;
 8009e88:	4b35      	ldr	r3, [pc, #212]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e8a:	22d0      	movs	r2, #208	; 0xd0
 8009e8c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009e8e:	230a      	movs	r3, #10
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	2302      	movs	r3, #2
 8009e94:	4a32      	ldr	r2, [pc, #200]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009e96:	213c      	movs	r1, #60	; 0x3c
 8009e98:	4832      	ldr	r0, [pc, #200]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009e9a:	f7f8 fc17 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Magnetometer register 2
	i2cBuf[0] = CTRL_REG2_M;
 8009e9e:	4b30      	ldr	r3, [pc, #192]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ea0:	2221      	movs	r2, #33	; 0x21
 8009ea2:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG2_M_VALUE;
 8009ea4:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009eaa:	230a      	movs	r3, #10
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	2302      	movs	r3, #2
 8009eb0:	4a2b      	ldr	r2, [pc, #172]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009eb2:	213c      	movs	r1, #60	; 0x3c
 8009eb4:	482b      	ldr	r0, [pc, #172]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009eb6:	f7f8 fc09 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Magnetometer register 3
	i2cBuf[0] = CTRL_REG3_M;
 8009eba:	4b29      	ldr	r3, [pc, #164]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ebc:	2222      	movs	r2, #34	; 0x22
 8009ebe:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG3_M_Value;
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009ec6:	230a      	movs	r3, #10
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	2302      	movs	r3, #2
 8009ecc:	4a24      	ldr	r2, [pc, #144]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ece:	213c      	movs	r1, #60	; 0x3c
 8009ed0:	4824      	ldr	r0, [pc, #144]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009ed2:	f7f8 fbfb 	bl	80026cc <HAL_I2C_Master_Transmit>

	// lower y offset register
	i2cBuf[0] = 0x07;
 8009ed6:	4b22      	ldr	r3, [pc, #136]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ed8:	2207      	movs	r2, #7
 8009eda:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x00;	//S ?
 8009edc:	4b20      	ldr	r3, [pc, #128]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009eea:	213c      	movs	r1, #60	; 0x3c
 8009eec:	481d      	ldr	r0, [pc, #116]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009eee:	f7f8 fbed 	bl	80026cc <HAL_I2C_Master_Transmit>

	// High y offset register
	i2cBuf[0] = 0x08;
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009ef4:	2208      	movs	r2, #8
 8009ef6:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x00;
 8009ef8:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009efe:	230a      	movs	r3, #10
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	2302      	movs	r3, #2
 8009f04:	4a16      	ldr	r2, [pc, #88]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f06:	213c      	movs	r1, #60	; 0x3c
 8009f08:	4816      	ldr	r0, [pc, #88]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009f0a:	f7f8 fbdf 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Low X offset register
	i2cBuf[0] = 0x05;
 8009f0e:	4b14      	ldr	r3, [pc, #80]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f10:	2205      	movs	r2, #5
 8009f12:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x00;	//E
 8009f14:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009f1a:	230a      	movs	r3, #10
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	2302      	movs	r3, #2
 8009f20:	4a0f      	ldr	r2, [pc, #60]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f22:	213c      	movs	r1, #60	; 0x3c
 8009f24:	480f      	ldr	r0, [pc, #60]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009f26:	f7f8 fbd1 	bl	80026cc <HAL_I2C_Master_Transmit>

	// High X offset register
	i2cBuf[0] = 0x06;
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f2c:	2206      	movs	r2, #6
 8009f2e:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x03;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f32:	2203      	movs	r2, #3
 8009f34:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 8009f36:	230a      	movs	r3, #10
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	4a08      	ldr	r2, [pc, #32]	; (8009f60 <initalise_LSM9DS1+0x154>)
 8009f3e:	213c      	movs	r1, #60	; 0x3c
 8009f40:	4808      	ldr	r0, [pc, #32]	; (8009f64 <initalise_LSM9DS1+0x158>)
 8009f42:	f7f8 fbc3 	bl	80026cc <HAL_I2C_Master_Transmit>



	printf("Register setup Complete\n");
 8009f46:	4808      	ldr	r0, [pc, #32]	; (8009f68 <initalise_LSM9DS1+0x15c>)
 8009f48:	f002 f982 	bl	800c250 <puts>
	fflush(stdout);
 8009f4c:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <initalise_LSM9DS1+0x160>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 fabe 	bl	800b4d4 <fflush>

}
 8009f58:	bf00      	nop
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	200006d8 	.word	0x200006d8
 8009f64:	2000042c 	.word	0x2000042c
 8009f68:	0800ded8 	.word	0x0800ded8
 8009f6c:	2000017c 	.word	0x2000017c

08009f70 <HAL_ADC_ConvCpltCallback>:
   printf("Temperature = %.2f\n",deg);


}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

	//HAL_ADC_Stop_DMA(&hadc1);

	//speed = (double)count;
	current = (double)data[1];
 8009f78:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <HAL_ADC_ConvCpltCallback+0x2c>)
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f6 fac1 	bl	8000504 <__aeabi_ui2d>
 8009f82:	4603      	mov	r3, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	4a06      	ldr	r2, [pc, #24]	; (8009fa0 <HAL_ADC_ConvCpltCallback+0x30>)
 8009f88:	e9c2 3400 	strd	r3, r4, [r2]
	FLAG1 = 1;
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <HAL_ADC_ConvCpltCallback+0x34>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	601a      	str	r2, [r3, #0]

}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd90      	pop	{r4, r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200005b4 	.word	0x200005b4
 8009fa0:	20000370 	.word	0x20000370
 8009fa4:	20000534 	.word	0x20000534

08009fa8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	80fb      	strh	r3, [r7, #6]
	tnew = HAL_GetTick();
 8009fb2:	f7f6 ffdf 	bl	8000f74 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <HAL_GPIO_EXTI_Callback+0x34>)
 8009fba:	601a      	str	r2, [r3, #0]
	tdiff = tnew - told;
 8009fbc:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <HAL_GPIO_EXTI_Callback+0x34>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <HAL_GPIO_EXTI_Callback+0x38>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	4a07      	ldr	r2, [pc, #28]	; (8009fe4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8009fc8:	6013      	str	r3, [r2, #0]
	told = tnew;
 8009fca:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <HAL_GPIO_EXTI_Callback+0x34>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a04      	ldr	r2, [pc, #16]	; (8009fe0 <HAL_GPIO_EXTI_Callback+0x38>)
 8009fd0:	6013      	str	r3, [r2, #0]
	//count++;		//Hall Effect
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000378 	.word	0x20000378
 8009fe0:	2000037c 	.word	0x2000037c
 8009fe4:	20000380 	.word	0x20000380

08009fe8 <ultrasonic>:

double ultrasonic(void){
 8009fe8:	b590      	push	{r4, r7, lr}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0

	uint32_t localtime = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]

	double distance = 0;
 8009ff2:	f04f 0300 	mov.w	r3, #0
 8009ff6:	f04f 0400 	mov.w	r4, #0
 8009ffa:	e9c7 3400 	strd	r3, r4, [r7]

	HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_RESET);  // set the TRIG pin low initially
 8009ffe:	2200      	movs	r2, #0
 800a000:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a004:	482a      	ldr	r0, [pc, #168]	; (800a0b0 <ultrasonic+0xc8>)
 800a006:	f7f8 fa07 	bl	8002418 <HAL_GPIO_WritePin>
	DWT_Delay(2);
 800a00a:	2002      	movs	r0, #2
 800a00c:	f7ff f9c2 	bl	8009394 <DWT_Delay>

	localtime = 0;		//Restart local clock
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_SET);  // set TRIG pin HIGH for 10us
 800a014:	2201      	movs	r2, #1
 800a016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a01a:	4825      	ldr	r0, [pc, #148]	; (800a0b0 <ultrasonic+0xc8>)
 800a01c:	f7f8 f9fc 	bl	8002418 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 800a020:	200a      	movs	r0, #10
 800a022:	f7ff f9b7 	bl	8009394 <DWT_Delay>

	HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_RESET);  // set the TRIG pin low
 800a026:	2200      	movs	r2, #0
 800a028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a02c:	4820      	ldr	r0, [pc, #128]	; (800a0b0 <ultrasonic+0xc8>)
 800a02e:	f7f8 f9f3 	bl	8002418 <HAL_GPIO_WritePin>

	//Read ECHO Pin to calculate length of echo pulse

	while (!(HAL_GPIO_ReadPin(ECHOL_GPIO_Port, ECHOL_Pin)));  // wait for the ECHO pin to go high
 800a032:	bf00      	nop
 800a034:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a038:	481d      	ldr	r0, [pc, #116]	; (800a0b0 <ultrasonic+0xc8>)
 800a03a:	f7f8 f9d5 	bl	80023e8 <HAL_GPIO_ReadPin>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0f7      	beq.n	800a034 <ultrasonic+0x4c>
	while (HAL_GPIO_ReadPin(ECHOL_GPIO_Port, ECHOL_Pin))    // while the pin is high
 800a044:	e005      	b.n	800a052 <ultrasonic+0x6a>
	{
		localtime++;   // measure time for which the pin is high
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
		DWT_Delay(1);
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7ff f9a1 	bl	8009394 <DWT_Delay>
	while (HAL_GPIO_ReadPin(ECHOL_GPIO_Port, ECHOL_Pin))    // while the pin is high
 800a052:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a056:	4816      	ldr	r0, [pc, #88]	; (800a0b0 <ultrasonic+0xc8>)
 800a058:	f7f8 f9c6 	bl	80023e8 <HAL_GPIO_ReadPin>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f1      	bne.n	800a046 <ultrasonic+0x5e>
	}

	distance = (0.034*(double)localtime) - 2;			//0.034 = Speed of sound in cm/microsecond
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7f6 fa4e 	bl	8000504 <__aeabi_ui2d>
 800a068:	a30f      	add	r3, pc, #60	; (adr r3, 800a0a8 <ultrasonic+0xc0>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 fac3 	bl	80005f8 <__aeabi_dmul>
 800a072:	4603      	mov	r3, r0
 800a074:	460c      	mov	r4, r1
 800a076:	4618      	mov	r0, r3
 800a078:	4621      	mov	r1, r4
 800a07a:	f04f 0200 	mov.w	r2, #0
 800a07e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a082:	f7f6 f901 	bl	8000288 <__aeabi_dsub>
 800a086:	4603      	mov	r3, r0
 800a088:	460c      	mov	r4, r1
 800a08a:	e9c7 3400 	strd	r3, r4, [r7]
													//(-2) accounts for sensor dead zone (mount 2cm from front)
	//Possible Filtering

	return distance;
 800a08e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a092:	ec44 3b17 	vmov	d7, r3, r4
}
 800a096:	eeb0 0a47 	vmov.f32	s0, s14
 800a09a:	eef0 0a67 	vmov.f32	s1, s15
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd90      	pop	{r4, r7, pc}
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	b020c49c 	.word	0xb020c49c
 800a0ac:	3fa16872 	.word	0x3fa16872
 800a0b0:	40020800 	.word	0x40020800

0800a0b4 <__io_putchar>:

	return distance;
}

int __io_putchar(int ch)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)(&ch), 1, 0xFFFF);
 800a0bc:	1d39      	adds	r1, r7, #4
 800a0be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	4803      	ldr	r0, [pc, #12]	; (800a0d4 <__io_putchar+0x20>)
 800a0c6:	f7fb ffda 	bl	800607e <HAL_UART_Transmit>
  return 1;
 800a0ca:	2301      	movs	r3, #1
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	200003e8 	.word	0x200003e8

0800a0d8 <__io_getchar>:

int __io_getchar(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart3, (uint8_t *)(&ch), 1, 0xFFFF);
 800a0de:	1df9      	adds	r1, r7, #7
 800a0e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	4804      	ldr	r0, [pc, #16]	; (800a0f8 <__io_getchar+0x20>)
 800a0e8:	f7fc f862 	bl	80061b0 <HAL_UART_Receive>
  return (int)ch;
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200003e8 	.word	0x200003e8

0800a0fc <stdio_setup>:

void stdio_setup(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
    // Turn off buffers, so I/O occurs immediately
    setvbuf(stdin, NULL, _IONBF, 0);
 800a100:	4b0c      	ldr	r3, [pc, #48]	; (800a134 <stdio_setup+0x38>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6858      	ldr	r0, [r3, #4]
 800a106:	2300      	movs	r3, #0
 800a108:	2202      	movs	r2, #2
 800a10a:	2100      	movs	r1, #0
 800a10c:	f002 f8b8 	bl	800c280 <setvbuf>
    setvbuf(stdout, NULL, _IONBF, 0);
 800a110:	4b08      	ldr	r3, [pc, #32]	; (800a134 <stdio_setup+0x38>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6898      	ldr	r0, [r3, #8]
 800a116:	2300      	movs	r3, #0
 800a118:	2202      	movs	r2, #2
 800a11a:	2100      	movs	r1, #0
 800a11c:	f002 f8b0 	bl	800c280 <setvbuf>
    setvbuf(stderr, NULL, _IONBF, 0);
 800a120:	4b04      	ldr	r3, [pc, #16]	; (800a134 <stdio_setup+0x38>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68d8      	ldr	r0, [r3, #12]
 800a126:	2300      	movs	r3, #0
 800a128:	2202      	movs	r2, #2
 800a12a:	2100      	movs	r1, #0
 800a12c:	f002 f8a8 	bl	800c280 <setvbuf>
}
 800a130:	bf00      	nop
 800a132:	bd80      	pop	{r7, pc}
 800a134:	2000017c 	.word	0x2000017c

0800a138 <steer_straight>:
		break;
	}
}

void steer_straight(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
	steer_pwm_setvalue(234);
 800a13c:	20ea      	movs	r0, #234	; 0xea
 800a13e:	f000 f803 	bl	800a148 <steer_pwm_setvalue>
}
 800a142:	bf00      	nop
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <steer_pwm_setvalue>:
}



void steer_pwm_setvalue(uint16_t value)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08a      	sub	sp, #40	; 0x28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a152:	2360      	movs	r3, #96	; 0x60
 800a154:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a15e:	2300      	movs	r3, #0
 800a160:	61fb      	str	r3, [r7, #28]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	2200      	movs	r2, #0
 800a168:	4619      	mov	r1, r3
 800a16a:	4808      	ldr	r0, [pc, #32]	; (800a18c <steer_pwm_setvalue+0x44>)
 800a16c:	f7fb fa68 	bl	8005640 <HAL_TIM_PWM_ConfigChannel>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <steer_pwm_setvalue+0x32>
	{
		Error_Handler();
 800a176:	f000 f80b 	bl	800a190 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800a17a:	2100      	movs	r1, #0
 800a17c:	4803      	ldr	r0, [pc, #12]	; (800a18c <steer_pwm_setvalue+0x44>)
 800a17e:	f7fb fa21 	bl	80055c4 <HAL_TIM_PWM_Start>
}
 800a182:	bf00      	nop
 800a184:	3728      	adds	r7, #40	; 0x28
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000634 	.word	0x20000634

0800a190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a190:	b480      	push	{r7}
 800a192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	607b      	str	r3, [r7, #4]
 800a1aa:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <HAL_MspInit+0x4c>)
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ae:	4a0f      	ldr	r2, [pc, #60]	; (800a1ec <HAL_MspInit+0x4c>)
 800a1b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1b4:	6453      	str	r3, [r2, #68]	; 0x44
 800a1b6:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <HAL_MspInit+0x4c>)
 800a1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <HAL_MspInit+0x4c>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	4a08      	ldr	r2, [pc, #32]	; (800a1ec <HAL_MspInit+0x4c>)
 800a1cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1d0:	6413      	str	r3, [r2, #64]	; 0x40
 800a1d2:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <HAL_MspInit+0x4c>)
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800a1de:	2007      	movs	r0, #7
 800a1e0:	f7f7 fbb0 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40023800 	.word	0x40023800

0800a1f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08a      	sub	sp, #40	; 0x28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	609a      	str	r2, [r3, #8]
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a2f      	ldr	r2, [pc, #188]	; (800a2cc <HAL_ADC_MspInit+0xdc>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d157      	bne.n	800a2c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a212:	2300      	movs	r3, #0
 800a214:	613b      	str	r3, [r7, #16]
 800a216:	4b2e      	ldr	r3, [pc, #184]	; (800a2d0 <HAL_ADC_MspInit+0xe0>)
 800a218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21a:	4a2d      	ldr	r2, [pc, #180]	; (800a2d0 <HAL_ADC_MspInit+0xe0>)
 800a21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a220:	6453      	str	r3, [r2, #68]	; 0x44
 800a222:	4b2b      	ldr	r3, [pc, #172]	; (800a2d0 <HAL_ADC_MspInit+0xe0>)
 800a224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	4b27      	ldr	r3, [pc, #156]	; (800a2d0 <HAL_ADC_MspInit+0xe0>)
 800a234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a236:	4a26      	ldr	r2, [pc, #152]	; (800a2d0 <HAL_ADC_MspInit+0xe0>)
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	6313      	str	r3, [r2, #48]	; 0x30
 800a23e:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <HAL_ADC_MspInit+0xe0>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800a24a:	2306      	movs	r3, #6
 800a24c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a24e:	2303      	movs	r3, #3
 800a250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a252:	2300      	movs	r3, #0
 800a254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a256:	f107 0314 	add.w	r3, r7, #20
 800a25a:	4619      	mov	r1, r3
 800a25c:	481d      	ldr	r0, [pc, #116]	; (800a2d4 <HAL_ADC_MspInit+0xe4>)
 800a25e:	f7f7 ff29 	bl	80020b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800a262:	4b1d      	ldr	r3, [pc, #116]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a264:	4a1d      	ldr	r2, [pc, #116]	; (800a2dc <HAL_ADC_MspInit+0xec>)
 800a266:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800a268:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a270:	2200      	movs	r2, #0
 800a272:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a274:	4b18      	ldr	r3, [pc, #96]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a276:	2200      	movs	r2, #0
 800a278:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a27a:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a27c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a280:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a282:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a288:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a28a:	4b13      	ldr	r3, [pc, #76]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a28c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a290:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a292:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a294:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a298:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a29a:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a2a0:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a2a6:	480c      	ldr	r0, [pc, #48]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a2a8:	f7f7 fb8e 	bl	80019c8 <HAL_DMA_Init>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800a2b2:	f7ff ff6d 	bl	800a190 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a07      	ldr	r2, [pc, #28]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38
 800a2bc:	4a06      	ldr	r2, [pc, #24]	; (800a2d8 <HAL_ADC_MspInit+0xe8>)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a2c2:	bf00      	nop
 800a2c4:	3728      	adds	r7, #40	; 0x28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	40012000 	.word	0x40012000
 800a2d0:	40023800 	.word	0x40023800
 800a2d4:	40020000 	.word	0x40020000
 800a2d8:	20000550 	.word	0x20000550
 800a2dc:	40026410 	.word	0x40026410

0800a2e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08a      	sub	sp, #40	; 0x28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2e8:	f107 0314 	add.w	r3, r7, #20
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	609a      	str	r2, [r3, #8]
 800a2f4:	60da      	str	r2, [r3, #12]
 800a2f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a19      	ldr	r2, [pc, #100]	; (800a364 <HAL_I2C_MspInit+0x84>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d12b      	bne.n	800a35a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a302:	2300      	movs	r3, #0
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	4b18      	ldr	r3, [pc, #96]	; (800a368 <HAL_I2C_MspInit+0x88>)
 800a308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30a:	4a17      	ldr	r2, [pc, #92]	; (800a368 <HAL_I2C_MspInit+0x88>)
 800a30c:	f043 0302 	orr.w	r3, r3, #2
 800a310:	6313      	str	r3, [r2, #48]	; 0x30
 800a312:	4b15      	ldr	r3, [pc, #84]	; (800a368 <HAL_I2C_MspInit+0x88>)
 800a314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	613b      	str	r3, [r7, #16]
 800a31c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a31e:	23c0      	movs	r3, #192	; 0xc0
 800a320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a322:	2312      	movs	r3, #18
 800a324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a326:	2301      	movs	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a32a:	2303      	movs	r3, #3
 800a32c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a32e:	2304      	movs	r3, #4
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a332:	f107 0314 	add.w	r3, r7, #20
 800a336:	4619      	mov	r1, r3
 800a338:	480c      	ldr	r0, [pc, #48]	; (800a36c <HAL_I2C_MspInit+0x8c>)
 800a33a:	f7f7 febb 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <HAL_I2C_MspInit+0x88>)
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	4a08      	ldr	r2, [pc, #32]	; (800a368 <HAL_I2C_MspInit+0x88>)
 800a348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a34c:	6413      	str	r3, [r2, #64]	; 0x40
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <HAL_I2C_MspInit+0x88>)
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a35a:	bf00      	nop
 800a35c:	3728      	adds	r7, #40	; 0x28
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	40005400 	.word	0x40005400
 800a368:	40023800 	.word	0x40023800
 800a36c:	40020400 	.word	0x40020400

0800a370 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	; 0x28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	605a      	str	r2, [r3, #4]
 800a382:	609a      	str	r2, [r3, #8]
 800a384:	60da      	str	r2, [r3, #12]
 800a386:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a28      	ldr	r2, [pc, #160]	; (800a430 <HAL_I2S_MspInit+0xc0>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d14a      	bne.n	800a428 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a392:	2300      	movs	r3, #0
 800a394:	613b      	str	r3, [r7, #16]
 800a396:	4b27      	ldr	r3, [pc, #156]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	4a26      	ldr	r2, [pc, #152]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a39c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3a2:	4b24      	ldr	r3, [pc, #144]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3aa:	613b      	str	r3, [r7, #16]
 800a3ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	4b20      	ldr	r3, [pc, #128]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b6:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3b8:	f043 0301 	orr.w	r3, r3, #1
 800a3bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a3be:	4b1d      	ldr	r3, [pc, #116]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60bb      	str	r3, [r7, #8]
 800a3ce:	4b19      	ldr	r3, [pc, #100]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d2:	4a18      	ldr	r2, [pc, #96]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3d4:	f043 0304 	orr.w	r3, r3, #4
 800a3d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3da:	4b16      	ldr	r3, [pc, #88]	; (800a434 <HAL_I2S_MspInit+0xc4>)
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	60bb      	str	r3, [r7, #8]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a3e6:	2310      	movs	r3, #16
 800a3e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a3f6:	2306      	movs	r3, #6
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a3fa:	f107 0314 	add.w	r3, r7, #20
 800a3fe:	4619      	mov	r1, r3
 800a400:	480d      	ldr	r0, [pc, #52]	; (800a438 <HAL_I2S_MspInit+0xc8>)
 800a402:	f7f7 fe57 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800a406:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800a40a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a40c:	2302      	movs	r3, #2
 800a40e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a410:	2300      	movs	r3, #0
 800a412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a414:	2300      	movs	r3, #0
 800a416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a418:	2306      	movs	r3, #6
 800a41a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a41c:	f107 0314 	add.w	r3, r7, #20
 800a420:	4619      	mov	r1, r3
 800a422:	4806      	ldr	r0, [pc, #24]	; (800a43c <HAL_I2S_MspInit+0xcc>)
 800a424:	f7f7 fe46 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a428:	bf00      	nop
 800a42a:	3728      	adds	r7, #40	; 0x28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	40003c00 	.word	0x40003c00
 800a434:	40023800 	.word	0x40023800
 800a438:	40020000 	.word	0x40020000
 800a43c:	40020800 	.word	0x40020800

0800a440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08a      	sub	sp, #40	; 0x28
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a448:	f107 0314 	add.w	r3, r7, #20
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a19      	ldr	r2, [pc, #100]	; (800a4c4 <HAL_SPI_MspInit+0x84>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d12b      	bne.n	800a4ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a462:	2300      	movs	r3, #0
 800a464:	613b      	str	r3, [r7, #16]
 800a466:	4b18      	ldr	r3, [pc, #96]	; (800a4c8 <HAL_SPI_MspInit+0x88>)
 800a468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46a:	4a17      	ldr	r2, [pc, #92]	; (800a4c8 <HAL_SPI_MspInit+0x88>)
 800a46c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a470:	6453      	str	r3, [r2, #68]	; 0x44
 800a472:	4b15      	ldr	r3, [pc, #84]	; (800a4c8 <HAL_SPI_MspInit+0x88>)
 800a474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a47a:	613b      	str	r3, [r7, #16]
 800a47c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	4b11      	ldr	r3, [pc, #68]	; (800a4c8 <HAL_SPI_MspInit+0x88>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	4a10      	ldr	r2, [pc, #64]	; (800a4c8 <HAL_SPI_MspInit+0x88>)
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	6313      	str	r3, [r2, #48]	; 0x30
 800a48e:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <HAL_SPI_MspInit+0x88>)
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800a49a:	23e0      	movs	r3, #224	; 0xe0
 800a49c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a4aa:	2305      	movs	r3, #5
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4ae:	f107 0314 	add.w	r3, r7, #20
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4805      	ldr	r0, [pc, #20]	; (800a4cc <HAL_SPI_MspInit+0x8c>)
 800a4b6:	f7f7 fdfd 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a4ba:	bf00      	nop
 800a4bc:	3728      	adds	r7, #40	; 0x28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	40013000 	.word	0x40013000
 800a4c8:	40023800 	.word	0x40023800
 800a4cc:	40020000 	.word	0x40020000

0800a4d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e0:	d10e      	bne.n	800a500 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	4b27      	ldr	r3, [pc, #156]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ea:	4a26      	ldr	r2, [pc, #152]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a4ec:	f043 0301 	orr.w	r3, r3, #1
 800a4f0:	6413      	str	r3, [r2, #64]	; 0x40
 800a4f2:	4b24      	ldr	r3, [pc, #144]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800a4fe:	e03a      	b.n	800a576 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a20      	ldr	r2, [pc, #128]	; (800a588 <HAL_TIM_Base_MspInit+0xb8>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d10e      	bne.n	800a528 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a50a:	2300      	movs	r3, #0
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a514:	f043 0302 	orr.w	r3, r3, #2
 800a518:	6413      	str	r3, [r2, #64]	; 0x40
 800a51a:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	693b      	ldr	r3, [r7, #16]
}
 800a526:	e026      	b.n	800a576 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a17      	ldr	r2, [pc, #92]	; (800a58c <HAL_TIM_Base_MspInit+0xbc>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d10e      	bne.n	800a550 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	4b13      	ldr	r3, [pc, #76]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53a:	4a12      	ldr	r2, [pc, #72]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a53c:	f043 0304 	orr.w	r3, r3, #4
 800a540:	6413      	str	r3, [r2, #64]	; 0x40
 800a542:	4b10      	ldr	r3, [pc, #64]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	68fb      	ldr	r3, [r7, #12]
}
 800a54e:	e012      	b.n	800a576 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a0e      	ldr	r2, [pc, #56]	; (800a590 <HAL_TIM_Base_MspInit+0xc0>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d10d      	bne.n	800a576 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a55a:	2300      	movs	r3, #0
 800a55c:	60bb      	str	r3, [r7, #8]
 800a55e:	4b09      	ldr	r3, [pc, #36]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	4a08      	ldr	r2, [pc, #32]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a568:	6413      	str	r3, [r2, #64]	; 0x40
 800a56a:	4b06      	ldr	r3, [pc, #24]	; (800a584 <HAL_TIM_Base_MspInit+0xb4>)
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a572:	60bb      	str	r3, [r7, #8]
 800a574:	68bb      	ldr	r3, [r7, #8]
}
 800a576:	bf00      	nop
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	40023800 	.word	0x40023800
 800a588:	40000400 	.word	0x40000400
 800a58c:	40000800 	.word	0x40000800
 800a590:	40002000 	.word	0x40002000

0800a594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	609a      	str	r2, [r3, #8]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b4:	d11f      	bne.n	800a5f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
 800a5ba:	4b23      	ldr	r3, [pc, #140]	; (800a648 <HAL_TIM_MspPostInit+0xb4>)
 800a5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5be:	4a22      	ldr	r2, [pc, #136]	; (800a648 <HAL_TIM_MspPostInit+0xb4>)
 800a5c0:	f043 0301 	orr.w	r3, r3, #1
 800a5c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5c6:	4b20      	ldr	r3, [pc, #128]	; (800a648 <HAL_TIM_MspPostInit+0xb4>)
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5e8:	f107 0314 	add.w	r3, r7, #20
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4817      	ldr	r0, [pc, #92]	; (800a64c <HAL_TIM_MspPostInit+0xb8>)
 800a5f0:	f7f7 fd60 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800a5f4:	e023      	b.n	800a63e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a15      	ldr	r2, [pc, #84]	; (800a650 <HAL_TIM_MspPostInit+0xbc>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d11e      	bne.n	800a63e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	4b10      	ldr	r3, [pc, #64]	; (800a648 <HAL_TIM_MspPostInit+0xb4>)
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	4a0f      	ldr	r2, [pc, #60]	; (800a648 <HAL_TIM_MspPostInit+0xb4>)
 800a60a:	f043 0308 	orr.w	r3, r3, #8
 800a60e:	6313      	str	r3, [r2, #48]	; 0x30
 800a610:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <HAL_TIM_MspPostInit+0xb4>)
 800a612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a614:	f003 0308 	and.w	r3, r3, #8
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a61c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a622:	2302      	movs	r3, #2
 800a624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62a:	2300      	movs	r3, #0
 800a62c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a62e:	2302      	movs	r3, #2
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	4619      	mov	r1, r3
 800a638:	4806      	ldr	r0, [pc, #24]	; (800a654 <HAL_TIM_MspPostInit+0xc0>)
 800a63a:	f7f7 fd3b 	bl	80020b4 <HAL_GPIO_Init>
}
 800a63e:	bf00      	nop
 800a640:	3728      	adds	r7, #40	; 0x28
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	40023800 	.word	0x40023800
 800a64c:	40020000 	.word	0x40020000
 800a650:	40000800 	.word	0x40000800
 800a654:	40020c00 	.word	0x40020c00

0800a658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	; 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a660:	f107 0314 	add.w	r3, r7, #20
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	605a      	str	r2, [r3, #4]
 800a66a:	609a      	str	r2, [r3, #8]
 800a66c:	60da      	str	r2, [r3, #12]
 800a66e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a29      	ldr	r2, [pc, #164]	; (800a71c <HAL_UART_MspInit+0xc4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d14b      	bne.n	800a712 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a67a:	2300      	movs	r3, #0
 800a67c:	613b      	str	r3, [r7, #16]
 800a67e:	4b28      	ldr	r3, [pc, #160]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a682:	4a27      	ldr	r2, [pc, #156]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a688:	6413      	str	r3, [r2, #64]	; 0x40
 800a68a:	4b25      	ldr	r3, [pc, #148]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a692:	613b      	str	r3, [r7, #16]
 800a694:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	4b21      	ldr	r3, [pc, #132]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69e:	4a20      	ldr	r2, [pc, #128]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a6a0:	f043 0302 	orr.w	r3, r3, #2
 800a6a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a6a6:	4b1e      	ldr	r3, [pc, #120]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60bb      	str	r3, [r7, #8]
 800a6b6:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	4a19      	ldr	r2, [pc, #100]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a6bc:	f043 0308 	orr.w	r3, r3, #8
 800a6c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a6c2:	4b17      	ldr	r3, [pc, #92]	; (800a720 <HAL_UART_MspInit+0xc8>)
 800a6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c6:	f003 0308 	and.w	r3, r3, #8
 800a6ca:	60bb      	str	r3, [r7, #8]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a6ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a6e0:	2307      	movs	r3, #7
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a6e4:	f107 0314 	add.w	r3, r7, #20
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	480e      	ldr	r0, [pc, #56]	; (800a724 <HAL_UART_MspInit+0xcc>)
 800a6ec:	f7f7 fce2 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a6f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6fe:	2303      	movs	r3, #3
 800a700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a702:	2307      	movs	r3, #7
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a706:	f107 0314 	add.w	r3, r7, #20
 800a70a:	4619      	mov	r1, r3
 800a70c:	4806      	ldr	r0, [pc, #24]	; (800a728 <HAL_UART_MspInit+0xd0>)
 800a70e:	f7f7 fcd1 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a712:	bf00      	nop
 800a714:	3728      	adds	r7, #40	; 0x28
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	40004800 	.word	0x40004800
 800a720:	40023800 	.word	0x40023800
 800a724:	40020400 	.word	0x40020400
 800a728:	40020c00 	.word	0x40020c00

0800a72c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a730:	bf00      	nop
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a73a:	b480      	push	{r7}
 800a73c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a73e:	e7fe      	b.n	800a73e <HardFault_Handler+0x4>

0800a740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a744:	e7fe      	b.n	800a744 <MemManage_Handler+0x4>

0800a746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a746:	b480      	push	{r7}
 800a748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a74a:	e7fe      	b.n	800a74a <BusFault_Handler+0x4>

0800a74c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a750:	e7fe      	b.n	800a750 <UsageFault_Handler+0x4>

0800a752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a752:	b480      	push	{r7}
 800a754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a764:	bf00      	nop
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a772:	bf00      	nop
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a780:	f7f6 fbe4 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a784:	bf00      	nop
 800a786:	bd80      	pop	{r7, pc}

0800a788 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a78c:	2001      	movs	r0, #1
 800a78e:	f7f7 fe5d 	bl	800244c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a79c:	4802      	ldr	r0, [pc, #8]	; (800a7a8 <DMA2_Stream0_IRQHandler+0x10>)
 800a79e:	f7f7 fa21 	bl	8001be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a7a2:	bf00      	nop
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000550 	.word	0x20000550

0800a7ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a7b0:	4802      	ldr	r0, [pc, #8]	; (800a7bc <OTG_FS_IRQHandler+0x10>)
 800a7b2:	f7f9 f877 	bl	80038a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200019d0 	.word	0x200019d0

0800a7c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e00a      	b.n	800a7e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a7d2:	f7ff fc81 	bl	800a0d8 <__io_getchar>
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	60ba      	str	r2, [r7, #8]
 800a7de:	b2ca      	uxtb	r2, r1
 800a7e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	dbf0      	blt.n	800a7d2 <_read+0x12>
	}

return len;
 800a7f0:	687b      	ldr	r3, [r7, #4]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3718      	adds	r7, #24
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b086      	sub	sp, #24
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e009      	b.n	800a820 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	60ba      	str	r2, [r7, #8]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fc4d 	bl	800a0b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	3301      	adds	r3, #1
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	dbf1      	blt.n	800a80c <_write+0x12>
	}
	return len;
 800a828:	687b      	ldr	r3, [r7, #4]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <_close>:

int _close(int file)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
	return -1;
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a85a:	605a      	str	r2, [r3, #4]
	return 0;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <_isatty>:

int _isatty(int file)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
	return 1;
 800a872:	2301      	movs	r3, #1
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
	return 0;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a8a4:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <_sbrk+0x50>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d102      	bne.n	800a8b2 <_sbrk+0x16>
		heap_end = &end;
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <_sbrk+0x50>)
 800a8ae:	4a10      	ldr	r2, [pc, #64]	; (800a8f0 <_sbrk+0x54>)
 800a8b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a8b2:	4b0e      	ldr	r3, [pc, #56]	; (800a8ec <_sbrk+0x50>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <_sbrk+0x50>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4413      	add	r3, r2
 800a8c0:	466a      	mov	r2, sp
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d907      	bls.n	800a8d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a8c6:	f000 fd4f 	bl	800b368 <__errno>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	230c      	movs	r3, #12
 800a8ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d4:	e006      	b.n	800a8e4 <_sbrk+0x48>
	}

	heap_end += incr;
 800a8d6:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <_sbrk+0x50>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	4a03      	ldr	r2, [pc, #12]	; (800a8ec <_sbrk+0x50>)
 800a8e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000384 	.word	0x20000384
 800a8f0:	20001fe0 	.word	0x20001fe0

0800a8f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a8f8:	4b16      	ldr	r3, [pc, #88]	; (800a954 <SystemInit+0x60>)
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fe:	4a15      	ldr	r2, [pc, #84]	; (800a954 <SystemInit+0x60>)
 800a900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a908:	4b13      	ldr	r3, [pc, #76]	; (800a958 <SystemInit+0x64>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a12      	ldr	r2, [pc, #72]	; (800a958 <SystemInit+0x64>)
 800a90e:	f043 0301 	orr.w	r3, r3, #1
 800a912:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a914:	4b10      	ldr	r3, [pc, #64]	; (800a958 <SystemInit+0x64>)
 800a916:	2200      	movs	r2, #0
 800a918:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a91a:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <SystemInit+0x64>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a0e      	ldr	r2, [pc, #56]	; (800a958 <SystemInit+0x64>)
 800a920:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a928:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a92a:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <SystemInit+0x64>)
 800a92c:	4a0b      	ldr	r2, [pc, #44]	; (800a95c <SystemInit+0x68>)
 800a92e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a930:	4b09      	ldr	r3, [pc, #36]	; (800a958 <SystemInit+0x64>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a08      	ldr	r2, [pc, #32]	; (800a958 <SystemInit+0x64>)
 800a936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a93a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a93c:	4b06      	ldr	r3, [pc, #24]	; (800a958 <SystemInit+0x64>)
 800a93e:	2200      	movs	r2, #0
 800a940:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a942:	4b04      	ldr	r3, [pc, #16]	; (800a954 <SystemInit+0x60>)
 800a944:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a948:	609a      	str	r2, [r3, #8]
#endif
}
 800a94a:	bf00      	nop
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	e000ed00 	.word	0xe000ed00
 800a958:	40023800 	.word	0x40023800
 800a95c:	24003010 	.word	0x24003010

0800a960 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a964:	2200      	movs	r2, #0
 800a966:	4912      	ldr	r1, [pc, #72]	; (800a9b0 <MX_USB_DEVICE_Init+0x50>)
 800a968:	4812      	ldr	r0, [pc, #72]	; (800a9b4 <MX_USB_DEVICE_Init+0x54>)
 800a96a:	f7fd fc9e 	bl	80082aa <USBD_Init>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a974:	f7ff fc0c 	bl	800a190 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a978:	490f      	ldr	r1, [pc, #60]	; (800a9b8 <MX_USB_DEVICE_Init+0x58>)
 800a97a:	480e      	ldr	r0, [pc, #56]	; (800a9b4 <MX_USB_DEVICE_Init+0x54>)
 800a97c:	f7fd fcc0 	bl	8008300 <USBD_RegisterClass>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a986:	f7ff fc03 	bl	800a190 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a98a:	490c      	ldr	r1, [pc, #48]	; (800a9bc <MX_USB_DEVICE_Init+0x5c>)
 800a98c:	4809      	ldr	r0, [pc, #36]	; (800a9b4 <MX_USB_DEVICE_Init+0x54>)
 800a98e:	f7fd fc1d 	bl	80081cc <USBD_CDC_RegisterInterface>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a998:	f7ff fbfa 	bl	800a190 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a99c:	4805      	ldr	r0, [pc, #20]	; (800a9b4 <MX_USB_DEVICE_Init+0x54>)
 800a99e:	f7fd fcc9 	bl	8008334 <USBD_Start>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9a8:	f7ff fbf2 	bl	800a190 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9ac:	bf00      	nop
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	2000012c 	.word	0x2000012c
 800a9b4:	20000734 	.word	0x20000734
 800a9b8:	20000014 	.word	0x20000014
 800a9bc:	2000011c 	.word	0x2000011c

0800a9c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4905      	ldr	r1, [pc, #20]	; (800a9dc <CDC_Init_FS+0x1c>)
 800a9c8:	4805      	ldr	r0, [pc, #20]	; (800a9e0 <CDC_Init_FS+0x20>)
 800a9ca:	f7fd fc16 	bl	80081fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a9ce:	4905      	ldr	r1, [pc, #20]	; (800a9e4 <CDC_Init_FS+0x24>)
 800a9d0:	4803      	ldr	r0, [pc, #12]	; (800a9e0 <CDC_Init_FS+0x20>)
 800a9d2:	f7fd fc2c 	bl	800822e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a9d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	200011d0 	.word	0x200011d0
 800a9e0:	20000734 	.word	0x20000734
 800a9e4:	200009d0 	.word	0x200009d0

0800a9e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a9ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	6039      	str	r1, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
 800aa04:	4613      	mov	r3, r2
 800aa06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa08:	79fb      	ldrb	r3, [r7, #7]
 800aa0a:	2b23      	cmp	r3, #35	; 0x23
 800aa0c:	d84a      	bhi.n	800aaa4 <CDC_Control_FS+0xac>
 800aa0e:	a201      	add	r2, pc, #4	; (adr r2, 800aa14 <CDC_Control_FS+0x1c>)
 800aa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa14:	0800aaa5 	.word	0x0800aaa5
 800aa18:	0800aaa5 	.word	0x0800aaa5
 800aa1c:	0800aaa5 	.word	0x0800aaa5
 800aa20:	0800aaa5 	.word	0x0800aaa5
 800aa24:	0800aaa5 	.word	0x0800aaa5
 800aa28:	0800aaa5 	.word	0x0800aaa5
 800aa2c:	0800aaa5 	.word	0x0800aaa5
 800aa30:	0800aaa5 	.word	0x0800aaa5
 800aa34:	0800aaa5 	.word	0x0800aaa5
 800aa38:	0800aaa5 	.word	0x0800aaa5
 800aa3c:	0800aaa5 	.word	0x0800aaa5
 800aa40:	0800aaa5 	.word	0x0800aaa5
 800aa44:	0800aaa5 	.word	0x0800aaa5
 800aa48:	0800aaa5 	.word	0x0800aaa5
 800aa4c:	0800aaa5 	.word	0x0800aaa5
 800aa50:	0800aaa5 	.word	0x0800aaa5
 800aa54:	0800aaa5 	.word	0x0800aaa5
 800aa58:	0800aaa5 	.word	0x0800aaa5
 800aa5c:	0800aaa5 	.word	0x0800aaa5
 800aa60:	0800aaa5 	.word	0x0800aaa5
 800aa64:	0800aaa5 	.word	0x0800aaa5
 800aa68:	0800aaa5 	.word	0x0800aaa5
 800aa6c:	0800aaa5 	.word	0x0800aaa5
 800aa70:	0800aaa5 	.word	0x0800aaa5
 800aa74:	0800aaa5 	.word	0x0800aaa5
 800aa78:	0800aaa5 	.word	0x0800aaa5
 800aa7c:	0800aaa5 	.word	0x0800aaa5
 800aa80:	0800aaa5 	.word	0x0800aaa5
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800aaa5 	.word	0x0800aaa5
 800aa8c:	0800aaa5 	.word	0x0800aaa5
 800aa90:	0800aaa5 	.word	0x0800aaa5
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aaa5 	.word	0x0800aaa5
 800aa9c:	0800aaa5 	.word	0x0800aaa5
 800aaa0:	0800aaa5 	.word	0x0800aaa5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaa4:	bf00      	nop
  }

  return (USBD_OK);
 800aaa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4805      	ldr	r0, [pc, #20]	; (800aad8 <CDC_Receive_FS+0x24>)
 800aac2:	f7fd fbb4 	bl	800822e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aac6:	4804      	ldr	r0, [pc, #16]	; (800aad8 <CDC_Receive_FS+0x24>)
 800aac8:	f7fd fbc5 	bl	8008256 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aacc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000734 	.word	0x20000734

0800aadc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08a      	sub	sp, #40	; 0x28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aae4:	f107 0314 	add.w	r3, r7, #20
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	605a      	str	r2, [r3, #4]
 800aaee:	609a      	str	r2, [r3, #8]
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aafc:	d147      	bne.n	800ab8e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aafe:	2300      	movs	r3, #0
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	4b25      	ldr	r3, [pc, #148]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab06:	4a24      	ldr	r2, [pc, #144]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab08:	f043 0301 	orr.w	r3, r3, #1
 800ab0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab0e:	4b22      	ldr	r3, [pc, #136]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab28:	f107 0314 	add.w	r3, r7, #20
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	481b      	ldr	r0, [pc, #108]	; (800ab9c <HAL_PCD_MspInit+0xc0>)
 800ab30:	f7f7 fac0 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab42:	2300      	movs	r3, #0
 800ab44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab46:	230a      	movs	r3, #10
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab4a:	f107 0314 	add.w	r3, r7, #20
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4812      	ldr	r0, [pc, #72]	; (800ab9c <HAL_PCD_MspInit+0xc0>)
 800ab52:	f7f7 faaf 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab56:	4b10      	ldr	r3, [pc, #64]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5a:	4a0f      	ldr	r2, [pc, #60]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab60:	6353      	str	r3, [r2, #52]	; 0x34
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6a:	4a0b      	ldr	r2, [pc, #44]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab70:	6453      	str	r3, [r2, #68]	; 0x44
 800ab72:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <HAL_PCD_MspInit+0xbc>)
 800ab74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2100      	movs	r1, #0
 800ab82:	2043      	movs	r0, #67	; 0x43
 800ab84:	f7f6 fee9 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab88:	2043      	movs	r0, #67	; 0x43
 800ab8a:	f7f6 ff02 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab8e:	bf00      	nop
 800ab90:	3728      	adds	r7, #40	; 0x28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	40023800 	.word	0x40023800
 800ab9c:	40020000 	.word	0x40020000

0800aba0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800abb4:	4619      	mov	r1, r3
 800abb6:	4610      	mov	r0, r2
 800abb8:	f7fd fc05 	bl	80083c6 <USBD_LL_SetupStage>
}
 800abbc:	bf00      	nop
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800abd6:	78fa      	ldrb	r2, [r7, #3]
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	4619      	mov	r1, r3
 800abee:	f7fd fc35 	bl	800845c <USBD_LL_DataOutStage>
}
 800abf2:	bf00      	nop
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	460b      	mov	r3, r1
 800ac04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4613      	mov	r3, r2
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	1a9b      	subs	r3, r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	3348      	adds	r3, #72	; 0x48
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	4619      	mov	r1, r3
 800ac22:	f7fd fc8c 	bl	800853e <USBD_LL_DataInStage>
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fd fd9a 	bl	8008776 <USBD_LL_SOF>
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac52:	2301      	movs	r3, #1
 800ac54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73fb      	strb	r3, [r7, #15]
 800ac62:	e008      	b.n	800ac76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d102      	bne.n	800ac72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	73fb      	strb	r3, [r7, #15]
 800ac70:	e001      	b.n	800ac76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac72:	f7ff fa8d 	bl	800a190 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac7c:	7bfa      	ldrb	r2, [r7, #15]
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fd fd42 	bl	800870a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fd fcfb 	bl	8008688 <USBD_LL_Reset>
}
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fd fd3d 	bl	800872a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6812      	ldr	r2, [r2, #0]
 800acbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a1b      	ldr	r3, [r3, #32]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acd0:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <HAL_PCD_SuspendCallback+0x48>)
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	4a03      	ldr	r2, [pc, #12]	; (800ace4 <HAL_PCD_SuspendCallback+0x48>)
 800acd6:	f043 0306 	orr.w	r3, r3, #6
 800acda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acdc:	bf00      	nop
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	e000ed00 	.word	0xe000ed00

0800ace8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fd fd2c 	bl	8008754 <USBD_LL_Resume>
}
 800acfc:	bf00      	nop
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad16:	78fa      	ldrb	r2, [r7, #3]
 800ad18:	4611      	mov	r1, r2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fd fd52 	bl	80087c4 <USBD_LL_IsoOUTIncomplete>
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fd fd33 	bl	80087aa <USBD_LL_IsoINIncomplete>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fd fd3f 	bl	80087de <USBD_LL_DevConnected>
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd fd3c 	bl	80087f4 <USBD_LL_DevDisconnected>
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d13c      	bne.n	800ae0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad94:	4a20      	ldr	r2, [pc, #128]	; (800ae18 <USBD_LL_Init+0x94>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <USBD_LL_Init+0x94>)
 800ada0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ada4:	4b1c      	ldr	r3, [pc, #112]	; (800ae18 <USBD_LL_Init+0x94>)
 800ada6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800adaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800adac:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <USBD_LL_Init+0x94>)
 800adae:	2204      	movs	r2, #4
 800adb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800adb2:	4b19      	ldr	r3, [pc, #100]	; (800ae18 <USBD_LL_Init+0x94>)
 800adb4:	2202      	movs	r2, #2
 800adb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800adb8:	4b17      	ldr	r3, [pc, #92]	; (800ae18 <USBD_LL_Init+0x94>)
 800adba:	2200      	movs	r2, #0
 800adbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800adbe:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <USBD_LL_Init+0x94>)
 800adc0:	2202      	movs	r2, #2
 800adc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adc4:	4b14      	ldr	r3, [pc, #80]	; (800ae18 <USBD_LL_Init+0x94>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adca:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <USBD_LL_Init+0x94>)
 800adcc:	2200      	movs	r2, #0
 800adce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800add0:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <USBD_LL_Init+0x94>)
 800add2:	2200      	movs	r2, #0
 800add4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800add6:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <USBD_LL_Init+0x94>)
 800add8:	2200      	movs	r2, #0
 800adda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800addc:	4b0e      	ldr	r3, [pc, #56]	; (800ae18 <USBD_LL_Init+0x94>)
 800adde:	2200      	movs	r2, #0
 800ade0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ade2:	480d      	ldr	r0, [pc, #52]	; (800ae18 <USBD_LL_Init+0x94>)
 800ade4:	f7f8 fc0e 	bl	8003604 <HAL_PCD_Init>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800adee:	f7ff f9cf 	bl	800a190 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800adf2:	2180      	movs	r1, #128	; 0x80
 800adf4:	4808      	ldr	r0, [pc, #32]	; (800ae18 <USBD_LL_Init+0x94>)
 800adf6:	f7f9 fd72 	bl	80048de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800adfa:	2240      	movs	r2, #64	; 0x40
 800adfc:	2100      	movs	r1, #0
 800adfe:	4806      	ldr	r0, [pc, #24]	; (800ae18 <USBD_LL_Init+0x94>)
 800ae00:	f7f9 fd26 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae04:	2280      	movs	r2, #128	; 0x80
 800ae06:	2101      	movs	r1, #1
 800ae08:	4803      	ldr	r0, [pc, #12]	; (800ae18 <USBD_LL_Init+0x94>)
 800ae0a:	f7f9 fd21 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	200019d0 	.word	0x200019d0

0800ae1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f8 fd03 	bl	800383e <HAL_PCD_Start>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f92e 	bl	800b0a0 <USBD_Get_USB_Status>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4603      	mov	r3, r0
 800ae62:	70fb      	strb	r3, [r7, #3]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70bb      	strb	r3, [r7, #2]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ae7a:	78bb      	ldrb	r3, [r7, #2]
 800ae7c:	883a      	ldrh	r2, [r7, #0]
 800ae7e:	78f9      	ldrb	r1, [r7, #3]
 800ae80:	f7f9 f8d8 	bl	8004034 <HAL_PCD_EP_Open>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f908 	bl	800b0a0 <USBD_Get_USB_Status>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	460b      	mov	r3, r1
 800aea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aeb8:	78fa      	ldrb	r2, [r7, #3]
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f9 f921 	bl	8004104 <HAL_PCD_EP_Close>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f000 f8e9 	bl	800b0a0 <USBD_Get_USB_Status>
 800aece:	4603      	mov	r3, r0
 800aed0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aef6:	78fa      	ldrb	r2, [r7, #3]
 800aef8:	4611      	mov	r1, r2
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f9 f9f9 	bl	80042f2 <HAL_PCD_EP_SetStall>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	4618      	mov	r0, r3
 800af08:	f000 f8ca 	bl	800b0a0 <USBD_Get_USB_Status>
 800af0c:	4603      	mov	r3, r0
 800af0e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800af10:	7bbb      	ldrb	r3, [r7, #14]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	460b      	mov	r3, r1
 800af24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800af34:	78fa      	ldrb	r2, [r7, #3]
 800af36:	4611      	mov	r1, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f9 fa3e 	bl	80043ba <HAL_PCD_EP_ClrStall>
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 f8ab 	bl	800b0a0 <USBD_Get_USB_Status>
 800af4a:	4603      	mov	r3, r0
 800af4c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	460b      	mov	r3, r1
 800af62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800af6a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800af6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af70:	2b00      	cmp	r3, #0
 800af72:	da0b      	bge.n	800af8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af7a:	68f9      	ldr	r1, [r7, #12]
 800af7c:	4613      	mov	r3, r2
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	1a9b      	subs	r3, r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	333e      	adds	r3, #62	; 0x3e
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	e00b      	b.n	800afa4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af92:	68f9      	ldr	r1, [r7, #12]
 800af94:	4613      	mov	r3, r2
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	1a9b      	subs	r3, r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	440b      	add	r3, r1
 800af9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800afa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800afca:	78fa      	ldrb	r2, [r7, #3]
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7f9 f80b 	bl	8003fea <HAL_PCD_SetAddress>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd8:	7bfb      	ldrb	r3, [r7, #15]
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f860 	bl	800b0a0 <USBD_Get_USB_Status>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b086      	sub	sp, #24
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	461a      	mov	r2, r3
 800affa:	460b      	mov	r3, r1
 800affc:	72fb      	strb	r3, [r7, #11]
 800affe:	4613      	mov	r3, r2
 800b000:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b010:	893b      	ldrh	r3, [r7, #8]
 800b012:	7af9      	ldrb	r1, [r7, #11]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	f7f9 f922 	bl	800425e <HAL_PCD_EP_Transmit>
 800b01a:	4603      	mov	r3, r0
 800b01c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800b01e:	7dfb      	ldrb	r3, [r7, #23]
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f83d 	bl	800b0a0 <USBD_Get_USB_Status>
 800b026:	4603      	mov	r3, r0
 800b028:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b02a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	607a      	str	r2, [r7, #4]
 800b03e:	461a      	mov	r2, r3
 800b040:	460b      	mov	r3, r1
 800b042:	72fb      	strb	r3, [r7, #11]
 800b044:	4613      	mov	r3, r2
 800b046:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b056:	893b      	ldrh	r3, [r7, #8]
 800b058:	7af9      	ldrb	r1, [r7, #11]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	f7f9 f89c 	bl	8004198 <HAL_PCD_EP_Receive>
 800b060:	4603      	mov	r3, r0
 800b062:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f81a 	bl	800b0a0 <USBD_Get_USB_Status>
 800b06c:	4603      	mov	r3, r0
 800b06e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800b070:	7dbb      	ldrb	r3, [r7, #22]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	460b      	mov	r3, r1
 800b084:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b08c:	78fa      	ldrb	r2, [r7, #3]
 800b08e:	4611      	mov	r1, r2
 800b090:	4618      	mov	r0, r3
 800b092:	f7f9 f8cc 	bl	800422e <HAL_PCD_EP_GetRxCount>
 800b096:	4603      	mov	r3, r0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	d817      	bhi.n	800b0e4 <USBD_Get_USB_Status+0x44>
 800b0b4:	a201      	add	r2, pc, #4	; (adr r2, 800b0bc <USBD_Get_USB_Status+0x1c>)
 800b0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ba:	bf00      	nop
 800b0bc:	0800b0cd 	.word	0x0800b0cd
 800b0c0:	0800b0d3 	.word	0x0800b0d3
 800b0c4:	0800b0d9 	.word	0x0800b0d9
 800b0c8:	0800b0df 	.word	0x0800b0df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d0:	e00b      	b.n	800b0ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d6:	e008      	b.n	800b0ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	73fb      	strb	r3, [r7, #15]
    break;
 800b0dc:	e005      	b.n	800b0ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0de:	2302      	movs	r3, #2
 800b0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e2:	e002      	b.n	800b0ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0e8:	bf00      	nop
  }
  return usb_status;
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2212      	movs	r2, #18
 800b108:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b10a:	4b03      	ldr	r3, [pc, #12]	; (800b118 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	20000148 	.word	0x20000148

0800b11c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	6039      	str	r1, [r7, #0]
 800b126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2204      	movs	r2, #4
 800b12c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b12e:	4b03      	ldr	r3, [pc, #12]	; (800b13c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	2000015c 	.word	0x2000015c

0800b140 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b14c:	79fb      	ldrb	r3, [r7, #7]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d105      	bne.n	800b15e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4907      	ldr	r1, [pc, #28]	; (800b174 <USBD_FS_ProductStrDescriptor+0x34>)
 800b156:	4808      	ldr	r0, [pc, #32]	; (800b178 <USBD_FS_ProductStrDescriptor+0x38>)
 800b158:	f7fe f824 	bl	80091a4 <USBD_GetString>
 800b15c:	e004      	b.n	800b168 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	4904      	ldr	r1, [pc, #16]	; (800b174 <USBD_FS_ProductStrDescriptor+0x34>)
 800b162:	4805      	ldr	r0, [pc, #20]	; (800b178 <USBD_FS_ProductStrDescriptor+0x38>)
 800b164:	f7fe f81e 	bl	80091a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20001dd8 	.word	0x20001dd8
 800b178:	0800dfe8 	.word	0x0800dfe8

0800b17c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	4603      	mov	r3, r0
 800b184:	6039      	str	r1, [r7, #0]
 800b186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	4904      	ldr	r1, [pc, #16]	; (800b19c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b18c:	4804      	ldr	r0, [pc, #16]	; (800b1a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b18e:	f7fe f809 	bl	80091a4 <USBD_GetString>
  return USBD_StrDesc;
 800b192:	4b02      	ldr	r3, [pc, #8]	; (800b19c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b194:	4618      	mov	r0, r3
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	20001dd8 	.word	0x20001dd8
 800b1a0:	0800e000 	.word	0x0800e000

0800b1a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	6039      	str	r1, [r7, #0]
 800b1ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	221a      	movs	r2, #26
 800b1b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1b6:	f000 f843 	bl	800b240 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1ba:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20000160 	.word	0x20000160

0800b1c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	6039      	str	r1, [r7, #0]
 800b1d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d105      	bne.n	800b1e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	4907      	ldr	r1, [pc, #28]	; (800b1fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1de:	4808      	ldr	r0, [pc, #32]	; (800b200 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1e0:	f7fd ffe0 	bl	80091a4 <USBD_GetString>
 800b1e4:	e004      	b.n	800b1f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	4904      	ldr	r1, [pc, #16]	; (800b1fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b1ea:	4805      	ldr	r0, [pc, #20]	; (800b200 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b1ec:	f7fd ffda 	bl	80091a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1f0:	4b02      	ldr	r3, [pc, #8]	; (800b1fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20001dd8 	.word	0x20001dd8
 800b200:	0800e014 	.word	0x0800e014

0800b204 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	6039      	str	r1, [r7, #0]
 800b20e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b210:	79fb      	ldrb	r3, [r7, #7]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d105      	bne.n	800b222 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	4907      	ldr	r1, [pc, #28]	; (800b238 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b21a:	4808      	ldr	r0, [pc, #32]	; (800b23c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b21c:	f7fd ffc2 	bl	80091a4 <USBD_GetString>
 800b220:	e004      	b.n	800b22c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	4904      	ldr	r1, [pc, #16]	; (800b238 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b226:	4805      	ldr	r0, [pc, #20]	; (800b23c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b228:	f7fd ffbc 	bl	80091a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b22c:	4b02      	ldr	r3, [pc, #8]	; (800b238 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20001dd8 	.word	0x20001dd8
 800b23c:	0800e020 	.word	0x0800e020

0800b240 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b246:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <Get_SerialNum+0x44>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b24c:	4b0e      	ldr	r3, [pc, #56]	; (800b288 <Get_SerialNum+0x48>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b252:	4b0e      	ldr	r3, [pc, #56]	; (800b28c <Get_SerialNum+0x4c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4413      	add	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d009      	beq.n	800b27a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b266:	2208      	movs	r2, #8
 800b268:	4909      	ldr	r1, [pc, #36]	; (800b290 <Get_SerialNum+0x50>)
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 f814 	bl	800b298 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b270:	2204      	movs	r2, #4
 800b272:	4908      	ldr	r1, [pc, #32]	; (800b294 <Get_SerialNum+0x54>)
 800b274:	68b8      	ldr	r0, [r7, #8]
 800b276:	f000 f80f 	bl	800b298 <IntToUnicode>
  }
}
 800b27a:	bf00      	nop
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	1fff7a10 	.word	0x1fff7a10
 800b288:	1fff7a14 	.word	0x1fff7a14
 800b28c:	1fff7a18 	.word	0x1fff7a18
 800b290:	20000162 	.word	0x20000162
 800b294:	20000172 	.word	0x20000172

0800b298 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b298:	b480      	push	{r7}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]
 800b2ae:	e027      	b.n	800b300 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	0f1b      	lsrs	r3, r3, #28
 800b2b4:	2b09      	cmp	r3, #9
 800b2b6:	d80b      	bhi.n	800b2d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0f1b      	lsrs	r3, r3, #28
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3230      	adds	r2, #48	; 0x30
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	e00a      	b.n	800b2e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	0f1b      	lsrs	r3, r3, #28
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	4619      	mov	r1, r3
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	440b      	add	r3, r1
 800b2e0:	3237      	adds	r2, #55	; 0x37
 800b2e2:	b2d2      	uxtb	r2, r2
 800b2e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	75fb      	strb	r3, [r7, #23]
 800b300:	7dfa      	ldrb	r2, [r7, #23]
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	429a      	cmp	r2, r3
 800b306:	d3d3      	bcc.n	800b2b0 <IntToUnicode+0x18>
  }
}
 800b308:	bf00      	nop
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b34c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b318:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b31a:	e003      	b.n	800b324 <LoopCopyDataInit>

0800b31c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b31c:	4b0c      	ldr	r3, [pc, #48]	; (800b350 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b31e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b320:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b322:	3104      	adds	r1, #4

0800b324 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b324:	480b      	ldr	r0, [pc, #44]	; (800b354 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b326:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b328:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b32a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b32c:	d3f6      	bcc.n	800b31c <CopyDataInit>
  ldr  r2, =_sbss
 800b32e:	4a0b      	ldr	r2, [pc, #44]	; (800b35c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b330:	e002      	b.n	800b338 <LoopFillZerobss>

0800b332 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b332:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b334:	f842 3b04 	str.w	r3, [r2], #4

0800b338 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b338:	4b09      	ldr	r3, [pc, #36]	; (800b360 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b33a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b33c:	d3f9      	bcc.n	800b332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b33e:	f7ff fad9 	bl	800a8f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b342:	f000 f9d1 	bl	800b6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b346:	f7fe f84b 	bl	80093e0 <main>
  bx  lr    
 800b34a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b34c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b350:	0800e320 	.word	0x0800e320
  ldr  r0, =_sdata
 800b354:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b358:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800b35c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800b360:	20001fdc 	.word	0x20001fdc

0800b364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b364:	e7fe      	b.n	800b364 <ADC_IRQHandler>
	...

0800b368 <__errno>:
 800b368:	4b01      	ldr	r3, [pc, #4]	; (800b370 <__errno+0x8>)
 800b36a:	6818      	ldr	r0, [r3, #0]
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	2000017c 	.word	0x2000017c

0800b374 <__sflush_r>:
 800b374:	898a      	ldrh	r2, [r1, #12]
 800b376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37a:	4605      	mov	r5, r0
 800b37c:	0710      	lsls	r0, r2, #28
 800b37e:	460c      	mov	r4, r1
 800b380:	d458      	bmi.n	800b434 <__sflush_r+0xc0>
 800b382:	684b      	ldr	r3, [r1, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	dc05      	bgt.n	800b394 <__sflush_r+0x20>
 800b388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dc02      	bgt.n	800b394 <__sflush_r+0x20>
 800b38e:	2000      	movs	r0, #0
 800b390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b396:	2e00      	cmp	r6, #0
 800b398:	d0f9      	beq.n	800b38e <__sflush_r+0x1a>
 800b39a:	2300      	movs	r3, #0
 800b39c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3a0:	682f      	ldr	r7, [r5, #0]
 800b3a2:	6a21      	ldr	r1, [r4, #32]
 800b3a4:	602b      	str	r3, [r5, #0]
 800b3a6:	d032      	beq.n	800b40e <__sflush_r+0x9a>
 800b3a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	075a      	lsls	r2, r3, #29
 800b3ae:	d505      	bpl.n	800b3bc <__sflush_r+0x48>
 800b3b0:	6863      	ldr	r3, [r4, #4]
 800b3b2:	1ac0      	subs	r0, r0, r3
 800b3b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3b6:	b10b      	cbz	r3, 800b3bc <__sflush_r+0x48>
 800b3b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3ba:	1ac0      	subs	r0, r0, r3
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3c2:	6a21      	ldr	r1, [r4, #32]
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b0      	blx	r6
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	d106      	bne.n	800b3dc <__sflush_r+0x68>
 800b3ce:	6829      	ldr	r1, [r5, #0]
 800b3d0:	291d      	cmp	r1, #29
 800b3d2:	d848      	bhi.n	800b466 <__sflush_r+0xf2>
 800b3d4:	4a29      	ldr	r2, [pc, #164]	; (800b47c <__sflush_r+0x108>)
 800b3d6:	40ca      	lsrs	r2, r1
 800b3d8:	07d6      	lsls	r6, r2, #31
 800b3da:	d544      	bpl.n	800b466 <__sflush_r+0xf2>
 800b3dc:	2200      	movs	r2, #0
 800b3de:	6062      	str	r2, [r4, #4]
 800b3e0:	04d9      	lsls	r1, r3, #19
 800b3e2:	6922      	ldr	r2, [r4, #16]
 800b3e4:	6022      	str	r2, [r4, #0]
 800b3e6:	d504      	bpl.n	800b3f2 <__sflush_r+0x7e>
 800b3e8:	1c42      	adds	r2, r0, #1
 800b3ea:	d101      	bne.n	800b3f0 <__sflush_r+0x7c>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b903      	cbnz	r3, 800b3f2 <__sflush_r+0x7e>
 800b3f0:	6560      	str	r0, [r4, #84]	; 0x54
 800b3f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3f4:	602f      	str	r7, [r5, #0]
 800b3f6:	2900      	cmp	r1, #0
 800b3f8:	d0c9      	beq.n	800b38e <__sflush_r+0x1a>
 800b3fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3fe:	4299      	cmp	r1, r3
 800b400:	d002      	beq.n	800b408 <__sflush_r+0x94>
 800b402:	4628      	mov	r0, r5
 800b404:	f000 f9ac 	bl	800b760 <_free_r>
 800b408:	2000      	movs	r0, #0
 800b40a:	6360      	str	r0, [r4, #52]	; 0x34
 800b40c:	e7c0      	b.n	800b390 <__sflush_r+0x1c>
 800b40e:	2301      	movs	r3, #1
 800b410:	4628      	mov	r0, r5
 800b412:	47b0      	blx	r6
 800b414:	1c41      	adds	r1, r0, #1
 800b416:	d1c8      	bne.n	800b3aa <__sflush_r+0x36>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0c5      	beq.n	800b3aa <__sflush_r+0x36>
 800b41e:	2b1d      	cmp	r3, #29
 800b420:	d001      	beq.n	800b426 <__sflush_r+0xb2>
 800b422:	2b16      	cmp	r3, #22
 800b424:	d101      	bne.n	800b42a <__sflush_r+0xb6>
 800b426:	602f      	str	r7, [r5, #0]
 800b428:	e7b1      	b.n	800b38e <__sflush_r+0x1a>
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	e7ad      	b.n	800b390 <__sflush_r+0x1c>
 800b434:	690f      	ldr	r7, [r1, #16]
 800b436:	2f00      	cmp	r7, #0
 800b438:	d0a9      	beq.n	800b38e <__sflush_r+0x1a>
 800b43a:	0793      	lsls	r3, r2, #30
 800b43c:	680e      	ldr	r6, [r1, #0]
 800b43e:	bf08      	it	eq
 800b440:	694b      	ldreq	r3, [r1, #20]
 800b442:	600f      	str	r7, [r1, #0]
 800b444:	bf18      	it	ne
 800b446:	2300      	movne	r3, #0
 800b448:	eba6 0807 	sub.w	r8, r6, r7
 800b44c:	608b      	str	r3, [r1, #8]
 800b44e:	f1b8 0f00 	cmp.w	r8, #0
 800b452:	dd9c      	ble.n	800b38e <__sflush_r+0x1a>
 800b454:	4643      	mov	r3, r8
 800b456:	463a      	mov	r2, r7
 800b458:	6a21      	ldr	r1, [r4, #32]
 800b45a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b45c:	4628      	mov	r0, r5
 800b45e:	47b0      	blx	r6
 800b460:	2800      	cmp	r0, #0
 800b462:	dc06      	bgt.n	800b472 <__sflush_r+0xfe>
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e78e      	b.n	800b390 <__sflush_r+0x1c>
 800b472:	4407      	add	r7, r0
 800b474:	eba8 0800 	sub.w	r8, r8, r0
 800b478:	e7e9      	b.n	800b44e <__sflush_r+0xda>
 800b47a:	bf00      	nop
 800b47c:	20400001 	.word	0x20400001

0800b480 <_fflush_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	690b      	ldr	r3, [r1, #16]
 800b484:	4605      	mov	r5, r0
 800b486:	460c      	mov	r4, r1
 800b488:	b1db      	cbz	r3, 800b4c2 <_fflush_r+0x42>
 800b48a:	b118      	cbz	r0, 800b494 <_fflush_r+0x14>
 800b48c:	6983      	ldr	r3, [r0, #24]
 800b48e:	b90b      	cbnz	r3, 800b494 <_fflush_r+0x14>
 800b490:	f000 f872 	bl	800b578 <__sinit>
 800b494:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <_fflush_r+0x48>)
 800b496:	429c      	cmp	r4, r3
 800b498:	d109      	bne.n	800b4ae <_fflush_r+0x2e>
 800b49a:	686c      	ldr	r4, [r5, #4]
 800b49c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a0:	b17b      	cbz	r3, 800b4c2 <_fflush_r+0x42>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4aa:	f7ff bf63 	b.w	800b374 <__sflush_r>
 800b4ae:	4b07      	ldr	r3, [pc, #28]	; (800b4cc <_fflush_r+0x4c>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	d101      	bne.n	800b4b8 <_fflush_r+0x38>
 800b4b4:	68ac      	ldr	r4, [r5, #8]
 800b4b6:	e7f1      	b.n	800b49c <_fflush_r+0x1c>
 800b4b8:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <_fflush_r+0x50>)
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	bf08      	it	eq
 800b4be:	68ec      	ldreq	r4, [r5, #12]
 800b4c0:	e7ec      	b.n	800b49c <_fflush_r+0x1c>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	bd38      	pop	{r3, r4, r5, pc}
 800b4c6:	bf00      	nop
 800b4c8:	0800e070 	.word	0x0800e070
 800b4cc:	0800e090 	.word	0x0800e090
 800b4d0:	0800e050 	.word	0x0800e050

0800b4d4 <fflush>:
 800b4d4:	4601      	mov	r1, r0
 800b4d6:	b920      	cbnz	r0, 800b4e2 <fflush+0xe>
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <fflush+0x18>)
 800b4da:	4905      	ldr	r1, [pc, #20]	; (800b4f0 <fflush+0x1c>)
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f000 b8d3 	b.w	800b688 <_fwalk_reent>
 800b4e2:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <fflush+0x20>)
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	f7ff bfcb 	b.w	800b480 <_fflush_r>
 800b4ea:	bf00      	nop
 800b4ec:	0800e0b0 	.word	0x0800e0b0
 800b4f0:	0800b481 	.word	0x0800b481
 800b4f4:	2000017c 	.word	0x2000017c

0800b4f8 <std>:
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	b510      	push	{r4, lr}
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b502:	6083      	str	r3, [r0, #8]
 800b504:	8181      	strh	r1, [r0, #12]
 800b506:	6643      	str	r3, [r0, #100]	; 0x64
 800b508:	81c2      	strh	r2, [r0, #14]
 800b50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b50e:	6183      	str	r3, [r0, #24]
 800b510:	4619      	mov	r1, r3
 800b512:	2208      	movs	r2, #8
 800b514:	305c      	adds	r0, #92	; 0x5c
 800b516:	f000 f91b 	bl	800b750 <memset>
 800b51a:	4b05      	ldr	r3, [pc, #20]	; (800b530 <std+0x38>)
 800b51c:	6263      	str	r3, [r4, #36]	; 0x24
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <std+0x3c>)
 800b520:	62a3      	str	r3, [r4, #40]	; 0x28
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <std+0x40>)
 800b524:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b526:	4b05      	ldr	r3, [pc, #20]	; (800b53c <std+0x44>)
 800b528:	6224      	str	r4, [r4, #32]
 800b52a:	6323      	str	r3, [r4, #48]	; 0x30
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	bf00      	nop
 800b530:	0800c3dd 	.word	0x0800c3dd
 800b534:	0800c3ff 	.word	0x0800c3ff
 800b538:	0800c437 	.word	0x0800c437
 800b53c:	0800c45b 	.word	0x0800c45b

0800b540 <_cleanup_r>:
 800b540:	4901      	ldr	r1, [pc, #4]	; (800b548 <_cleanup_r+0x8>)
 800b542:	f000 b8a1 	b.w	800b688 <_fwalk_reent>
 800b546:	bf00      	nop
 800b548:	0800b481 	.word	0x0800b481

0800b54c <__sfmoreglue>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	1e4a      	subs	r2, r1, #1
 800b550:	2568      	movs	r5, #104	; 0x68
 800b552:	4355      	muls	r5, r2
 800b554:	460e      	mov	r6, r1
 800b556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b55a:	f000 f94f 	bl	800b7fc <_malloc_r>
 800b55e:	4604      	mov	r4, r0
 800b560:	b140      	cbz	r0, 800b574 <__sfmoreglue+0x28>
 800b562:	2100      	movs	r1, #0
 800b564:	e9c0 1600 	strd	r1, r6, [r0]
 800b568:	300c      	adds	r0, #12
 800b56a:	60a0      	str	r0, [r4, #8]
 800b56c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b570:	f000 f8ee 	bl	800b750 <memset>
 800b574:	4620      	mov	r0, r4
 800b576:	bd70      	pop	{r4, r5, r6, pc}

0800b578 <__sinit>:
 800b578:	6983      	ldr	r3, [r0, #24]
 800b57a:	b510      	push	{r4, lr}
 800b57c:	4604      	mov	r4, r0
 800b57e:	bb33      	cbnz	r3, 800b5ce <__sinit+0x56>
 800b580:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b584:	6503      	str	r3, [r0, #80]	; 0x50
 800b586:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <__sinit+0x58>)
 800b588:	4a12      	ldr	r2, [pc, #72]	; (800b5d4 <__sinit+0x5c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6282      	str	r2, [r0, #40]	; 0x28
 800b58e:	4298      	cmp	r0, r3
 800b590:	bf04      	itt	eq
 800b592:	2301      	moveq	r3, #1
 800b594:	6183      	streq	r3, [r0, #24]
 800b596:	f000 f81f 	bl	800b5d8 <__sfp>
 800b59a:	6060      	str	r0, [r4, #4]
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 f81b 	bl	800b5d8 <__sfp>
 800b5a2:	60a0      	str	r0, [r4, #8]
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 f817 	bl	800b5d8 <__sfp>
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	60e0      	str	r0, [r4, #12]
 800b5ae:	2104      	movs	r1, #4
 800b5b0:	6860      	ldr	r0, [r4, #4]
 800b5b2:	f7ff ffa1 	bl	800b4f8 <std>
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	2109      	movs	r1, #9
 800b5ba:	68a0      	ldr	r0, [r4, #8]
 800b5bc:	f7ff ff9c 	bl	800b4f8 <std>
 800b5c0:	2202      	movs	r2, #2
 800b5c2:	2112      	movs	r1, #18
 800b5c4:	68e0      	ldr	r0, [r4, #12]
 800b5c6:	f7ff ff97 	bl	800b4f8 <std>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	61a3      	str	r3, [r4, #24]
 800b5ce:	bd10      	pop	{r4, pc}
 800b5d0:	0800e0b0 	.word	0x0800e0b0
 800b5d4:	0800b541 	.word	0x0800b541

0800b5d8 <__sfp>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <__sfp+0x70>)
 800b5dc:	681e      	ldr	r6, [r3, #0]
 800b5de:	69b3      	ldr	r3, [r6, #24]
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	b913      	cbnz	r3, 800b5ea <__sfp+0x12>
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff ffc7 	bl	800b578 <__sinit>
 800b5ea:	3648      	adds	r6, #72	; 0x48
 800b5ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	d503      	bpl.n	800b5fc <__sfp+0x24>
 800b5f4:	6833      	ldr	r3, [r6, #0]
 800b5f6:	b133      	cbz	r3, 800b606 <__sfp+0x2e>
 800b5f8:	6836      	ldr	r6, [r6, #0]
 800b5fa:	e7f7      	b.n	800b5ec <__sfp+0x14>
 800b5fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b600:	b16d      	cbz	r5, 800b61e <__sfp+0x46>
 800b602:	3468      	adds	r4, #104	; 0x68
 800b604:	e7f4      	b.n	800b5f0 <__sfp+0x18>
 800b606:	2104      	movs	r1, #4
 800b608:	4638      	mov	r0, r7
 800b60a:	f7ff ff9f 	bl	800b54c <__sfmoreglue>
 800b60e:	6030      	str	r0, [r6, #0]
 800b610:	2800      	cmp	r0, #0
 800b612:	d1f1      	bne.n	800b5f8 <__sfp+0x20>
 800b614:	230c      	movs	r3, #12
 800b616:	603b      	str	r3, [r7, #0]
 800b618:	4604      	mov	r4, r0
 800b61a:	4620      	mov	r0, r4
 800b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b61e:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <__sfp+0x74>)
 800b620:	6665      	str	r5, [r4, #100]	; 0x64
 800b622:	e9c4 5500 	strd	r5, r5, [r4]
 800b626:	60a5      	str	r5, [r4, #8]
 800b628:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b62c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b630:	2208      	movs	r2, #8
 800b632:	4629      	mov	r1, r5
 800b634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b638:	f000 f88a 	bl	800b750 <memset>
 800b63c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b644:	e7e9      	b.n	800b61a <__sfp+0x42>
 800b646:	bf00      	nop
 800b648:	0800e0b0 	.word	0x0800e0b0
 800b64c:	ffff0001 	.word	0xffff0001

0800b650 <_fwalk>:
 800b650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b654:	4688      	mov	r8, r1
 800b656:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b65a:	2600      	movs	r6, #0
 800b65c:	b914      	cbnz	r4, 800b664 <_fwalk+0x14>
 800b65e:	4630      	mov	r0, r6
 800b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b664:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b668:	3f01      	subs	r7, #1
 800b66a:	d501      	bpl.n	800b670 <_fwalk+0x20>
 800b66c:	6824      	ldr	r4, [r4, #0]
 800b66e:	e7f5      	b.n	800b65c <_fwalk+0xc>
 800b670:	89ab      	ldrh	r3, [r5, #12]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d906      	bls.n	800b684 <_fwalk+0x34>
 800b676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b67a:	3301      	adds	r3, #1
 800b67c:	d002      	beq.n	800b684 <_fwalk+0x34>
 800b67e:	4628      	mov	r0, r5
 800b680:	47c0      	blx	r8
 800b682:	4306      	orrs	r6, r0
 800b684:	3568      	adds	r5, #104	; 0x68
 800b686:	e7ef      	b.n	800b668 <_fwalk+0x18>

0800b688 <_fwalk_reent>:
 800b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b68c:	4680      	mov	r8, r0
 800b68e:	4689      	mov	r9, r1
 800b690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b694:	2600      	movs	r6, #0
 800b696:	b914      	cbnz	r4, 800b69e <_fwalk_reent+0x16>
 800b698:	4630      	mov	r0, r6
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b6a2:	3f01      	subs	r7, #1
 800b6a4:	d501      	bpl.n	800b6aa <_fwalk_reent+0x22>
 800b6a6:	6824      	ldr	r4, [r4, #0]
 800b6a8:	e7f5      	b.n	800b696 <_fwalk_reent+0xe>
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d907      	bls.n	800b6c0 <_fwalk_reent+0x38>
 800b6b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	d003      	beq.n	800b6c0 <_fwalk_reent+0x38>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	47c8      	blx	r9
 800b6be:	4306      	orrs	r6, r0
 800b6c0:	3568      	adds	r5, #104	; 0x68
 800b6c2:	e7ee      	b.n	800b6a2 <_fwalk_reent+0x1a>

0800b6c4 <getchar>:
 800b6c4:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <getchar+0x20>)
 800b6c6:	b510      	push	{r4, lr}
 800b6c8:	681c      	ldr	r4, [r3, #0]
 800b6ca:	b124      	cbz	r4, 800b6d6 <getchar+0x12>
 800b6cc:	69a3      	ldr	r3, [r4, #24]
 800b6ce:	b913      	cbnz	r3, 800b6d6 <getchar+0x12>
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f7ff ff51 	bl	800b578 <__sinit>
 800b6d6:	6861      	ldr	r1, [r4, #4]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6de:	f001 bde7 	b.w	800d2b0 <_getc_r>
 800b6e2:	bf00      	nop
 800b6e4:	2000017c 	.word	0x2000017c

0800b6e8 <__libc_init_array>:
 800b6e8:	b570      	push	{r4, r5, r6, lr}
 800b6ea:	4e0d      	ldr	r6, [pc, #52]	; (800b720 <__libc_init_array+0x38>)
 800b6ec:	4c0d      	ldr	r4, [pc, #52]	; (800b724 <__libc_init_array+0x3c>)
 800b6ee:	1ba4      	subs	r4, r4, r6
 800b6f0:	10a4      	asrs	r4, r4, #2
 800b6f2:	2500      	movs	r5, #0
 800b6f4:	42a5      	cmp	r5, r4
 800b6f6:	d109      	bne.n	800b70c <__libc_init_array+0x24>
 800b6f8:	4e0b      	ldr	r6, [pc, #44]	; (800b728 <__libc_init_array+0x40>)
 800b6fa:	4c0c      	ldr	r4, [pc, #48]	; (800b72c <__libc_init_array+0x44>)
 800b6fc:	f002 fbd4 	bl	800dea8 <_init>
 800b700:	1ba4      	subs	r4, r4, r6
 800b702:	10a4      	asrs	r4, r4, #2
 800b704:	2500      	movs	r5, #0
 800b706:	42a5      	cmp	r5, r4
 800b708:	d105      	bne.n	800b716 <__libc_init_array+0x2e>
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b710:	4798      	blx	r3
 800b712:	3501      	adds	r5, #1
 800b714:	e7ee      	b.n	800b6f4 <__libc_init_array+0xc>
 800b716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b71a:	4798      	blx	r3
 800b71c:	3501      	adds	r5, #1
 800b71e:	e7f2      	b.n	800b706 <__libc_init_array+0x1e>
 800b720:	0800e318 	.word	0x0800e318
 800b724:	0800e318 	.word	0x0800e318
 800b728:	0800e318 	.word	0x0800e318
 800b72c:	0800e31c 	.word	0x0800e31c

0800b730 <malloc>:
 800b730:	4b02      	ldr	r3, [pc, #8]	; (800b73c <malloc+0xc>)
 800b732:	4601      	mov	r1, r0
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	f000 b861 	b.w	800b7fc <_malloc_r>
 800b73a:	bf00      	nop
 800b73c:	2000017c 	.word	0x2000017c

0800b740 <free>:
 800b740:	4b02      	ldr	r3, [pc, #8]	; (800b74c <free+0xc>)
 800b742:	4601      	mov	r1, r0
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	f000 b80b 	b.w	800b760 <_free_r>
 800b74a:	bf00      	nop
 800b74c:	2000017c 	.word	0x2000017c

0800b750 <memset>:
 800b750:	4402      	add	r2, r0
 800b752:	4603      	mov	r3, r0
 800b754:	4293      	cmp	r3, r2
 800b756:	d100      	bne.n	800b75a <memset+0xa>
 800b758:	4770      	bx	lr
 800b75a:	f803 1b01 	strb.w	r1, [r3], #1
 800b75e:	e7f9      	b.n	800b754 <memset+0x4>

0800b760 <_free_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4605      	mov	r5, r0
 800b764:	2900      	cmp	r1, #0
 800b766:	d045      	beq.n	800b7f4 <_free_r+0x94>
 800b768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76c:	1f0c      	subs	r4, r1, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfb8      	it	lt
 800b772:	18e4      	addlt	r4, r4, r3
 800b774:	f001 fe57 	bl	800d426 <__malloc_lock>
 800b778:	4a1f      	ldr	r2, [pc, #124]	; (800b7f8 <_free_r+0x98>)
 800b77a:	6813      	ldr	r3, [r2, #0]
 800b77c:	4610      	mov	r0, r2
 800b77e:	b933      	cbnz	r3, 800b78e <_free_r+0x2e>
 800b780:	6063      	str	r3, [r4, #4]
 800b782:	6014      	str	r4, [r2, #0]
 800b784:	4628      	mov	r0, r5
 800b786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b78a:	f001 be4d 	b.w	800d428 <__malloc_unlock>
 800b78e:	42a3      	cmp	r3, r4
 800b790:	d90c      	bls.n	800b7ac <_free_r+0x4c>
 800b792:	6821      	ldr	r1, [r4, #0]
 800b794:	1862      	adds	r2, r4, r1
 800b796:	4293      	cmp	r3, r2
 800b798:	bf04      	itt	eq
 800b79a:	681a      	ldreq	r2, [r3, #0]
 800b79c:	685b      	ldreq	r3, [r3, #4]
 800b79e:	6063      	str	r3, [r4, #4]
 800b7a0:	bf04      	itt	eq
 800b7a2:	1852      	addeq	r2, r2, r1
 800b7a4:	6022      	streq	r2, [r4, #0]
 800b7a6:	6004      	str	r4, [r0, #0]
 800b7a8:	e7ec      	b.n	800b784 <_free_r+0x24>
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	b10a      	cbz	r2, 800b7b4 <_free_r+0x54>
 800b7b0:	42a2      	cmp	r2, r4
 800b7b2:	d9fa      	bls.n	800b7aa <_free_r+0x4a>
 800b7b4:	6819      	ldr	r1, [r3, #0]
 800b7b6:	1858      	adds	r0, r3, r1
 800b7b8:	42a0      	cmp	r0, r4
 800b7ba:	d10b      	bne.n	800b7d4 <_free_r+0x74>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	4401      	add	r1, r0
 800b7c0:	1858      	adds	r0, r3, r1
 800b7c2:	4282      	cmp	r2, r0
 800b7c4:	6019      	str	r1, [r3, #0]
 800b7c6:	d1dd      	bne.n	800b784 <_free_r+0x24>
 800b7c8:	6810      	ldr	r0, [r2, #0]
 800b7ca:	6852      	ldr	r2, [r2, #4]
 800b7cc:	605a      	str	r2, [r3, #4]
 800b7ce:	4401      	add	r1, r0
 800b7d0:	6019      	str	r1, [r3, #0]
 800b7d2:	e7d7      	b.n	800b784 <_free_r+0x24>
 800b7d4:	d902      	bls.n	800b7dc <_free_r+0x7c>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	e7d3      	b.n	800b784 <_free_r+0x24>
 800b7dc:	6820      	ldr	r0, [r4, #0]
 800b7de:	1821      	adds	r1, r4, r0
 800b7e0:	428a      	cmp	r2, r1
 800b7e2:	bf04      	itt	eq
 800b7e4:	6811      	ldreq	r1, [r2, #0]
 800b7e6:	6852      	ldreq	r2, [r2, #4]
 800b7e8:	6062      	str	r2, [r4, #4]
 800b7ea:	bf04      	itt	eq
 800b7ec:	1809      	addeq	r1, r1, r0
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	605c      	str	r4, [r3, #4]
 800b7f2:	e7c7      	b.n	800b784 <_free_r+0x24>
 800b7f4:	bd38      	pop	{r3, r4, r5, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000388 	.word	0x20000388

0800b7fc <_malloc_r>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	1ccd      	adds	r5, r1, #3
 800b800:	f025 0503 	bic.w	r5, r5, #3
 800b804:	3508      	adds	r5, #8
 800b806:	2d0c      	cmp	r5, #12
 800b808:	bf38      	it	cc
 800b80a:	250c      	movcc	r5, #12
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	4606      	mov	r6, r0
 800b810:	db01      	blt.n	800b816 <_malloc_r+0x1a>
 800b812:	42a9      	cmp	r1, r5
 800b814:	d903      	bls.n	800b81e <_malloc_r+0x22>
 800b816:	230c      	movs	r3, #12
 800b818:	6033      	str	r3, [r6, #0]
 800b81a:	2000      	movs	r0, #0
 800b81c:	bd70      	pop	{r4, r5, r6, pc}
 800b81e:	f001 fe02 	bl	800d426 <__malloc_lock>
 800b822:	4a21      	ldr	r2, [pc, #132]	; (800b8a8 <_malloc_r+0xac>)
 800b824:	6814      	ldr	r4, [r2, #0]
 800b826:	4621      	mov	r1, r4
 800b828:	b991      	cbnz	r1, 800b850 <_malloc_r+0x54>
 800b82a:	4c20      	ldr	r4, [pc, #128]	; (800b8ac <_malloc_r+0xb0>)
 800b82c:	6823      	ldr	r3, [r4, #0]
 800b82e:	b91b      	cbnz	r3, 800b838 <_malloc_r+0x3c>
 800b830:	4630      	mov	r0, r6
 800b832:	f000 fd15 	bl	800c260 <_sbrk_r>
 800b836:	6020      	str	r0, [r4, #0]
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 fd10 	bl	800c260 <_sbrk_r>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d124      	bne.n	800b88e <_malloc_r+0x92>
 800b844:	230c      	movs	r3, #12
 800b846:	6033      	str	r3, [r6, #0]
 800b848:	4630      	mov	r0, r6
 800b84a:	f001 fded 	bl	800d428 <__malloc_unlock>
 800b84e:	e7e4      	b.n	800b81a <_malloc_r+0x1e>
 800b850:	680b      	ldr	r3, [r1, #0]
 800b852:	1b5b      	subs	r3, r3, r5
 800b854:	d418      	bmi.n	800b888 <_malloc_r+0x8c>
 800b856:	2b0b      	cmp	r3, #11
 800b858:	d90f      	bls.n	800b87a <_malloc_r+0x7e>
 800b85a:	600b      	str	r3, [r1, #0]
 800b85c:	50cd      	str	r5, [r1, r3]
 800b85e:	18cc      	adds	r4, r1, r3
 800b860:	4630      	mov	r0, r6
 800b862:	f001 fde1 	bl	800d428 <__malloc_unlock>
 800b866:	f104 000b 	add.w	r0, r4, #11
 800b86a:	1d23      	adds	r3, r4, #4
 800b86c:	f020 0007 	bic.w	r0, r0, #7
 800b870:	1ac3      	subs	r3, r0, r3
 800b872:	d0d3      	beq.n	800b81c <_malloc_r+0x20>
 800b874:	425a      	negs	r2, r3
 800b876:	50e2      	str	r2, [r4, r3]
 800b878:	e7d0      	b.n	800b81c <_malloc_r+0x20>
 800b87a:	428c      	cmp	r4, r1
 800b87c:	684b      	ldr	r3, [r1, #4]
 800b87e:	bf16      	itet	ne
 800b880:	6063      	strne	r3, [r4, #4]
 800b882:	6013      	streq	r3, [r2, #0]
 800b884:	460c      	movne	r4, r1
 800b886:	e7eb      	b.n	800b860 <_malloc_r+0x64>
 800b888:	460c      	mov	r4, r1
 800b88a:	6849      	ldr	r1, [r1, #4]
 800b88c:	e7cc      	b.n	800b828 <_malloc_r+0x2c>
 800b88e:	1cc4      	adds	r4, r0, #3
 800b890:	f024 0403 	bic.w	r4, r4, #3
 800b894:	42a0      	cmp	r0, r4
 800b896:	d005      	beq.n	800b8a4 <_malloc_r+0xa8>
 800b898:	1a21      	subs	r1, r4, r0
 800b89a:	4630      	mov	r0, r6
 800b89c:	f000 fce0 	bl	800c260 <_sbrk_r>
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d0cf      	beq.n	800b844 <_malloc_r+0x48>
 800b8a4:	6025      	str	r5, [r4, #0]
 800b8a6:	e7db      	b.n	800b860 <_malloc_r+0x64>
 800b8a8:	20000388 	.word	0x20000388
 800b8ac:	2000038c 	.word	0x2000038c

0800b8b0 <__cvt>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	ec55 4b10 	vmov	r4, r5, d0
 800b8b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b8ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	460e      	mov	r6, r1
 800b8c2:	4691      	mov	r9, r2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	bfb8      	it	lt
 800b8c8:	4622      	movlt	r2, r4
 800b8ca:	462b      	mov	r3, r5
 800b8cc:	f027 0720 	bic.w	r7, r7, #32
 800b8d0:	bfbb      	ittet	lt
 800b8d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8d6:	461d      	movlt	r5, r3
 800b8d8:	2300      	movge	r3, #0
 800b8da:	232d      	movlt	r3, #45	; 0x2d
 800b8dc:	bfb8      	it	lt
 800b8de:	4614      	movlt	r4, r2
 800b8e0:	2f46      	cmp	r7, #70	; 0x46
 800b8e2:	700b      	strb	r3, [r1, #0]
 800b8e4:	d004      	beq.n	800b8f0 <__cvt+0x40>
 800b8e6:	2f45      	cmp	r7, #69	; 0x45
 800b8e8:	d100      	bne.n	800b8ec <__cvt+0x3c>
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	2102      	movs	r1, #2
 800b8ee:	e000      	b.n	800b8f2 <__cvt+0x42>
 800b8f0:	2103      	movs	r1, #3
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	ab02      	add	r3, sp, #8
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	4653      	mov	r3, sl
 800b8fe:	ec45 4b10 	vmov	d0, r4, r5
 800b902:	f000 ff1d 	bl	800c740 <_dtoa_r>
 800b906:	2f47      	cmp	r7, #71	; 0x47
 800b908:	4680      	mov	r8, r0
 800b90a:	d102      	bne.n	800b912 <__cvt+0x62>
 800b90c:	f019 0f01 	tst.w	r9, #1
 800b910:	d026      	beq.n	800b960 <__cvt+0xb0>
 800b912:	2f46      	cmp	r7, #70	; 0x46
 800b914:	eb08 0906 	add.w	r9, r8, r6
 800b918:	d111      	bne.n	800b93e <__cvt+0x8e>
 800b91a:	f898 3000 	ldrb.w	r3, [r8]
 800b91e:	2b30      	cmp	r3, #48	; 0x30
 800b920:	d10a      	bne.n	800b938 <__cvt+0x88>
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	4620      	mov	r0, r4
 800b928:	4629      	mov	r1, r5
 800b92a:	f7f5 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b92e:	b918      	cbnz	r0, 800b938 <__cvt+0x88>
 800b930:	f1c6 0601 	rsb	r6, r6, #1
 800b934:	f8ca 6000 	str.w	r6, [sl]
 800b938:	f8da 3000 	ldr.w	r3, [sl]
 800b93c:	4499      	add	r9, r3
 800b93e:	2200      	movs	r2, #0
 800b940:	2300      	movs	r3, #0
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f5 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b94a:	b938      	cbnz	r0, 800b95c <__cvt+0xac>
 800b94c:	2230      	movs	r2, #48	; 0x30
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	454b      	cmp	r3, r9
 800b952:	d205      	bcs.n	800b960 <__cvt+0xb0>
 800b954:	1c59      	adds	r1, r3, #1
 800b956:	9103      	str	r1, [sp, #12]
 800b958:	701a      	strb	r2, [r3, #0]
 800b95a:	e7f8      	b.n	800b94e <__cvt+0x9e>
 800b95c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b964:	eba3 0308 	sub.w	r3, r3, r8
 800b968:	4640      	mov	r0, r8
 800b96a:	6013      	str	r3, [r2, #0]
 800b96c:	b004      	add	sp, #16
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b972 <__exponent>:
 800b972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b974:	2900      	cmp	r1, #0
 800b976:	4604      	mov	r4, r0
 800b978:	bfba      	itte	lt
 800b97a:	4249      	neglt	r1, r1
 800b97c:	232d      	movlt	r3, #45	; 0x2d
 800b97e:	232b      	movge	r3, #43	; 0x2b
 800b980:	2909      	cmp	r1, #9
 800b982:	f804 2b02 	strb.w	r2, [r4], #2
 800b986:	7043      	strb	r3, [r0, #1]
 800b988:	dd20      	ble.n	800b9cc <__exponent+0x5a>
 800b98a:	f10d 0307 	add.w	r3, sp, #7
 800b98e:	461f      	mov	r7, r3
 800b990:	260a      	movs	r6, #10
 800b992:	fb91 f5f6 	sdiv	r5, r1, r6
 800b996:	fb06 1115 	mls	r1, r6, r5, r1
 800b99a:	3130      	adds	r1, #48	; 0x30
 800b99c:	2d09      	cmp	r5, #9
 800b99e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9a2:	f103 32ff 	add.w	r2, r3, #4294967295
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	dc09      	bgt.n	800b9be <__exponent+0x4c>
 800b9aa:	3130      	adds	r1, #48	; 0x30
 800b9ac:	3b02      	subs	r3, #2
 800b9ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b9b2:	42bb      	cmp	r3, r7
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	d304      	bcc.n	800b9c2 <__exponent+0x50>
 800b9b8:	1a10      	subs	r0, r2, r0
 800b9ba:	b003      	add	sp, #12
 800b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9be:	4613      	mov	r3, r2
 800b9c0:	e7e7      	b.n	800b992 <__exponent+0x20>
 800b9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c6:	f804 2b01 	strb.w	r2, [r4], #1
 800b9ca:	e7f2      	b.n	800b9b2 <__exponent+0x40>
 800b9cc:	2330      	movs	r3, #48	; 0x30
 800b9ce:	4419      	add	r1, r3
 800b9d0:	7083      	strb	r3, [r0, #2]
 800b9d2:	1d02      	adds	r2, r0, #4
 800b9d4:	70c1      	strb	r1, [r0, #3]
 800b9d6:	e7ef      	b.n	800b9b8 <__exponent+0x46>

0800b9d8 <_printf_float>:
 800b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	b08d      	sub	sp, #52	; 0x34
 800b9de:	460c      	mov	r4, r1
 800b9e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	461f      	mov	r7, r3
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	f001 fc8d 	bl	800d308 <_localeconv_r>
 800b9ee:	6803      	ldr	r3, [r0, #0]
 800b9f0:	9304      	str	r3, [sp, #16]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7f4 fbec 	bl	80001d0 <strlen>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b9fc:	f8d8 3000 	ldr.w	r3, [r8]
 800ba00:	9005      	str	r0, [sp, #20]
 800ba02:	3307      	adds	r3, #7
 800ba04:	f023 0307 	bic.w	r3, r3, #7
 800ba08:	f103 0208 	add.w	r2, r3, #8
 800ba0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba10:	f8d4 b000 	ldr.w	fp, [r4]
 800ba14:	f8c8 2000 	str.w	r2, [r8]
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	4ba7      	ldr	r3, [pc, #668]	; (800bcd0 <_printf_float+0x2f8>)
 800ba34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba38:	f7f5 f878 	bl	8000b2c <__aeabi_dcmpun>
 800ba3c:	bb70      	cbnz	r0, 800ba9c <_printf_float+0xc4>
 800ba3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba42:	4ba3      	ldr	r3, [pc, #652]	; (800bcd0 <_printf_float+0x2f8>)
 800ba44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba48:	f7f5 f852 	bl	8000af0 <__aeabi_dcmple>
 800ba4c:	bb30      	cbnz	r0, 800ba9c <_printf_float+0xc4>
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2300      	movs	r3, #0
 800ba52:	4640      	mov	r0, r8
 800ba54:	4649      	mov	r1, r9
 800ba56:	f7f5 f841 	bl	8000adc <__aeabi_dcmplt>
 800ba5a:	b110      	cbz	r0, 800ba62 <_printf_float+0x8a>
 800ba5c:	232d      	movs	r3, #45	; 0x2d
 800ba5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba62:	4a9c      	ldr	r2, [pc, #624]	; (800bcd4 <_printf_float+0x2fc>)
 800ba64:	4b9c      	ldr	r3, [pc, #624]	; (800bcd8 <_printf_float+0x300>)
 800ba66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ba6a:	bf8c      	ite	hi
 800ba6c:	4690      	movhi	r8, r2
 800ba6e:	4698      	movls	r8, r3
 800ba70:	2303      	movs	r3, #3
 800ba72:	f02b 0204 	bic.w	r2, fp, #4
 800ba76:	6123      	str	r3, [r4, #16]
 800ba78:	6022      	str	r2, [r4, #0]
 800ba7a:	f04f 0900 	mov.w	r9, #0
 800ba7e:	9700      	str	r7, [sp, #0]
 800ba80:	4633      	mov	r3, r6
 800ba82:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba84:	4621      	mov	r1, r4
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 f9e6 	bl	800be58 <_printf_common>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	f040 808d 	bne.w	800bbac <_printf_float+0x1d4>
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295
 800ba96:	b00d      	add	sp, #52	; 0x34
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	4640      	mov	r0, r8
 800baa2:	4649      	mov	r1, r9
 800baa4:	f7f5 f842 	bl	8000b2c <__aeabi_dcmpun>
 800baa8:	b110      	cbz	r0, 800bab0 <_printf_float+0xd8>
 800baaa:	4a8c      	ldr	r2, [pc, #560]	; (800bcdc <_printf_float+0x304>)
 800baac:	4b8c      	ldr	r3, [pc, #560]	; (800bce0 <_printf_float+0x308>)
 800baae:	e7da      	b.n	800ba66 <_printf_float+0x8e>
 800bab0:	6861      	ldr	r1, [r4, #4]
 800bab2:	1c4b      	adds	r3, r1, #1
 800bab4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bab8:	a80a      	add	r0, sp, #40	; 0x28
 800baba:	d13e      	bne.n	800bb3a <_printf_float+0x162>
 800babc:	2306      	movs	r3, #6
 800babe:	6063      	str	r3, [r4, #4]
 800bac0:	2300      	movs	r3, #0
 800bac2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bac6:	ab09      	add	r3, sp, #36	; 0x24
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	ec49 8b10 	vmov	d0, r8, r9
 800bace:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	f8cd a004 	str.w	sl, [sp, #4]
 800bad8:	6861      	ldr	r1, [r4, #4]
 800bada:	4628      	mov	r0, r5
 800badc:	f7ff fee8 	bl	800b8b0 <__cvt>
 800bae0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bae4:	2b47      	cmp	r3, #71	; 0x47
 800bae6:	4680      	mov	r8, r0
 800bae8:	d109      	bne.n	800bafe <_printf_float+0x126>
 800baea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baec:	1cd8      	adds	r0, r3, #3
 800baee:	db02      	blt.n	800baf6 <_printf_float+0x11e>
 800baf0:	6862      	ldr	r2, [r4, #4]
 800baf2:	4293      	cmp	r3, r2
 800baf4:	dd47      	ble.n	800bb86 <_printf_float+0x1ae>
 800baf6:	f1aa 0a02 	sub.w	sl, sl, #2
 800bafa:	fa5f fa8a 	uxtb.w	sl, sl
 800bafe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bb02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb04:	d824      	bhi.n	800bb50 <_printf_float+0x178>
 800bb06:	3901      	subs	r1, #1
 800bb08:	4652      	mov	r2, sl
 800bb0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb0e:	9109      	str	r1, [sp, #36]	; 0x24
 800bb10:	f7ff ff2f 	bl	800b972 <__exponent>
 800bb14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb16:	1813      	adds	r3, r2, r0
 800bb18:	2a01      	cmp	r2, #1
 800bb1a:	4681      	mov	r9, r0
 800bb1c:	6123      	str	r3, [r4, #16]
 800bb1e:	dc02      	bgt.n	800bb26 <_printf_float+0x14e>
 800bb20:	6822      	ldr	r2, [r4, #0]
 800bb22:	07d1      	lsls	r1, r2, #31
 800bb24:	d501      	bpl.n	800bb2a <_printf_float+0x152>
 800bb26:	3301      	adds	r3, #1
 800bb28:	6123      	str	r3, [r4, #16]
 800bb2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0a5      	beq.n	800ba7e <_printf_float+0xa6>
 800bb32:	232d      	movs	r3, #45	; 0x2d
 800bb34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb38:	e7a1      	b.n	800ba7e <_printf_float+0xa6>
 800bb3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bb3e:	f000 8177 	beq.w	800be30 <_printf_float+0x458>
 800bb42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bb46:	d1bb      	bne.n	800bac0 <_printf_float+0xe8>
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	d1b9      	bne.n	800bac0 <_printf_float+0xe8>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e7b6      	b.n	800babe <_printf_float+0xe6>
 800bb50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bb54:	d119      	bne.n	800bb8a <_printf_float+0x1b2>
 800bb56:	2900      	cmp	r1, #0
 800bb58:	6863      	ldr	r3, [r4, #4]
 800bb5a:	dd0c      	ble.n	800bb76 <_printf_float+0x19e>
 800bb5c:	6121      	str	r1, [r4, #16]
 800bb5e:	b913      	cbnz	r3, 800bb66 <_printf_float+0x18e>
 800bb60:	6822      	ldr	r2, [r4, #0]
 800bb62:	07d2      	lsls	r2, r2, #31
 800bb64:	d502      	bpl.n	800bb6c <_printf_float+0x194>
 800bb66:	3301      	adds	r3, #1
 800bb68:	440b      	add	r3, r1
 800bb6a:	6123      	str	r3, [r4, #16]
 800bb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6e:	65a3      	str	r3, [r4, #88]	; 0x58
 800bb70:	f04f 0900 	mov.w	r9, #0
 800bb74:	e7d9      	b.n	800bb2a <_printf_float+0x152>
 800bb76:	b913      	cbnz	r3, 800bb7e <_printf_float+0x1a6>
 800bb78:	6822      	ldr	r2, [r4, #0]
 800bb7a:	07d0      	lsls	r0, r2, #31
 800bb7c:	d501      	bpl.n	800bb82 <_printf_float+0x1aa>
 800bb7e:	3302      	adds	r3, #2
 800bb80:	e7f3      	b.n	800bb6a <_printf_float+0x192>
 800bb82:	2301      	movs	r3, #1
 800bb84:	e7f1      	b.n	800bb6a <_printf_float+0x192>
 800bb86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bb8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	db05      	blt.n	800bb9e <_printf_float+0x1c6>
 800bb92:	6822      	ldr	r2, [r4, #0]
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	07d1      	lsls	r1, r2, #31
 800bb98:	d5e8      	bpl.n	800bb6c <_printf_float+0x194>
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	e7e5      	b.n	800bb6a <_printf_float+0x192>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	bfd4      	ite	le
 800bba2:	f1c3 0302 	rsble	r3, r3, #2
 800bba6:	2301      	movgt	r3, #1
 800bba8:	4413      	add	r3, r2
 800bbaa:	e7de      	b.n	800bb6a <_printf_float+0x192>
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	055a      	lsls	r2, r3, #21
 800bbb0:	d407      	bmi.n	800bbc2 <_printf_float+0x1ea>
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b8      	blx	r7
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d12b      	bne.n	800bc18 <_printf_float+0x240>
 800bbc0:	e767      	b.n	800ba92 <_printf_float+0xba>
 800bbc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bbc6:	f240 80dc 	bls.w	800bd82 <_printf_float+0x3aa>
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbd2:	f7f4 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d033      	beq.n	800bc42 <_printf_float+0x26a>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4a41      	ldr	r2, [pc, #260]	; (800bce4 <_printf_float+0x30c>)
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b8      	blx	r7
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	f43f af54 	beq.w	800ba92 <_printf_float+0xba>
 800bbea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	db02      	blt.n	800bbf8 <_printf_float+0x220>
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	07d8      	lsls	r0, r3, #31
 800bbf6:	d50f      	bpl.n	800bc18 <_printf_float+0x240>
 800bbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b8      	blx	r7
 800bc02:	3001      	adds	r0, #1
 800bc04:	f43f af45 	beq.w	800ba92 <_printf_float+0xba>
 800bc08:	f04f 0800 	mov.w	r8, #0
 800bc0c:	f104 091a 	add.w	r9, r4, #26
 800bc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc12:	3b01      	subs	r3, #1
 800bc14:	4543      	cmp	r3, r8
 800bc16:	dc09      	bgt.n	800bc2c <_printf_float+0x254>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	079b      	lsls	r3, r3, #30
 800bc1c:	f100 8103 	bmi.w	800be26 <_printf_float+0x44e>
 800bc20:	68e0      	ldr	r0, [r4, #12]
 800bc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc24:	4298      	cmp	r0, r3
 800bc26:	bfb8      	it	lt
 800bc28:	4618      	movlt	r0, r3
 800bc2a:	e734      	b.n	800ba96 <_printf_float+0xbe>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	464a      	mov	r2, r9
 800bc30:	4631      	mov	r1, r6
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	f43f af2b 	beq.w	800ba92 <_printf_float+0xba>
 800bc3c:	f108 0801 	add.w	r8, r8, #1
 800bc40:	e7e6      	b.n	800bc10 <_printf_float+0x238>
 800bc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dc2b      	bgt.n	800bca0 <_printf_float+0x2c8>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4a26      	ldr	r2, [pc, #152]	; (800bce4 <_printf_float+0x30c>)
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f af1d 	beq.w	800ba92 <_printf_float+0xba>
 800bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5a:	b923      	cbnz	r3, 800bc66 <_printf_float+0x28e>
 800bc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc5e:	b913      	cbnz	r3, 800bc66 <_printf_float+0x28e>
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	07d9      	lsls	r1, r3, #31
 800bc64:	d5d8      	bpl.n	800bc18 <_printf_float+0x240>
 800bc66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	f43f af0e 	beq.w	800ba92 <_printf_float+0xba>
 800bc76:	f04f 0900 	mov.w	r9, #0
 800bc7a:	f104 0a1a 	add.w	sl, r4, #26
 800bc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc80:	425b      	negs	r3, r3
 800bc82:	454b      	cmp	r3, r9
 800bc84:	dc01      	bgt.n	800bc8a <_printf_float+0x2b2>
 800bc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc88:	e794      	b.n	800bbb4 <_printf_float+0x1dc>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	4652      	mov	r2, sl
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b8      	blx	r7
 800bc94:	3001      	adds	r0, #1
 800bc96:	f43f aefc 	beq.w	800ba92 <_printf_float+0xba>
 800bc9a:	f109 0901 	add.w	r9, r9, #1
 800bc9e:	e7ee      	b.n	800bc7e <_printf_float+0x2a6>
 800bca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bca4:	429a      	cmp	r2, r3
 800bca6:	bfa8      	it	ge
 800bca8:	461a      	movge	r2, r3
 800bcaa:	2a00      	cmp	r2, #0
 800bcac:	4691      	mov	r9, r2
 800bcae:	dd07      	ble.n	800bcc0 <_printf_float+0x2e8>
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4642      	mov	r2, r8
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b8      	blx	r7
 800bcba:	3001      	adds	r0, #1
 800bcbc:	f43f aee9 	beq.w	800ba92 <_printf_float+0xba>
 800bcc0:	f104 031a 	add.w	r3, r4, #26
 800bcc4:	f04f 0b00 	mov.w	fp, #0
 800bcc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bccc:	9306      	str	r3, [sp, #24]
 800bcce:	e015      	b.n	800bcfc <_printf_float+0x324>
 800bcd0:	7fefffff 	.word	0x7fefffff
 800bcd4:	0800e0b8 	.word	0x0800e0b8
 800bcd8:	0800e0b4 	.word	0x0800e0b4
 800bcdc:	0800e0c0 	.word	0x0800e0c0
 800bce0:	0800e0bc 	.word	0x0800e0bc
 800bce4:	0800e0c4 	.word	0x0800e0c4
 800bce8:	2301      	movs	r3, #1
 800bcea:	9a06      	ldr	r2, [sp, #24]
 800bcec:	4631      	mov	r1, r6
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b8      	blx	r7
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	f43f aecd 	beq.w	800ba92 <_printf_float+0xba>
 800bcf8:	f10b 0b01 	add.w	fp, fp, #1
 800bcfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd00:	ebaa 0309 	sub.w	r3, sl, r9
 800bd04:	455b      	cmp	r3, fp
 800bd06:	dcef      	bgt.n	800bce8 <_printf_float+0x310>
 800bd08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	44d0      	add	r8, sl
 800bd10:	db15      	blt.n	800bd3e <_printf_float+0x366>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	07da      	lsls	r2, r3, #31
 800bd16:	d412      	bmi.n	800bd3e <_printf_float+0x366>
 800bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd1c:	eba3 020a 	sub.w	r2, r3, sl
 800bd20:	eba3 0a01 	sub.w	sl, r3, r1
 800bd24:	4592      	cmp	sl, r2
 800bd26:	bfa8      	it	ge
 800bd28:	4692      	movge	sl, r2
 800bd2a:	f1ba 0f00 	cmp.w	sl, #0
 800bd2e:	dc0e      	bgt.n	800bd4e <_printf_float+0x376>
 800bd30:	f04f 0800 	mov.w	r8, #0
 800bd34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd38:	f104 091a 	add.w	r9, r4, #26
 800bd3c:	e019      	b.n	800bd72 <_printf_float+0x39a>
 800bd3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd42:	4631      	mov	r1, r6
 800bd44:	4628      	mov	r0, r5
 800bd46:	47b8      	blx	r7
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d1e5      	bne.n	800bd18 <_printf_float+0x340>
 800bd4c:	e6a1      	b.n	800ba92 <_printf_float+0xba>
 800bd4e:	4653      	mov	r3, sl
 800bd50:	4642      	mov	r2, r8
 800bd52:	4631      	mov	r1, r6
 800bd54:	4628      	mov	r0, r5
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d1e9      	bne.n	800bd30 <_printf_float+0x358>
 800bd5c:	e699      	b.n	800ba92 <_printf_float+0xba>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	464a      	mov	r2, r9
 800bd62:	4631      	mov	r1, r6
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f43f ae92 	beq.w	800ba92 <_printf_float+0xba>
 800bd6e:	f108 0801 	add.w	r8, r8, #1
 800bd72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd76:	1a9b      	subs	r3, r3, r2
 800bd78:	eba3 030a 	sub.w	r3, r3, sl
 800bd7c:	4543      	cmp	r3, r8
 800bd7e:	dcee      	bgt.n	800bd5e <_printf_float+0x386>
 800bd80:	e74a      	b.n	800bc18 <_printf_float+0x240>
 800bd82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd84:	2a01      	cmp	r2, #1
 800bd86:	dc01      	bgt.n	800bd8c <_printf_float+0x3b4>
 800bd88:	07db      	lsls	r3, r3, #31
 800bd8a:	d53a      	bpl.n	800be02 <_printf_float+0x42a>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	4642      	mov	r2, r8
 800bd90:	4631      	mov	r1, r6
 800bd92:	4628      	mov	r0, r5
 800bd94:	47b8      	blx	r7
 800bd96:	3001      	adds	r0, #1
 800bd98:	f43f ae7b 	beq.w	800ba92 <_printf_float+0xba>
 800bd9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda0:	4631      	mov	r1, r6
 800bda2:	4628      	mov	r0, r5
 800bda4:	47b8      	blx	r7
 800bda6:	3001      	adds	r0, #1
 800bda8:	f108 0801 	add.w	r8, r8, #1
 800bdac:	f43f ae71 	beq.w	800ba92 <_printf_float+0xba>
 800bdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f103 3aff 	add.w	sl, r3, #4294967295
 800bdb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f7f4 fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdc2:	b9c8      	cbnz	r0, 800bdf8 <_printf_float+0x420>
 800bdc4:	4653      	mov	r3, sl
 800bdc6:	4642      	mov	r2, r8
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4628      	mov	r0, r5
 800bdcc:	47b8      	blx	r7
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d10e      	bne.n	800bdf0 <_printf_float+0x418>
 800bdd2:	e65e      	b.n	800ba92 <_printf_float+0xba>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	4652      	mov	r2, sl
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4628      	mov	r0, r5
 800bddc:	47b8      	blx	r7
 800bdde:	3001      	adds	r0, #1
 800bde0:	f43f ae57 	beq.w	800ba92 <_printf_float+0xba>
 800bde4:	f108 0801 	add.w	r8, r8, #1
 800bde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdea:	3b01      	subs	r3, #1
 800bdec:	4543      	cmp	r3, r8
 800bdee:	dcf1      	bgt.n	800bdd4 <_printf_float+0x3fc>
 800bdf0:	464b      	mov	r3, r9
 800bdf2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdf6:	e6de      	b.n	800bbb6 <_printf_float+0x1de>
 800bdf8:	f04f 0800 	mov.w	r8, #0
 800bdfc:	f104 0a1a 	add.w	sl, r4, #26
 800be00:	e7f2      	b.n	800bde8 <_printf_float+0x410>
 800be02:	2301      	movs	r3, #1
 800be04:	e7df      	b.n	800bdc6 <_printf_float+0x3ee>
 800be06:	2301      	movs	r3, #1
 800be08:	464a      	mov	r2, r9
 800be0a:	4631      	mov	r1, r6
 800be0c:	4628      	mov	r0, r5
 800be0e:	47b8      	blx	r7
 800be10:	3001      	adds	r0, #1
 800be12:	f43f ae3e 	beq.w	800ba92 <_printf_float+0xba>
 800be16:	f108 0801 	add.w	r8, r8, #1
 800be1a:	68e3      	ldr	r3, [r4, #12]
 800be1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be1e:	1a9b      	subs	r3, r3, r2
 800be20:	4543      	cmp	r3, r8
 800be22:	dcf0      	bgt.n	800be06 <_printf_float+0x42e>
 800be24:	e6fc      	b.n	800bc20 <_printf_float+0x248>
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	f104 0919 	add.w	r9, r4, #25
 800be2e:	e7f4      	b.n	800be1a <_printf_float+0x442>
 800be30:	2900      	cmp	r1, #0
 800be32:	f43f ae8b 	beq.w	800bb4c <_printf_float+0x174>
 800be36:	2300      	movs	r3, #0
 800be38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800be3c:	ab09      	add	r3, sp, #36	; 0x24
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	ec49 8b10 	vmov	d0, r8, r9
 800be44:	6022      	str	r2, [r4, #0]
 800be46:	f8cd a004 	str.w	sl, [sp, #4]
 800be4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be4e:	4628      	mov	r0, r5
 800be50:	f7ff fd2e 	bl	800b8b0 <__cvt>
 800be54:	4680      	mov	r8, r0
 800be56:	e648      	b.n	800baea <_printf_float+0x112>

0800be58 <_printf_common>:
 800be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5c:	4691      	mov	r9, r2
 800be5e:	461f      	mov	r7, r3
 800be60:	688a      	ldr	r2, [r1, #8]
 800be62:	690b      	ldr	r3, [r1, #16]
 800be64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be68:	4293      	cmp	r3, r2
 800be6a:	bfb8      	it	lt
 800be6c:	4613      	movlt	r3, r2
 800be6e:	f8c9 3000 	str.w	r3, [r9]
 800be72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be76:	4606      	mov	r6, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	b112      	cbz	r2, 800be82 <_printf_common+0x2a>
 800be7c:	3301      	adds	r3, #1
 800be7e:	f8c9 3000 	str.w	r3, [r9]
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	0699      	lsls	r1, r3, #26
 800be86:	bf42      	ittt	mi
 800be88:	f8d9 3000 	ldrmi.w	r3, [r9]
 800be8c:	3302      	addmi	r3, #2
 800be8e:	f8c9 3000 	strmi.w	r3, [r9]
 800be92:	6825      	ldr	r5, [r4, #0]
 800be94:	f015 0506 	ands.w	r5, r5, #6
 800be98:	d107      	bne.n	800beaa <_printf_common+0x52>
 800be9a:	f104 0a19 	add.w	sl, r4, #25
 800be9e:	68e3      	ldr	r3, [r4, #12]
 800bea0:	f8d9 2000 	ldr.w	r2, [r9]
 800bea4:	1a9b      	subs	r3, r3, r2
 800bea6:	42ab      	cmp	r3, r5
 800bea8:	dc28      	bgt.n	800befc <_printf_common+0xa4>
 800beaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800beae:	6822      	ldr	r2, [r4, #0]
 800beb0:	3300      	adds	r3, #0
 800beb2:	bf18      	it	ne
 800beb4:	2301      	movne	r3, #1
 800beb6:	0692      	lsls	r2, r2, #26
 800beb8:	d42d      	bmi.n	800bf16 <_printf_common+0xbe>
 800beba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bebe:	4639      	mov	r1, r7
 800bec0:	4630      	mov	r0, r6
 800bec2:	47c0      	blx	r8
 800bec4:	3001      	adds	r0, #1
 800bec6:	d020      	beq.n	800bf0a <_printf_common+0xb2>
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	68e5      	ldr	r5, [r4, #12]
 800becc:	f8d9 2000 	ldr.w	r2, [r9]
 800bed0:	f003 0306 	and.w	r3, r3, #6
 800bed4:	2b04      	cmp	r3, #4
 800bed6:	bf08      	it	eq
 800bed8:	1aad      	subeq	r5, r5, r2
 800beda:	68a3      	ldr	r3, [r4, #8]
 800bedc:	6922      	ldr	r2, [r4, #16]
 800bede:	bf0c      	ite	eq
 800bee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee4:	2500      	movne	r5, #0
 800bee6:	4293      	cmp	r3, r2
 800bee8:	bfc4      	itt	gt
 800beea:	1a9b      	subgt	r3, r3, r2
 800beec:	18ed      	addgt	r5, r5, r3
 800beee:	f04f 0900 	mov.w	r9, #0
 800bef2:	341a      	adds	r4, #26
 800bef4:	454d      	cmp	r5, r9
 800bef6:	d11a      	bne.n	800bf2e <_printf_common+0xd6>
 800bef8:	2000      	movs	r0, #0
 800befa:	e008      	b.n	800bf0e <_printf_common+0xb6>
 800befc:	2301      	movs	r3, #1
 800befe:	4652      	mov	r2, sl
 800bf00:	4639      	mov	r1, r7
 800bf02:	4630      	mov	r0, r6
 800bf04:	47c0      	blx	r8
 800bf06:	3001      	adds	r0, #1
 800bf08:	d103      	bne.n	800bf12 <_printf_common+0xba>
 800bf0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf12:	3501      	adds	r5, #1
 800bf14:	e7c3      	b.n	800be9e <_printf_common+0x46>
 800bf16:	18e1      	adds	r1, r4, r3
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	2030      	movs	r0, #48	; 0x30
 800bf1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf20:	4422      	add	r2, r4
 800bf22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf2a:	3302      	adds	r3, #2
 800bf2c:	e7c5      	b.n	800beba <_printf_common+0x62>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4622      	mov	r2, r4
 800bf32:	4639      	mov	r1, r7
 800bf34:	4630      	mov	r0, r6
 800bf36:	47c0      	blx	r8
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d0e6      	beq.n	800bf0a <_printf_common+0xb2>
 800bf3c:	f109 0901 	add.w	r9, r9, #1
 800bf40:	e7d8      	b.n	800bef4 <_printf_common+0x9c>
	...

0800bf44 <_printf_i>:
 800bf44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	7e09      	ldrb	r1, [r1, #24]
 800bf50:	b085      	sub	sp, #20
 800bf52:	296e      	cmp	r1, #110	; 0x6e
 800bf54:	4617      	mov	r7, r2
 800bf56:	4606      	mov	r6, r0
 800bf58:	4698      	mov	r8, r3
 800bf5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf5c:	f000 80b3 	beq.w	800c0c6 <_printf_i+0x182>
 800bf60:	d822      	bhi.n	800bfa8 <_printf_i+0x64>
 800bf62:	2963      	cmp	r1, #99	; 0x63
 800bf64:	d036      	beq.n	800bfd4 <_printf_i+0x90>
 800bf66:	d80a      	bhi.n	800bf7e <_printf_i+0x3a>
 800bf68:	2900      	cmp	r1, #0
 800bf6a:	f000 80b9 	beq.w	800c0e0 <_printf_i+0x19c>
 800bf6e:	2958      	cmp	r1, #88	; 0x58
 800bf70:	f000 8083 	beq.w	800c07a <_printf_i+0x136>
 800bf74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bf7c:	e032      	b.n	800bfe4 <_printf_i+0xa0>
 800bf7e:	2964      	cmp	r1, #100	; 0x64
 800bf80:	d001      	beq.n	800bf86 <_printf_i+0x42>
 800bf82:	2969      	cmp	r1, #105	; 0x69
 800bf84:	d1f6      	bne.n	800bf74 <_printf_i+0x30>
 800bf86:	6820      	ldr	r0, [r4, #0]
 800bf88:	6813      	ldr	r3, [r2, #0]
 800bf8a:	0605      	lsls	r5, r0, #24
 800bf8c:	f103 0104 	add.w	r1, r3, #4
 800bf90:	d52a      	bpl.n	800bfe8 <_printf_i+0xa4>
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6011      	str	r1, [r2, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	da03      	bge.n	800bfa2 <_printf_i+0x5e>
 800bf9a:	222d      	movs	r2, #45	; 0x2d
 800bf9c:	425b      	negs	r3, r3
 800bf9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bfa2:	486f      	ldr	r0, [pc, #444]	; (800c160 <_printf_i+0x21c>)
 800bfa4:	220a      	movs	r2, #10
 800bfa6:	e039      	b.n	800c01c <_printf_i+0xd8>
 800bfa8:	2973      	cmp	r1, #115	; 0x73
 800bfaa:	f000 809d 	beq.w	800c0e8 <_printf_i+0x1a4>
 800bfae:	d808      	bhi.n	800bfc2 <_printf_i+0x7e>
 800bfb0:	296f      	cmp	r1, #111	; 0x6f
 800bfb2:	d020      	beq.n	800bff6 <_printf_i+0xb2>
 800bfb4:	2970      	cmp	r1, #112	; 0x70
 800bfb6:	d1dd      	bne.n	800bf74 <_printf_i+0x30>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	f043 0320 	orr.w	r3, r3, #32
 800bfbe:	6023      	str	r3, [r4, #0]
 800bfc0:	e003      	b.n	800bfca <_printf_i+0x86>
 800bfc2:	2975      	cmp	r1, #117	; 0x75
 800bfc4:	d017      	beq.n	800bff6 <_printf_i+0xb2>
 800bfc6:	2978      	cmp	r1, #120	; 0x78
 800bfc8:	d1d4      	bne.n	800bf74 <_printf_i+0x30>
 800bfca:	2378      	movs	r3, #120	; 0x78
 800bfcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfd0:	4864      	ldr	r0, [pc, #400]	; (800c164 <_printf_i+0x220>)
 800bfd2:	e055      	b.n	800c080 <_printf_i+0x13c>
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	1d19      	adds	r1, r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6011      	str	r1, [r2, #0]
 800bfdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e08c      	b.n	800c102 <_printf_i+0x1be>
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6011      	str	r1, [r2, #0]
 800bfec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bff0:	bf18      	it	ne
 800bff2:	b21b      	sxthne	r3, r3
 800bff4:	e7cf      	b.n	800bf96 <_printf_i+0x52>
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	6825      	ldr	r5, [r4, #0]
 800bffa:	1d18      	adds	r0, r3, #4
 800bffc:	6010      	str	r0, [r2, #0]
 800bffe:	0628      	lsls	r0, r5, #24
 800c000:	d501      	bpl.n	800c006 <_printf_i+0xc2>
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	e002      	b.n	800c00c <_printf_i+0xc8>
 800c006:	0668      	lsls	r0, r5, #25
 800c008:	d5fb      	bpl.n	800c002 <_printf_i+0xbe>
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	4854      	ldr	r0, [pc, #336]	; (800c160 <_printf_i+0x21c>)
 800c00e:	296f      	cmp	r1, #111	; 0x6f
 800c010:	bf14      	ite	ne
 800c012:	220a      	movne	r2, #10
 800c014:	2208      	moveq	r2, #8
 800c016:	2100      	movs	r1, #0
 800c018:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c01c:	6865      	ldr	r5, [r4, #4]
 800c01e:	60a5      	str	r5, [r4, #8]
 800c020:	2d00      	cmp	r5, #0
 800c022:	f2c0 8095 	blt.w	800c150 <_printf_i+0x20c>
 800c026:	6821      	ldr	r1, [r4, #0]
 800c028:	f021 0104 	bic.w	r1, r1, #4
 800c02c:	6021      	str	r1, [r4, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d13d      	bne.n	800c0ae <_printf_i+0x16a>
 800c032:	2d00      	cmp	r5, #0
 800c034:	f040 808e 	bne.w	800c154 <_printf_i+0x210>
 800c038:	4665      	mov	r5, ip
 800c03a:	2a08      	cmp	r2, #8
 800c03c:	d10b      	bne.n	800c056 <_printf_i+0x112>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	07db      	lsls	r3, r3, #31
 800c042:	d508      	bpl.n	800c056 <_printf_i+0x112>
 800c044:	6923      	ldr	r3, [r4, #16]
 800c046:	6862      	ldr	r2, [r4, #4]
 800c048:	429a      	cmp	r2, r3
 800c04a:	bfde      	ittt	le
 800c04c:	2330      	movle	r3, #48	; 0x30
 800c04e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c052:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c056:	ebac 0305 	sub.w	r3, ip, r5
 800c05a:	6123      	str	r3, [r4, #16]
 800c05c:	f8cd 8000 	str.w	r8, [sp]
 800c060:	463b      	mov	r3, r7
 800c062:	aa03      	add	r2, sp, #12
 800c064:	4621      	mov	r1, r4
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff fef6 	bl	800be58 <_printf_common>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d14d      	bne.n	800c10c <_printf_i+0x1c8>
 800c070:	f04f 30ff 	mov.w	r0, #4294967295
 800c074:	b005      	add	sp, #20
 800c076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c07a:	4839      	ldr	r0, [pc, #228]	; (800c160 <_printf_i+0x21c>)
 800c07c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c080:	6813      	ldr	r3, [r2, #0]
 800c082:	6821      	ldr	r1, [r4, #0]
 800c084:	1d1d      	adds	r5, r3, #4
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6015      	str	r5, [r2, #0]
 800c08a:	060a      	lsls	r2, r1, #24
 800c08c:	d50b      	bpl.n	800c0a6 <_printf_i+0x162>
 800c08e:	07ca      	lsls	r2, r1, #31
 800c090:	bf44      	itt	mi
 800c092:	f041 0120 	orrmi.w	r1, r1, #32
 800c096:	6021      	strmi	r1, [r4, #0]
 800c098:	b91b      	cbnz	r3, 800c0a2 <_printf_i+0x15e>
 800c09a:	6822      	ldr	r2, [r4, #0]
 800c09c:	f022 0220 	bic.w	r2, r2, #32
 800c0a0:	6022      	str	r2, [r4, #0]
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	e7b7      	b.n	800c016 <_printf_i+0xd2>
 800c0a6:	064d      	lsls	r5, r1, #25
 800c0a8:	bf48      	it	mi
 800c0aa:	b29b      	uxthmi	r3, r3
 800c0ac:	e7ef      	b.n	800c08e <_printf_i+0x14a>
 800c0ae:	4665      	mov	r5, ip
 800c0b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0b4:	fb02 3311 	mls	r3, r2, r1, r3
 800c0b8:	5cc3      	ldrb	r3, [r0, r3]
 800c0ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c0be:	460b      	mov	r3, r1
 800c0c0:	2900      	cmp	r1, #0
 800c0c2:	d1f5      	bne.n	800c0b0 <_printf_i+0x16c>
 800c0c4:	e7b9      	b.n	800c03a <_printf_i+0xf6>
 800c0c6:	6813      	ldr	r3, [r2, #0]
 800c0c8:	6825      	ldr	r5, [r4, #0]
 800c0ca:	6961      	ldr	r1, [r4, #20]
 800c0cc:	1d18      	adds	r0, r3, #4
 800c0ce:	6010      	str	r0, [r2, #0]
 800c0d0:	0628      	lsls	r0, r5, #24
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	d501      	bpl.n	800c0da <_printf_i+0x196>
 800c0d6:	6019      	str	r1, [r3, #0]
 800c0d8:	e002      	b.n	800c0e0 <_printf_i+0x19c>
 800c0da:	066a      	lsls	r2, r5, #25
 800c0dc:	d5fb      	bpl.n	800c0d6 <_printf_i+0x192>
 800c0de:	8019      	strh	r1, [r3, #0]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	6123      	str	r3, [r4, #16]
 800c0e4:	4665      	mov	r5, ip
 800c0e6:	e7b9      	b.n	800c05c <_printf_i+0x118>
 800c0e8:	6813      	ldr	r3, [r2, #0]
 800c0ea:	1d19      	adds	r1, r3, #4
 800c0ec:	6011      	str	r1, [r2, #0]
 800c0ee:	681d      	ldr	r5, [r3, #0]
 800c0f0:	6862      	ldr	r2, [r4, #4]
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f7f4 f873 	bl	80001e0 <memchr>
 800c0fa:	b108      	cbz	r0, 800c100 <_printf_i+0x1bc>
 800c0fc:	1b40      	subs	r0, r0, r5
 800c0fe:	6060      	str	r0, [r4, #4]
 800c100:	6863      	ldr	r3, [r4, #4]
 800c102:	6123      	str	r3, [r4, #16]
 800c104:	2300      	movs	r3, #0
 800c106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c10a:	e7a7      	b.n	800c05c <_printf_i+0x118>
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	462a      	mov	r2, r5
 800c110:	4639      	mov	r1, r7
 800c112:	4630      	mov	r0, r6
 800c114:	47c0      	blx	r8
 800c116:	3001      	adds	r0, #1
 800c118:	d0aa      	beq.n	800c070 <_printf_i+0x12c>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	079b      	lsls	r3, r3, #30
 800c11e:	d413      	bmi.n	800c148 <_printf_i+0x204>
 800c120:	68e0      	ldr	r0, [r4, #12]
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	4298      	cmp	r0, r3
 800c126:	bfb8      	it	lt
 800c128:	4618      	movlt	r0, r3
 800c12a:	e7a3      	b.n	800c074 <_printf_i+0x130>
 800c12c:	2301      	movs	r3, #1
 800c12e:	464a      	mov	r2, r9
 800c130:	4639      	mov	r1, r7
 800c132:	4630      	mov	r0, r6
 800c134:	47c0      	blx	r8
 800c136:	3001      	adds	r0, #1
 800c138:	d09a      	beq.n	800c070 <_printf_i+0x12c>
 800c13a:	3501      	adds	r5, #1
 800c13c:	68e3      	ldr	r3, [r4, #12]
 800c13e:	9a03      	ldr	r2, [sp, #12]
 800c140:	1a9b      	subs	r3, r3, r2
 800c142:	42ab      	cmp	r3, r5
 800c144:	dcf2      	bgt.n	800c12c <_printf_i+0x1e8>
 800c146:	e7eb      	b.n	800c120 <_printf_i+0x1dc>
 800c148:	2500      	movs	r5, #0
 800c14a:	f104 0919 	add.w	r9, r4, #25
 800c14e:	e7f5      	b.n	800c13c <_printf_i+0x1f8>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1ac      	bne.n	800c0ae <_printf_i+0x16a>
 800c154:	7803      	ldrb	r3, [r0, #0]
 800c156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c15a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c15e:	e76c      	b.n	800c03a <_printf_i+0xf6>
 800c160:	0800e0c6 	.word	0x0800e0c6
 800c164:	0800e0d7 	.word	0x0800e0d7

0800c168 <iprintf>:
 800c168:	b40f      	push	{r0, r1, r2, r3}
 800c16a:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <iprintf+0x2c>)
 800c16c:	b513      	push	{r0, r1, r4, lr}
 800c16e:	681c      	ldr	r4, [r3, #0]
 800c170:	b124      	cbz	r4, 800c17c <iprintf+0x14>
 800c172:	69a3      	ldr	r3, [r4, #24]
 800c174:	b913      	cbnz	r3, 800c17c <iprintf+0x14>
 800c176:	4620      	mov	r0, r4
 800c178:	f7ff f9fe 	bl	800b578 <__sinit>
 800c17c:	ab05      	add	r3, sp, #20
 800c17e:	9a04      	ldr	r2, [sp, #16]
 800c180:	68a1      	ldr	r1, [r4, #8]
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	4620      	mov	r0, r4
 800c186:	f001 fc63 	bl	800da50 <_vfiprintf_r>
 800c18a:	b002      	add	sp, #8
 800c18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c190:	b004      	add	sp, #16
 800c192:	4770      	bx	lr
 800c194:	2000017c 	.word	0x2000017c

0800c198 <_puts_r>:
 800c198:	b570      	push	{r4, r5, r6, lr}
 800c19a:	460e      	mov	r6, r1
 800c19c:	4605      	mov	r5, r0
 800c19e:	b118      	cbz	r0, 800c1a8 <_puts_r+0x10>
 800c1a0:	6983      	ldr	r3, [r0, #24]
 800c1a2:	b90b      	cbnz	r3, 800c1a8 <_puts_r+0x10>
 800c1a4:	f7ff f9e8 	bl	800b578 <__sinit>
 800c1a8:	69ab      	ldr	r3, [r5, #24]
 800c1aa:	68ac      	ldr	r4, [r5, #8]
 800c1ac:	b913      	cbnz	r3, 800c1b4 <_puts_r+0x1c>
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f7ff f9e2 	bl	800b578 <__sinit>
 800c1b4:	4b23      	ldr	r3, [pc, #140]	; (800c244 <_puts_r+0xac>)
 800c1b6:	429c      	cmp	r4, r3
 800c1b8:	d117      	bne.n	800c1ea <_puts_r+0x52>
 800c1ba:	686c      	ldr	r4, [r5, #4]
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	071b      	lsls	r3, r3, #28
 800c1c0:	d51d      	bpl.n	800c1fe <_puts_r+0x66>
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	b1db      	cbz	r3, 800c1fe <_puts_r+0x66>
 800c1c6:	3e01      	subs	r6, #1
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	60a3      	str	r3, [r4, #8]
 800c1d2:	b9e9      	cbnz	r1, 800c210 <_puts_r+0x78>
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da2e      	bge.n	800c236 <_puts_r+0x9e>
 800c1d8:	4622      	mov	r2, r4
 800c1da:	210a      	movs	r1, #10
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f000 f941 	bl	800c464 <__swbuf_r>
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d011      	beq.n	800c20a <_puts_r+0x72>
 800c1e6:	200a      	movs	r0, #10
 800c1e8:	e011      	b.n	800c20e <_puts_r+0x76>
 800c1ea:	4b17      	ldr	r3, [pc, #92]	; (800c248 <_puts_r+0xb0>)
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	d101      	bne.n	800c1f4 <_puts_r+0x5c>
 800c1f0:	68ac      	ldr	r4, [r5, #8]
 800c1f2:	e7e3      	b.n	800c1bc <_puts_r+0x24>
 800c1f4:	4b15      	ldr	r3, [pc, #84]	; (800c24c <_puts_r+0xb4>)
 800c1f6:	429c      	cmp	r4, r3
 800c1f8:	bf08      	it	eq
 800c1fa:	68ec      	ldreq	r4, [r5, #12]
 800c1fc:	e7de      	b.n	800c1bc <_puts_r+0x24>
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	f000 f993 	bl	800c52c <__swsetup_r>
 800c206:	2800      	cmp	r0, #0
 800c208:	d0dd      	beq.n	800c1c6 <_puts_r+0x2e>
 800c20a:	f04f 30ff 	mov.w	r0, #4294967295
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	2b00      	cmp	r3, #0
 800c212:	da04      	bge.n	800c21e <_puts_r+0x86>
 800c214:	69a2      	ldr	r2, [r4, #24]
 800c216:	429a      	cmp	r2, r3
 800c218:	dc06      	bgt.n	800c228 <_puts_r+0x90>
 800c21a:	290a      	cmp	r1, #10
 800c21c:	d004      	beq.n	800c228 <_puts_r+0x90>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	6022      	str	r2, [r4, #0]
 800c224:	7019      	strb	r1, [r3, #0]
 800c226:	e7cf      	b.n	800c1c8 <_puts_r+0x30>
 800c228:	4622      	mov	r2, r4
 800c22a:	4628      	mov	r0, r5
 800c22c:	f000 f91a 	bl	800c464 <__swbuf_r>
 800c230:	3001      	adds	r0, #1
 800c232:	d1c9      	bne.n	800c1c8 <_puts_r+0x30>
 800c234:	e7e9      	b.n	800c20a <_puts_r+0x72>
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	200a      	movs	r0, #10
 800c23a:	1c5a      	adds	r2, r3, #1
 800c23c:	6022      	str	r2, [r4, #0]
 800c23e:	7018      	strb	r0, [r3, #0]
 800c240:	e7e5      	b.n	800c20e <_puts_r+0x76>
 800c242:	bf00      	nop
 800c244:	0800e070 	.word	0x0800e070
 800c248:	0800e090 	.word	0x0800e090
 800c24c:	0800e050 	.word	0x0800e050

0800c250 <puts>:
 800c250:	4b02      	ldr	r3, [pc, #8]	; (800c25c <puts+0xc>)
 800c252:	4601      	mov	r1, r0
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	f7ff bf9f 	b.w	800c198 <_puts_r>
 800c25a:	bf00      	nop
 800c25c:	2000017c 	.word	0x2000017c

0800c260 <_sbrk_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4c06      	ldr	r4, [pc, #24]	; (800c27c <_sbrk_r+0x1c>)
 800c264:	2300      	movs	r3, #0
 800c266:	4605      	mov	r5, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	f7fe fb16 	bl	800a89c <_sbrk>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_sbrk_r+0x1a>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	b103      	cbz	r3, 800c27a <_sbrk_r+0x1a>
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20001fd8 	.word	0x20001fd8

0800c280 <setvbuf>:
 800c280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c284:	461d      	mov	r5, r3
 800c286:	4b51      	ldr	r3, [pc, #324]	; (800c3cc <setvbuf+0x14c>)
 800c288:	681e      	ldr	r6, [r3, #0]
 800c28a:	4604      	mov	r4, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	4690      	mov	r8, r2
 800c290:	b126      	cbz	r6, 800c29c <setvbuf+0x1c>
 800c292:	69b3      	ldr	r3, [r6, #24]
 800c294:	b913      	cbnz	r3, 800c29c <setvbuf+0x1c>
 800c296:	4630      	mov	r0, r6
 800c298:	f7ff f96e 	bl	800b578 <__sinit>
 800c29c:	4b4c      	ldr	r3, [pc, #304]	; (800c3d0 <setvbuf+0x150>)
 800c29e:	429c      	cmp	r4, r3
 800c2a0:	d152      	bne.n	800c348 <setvbuf+0xc8>
 800c2a2:	6874      	ldr	r4, [r6, #4]
 800c2a4:	f1b8 0f02 	cmp.w	r8, #2
 800c2a8:	d006      	beq.n	800c2b8 <setvbuf+0x38>
 800c2aa:	f1b8 0f01 	cmp.w	r8, #1
 800c2ae:	f200 8089 	bhi.w	800c3c4 <setvbuf+0x144>
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	f2c0 8086 	blt.w	800c3c4 <setvbuf+0x144>
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff f8e0 	bl	800b480 <_fflush_r>
 800c2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c2:	b141      	cbz	r1, 800c2d6 <setvbuf+0x56>
 800c2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2c8:	4299      	cmp	r1, r3
 800c2ca:	d002      	beq.n	800c2d2 <setvbuf+0x52>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7ff fa47 	bl	800b760 <_free_r>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	61a3      	str	r3, [r4, #24]
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	d503      	bpl.n	800c2ea <setvbuf+0x6a>
 800c2e2:	6921      	ldr	r1, [r4, #16]
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff fa3b 	bl	800b760 <_free_r>
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c2f0:	f023 0303 	bic.w	r3, r3, #3
 800c2f4:	f1b8 0f02 	cmp.w	r8, #2
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	d05d      	beq.n	800c3b8 <setvbuf+0x138>
 800c2fc:	ab01      	add	r3, sp, #4
 800c2fe:	466a      	mov	r2, sp
 800c300:	4621      	mov	r1, r4
 800c302:	4630      	mov	r0, r6
 800c304:	f001 f820 	bl	800d348 <__swhatbuf_r>
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	4318      	orrs	r0, r3
 800c30c:	81a0      	strh	r0, [r4, #12]
 800c30e:	bb2d      	cbnz	r5, 800c35c <setvbuf+0xdc>
 800c310:	9d00      	ldr	r5, [sp, #0]
 800c312:	4628      	mov	r0, r5
 800c314:	f7ff fa0c 	bl	800b730 <malloc>
 800c318:	4607      	mov	r7, r0
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d14e      	bne.n	800c3bc <setvbuf+0x13c>
 800c31e:	f8dd 9000 	ldr.w	r9, [sp]
 800c322:	45a9      	cmp	r9, r5
 800c324:	d13c      	bne.n	800c3a0 <setvbuf+0x120>
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	f043 0302 	orr.w	r3, r3, #2
 800c330:	81a3      	strh	r3, [r4, #12]
 800c332:	2300      	movs	r3, #0
 800c334:	60a3      	str	r3, [r4, #8]
 800c336:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	6123      	str	r3, [r4, #16]
 800c33e:	2301      	movs	r3, #1
 800c340:	6163      	str	r3, [r4, #20]
 800c342:	b003      	add	sp, #12
 800c344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c348:	4b22      	ldr	r3, [pc, #136]	; (800c3d4 <setvbuf+0x154>)
 800c34a:	429c      	cmp	r4, r3
 800c34c:	d101      	bne.n	800c352 <setvbuf+0xd2>
 800c34e:	68b4      	ldr	r4, [r6, #8]
 800c350:	e7a8      	b.n	800c2a4 <setvbuf+0x24>
 800c352:	4b21      	ldr	r3, [pc, #132]	; (800c3d8 <setvbuf+0x158>)
 800c354:	429c      	cmp	r4, r3
 800c356:	bf08      	it	eq
 800c358:	68f4      	ldreq	r4, [r6, #12]
 800c35a:	e7a3      	b.n	800c2a4 <setvbuf+0x24>
 800c35c:	2f00      	cmp	r7, #0
 800c35e:	d0d8      	beq.n	800c312 <setvbuf+0x92>
 800c360:	69b3      	ldr	r3, [r6, #24]
 800c362:	b913      	cbnz	r3, 800c36a <setvbuf+0xea>
 800c364:	4630      	mov	r0, r6
 800c366:	f7ff f907 	bl	800b578 <__sinit>
 800c36a:	f1b8 0f01 	cmp.w	r8, #1
 800c36e:	bf08      	it	eq
 800c370:	89a3      	ldrheq	r3, [r4, #12]
 800c372:	6027      	str	r7, [r4, #0]
 800c374:	bf04      	itt	eq
 800c376:	f043 0301 	orreq.w	r3, r3, #1
 800c37a:	81a3      	strheq	r3, [r4, #12]
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	f013 0008 	ands.w	r0, r3, #8
 800c382:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800c386:	d01b      	beq.n	800c3c0 <setvbuf+0x140>
 800c388:	f013 0001 	ands.w	r0, r3, #1
 800c38c:	bf18      	it	ne
 800c38e:	426d      	negne	r5, r5
 800c390:	f04f 0300 	mov.w	r3, #0
 800c394:	bf1d      	ittte	ne
 800c396:	60a3      	strne	r3, [r4, #8]
 800c398:	61a5      	strne	r5, [r4, #24]
 800c39a:	4618      	movne	r0, r3
 800c39c:	60a5      	streq	r5, [r4, #8]
 800c39e:	e7d0      	b.n	800c342 <setvbuf+0xc2>
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	f7ff f9c5 	bl	800b730 <malloc>
 800c3a6:	4607      	mov	r7, r0
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d0bc      	beq.n	800c326 <setvbuf+0xa6>
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	464d      	mov	r5, r9
 800c3b6:	e7d3      	b.n	800c360 <setvbuf+0xe0>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e7b6      	b.n	800c32a <setvbuf+0xaa>
 800c3bc:	46a9      	mov	r9, r5
 800c3be:	e7f5      	b.n	800c3ac <setvbuf+0x12c>
 800c3c0:	60a0      	str	r0, [r4, #8]
 800c3c2:	e7be      	b.n	800c342 <setvbuf+0xc2>
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	e7bb      	b.n	800c342 <setvbuf+0xc2>
 800c3ca:	bf00      	nop
 800c3cc:	2000017c 	.word	0x2000017c
 800c3d0:	0800e070 	.word	0x0800e070
 800c3d4:	0800e090 	.word	0x0800e090
 800c3d8:	0800e050 	.word	0x0800e050

0800c3dc <__sread>:
 800c3dc:	b510      	push	{r4, lr}
 800c3de:	460c      	mov	r4, r1
 800c3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e4:	f001 fc4a 	bl	800dc7c <_read_r>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	bfab      	itete	ge
 800c3ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c3f0:	181b      	addge	r3, r3, r0
 800c3f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3f6:	bfac      	ite	ge
 800c3f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3fa:	81a3      	strhlt	r3, [r4, #12]
 800c3fc:	bd10      	pop	{r4, pc}

0800c3fe <__swrite>:
 800c3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c402:	461f      	mov	r7, r3
 800c404:	898b      	ldrh	r3, [r1, #12]
 800c406:	05db      	lsls	r3, r3, #23
 800c408:	4605      	mov	r5, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	4616      	mov	r6, r2
 800c40e:	d505      	bpl.n	800c41c <__swrite+0x1e>
 800c410:	2302      	movs	r3, #2
 800c412:	2200      	movs	r2, #0
 800c414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c418:	f000 ff84 	bl	800d324 <_lseek_r>
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c426:	81a3      	strh	r3, [r4, #12]
 800c428:	4632      	mov	r2, r6
 800c42a:	463b      	mov	r3, r7
 800c42c:	4628      	mov	r0, r5
 800c42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	f000 b869 	b.w	800c508 <_write_r>

0800c436 <__sseek>:
 800c436:	b510      	push	{r4, lr}
 800c438:	460c      	mov	r4, r1
 800c43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c43e:	f000 ff71 	bl	800d324 <_lseek_r>
 800c442:	1c43      	adds	r3, r0, #1
 800c444:	89a3      	ldrh	r3, [r4, #12]
 800c446:	bf15      	itete	ne
 800c448:	6560      	strne	r0, [r4, #84]	; 0x54
 800c44a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c44e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c452:	81a3      	strheq	r3, [r4, #12]
 800c454:	bf18      	it	ne
 800c456:	81a3      	strhne	r3, [r4, #12]
 800c458:	bd10      	pop	{r4, pc}

0800c45a <__sclose>:
 800c45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45e:	f000 b8d3 	b.w	800c608 <_close_r>
	...

0800c464 <__swbuf_r>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	460e      	mov	r6, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	4605      	mov	r5, r0
 800c46c:	b118      	cbz	r0, 800c476 <__swbuf_r+0x12>
 800c46e:	6983      	ldr	r3, [r0, #24]
 800c470:	b90b      	cbnz	r3, 800c476 <__swbuf_r+0x12>
 800c472:	f7ff f881 	bl	800b578 <__sinit>
 800c476:	4b21      	ldr	r3, [pc, #132]	; (800c4fc <__swbuf_r+0x98>)
 800c478:	429c      	cmp	r4, r3
 800c47a:	d12a      	bne.n	800c4d2 <__swbuf_r+0x6e>
 800c47c:	686c      	ldr	r4, [r5, #4]
 800c47e:	69a3      	ldr	r3, [r4, #24]
 800c480:	60a3      	str	r3, [r4, #8]
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	071a      	lsls	r2, r3, #28
 800c486:	d52e      	bpl.n	800c4e6 <__swbuf_r+0x82>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	b363      	cbz	r3, 800c4e6 <__swbuf_r+0x82>
 800c48c:	6923      	ldr	r3, [r4, #16]
 800c48e:	6820      	ldr	r0, [r4, #0]
 800c490:	1ac0      	subs	r0, r0, r3
 800c492:	6963      	ldr	r3, [r4, #20]
 800c494:	b2f6      	uxtb	r6, r6
 800c496:	4283      	cmp	r3, r0
 800c498:	4637      	mov	r7, r6
 800c49a:	dc04      	bgt.n	800c4a6 <__swbuf_r+0x42>
 800c49c:	4621      	mov	r1, r4
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f7fe ffee 	bl	800b480 <_fflush_r>
 800c4a4:	bb28      	cbnz	r0, 800c4f2 <__swbuf_r+0x8e>
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	60a3      	str	r3, [r4, #8]
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	6022      	str	r2, [r4, #0]
 800c4b2:	701e      	strb	r6, [r3, #0]
 800c4b4:	6963      	ldr	r3, [r4, #20]
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	4283      	cmp	r3, r0
 800c4ba:	d004      	beq.n	800c4c6 <__swbuf_r+0x62>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	07db      	lsls	r3, r3, #31
 800c4c0:	d519      	bpl.n	800c4f6 <__swbuf_r+0x92>
 800c4c2:	2e0a      	cmp	r6, #10
 800c4c4:	d117      	bne.n	800c4f6 <__swbuf_r+0x92>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f7fe ffd9 	bl	800b480 <_fflush_r>
 800c4ce:	b190      	cbz	r0, 800c4f6 <__swbuf_r+0x92>
 800c4d0:	e00f      	b.n	800c4f2 <__swbuf_r+0x8e>
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <__swbuf_r+0x9c>)
 800c4d4:	429c      	cmp	r4, r3
 800c4d6:	d101      	bne.n	800c4dc <__swbuf_r+0x78>
 800c4d8:	68ac      	ldr	r4, [r5, #8]
 800c4da:	e7d0      	b.n	800c47e <__swbuf_r+0x1a>
 800c4dc:	4b09      	ldr	r3, [pc, #36]	; (800c504 <__swbuf_r+0xa0>)
 800c4de:	429c      	cmp	r4, r3
 800c4e0:	bf08      	it	eq
 800c4e2:	68ec      	ldreq	r4, [r5, #12]
 800c4e4:	e7cb      	b.n	800c47e <__swbuf_r+0x1a>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f000 f81f 	bl	800c52c <__swsetup_r>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0cc      	beq.n	800c48c <__swbuf_r+0x28>
 800c4f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0800e070 	.word	0x0800e070
 800c500:	0800e090 	.word	0x0800e090
 800c504:	0800e050 	.word	0x0800e050

0800c508 <_write_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4c07      	ldr	r4, [pc, #28]	; (800c528 <_write_r+0x20>)
 800c50c:	4605      	mov	r5, r0
 800c50e:	4608      	mov	r0, r1
 800c510:	4611      	mov	r1, r2
 800c512:	2200      	movs	r2, #0
 800c514:	6022      	str	r2, [r4, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	f7fe f96f 	bl	800a7fa <_write>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_write_r+0x1e>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	b103      	cbz	r3, 800c526 <_write_r+0x1e>
 800c524:	602b      	str	r3, [r5, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20001fd8 	.word	0x20001fd8

0800c52c <__swsetup_r>:
 800c52c:	4b32      	ldr	r3, [pc, #200]	; (800c5f8 <__swsetup_r+0xcc>)
 800c52e:	b570      	push	{r4, r5, r6, lr}
 800c530:	681d      	ldr	r5, [r3, #0]
 800c532:	4606      	mov	r6, r0
 800c534:	460c      	mov	r4, r1
 800c536:	b125      	cbz	r5, 800c542 <__swsetup_r+0x16>
 800c538:	69ab      	ldr	r3, [r5, #24]
 800c53a:	b913      	cbnz	r3, 800c542 <__swsetup_r+0x16>
 800c53c:	4628      	mov	r0, r5
 800c53e:	f7ff f81b 	bl	800b578 <__sinit>
 800c542:	4b2e      	ldr	r3, [pc, #184]	; (800c5fc <__swsetup_r+0xd0>)
 800c544:	429c      	cmp	r4, r3
 800c546:	d10f      	bne.n	800c568 <__swsetup_r+0x3c>
 800c548:	686c      	ldr	r4, [r5, #4]
 800c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54e:	b29a      	uxth	r2, r3
 800c550:	0715      	lsls	r5, r2, #28
 800c552:	d42c      	bmi.n	800c5ae <__swsetup_r+0x82>
 800c554:	06d0      	lsls	r0, r2, #27
 800c556:	d411      	bmi.n	800c57c <__swsetup_r+0x50>
 800c558:	2209      	movs	r2, #9
 800c55a:	6032      	str	r2, [r6, #0]
 800c55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	f04f 30ff 	mov.w	r0, #4294967295
 800c566:	e03e      	b.n	800c5e6 <__swsetup_r+0xba>
 800c568:	4b25      	ldr	r3, [pc, #148]	; (800c600 <__swsetup_r+0xd4>)
 800c56a:	429c      	cmp	r4, r3
 800c56c:	d101      	bne.n	800c572 <__swsetup_r+0x46>
 800c56e:	68ac      	ldr	r4, [r5, #8]
 800c570:	e7eb      	b.n	800c54a <__swsetup_r+0x1e>
 800c572:	4b24      	ldr	r3, [pc, #144]	; (800c604 <__swsetup_r+0xd8>)
 800c574:	429c      	cmp	r4, r3
 800c576:	bf08      	it	eq
 800c578:	68ec      	ldreq	r4, [r5, #12]
 800c57a:	e7e6      	b.n	800c54a <__swsetup_r+0x1e>
 800c57c:	0751      	lsls	r1, r2, #29
 800c57e:	d512      	bpl.n	800c5a6 <__swsetup_r+0x7a>
 800c580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c582:	b141      	cbz	r1, 800c596 <__swsetup_r+0x6a>
 800c584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c588:	4299      	cmp	r1, r3
 800c58a:	d002      	beq.n	800c592 <__swsetup_r+0x66>
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff f8e7 	bl	800b760 <_free_r>
 800c592:	2300      	movs	r3, #0
 800c594:	6363      	str	r3, [r4, #52]	; 0x34
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c59c:	81a3      	strh	r3, [r4, #12]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	6063      	str	r3, [r4, #4]
 800c5a2:	6923      	ldr	r3, [r4, #16]
 800c5a4:	6023      	str	r3, [r4, #0]
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	f043 0308 	orr.w	r3, r3, #8
 800c5ac:	81a3      	strh	r3, [r4, #12]
 800c5ae:	6923      	ldr	r3, [r4, #16]
 800c5b0:	b94b      	cbnz	r3, 800c5c6 <__swsetup_r+0x9a>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5bc:	d003      	beq.n	800c5c6 <__swsetup_r+0x9a>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f000 fee5 	bl	800d390 <__smakebuf_r>
 800c5c6:	89a2      	ldrh	r2, [r4, #12]
 800c5c8:	f012 0301 	ands.w	r3, r2, #1
 800c5cc:	d00c      	beq.n	800c5e8 <__swsetup_r+0xbc>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60a3      	str	r3, [r4, #8]
 800c5d2:	6963      	ldr	r3, [r4, #20]
 800c5d4:	425b      	negs	r3, r3
 800c5d6:	61a3      	str	r3, [r4, #24]
 800c5d8:	6923      	ldr	r3, [r4, #16]
 800c5da:	b953      	cbnz	r3, 800c5f2 <__swsetup_r+0xc6>
 800c5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c5e4:	d1ba      	bne.n	800c55c <__swsetup_r+0x30>
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	0792      	lsls	r2, r2, #30
 800c5ea:	bf58      	it	pl
 800c5ec:	6963      	ldrpl	r3, [r4, #20]
 800c5ee:	60a3      	str	r3, [r4, #8]
 800c5f0:	e7f2      	b.n	800c5d8 <__swsetup_r+0xac>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	e7f7      	b.n	800c5e6 <__swsetup_r+0xba>
 800c5f6:	bf00      	nop
 800c5f8:	2000017c 	.word	0x2000017c
 800c5fc:	0800e070 	.word	0x0800e070
 800c600:	0800e090 	.word	0x0800e090
 800c604:	0800e050 	.word	0x0800e050

0800c608 <_close_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4c06      	ldr	r4, [pc, #24]	; (800c624 <_close_r+0x1c>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4605      	mov	r5, r0
 800c610:	4608      	mov	r0, r1
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	f7fe f90d 	bl	800a832 <_close>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	d102      	bne.n	800c622 <_close_r+0x1a>
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	b103      	cbz	r3, 800c622 <_close_r+0x1a>
 800c620:	602b      	str	r3, [r5, #0]
 800c622:	bd38      	pop	{r3, r4, r5, pc}
 800c624:	20001fd8 	.word	0x20001fd8

0800c628 <quorem>:
 800c628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	6903      	ldr	r3, [r0, #16]
 800c62e:	690c      	ldr	r4, [r1, #16]
 800c630:	42a3      	cmp	r3, r4
 800c632:	4680      	mov	r8, r0
 800c634:	f2c0 8082 	blt.w	800c73c <quorem+0x114>
 800c638:	3c01      	subs	r4, #1
 800c63a:	f101 0714 	add.w	r7, r1, #20
 800c63e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c642:	f100 0614 	add.w	r6, r0, #20
 800c646:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c64a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c64e:	eb06 030c 	add.w	r3, r6, ip
 800c652:	3501      	adds	r5, #1
 800c654:	eb07 090c 	add.w	r9, r7, ip
 800c658:	9301      	str	r3, [sp, #4]
 800c65a:	fbb0 f5f5 	udiv	r5, r0, r5
 800c65e:	b395      	cbz	r5, 800c6c6 <quorem+0x9e>
 800c660:	f04f 0a00 	mov.w	sl, #0
 800c664:	4638      	mov	r0, r7
 800c666:	46b6      	mov	lr, r6
 800c668:	46d3      	mov	fp, sl
 800c66a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c66e:	b293      	uxth	r3, r2
 800c670:	fb05 a303 	mla	r3, r5, r3, sl
 800c674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c678:	b29b      	uxth	r3, r3
 800c67a:	ebab 0303 	sub.w	r3, fp, r3
 800c67e:	0c12      	lsrs	r2, r2, #16
 800c680:	f8de b000 	ldr.w	fp, [lr]
 800c684:	fb05 a202 	mla	r2, r5, r2, sl
 800c688:	fa13 f38b 	uxtah	r3, r3, fp
 800c68c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c690:	fa1f fb82 	uxth.w	fp, r2
 800c694:	f8de 2000 	ldr.w	r2, [lr]
 800c698:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6a6:	4581      	cmp	r9, r0
 800c6a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6ac:	f84e 3b04 	str.w	r3, [lr], #4
 800c6b0:	d2db      	bcs.n	800c66a <quorem+0x42>
 800c6b2:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6b6:	b933      	cbnz	r3, 800c6c6 <quorem+0x9e>
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	3b04      	subs	r3, #4
 800c6bc:	429e      	cmp	r6, r3
 800c6be:	461a      	mov	r2, r3
 800c6c0:	d330      	bcc.n	800c724 <quorem+0xfc>
 800c6c2:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	f001 f8c4 	bl	800d854 <__mcmp>
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	db25      	blt.n	800c71c <quorem+0xf4>
 800c6d0:	3501      	adds	r5, #1
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f04f 0c00 	mov.w	ip, #0
 800c6d8:	f857 2b04 	ldr.w	r2, [r7], #4
 800c6dc:	f8d0 e000 	ldr.w	lr, [r0]
 800c6e0:	b293      	uxth	r3, r2
 800c6e2:	ebac 0303 	sub.w	r3, ip, r3
 800c6e6:	0c12      	lsrs	r2, r2, #16
 800c6e8:	fa13 f38e 	uxtah	r3, r3, lr
 800c6ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c6f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6fa:	45b9      	cmp	r9, r7
 800c6fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c700:	f840 3b04 	str.w	r3, [r0], #4
 800c704:	d2e8      	bcs.n	800c6d8 <quorem+0xb0>
 800c706:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c70a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c70e:	b92a      	cbnz	r2, 800c71c <quorem+0xf4>
 800c710:	3b04      	subs	r3, #4
 800c712:	429e      	cmp	r6, r3
 800c714:	461a      	mov	r2, r3
 800c716:	d30b      	bcc.n	800c730 <quorem+0x108>
 800c718:	f8c8 4010 	str.w	r4, [r8, #16]
 800c71c:	4628      	mov	r0, r5
 800c71e:	b003      	add	sp, #12
 800c720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	3b04      	subs	r3, #4
 800c728:	2a00      	cmp	r2, #0
 800c72a:	d1ca      	bne.n	800c6c2 <quorem+0x9a>
 800c72c:	3c01      	subs	r4, #1
 800c72e:	e7c5      	b.n	800c6bc <quorem+0x94>
 800c730:	6812      	ldr	r2, [r2, #0]
 800c732:	3b04      	subs	r3, #4
 800c734:	2a00      	cmp	r2, #0
 800c736:	d1ef      	bne.n	800c718 <quorem+0xf0>
 800c738:	3c01      	subs	r4, #1
 800c73a:	e7ea      	b.n	800c712 <quorem+0xea>
 800c73c:	2000      	movs	r0, #0
 800c73e:	e7ee      	b.n	800c71e <quorem+0xf6>

0800c740 <_dtoa_r>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	ec57 6b10 	vmov	r6, r7, d0
 800c748:	b097      	sub	sp, #92	; 0x5c
 800c74a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c74c:	9106      	str	r1, [sp, #24]
 800c74e:	4604      	mov	r4, r0
 800c750:	920b      	str	r2, [sp, #44]	; 0x2c
 800c752:	9312      	str	r3, [sp, #72]	; 0x48
 800c754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c758:	e9cd 6700 	strd	r6, r7, [sp]
 800c75c:	b93d      	cbnz	r5, 800c76e <_dtoa_r+0x2e>
 800c75e:	2010      	movs	r0, #16
 800c760:	f7fe ffe6 	bl	800b730 <malloc>
 800c764:	6260      	str	r0, [r4, #36]	; 0x24
 800c766:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c76a:	6005      	str	r5, [r0, #0]
 800c76c:	60c5      	str	r5, [r0, #12]
 800c76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c770:	6819      	ldr	r1, [r3, #0]
 800c772:	b151      	cbz	r1, 800c78a <_dtoa_r+0x4a>
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	604a      	str	r2, [r1, #4]
 800c778:	2301      	movs	r3, #1
 800c77a:	4093      	lsls	r3, r2
 800c77c:	608b      	str	r3, [r1, #8]
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 fe87 	bl	800d492 <_Bfree>
 800c784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	1e3b      	subs	r3, r7, #0
 800c78c:	bfbb      	ittet	lt
 800c78e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c792:	9301      	strlt	r3, [sp, #4]
 800c794:	2300      	movge	r3, #0
 800c796:	2201      	movlt	r2, #1
 800c798:	bfac      	ite	ge
 800c79a:	f8c8 3000 	strge.w	r3, [r8]
 800c79e:	f8c8 2000 	strlt.w	r2, [r8]
 800c7a2:	4baf      	ldr	r3, [pc, #700]	; (800ca60 <_dtoa_r+0x320>)
 800c7a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7a8:	ea33 0308 	bics.w	r3, r3, r8
 800c7ac:	d114      	bne.n	800c7d8 <_dtoa_r+0x98>
 800c7ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	b923      	cbnz	r3, 800c7c4 <_dtoa_r+0x84>
 800c7ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	f000 8542 	beq.w	800d248 <_dtoa_r+0xb08>
 800c7c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ca74 <_dtoa_r+0x334>
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 8544 	beq.w	800d258 <_dtoa_r+0xb18>
 800c7d0:	f10b 0303 	add.w	r3, fp, #3
 800c7d4:	f000 bd3e 	b.w	800d254 <_dtoa_r+0xb14>
 800c7d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2300      	movs	r3, #0
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f4 f970 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7e8:	4681      	mov	r9, r0
 800c7ea:	b168      	cbz	r0, 800c808 <_dtoa_r+0xc8>
 800c7ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	6013      	str	r3, [r2, #0]
 800c7f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 8524 	beq.w	800d242 <_dtoa_r+0xb02>
 800c7fa:	4b9a      	ldr	r3, [pc, #616]	; (800ca64 <_dtoa_r+0x324>)
 800c7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7fe:	f103 3bff 	add.w	fp, r3, #4294967295
 800c802:	6013      	str	r3, [r2, #0]
 800c804:	f000 bd28 	b.w	800d258 <_dtoa_r+0xb18>
 800c808:	aa14      	add	r2, sp, #80	; 0x50
 800c80a:	a915      	add	r1, sp, #84	; 0x54
 800c80c:	ec47 6b10 	vmov	d0, r6, r7
 800c810:	4620      	mov	r0, r4
 800c812:	f001 f896 	bl	800d942 <__d2b>
 800c816:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c81a:	9004      	str	r0, [sp, #16]
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	d07c      	beq.n	800c91a <_dtoa_r+0x1da>
 800c820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c824:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c828:	46b2      	mov	sl, r6
 800c82a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c82e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c832:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c836:	2200      	movs	r2, #0
 800c838:	4b8b      	ldr	r3, [pc, #556]	; (800ca68 <_dtoa_r+0x328>)
 800c83a:	4650      	mov	r0, sl
 800c83c:	4659      	mov	r1, fp
 800c83e:	f7f3 fd23 	bl	8000288 <__aeabi_dsub>
 800c842:	a381      	add	r3, pc, #516	; (adr r3, 800ca48 <_dtoa_r+0x308>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fed6 	bl	80005f8 <__aeabi_dmul>
 800c84c:	a380      	add	r3, pc, #512	; (adr r3, 800ca50 <_dtoa_r+0x310>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	f7f3 fd1b 	bl	800028c <__adddf3>
 800c856:	4606      	mov	r6, r0
 800c858:	4628      	mov	r0, r5
 800c85a:	460f      	mov	r7, r1
 800c85c:	f7f3 fe62 	bl	8000524 <__aeabi_i2d>
 800c860:	a37d      	add	r3, pc, #500	; (adr r3, 800ca58 <_dtoa_r+0x318>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f3 fec7 	bl	80005f8 <__aeabi_dmul>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	4630      	mov	r0, r6
 800c870:	4639      	mov	r1, r7
 800c872:	f7f3 fd0b 	bl	800028c <__adddf3>
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	f7f4 f96d 	bl	8000b58 <__aeabi_d2iz>
 800c87e:	2200      	movs	r2, #0
 800c880:	4682      	mov	sl, r0
 800c882:	2300      	movs	r3, #0
 800c884:	4630      	mov	r0, r6
 800c886:	4639      	mov	r1, r7
 800c888:	f7f4 f928 	bl	8000adc <__aeabi_dcmplt>
 800c88c:	b148      	cbz	r0, 800c8a2 <_dtoa_r+0x162>
 800c88e:	4650      	mov	r0, sl
 800c890:	f7f3 fe48 	bl	8000524 <__aeabi_i2d>
 800c894:	4632      	mov	r2, r6
 800c896:	463b      	mov	r3, r7
 800c898:	f7f4 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800c89c:	b908      	cbnz	r0, 800c8a2 <_dtoa_r+0x162>
 800c89e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8a2:	f1ba 0f16 	cmp.w	sl, #22
 800c8a6:	d859      	bhi.n	800c95c <_dtoa_r+0x21c>
 800c8a8:	4970      	ldr	r1, [pc, #448]	; (800ca6c <_dtoa_r+0x32c>)
 800c8aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b6:	f7f4 f92f 	bl	8000b18 <__aeabi_dcmpgt>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d050      	beq.n	800c960 <_dtoa_r+0x220>
 800c8be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8c8:	1b5d      	subs	r5, r3, r5
 800c8ca:	f1b5 0801 	subs.w	r8, r5, #1
 800c8ce:	bf49      	itett	mi
 800c8d0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c8d4:	2300      	movpl	r3, #0
 800c8d6:	9305      	strmi	r3, [sp, #20]
 800c8d8:	f04f 0800 	movmi.w	r8, #0
 800c8dc:	bf58      	it	pl
 800c8de:	9305      	strpl	r3, [sp, #20]
 800c8e0:	f1ba 0f00 	cmp.w	sl, #0
 800c8e4:	db3e      	blt.n	800c964 <_dtoa_r+0x224>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	44d0      	add	r8, sl
 800c8ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c8ee:	9307      	str	r3, [sp, #28]
 800c8f0:	9b06      	ldr	r3, [sp, #24]
 800c8f2:	2b09      	cmp	r3, #9
 800c8f4:	f200 8090 	bhi.w	800ca18 <_dtoa_r+0x2d8>
 800c8f8:	2b05      	cmp	r3, #5
 800c8fa:	bfc4      	itt	gt
 800c8fc:	3b04      	subgt	r3, #4
 800c8fe:	9306      	strgt	r3, [sp, #24]
 800c900:	9b06      	ldr	r3, [sp, #24]
 800c902:	f1a3 0302 	sub.w	r3, r3, #2
 800c906:	bfcc      	ite	gt
 800c908:	2500      	movgt	r5, #0
 800c90a:	2501      	movle	r5, #1
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	f200 808f 	bhi.w	800ca30 <_dtoa_r+0x2f0>
 800c912:	e8df f003 	tbb	[pc, r3]
 800c916:	7f7d      	.short	0x7f7d
 800c918:	7131      	.short	0x7131
 800c91a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c91e:	441d      	add	r5, r3
 800c920:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c924:	2820      	cmp	r0, #32
 800c926:	dd13      	ble.n	800c950 <_dtoa_r+0x210>
 800c928:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c92c:	9b00      	ldr	r3, [sp, #0]
 800c92e:	fa08 f800 	lsl.w	r8, r8, r0
 800c932:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c936:	fa23 f000 	lsr.w	r0, r3, r0
 800c93a:	ea48 0000 	orr.w	r0, r8, r0
 800c93e:	f7f3 fde1 	bl	8000504 <__aeabi_ui2d>
 800c942:	2301      	movs	r3, #1
 800c944:	4682      	mov	sl, r0
 800c946:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c94a:	3d01      	subs	r5, #1
 800c94c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c94e:	e772      	b.n	800c836 <_dtoa_r+0xf6>
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	f1c0 0020 	rsb	r0, r0, #32
 800c956:	fa03 f000 	lsl.w	r0, r3, r0
 800c95a:	e7f0      	b.n	800c93e <_dtoa_r+0x1fe>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e7b1      	b.n	800c8c4 <_dtoa_r+0x184>
 800c960:	900f      	str	r0, [sp, #60]	; 0x3c
 800c962:	e7b0      	b.n	800c8c6 <_dtoa_r+0x186>
 800c964:	9b05      	ldr	r3, [sp, #20]
 800c966:	eba3 030a 	sub.w	r3, r3, sl
 800c96a:	9305      	str	r3, [sp, #20]
 800c96c:	f1ca 0300 	rsb	r3, sl, #0
 800c970:	9307      	str	r3, [sp, #28]
 800c972:	2300      	movs	r3, #0
 800c974:	930e      	str	r3, [sp, #56]	; 0x38
 800c976:	e7bb      	b.n	800c8f0 <_dtoa_r+0x1b0>
 800c978:	2301      	movs	r3, #1
 800c97a:	930a      	str	r3, [sp, #40]	; 0x28
 800c97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dd59      	ble.n	800ca36 <_dtoa_r+0x2f6>
 800c982:	9302      	str	r3, [sp, #8]
 800c984:	4699      	mov	r9, r3
 800c986:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c988:	2200      	movs	r2, #0
 800c98a:	6072      	str	r2, [r6, #4]
 800c98c:	2204      	movs	r2, #4
 800c98e:	f102 0014 	add.w	r0, r2, #20
 800c992:	4298      	cmp	r0, r3
 800c994:	6871      	ldr	r1, [r6, #4]
 800c996:	d953      	bls.n	800ca40 <_dtoa_r+0x300>
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 fd46 	bl	800d42a <_Balloc>
 800c99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9a0:	6030      	str	r0, [r6, #0]
 800c9a2:	f1b9 0f0e 	cmp.w	r9, #14
 800c9a6:	f8d3 b000 	ldr.w	fp, [r3]
 800c9aa:	f200 80e6 	bhi.w	800cb7a <_dtoa_r+0x43a>
 800c9ae:	2d00      	cmp	r5, #0
 800c9b0:	f000 80e3 	beq.w	800cb7a <_dtoa_r+0x43a>
 800c9b4:	ed9d 7b00 	vldr	d7, [sp]
 800c9b8:	f1ba 0f00 	cmp.w	sl, #0
 800c9bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c9c0:	dd74      	ble.n	800caac <_dtoa_r+0x36c>
 800c9c2:	4a2a      	ldr	r2, [pc, #168]	; (800ca6c <_dtoa_r+0x32c>)
 800c9c4:	f00a 030f 	and.w	r3, sl, #15
 800c9c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9cc:	ed93 7b00 	vldr	d7, [r3]
 800c9d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c9d4:	06f0      	lsls	r0, r6, #27
 800c9d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c9da:	d565      	bpl.n	800caa8 <_dtoa_r+0x368>
 800c9dc:	4b24      	ldr	r3, [pc, #144]	; (800ca70 <_dtoa_r+0x330>)
 800c9de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c9e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9e6:	f7f3 ff31 	bl	800084c <__aeabi_ddiv>
 800c9ea:	e9cd 0100 	strd	r0, r1, [sp]
 800c9ee:	f006 060f 	and.w	r6, r6, #15
 800c9f2:	2503      	movs	r5, #3
 800c9f4:	4f1e      	ldr	r7, [pc, #120]	; (800ca70 <_dtoa_r+0x330>)
 800c9f6:	e04c      	b.n	800ca92 <_dtoa_r+0x352>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9fe:	4453      	add	r3, sl
 800ca00:	f103 0901 	add.w	r9, r3, #1
 800ca04:	9302      	str	r3, [sp, #8]
 800ca06:	464b      	mov	r3, r9
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	bfb8      	it	lt
 800ca0c:	2301      	movlt	r3, #1
 800ca0e:	e7ba      	b.n	800c986 <_dtoa_r+0x246>
 800ca10:	2300      	movs	r3, #0
 800ca12:	e7b2      	b.n	800c97a <_dtoa_r+0x23a>
 800ca14:	2300      	movs	r3, #0
 800ca16:	e7f0      	b.n	800c9fa <_dtoa_r+0x2ba>
 800ca18:	2501      	movs	r5, #1
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9306      	str	r3, [sp, #24]
 800ca1e:	950a      	str	r5, [sp, #40]	; 0x28
 800ca20:	f04f 33ff 	mov.w	r3, #4294967295
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	4699      	mov	r9, r3
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2312      	movs	r3, #18
 800ca2c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca2e:	e7aa      	b.n	800c986 <_dtoa_r+0x246>
 800ca30:	2301      	movs	r3, #1
 800ca32:	930a      	str	r3, [sp, #40]	; 0x28
 800ca34:	e7f4      	b.n	800ca20 <_dtoa_r+0x2e0>
 800ca36:	2301      	movs	r3, #1
 800ca38:	9302      	str	r3, [sp, #8]
 800ca3a:	4699      	mov	r9, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	e7f5      	b.n	800ca2c <_dtoa_r+0x2ec>
 800ca40:	3101      	adds	r1, #1
 800ca42:	6071      	str	r1, [r6, #4]
 800ca44:	0052      	lsls	r2, r2, #1
 800ca46:	e7a2      	b.n	800c98e <_dtoa_r+0x24e>
 800ca48:	636f4361 	.word	0x636f4361
 800ca4c:	3fd287a7 	.word	0x3fd287a7
 800ca50:	8b60c8b3 	.word	0x8b60c8b3
 800ca54:	3fc68a28 	.word	0x3fc68a28
 800ca58:	509f79fb 	.word	0x509f79fb
 800ca5c:	3fd34413 	.word	0x3fd34413
 800ca60:	7ff00000 	.word	0x7ff00000
 800ca64:	0800e0c5 	.word	0x0800e0c5
 800ca68:	3ff80000 	.word	0x3ff80000
 800ca6c:	0800e120 	.word	0x0800e120
 800ca70:	0800e0f8 	.word	0x0800e0f8
 800ca74:	0800e0f1 	.word	0x0800e0f1
 800ca78:	07f1      	lsls	r1, r6, #31
 800ca7a:	d508      	bpl.n	800ca8e <_dtoa_r+0x34e>
 800ca7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca84:	f7f3 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ca88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	1076      	asrs	r6, r6, #1
 800ca90:	3708      	adds	r7, #8
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d1f0      	bne.n	800ca78 <_dtoa_r+0x338>
 800ca96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca9e:	f7f3 fed5 	bl	800084c <__aeabi_ddiv>
 800caa2:	e9cd 0100 	strd	r0, r1, [sp]
 800caa6:	e01a      	b.n	800cade <_dtoa_r+0x39e>
 800caa8:	2502      	movs	r5, #2
 800caaa:	e7a3      	b.n	800c9f4 <_dtoa_r+0x2b4>
 800caac:	f000 80a0 	beq.w	800cbf0 <_dtoa_r+0x4b0>
 800cab0:	f1ca 0600 	rsb	r6, sl, #0
 800cab4:	4b9f      	ldr	r3, [pc, #636]	; (800cd34 <_dtoa_r+0x5f4>)
 800cab6:	4fa0      	ldr	r7, [pc, #640]	; (800cd38 <_dtoa_r+0x5f8>)
 800cab8:	f006 020f 	and.w	r2, r6, #15
 800cabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cac8:	f7f3 fd96 	bl	80005f8 <__aeabi_dmul>
 800cacc:	e9cd 0100 	strd	r0, r1, [sp]
 800cad0:	1136      	asrs	r6, r6, #4
 800cad2:	2300      	movs	r3, #0
 800cad4:	2502      	movs	r5, #2
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	d17f      	bne.n	800cbda <_dtoa_r+0x49a>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1e1      	bne.n	800caa2 <_dtoa_r+0x362>
 800cade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 8087 	beq.w	800cbf4 <_dtoa_r+0x4b4>
 800cae6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800caea:	2200      	movs	r2, #0
 800caec:	4b93      	ldr	r3, [pc, #588]	; (800cd3c <_dtoa_r+0x5fc>)
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	f7f3 fff3 	bl	8000adc <__aeabi_dcmplt>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d07c      	beq.n	800cbf4 <_dtoa_r+0x4b4>
 800cafa:	f1b9 0f00 	cmp.w	r9, #0
 800cafe:	d079      	beq.n	800cbf4 <_dtoa_r+0x4b4>
 800cb00:	9b02      	ldr	r3, [sp, #8]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dd35      	ble.n	800cb72 <_dtoa_r+0x432>
 800cb06:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cb0a:	9308      	str	r3, [sp, #32]
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	2200      	movs	r2, #0
 800cb10:	4b8b      	ldr	r3, [pc, #556]	; (800cd40 <_dtoa_r+0x600>)
 800cb12:	4630      	mov	r0, r6
 800cb14:	f7f3 fd70 	bl	80005f8 <__aeabi_dmul>
 800cb18:	e9cd 0100 	strd	r0, r1, [sp]
 800cb1c:	9f02      	ldr	r7, [sp, #8]
 800cb1e:	3501      	adds	r5, #1
 800cb20:	4628      	mov	r0, r5
 800cb22:	f7f3 fcff 	bl	8000524 <__aeabi_i2d>
 800cb26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb2a:	f7f3 fd65 	bl	80005f8 <__aeabi_dmul>
 800cb2e:	2200      	movs	r2, #0
 800cb30:	4b84      	ldr	r3, [pc, #528]	; (800cd44 <_dtoa_r+0x604>)
 800cb32:	f7f3 fbab 	bl	800028c <__adddf3>
 800cb36:	4605      	mov	r5, r0
 800cb38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb3c:	2f00      	cmp	r7, #0
 800cb3e:	d15d      	bne.n	800cbfc <_dtoa_r+0x4bc>
 800cb40:	2200      	movs	r2, #0
 800cb42:	4b81      	ldr	r3, [pc, #516]	; (800cd48 <_dtoa_r+0x608>)
 800cb44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb48:	f7f3 fb9e 	bl	8000288 <__aeabi_dsub>
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	4633      	mov	r3, r6
 800cb50:	e9cd 0100 	strd	r0, r1, [sp]
 800cb54:	f7f3 ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	f040 8288 	bne.w	800d06e <_dtoa_r+0x92e>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb68:	f7f3 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	f040 827c 	bne.w	800d06a <_dtoa_r+0x92a>
 800cb72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb76:	e9cd 2300 	strd	r2, r3, [sp]
 800cb7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f2c0 8150 	blt.w	800ce22 <_dtoa_r+0x6e2>
 800cb82:	f1ba 0f0e 	cmp.w	sl, #14
 800cb86:	f300 814c 	bgt.w	800ce22 <_dtoa_r+0x6e2>
 800cb8a:	4b6a      	ldr	r3, [pc, #424]	; (800cd34 <_dtoa_r+0x5f4>)
 800cb8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb90:	ed93 7b00 	vldr	d7, [r3]
 800cb94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb9c:	f280 80d8 	bge.w	800cd50 <_dtoa_r+0x610>
 800cba0:	f1b9 0f00 	cmp.w	r9, #0
 800cba4:	f300 80d4 	bgt.w	800cd50 <_dtoa_r+0x610>
 800cba8:	f040 825e 	bne.w	800d068 <_dtoa_r+0x928>
 800cbac:	2200      	movs	r2, #0
 800cbae:	4b66      	ldr	r3, [pc, #408]	; (800cd48 <_dtoa_r+0x608>)
 800cbb0:	ec51 0b17 	vmov	r0, r1, d7
 800cbb4:	f7f3 fd20 	bl	80005f8 <__aeabi_dmul>
 800cbb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbbc:	f7f3 ffa2 	bl	8000b04 <__aeabi_dcmpge>
 800cbc0:	464f      	mov	r7, r9
 800cbc2:	464e      	mov	r6, r9
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	f040 8234 	bne.w	800d032 <_dtoa_r+0x8f2>
 800cbca:	2331      	movs	r3, #49	; 0x31
 800cbcc:	f10b 0501 	add.w	r5, fp, #1
 800cbd0:	f88b 3000 	strb.w	r3, [fp]
 800cbd4:	f10a 0a01 	add.w	sl, sl, #1
 800cbd8:	e22f      	b.n	800d03a <_dtoa_r+0x8fa>
 800cbda:	07f2      	lsls	r2, r6, #31
 800cbdc:	d505      	bpl.n	800cbea <_dtoa_r+0x4aa>
 800cbde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbe2:	f7f3 fd09 	bl	80005f8 <__aeabi_dmul>
 800cbe6:	3501      	adds	r5, #1
 800cbe8:	2301      	movs	r3, #1
 800cbea:	1076      	asrs	r6, r6, #1
 800cbec:	3708      	adds	r7, #8
 800cbee:	e772      	b.n	800cad6 <_dtoa_r+0x396>
 800cbf0:	2502      	movs	r5, #2
 800cbf2:	e774      	b.n	800cade <_dtoa_r+0x39e>
 800cbf4:	f8cd a020 	str.w	sl, [sp, #32]
 800cbf8:	464f      	mov	r7, r9
 800cbfa:	e791      	b.n	800cb20 <_dtoa_r+0x3e0>
 800cbfc:	4b4d      	ldr	r3, [pc, #308]	; (800cd34 <_dtoa_r+0x5f4>)
 800cbfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d047      	beq.n	800cc9c <_dtoa_r+0x55c>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	2000      	movs	r0, #0
 800cc12:	494e      	ldr	r1, [pc, #312]	; (800cd4c <_dtoa_r+0x60c>)
 800cc14:	f7f3 fe1a 	bl	800084c <__aeabi_ddiv>
 800cc18:	462a      	mov	r2, r5
 800cc1a:	4633      	mov	r3, r6
 800cc1c:	f7f3 fb34 	bl	8000288 <__aeabi_dsub>
 800cc20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc24:	465d      	mov	r5, fp
 800cc26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc2a:	f7f3 ff95 	bl	8000b58 <__aeabi_d2iz>
 800cc2e:	4606      	mov	r6, r0
 800cc30:	f7f3 fc78 	bl	8000524 <__aeabi_i2d>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc3c:	f7f3 fb24 	bl	8000288 <__aeabi_dsub>
 800cc40:	3630      	adds	r6, #48	; 0x30
 800cc42:	f805 6b01 	strb.w	r6, [r5], #1
 800cc46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc4a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc4e:	f7f3 ff45 	bl	8000adc <__aeabi_dcmplt>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d163      	bne.n	800cd1e <_dtoa_r+0x5de>
 800cc56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	4937      	ldr	r1, [pc, #220]	; (800cd3c <_dtoa_r+0x5fc>)
 800cc5e:	f7f3 fb13 	bl	8000288 <__aeabi_dsub>
 800cc62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc66:	f7f3 ff39 	bl	8000adc <__aeabi_dcmplt>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	f040 80b7 	bne.w	800cdde <_dtoa_r+0x69e>
 800cc70:	eba5 030b 	sub.w	r3, r5, fp
 800cc74:	429f      	cmp	r7, r3
 800cc76:	f77f af7c 	ble.w	800cb72 <_dtoa_r+0x432>
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	4b30      	ldr	r3, [pc, #192]	; (800cd40 <_dtoa_r+0x600>)
 800cc7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc82:	f7f3 fcb9 	bl	80005f8 <__aeabi_dmul>
 800cc86:	2200      	movs	r2, #0
 800cc88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc8c:	4b2c      	ldr	r3, [pc, #176]	; (800cd40 <_dtoa_r+0x600>)
 800cc8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	e9cd 0100 	strd	r0, r1, [sp]
 800cc9a:	e7c4      	b.n	800cc26 <_dtoa_r+0x4e6>
 800cc9c:	462a      	mov	r2, r5
 800cc9e:	4633      	mov	r3, r6
 800cca0:	f7f3 fcaa 	bl	80005f8 <__aeabi_dmul>
 800cca4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cca8:	eb0b 0507 	add.w	r5, fp, r7
 800ccac:	465e      	mov	r6, fp
 800ccae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccb2:	f7f3 ff51 	bl	8000b58 <__aeabi_d2iz>
 800ccb6:	4607      	mov	r7, r0
 800ccb8:	f7f3 fc34 	bl	8000524 <__aeabi_i2d>
 800ccbc:	3730      	adds	r7, #48	; 0x30
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccc6:	f7f3 fadf 	bl	8000288 <__aeabi_dsub>
 800ccca:	f806 7b01 	strb.w	r7, [r6], #1
 800ccce:	42ae      	cmp	r6, r5
 800ccd0:	e9cd 0100 	strd	r0, r1, [sp]
 800ccd4:	f04f 0200 	mov.w	r2, #0
 800ccd8:	d126      	bne.n	800cd28 <_dtoa_r+0x5e8>
 800ccda:	4b1c      	ldr	r3, [pc, #112]	; (800cd4c <_dtoa_r+0x60c>)
 800ccdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cce0:	f7f3 fad4 	bl	800028c <__adddf3>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccec:	f7f3 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d174      	bne.n	800cdde <_dtoa_r+0x69e>
 800ccf4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	4914      	ldr	r1, [pc, #80]	; (800cd4c <_dtoa_r+0x60c>)
 800ccfc:	f7f3 fac4 	bl	8000288 <__aeabi_dsub>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd08:	f7f3 fee8 	bl	8000adc <__aeabi_dcmplt>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	f43f af30 	beq.w	800cb72 <_dtoa_r+0x432>
 800cd12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd16:	2b30      	cmp	r3, #48	; 0x30
 800cd18:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd1c:	d002      	beq.n	800cd24 <_dtoa_r+0x5e4>
 800cd1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd22:	e04a      	b.n	800cdba <_dtoa_r+0x67a>
 800cd24:	4615      	mov	r5, r2
 800cd26:	e7f4      	b.n	800cd12 <_dtoa_r+0x5d2>
 800cd28:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <_dtoa_r+0x600>)
 800cd2a:	f7f3 fc65 	bl	80005f8 <__aeabi_dmul>
 800cd2e:	e9cd 0100 	strd	r0, r1, [sp]
 800cd32:	e7bc      	b.n	800ccae <_dtoa_r+0x56e>
 800cd34:	0800e120 	.word	0x0800e120
 800cd38:	0800e0f8 	.word	0x0800e0f8
 800cd3c:	3ff00000 	.word	0x3ff00000
 800cd40:	40240000 	.word	0x40240000
 800cd44:	401c0000 	.word	0x401c0000
 800cd48:	40140000 	.word	0x40140000
 800cd4c:	3fe00000 	.word	0x3fe00000
 800cd50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd54:	465d      	mov	r5, fp
 800cd56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	f7f3 fd75 	bl	800084c <__aeabi_ddiv>
 800cd62:	f7f3 fef9 	bl	8000b58 <__aeabi_d2iz>
 800cd66:	4680      	mov	r8, r0
 800cd68:	f7f3 fbdc 	bl	8000524 <__aeabi_i2d>
 800cd6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd70:	f7f3 fc42 	bl	80005f8 <__aeabi_dmul>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4630      	mov	r0, r6
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cd80:	f7f3 fa82 	bl	8000288 <__aeabi_dsub>
 800cd84:	f805 6b01 	strb.w	r6, [r5], #1
 800cd88:	eba5 060b 	sub.w	r6, r5, fp
 800cd8c:	45b1      	cmp	r9, r6
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	d139      	bne.n	800ce08 <_dtoa_r+0x6c8>
 800cd94:	f7f3 fa7a 	bl	800028c <__adddf3>
 800cd98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	460f      	mov	r7, r1
 800cda0:	f7f3 feba 	bl	8000b18 <__aeabi_dcmpgt>
 800cda4:	b9c8      	cbnz	r0, 800cdda <_dtoa_r+0x69a>
 800cda6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdaa:	4630      	mov	r0, r6
 800cdac:	4639      	mov	r1, r7
 800cdae:	f7f3 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb2:	b110      	cbz	r0, 800cdba <_dtoa_r+0x67a>
 800cdb4:	f018 0f01 	tst.w	r8, #1
 800cdb8:	d10f      	bne.n	800cdda <_dtoa_r+0x69a>
 800cdba:	9904      	ldr	r1, [sp, #16]
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f000 fb68 	bl	800d492 <_Bfree>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdc6:	702b      	strb	r3, [r5, #0]
 800cdc8:	f10a 0301 	add.w	r3, sl, #1
 800cdcc:	6013      	str	r3, [r2, #0]
 800cdce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 8241 	beq.w	800d258 <_dtoa_r+0xb18>
 800cdd6:	601d      	str	r5, [r3, #0]
 800cdd8:	e23e      	b.n	800d258 <_dtoa_r+0xb18>
 800cdda:	f8cd a020 	str.w	sl, [sp, #32]
 800cdde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cde2:	2a39      	cmp	r2, #57	; 0x39
 800cde4:	f105 33ff 	add.w	r3, r5, #4294967295
 800cde8:	d108      	bne.n	800cdfc <_dtoa_r+0x6bc>
 800cdea:	459b      	cmp	fp, r3
 800cdec:	d10a      	bne.n	800ce04 <_dtoa_r+0x6c4>
 800cdee:	9b08      	ldr	r3, [sp, #32]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	9308      	str	r3, [sp, #32]
 800cdf4:	2330      	movs	r3, #48	; 0x30
 800cdf6:	f88b 3000 	strb.w	r3, [fp]
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	781a      	ldrb	r2, [r3, #0]
 800cdfe:	3201      	adds	r2, #1
 800ce00:	701a      	strb	r2, [r3, #0]
 800ce02:	e78c      	b.n	800cd1e <_dtoa_r+0x5de>
 800ce04:	461d      	mov	r5, r3
 800ce06:	e7ea      	b.n	800cdde <_dtoa_r+0x69e>
 800ce08:	2200      	movs	r2, #0
 800ce0a:	4b9b      	ldr	r3, [pc, #620]	; (800d078 <_dtoa_r+0x938>)
 800ce0c:	f7f3 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ce10:	2200      	movs	r2, #0
 800ce12:	2300      	movs	r3, #0
 800ce14:	4606      	mov	r6, r0
 800ce16:	460f      	mov	r7, r1
 800ce18:	f7f3 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d09a      	beq.n	800cd56 <_dtoa_r+0x616>
 800ce20:	e7cb      	b.n	800cdba <_dtoa_r+0x67a>
 800ce22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce24:	2a00      	cmp	r2, #0
 800ce26:	f000 808b 	beq.w	800cf40 <_dtoa_r+0x800>
 800ce2a:	9a06      	ldr	r2, [sp, #24]
 800ce2c:	2a01      	cmp	r2, #1
 800ce2e:	dc6e      	bgt.n	800cf0e <_dtoa_r+0x7ce>
 800ce30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce32:	2a00      	cmp	r2, #0
 800ce34:	d067      	beq.n	800cf06 <_dtoa_r+0x7c6>
 800ce36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce3a:	9f07      	ldr	r7, [sp, #28]
 800ce3c:	9d05      	ldr	r5, [sp, #20]
 800ce3e:	9a05      	ldr	r2, [sp, #20]
 800ce40:	2101      	movs	r1, #1
 800ce42:	441a      	add	r2, r3
 800ce44:	4620      	mov	r0, r4
 800ce46:	9205      	str	r2, [sp, #20]
 800ce48:	4498      	add	r8, r3
 800ce4a:	f000 fbc2 	bl	800d5d2 <__i2b>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	2d00      	cmp	r5, #0
 800ce52:	dd0c      	ble.n	800ce6e <_dtoa_r+0x72e>
 800ce54:	f1b8 0f00 	cmp.w	r8, #0
 800ce58:	dd09      	ble.n	800ce6e <_dtoa_r+0x72e>
 800ce5a:	4545      	cmp	r5, r8
 800ce5c:	9a05      	ldr	r2, [sp, #20]
 800ce5e:	462b      	mov	r3, r5
 800ce60:	bfa8      	it	ge
 800ce62:	4643      	movge	r3, r8
 800ce64:	1ad2      	subs	r2, r2, r3
 800ce66:	9205      	str	r2, [sp, #20]
 800ce68:	1aed      	subs	r5, r5, r3
 800ce6a:	eba8 0803 	sub.w	r8, r8, r3
 800ce6e:	9b07      	ldr	r3, [sp, #28]
 800ce70:	b1eb      	cbz	r3, 800ceae <_dtoa_r+0x76e>
 800ce72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d067      	beq.n	800cf48 <_dtoa_r+0x808>
 800ce78:	b18f      	cbz	r7, 800ce9e <_dtoa_r+0x75e>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	463a      	mov	r2, r7
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 fc46 	bl	800d710 <__pow5mult>
 800ce84:	9a04      	ldr	r2, [sp, #16]
 800ce86:	4601      	mov	r1, r0
 800ce88:	4606      	mov	r6, r0
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fbaa 	bl	800d5e4 <__multiply>
 800ce90:	9904      	ldr	r1, [sp, #16]
 800ce92:	9008      	str	r0, [sp, #32]
 800ce94:	4620      	mov	r0, r4
 800ce96:	f000 fafc 	bl	800d492 <_Bfree>
 800ce9a:	9b08      	ldr	r3, [sp, #32]
 800ce9c:	9304      	str	r3, [sp, #16]
 800ce9e:	9b07      	ldr	r3, [sp, #28]
 800cea0:	1bda      	subs	r2, r3, r7
 800cea2:	d004      	beq.n	800ceae <_dtoa_r+0x76e>
 800cea4:	9904      	ldr	r1, [sp, #16]
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 fc32 	bl	800d710 <__pow5mult>
 800ceac:	9004      	str	r0, [sp, #16]
 800ceae:	2101      	movs	r1, #1
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f000 fb8e 	bl	800d5d2 <__i2b>
 800ceb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceb8:	4607      	mov	r7, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f000 81d0 	beq.w	800d260 <_dtoa_r+0xb20>
 800cec0:	461a      	mov	r2, r3
 800cec2:	4601      	mov	r1, r0
 800cec4:	4620      	mov	r0, r4
 800cec6:	f000 fc23 	bl	800d710 <__pow5mult>
 800ceca:	9b06      	ldr	r3, [sp, #24]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	4607      	mov	r7, r0
 800ced0:	dc40      	bgt.n	800cf54 <_dtoa_r+0x814>
 800ced2:	9b00      	ldr	r3, [sp, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d139      	bne.n	800cf4c <_dtoa_r+0x80c>
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d136      	bne.n	800cf50 <_dtoa_r+0x810>
 800cee2:	9b01      	ldr	r3, [sp, #4]
 800cee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cee8:	0d1b      	lsrs	r3, r3, #20
 800ceea:	051b      	lsls	r3, r3, #20
 800ceec:	b12b      	cbz	r3, 800cefa <_dtoa_r+0x7ba>
 800ceee:	9b05      	ldr	r3, [sp, #20]
 800cef0:	3301      	adds	r3, #1
 800cef2:	9305      	str	r3, [sp, #20]
 800cef4:	f108 0801 	add.w	r8, r8, #1
 800cef8:	2301      	movs	r3, #1
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d12a      	bne.n	800cf58 <_dtoa_r+0x818>
 800cf02:	2001      	movs	r0, #1
 800cf04:	e030      	b.n	800cf68 <_dtoa_r+0x828>
 800cf06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf0c:	e795      	b.n	800ce3a <_dtoa_r+0x6fa>
 800cf0e:	9b07      	ldr	r3, [sp, #28]
 800cf10:	f109 37ff 	add.w	r7, r9, #4294967295
 800cf14:	42bb      	cmp	r3, r7
 800cf16:	bfbf      	itttt	lt
 800cf18:	9b07      	ldrlt	r3, [sp, #28]
 800cf1a:	9707      	strlt	r7, [sp, #28]
 800cf1c:	1afa      	sublt	r2, r7, r3
 800cf1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf20:	bfbb      	ittet	lt
 800cf22:	189b      	addlt	r3, r3, r2
 800cf24:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf26:	1bdf      	subge	r7, r3, r7
 800cf28:	2700      	movlt	r7, #0
 800cf2a:	f1b9 0f00 	cmp.w	r9, #0
 800cf2e:	bfb5      	itete	lt
 800cf30:	9b05      	ldrlt	r3, [sp, #20]
 800cf32:	9d05      	ldrge	r5, [sp, #20]
 800cf34:	eba3 0509 	sublt.w	r5, r3, r9
 800cf38:	464b      	movge	r3, r9
 800cf3a:	bfb8      	it	lt
 800cf3c:	2300      	movlt	r3, #0
 800cf3e:	e77e      	b.n	800ce3e <_dtoa_r+0x6fe>
 800cf40:	9f07      	ldr	r7, [sp, #28]
 800cf42:	9d05      	ldr	r5, [sp, #20]
 800cf44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf46:	e783      	b.n	800ce50 <_dtoa_r+0x710>
 800cf48:	9a07      	ldr	r2, [sp, #28]
 800cf4a:	e7ab      	b.n	800cea4 <_dtoa_r+0x764>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e7d4      	b.n	800cefa <_dtoa_r+0x7ba>
 800cf50:	9b00      	ldr	r3, [sp, #0]
 800cf52:	e7d2      	b.n	800cefa <_dtoa_r+0x7ba>
 800cf54:	2300      	movs	r3, #0
 800cf56:	9307      	str	r3, [sp, #28]
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf5e:	6918      	ldr	r0, [r3, #16]
 800cf60:	f000 fae9 	bl	800d536 <__hi0bits>
 800cf64:	f1c0 0020 	rsb	r0, r0, #32
 800cf68:	4440      	add	r0, r8
 800cf6a:	f010 001f 	ands.w	r0, r0, #31
 800cf6e:	d047      	beq.n	800d000 <_dtoa_r+0x8c0>
 800cf70:	f1c0 0320 	rsb	r3, r0, #32
 800cf74:	2b04      	cmp	r3, #4
 800cf76:	dd3b      	ble.n	800cff0 <_dtoa_r+0x8b0>
 800cf78:	9b05      	ldr	r3, [sp, #20]
 800cf7a:	f1c0 001c 	rsb	r0, r0, #28
 800cf7e:	4403      	add	r3, r0
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	4405      	add	r5, r0
 800cf84:	4480      	add	r8, r0
 800cf86:	9b05      	ldr	r3, [sp, #20]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	dd05      	ble.n	800cf98 <_dtoa_r+0x858>
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	9904      	ldr	r1, [sp, #16]
 800cf90:	4620      	mov	r0, r4
 800cf92:	f000 fc0b 	bl	800d7ac <__lshift>
 800cf96:	9004      	str	r0, [sp, #16]
 800cf98:	f1b8 0f00 	cmp.w	r8, #0
 800cf9c:	dd05      	ble.n	800cfaa <_dtoa_r+0x86a>
 800cf9e:	4639      	mov	r1, r7
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f000 fc02 	bl	800d7ac <__lshift>
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfac:	b353      	cbz	r3, 800d004 <_dtoa_r+0x8c4>
 800cfae:	4639      	mov	r1, r7
 800cfb0:	9804      	ldr	r0, [sp, #16]
 800cfb2:	f000 fc4f 	bl	800d854 <__mcmp>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	da24      	bge.n	800d004 <_dtoa_r+0x8c4>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	220a      	movs	r2, #10
 800cfbe:	9904      	ldr	r1, [sp, #16]
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 fa7d 	bl	800d4c0 <__multadd>
 800cfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc8:	9004      	str	r0, [sp, #16]
 800cfca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 814d 	beq.w	800d26e <_dtoa_r+0xb2e>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	220a      	movs	r2, #10
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fa70 	bl	800d4c0 <__multadd>
 800cfe0:	9b02      	ldr	r3, [sp, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	4606      	mov	r6, r0
 800cfe6:	dc4f      	bgt.n	800d088 <_dtoa_r+0x948>
 800cfe8:	9b06      	ldr	r3, [sp, #24]
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	dd4c      	ble.n	800d088 <_dtoa_r+0x948>
 800cfee:	e011      	b.n	800d014 <_dtoa_r+0x8d4>
 800cff0:	d0c9      	beq.n	800cf86 <_dtoa_r+0x846>
 800cff2:	9a05      	ldr	r2, [sp, #20]
 800cff4:	331c      	adds	r3, #28
 800cff6:	441a      	add	r2, r3
 800cff8:	9205      	str	r2, [sp, #20]
 800cffa:	441d      	add	r5, r3
 800cffc:	4498      	add	r8, r3
 800cffe:	e7c2      	b.n	800cf86 <_dtoa_r+0x846>
 800d000:	4603      	mov	r3, r0
 800d002:	e7f6      	b.n	800cff2 <_dtoa_r+0x8b2>
 800d004:	f1b9 0f00 	cmp.w	r9, #0
 800d008:	dc38      	bgt.n	800d07c <_dtoa_r+0x93c>
 800d00a:	9b06      	ldr	r3, [sp, #24]
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	dd35      	ble.n	800d07c <_dtoa_r+0x93c>
 800d010:	f8cd 9008 	str.w	r9, [sp, #8]
 800d014:	9b02      	ldr	r3, [sp, #8]
 800d016:	b963      	cbnz	r3, 800d032 <_dtoa_r+0x8f2>
 800d018:	4639      	mov	r1, r7
 800d01a:	2205      	movs	r2, #5
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fa4f 	bl	800d4c0 <__multadd>
 800d022:	4601      	mov	r1, r0
 800d024:	4607      	mov	r7, r0
 800d026:	9804      	ldr	r0, [sp, #16]
 800d028:	f000 fc14 	bl	800d854 <__mcmp>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	f73f adcc 	bgt.w	800cbca <_dtoa_r+0x48a>
 800d032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d034:	465d      	mov	r5, fp
 800d036:	ea6f 0a03 	mvn.w	sl, r3
 800d03a:	f04f 0900 	mov.w	r9, #0
 800d03e:	4639      	mov	r1, r7
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fa26 	bl	800d492 <_Bfree>
 800d046:	2e00      	cmp	r6, #0
 800d048:	f43f aeb7 	beq.w	800cdba <_dtoa_r+0x67a>
 800d04c:	f1b9 0f00 	cmp.w	r9, #0
 800d050:	d005      	beq.n	800d05e <_dtoa_r+0x91e>
 800d052:	45b1      	cmp	r9, r6
 800d054:	d003      	beq.n	800d05e <_dtoa_r+0x91e>
 800d056:	4649      	mov	r1, r9
 800d058:	4620      	mov	r0, r4
 800d05a:	f000 fa1a 	bl	800d492 <_Bfree>
 800d05e:	4631      	mov	r1, r6
 800d060:	4620      	mov	r0, r4
 800d062:	f000 fa16 	bl	800d492 <_Bfree>
 800d066:	e6a8      	b.n	800cdba <_dtoa_r+0x67a>
 800d068:	2700      	movs	r7, #0
 800d06a:	463e      	mov	r6, r7
 800d06c:	e7e1      	b.n	800d032 <_dtoa_r+0x8f2>
 800d06e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d072:	463e      	mov	r6, r7
 800d074:	e5a9      	b.n	800cbca <_dtoa_r+0x48a>
 800d076:	bf00      	nop
 800d078:	40240000 	.word	0x40240000
 800d07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d07e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 80fa 	beq.w	800d27c <_dtoa_r+0xb3c>
 800d088:	2d00      	cmp	r5, #0
 800d08a:	dd05      	ble.n	800d098 <_dtoa_r+0x958>
 800d08c:	4631      	mov	r1, r6
 800d08e:	462a      	mov	r2, r5
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fb8b 	bl	800d7ac <__lshift>
 800d096:	4606      	mov	r6, r0
 800d098:	9b07      	ldr	r3, [sp, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d04c      	beq.n	800d138 <_dtoa_r+0x9f8>
 800d09e:	6871      	ldr	r1, [r6, #4]
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 f9c2 	bl	800d42a <_Balloc>
 800d0a6:	6932      	ldr	r2, [r6, #16]
 800d0a8:	3202      	adds	r2, #2
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	0092      	lsls	r2, r2, #2
 800d0ae:	f106 010c 	add.w	r1, r6, #12
 800d0b2:	300c      	adds	r0, #12
 800d0b4:	f000 f9ac 	bl	800d410 <memcpy>
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 fb75 	bl	800d7ac <__lshift>
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	f8cd b014 	str.w	fp, [sp, #20]
 800d0c8:	f003 0301 	and.w	r3, r3, #1
 800d0cc:	46b1      	mov	r9, r6
 800d0ce:	9307      	str	r3, [sp, #28]
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	9804      	ldr	r0, [sp, #16]
 800d0d6:	f7ff faa7 	bl	800c628 <quorem>
 800d0da:	4649      	mov	r1, r9
 800d0dc:	4605      	mov	r5, r0
 800d0de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d0e2:	9804      	ldr	r0, [sp, #16]
 800d0e4:	f000 fbb6 	bl	800d854 <__mcmp>
 800d0e8:	4632      	mov	r2, r6
 800d0ea:	9000      	str	r0, [sp, #0]
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f000 fbca 	bl	800d888 <__mdiff>
 800d0f4:	68c3      	ldr	r3, [r0, #12]
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	bb03      	cbnz	r3, 800d13c <_dtoa_r+0x9fc>
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	9008      	str	r0, [sp, #32]
 800d0fe:	9804      	ldr	r0, [sp, #16]
 800d100:	f000 fba8 	bl	800d854 <__mcmp>
 800d104:	9a08      	ldr	r2, [sp, #32]
 800d106:	4603      	mov	r3, r0
 800d108:	4611      	mov	r1, r2
 800d10a:	4620      	mov	r0, r4
 800d10c:	9308      	str	r3, [sp, #32]
 800d10e:	f000 f9c0 	bl	800d492 <_Bfree>
 800d112:	9b08      	ldr	r3, [sp, #32]
 800d114:	b9a3      	cbnz	r3, 800d140 <_dtoa_r+0xa00>
 800d116:	9a06      	ldr	r2, [sp, #24]
 800d118:	b992      	cbnz	r2, 800d140 <_dtoa_r+0xa00>
 800d11a:	9a07      	ldr	r2, [sp, #28]
 800d11c:	b982      	cbnz	r2, 800d140 <_dtoa_r+0xa00>
 800d11e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d122:	d029      	beq.n	800d178 <_dtoa_r+0xa38>
 800d124:	9b00      	ldr	r3, [sp, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	dd01      	ble.n	800d12e <_dtoa_r+0x9ee>
 800d12a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d12e:	9b05      	ldr	r3, [sp, #20]
 800d130:	1c5d      	adds	r5, r3, #1
 800d132:	f883 8000 	strb.w	r8, [r3]
 800d136:	e782      	b.n	800d03e <_dtoa_r+0x8fe>
 800d138:	4630      	mov	r0, r6
 800d13a:	e7c2      	b.n	800d0c2 <_dtoa_r+0x982>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e7e3      	b.n	800d108 <_dtoa_r+0x9c8>
 800d140:	9a00      	ldr	r2, [sp, #0]
 800d142:	2a00      	cmp	r2, #0
 800d144:	db04      	blt.n	800d150 <_dtoa_r+0xa10>
 800d146:	d125      	bne.n	800d194 <_dtoa_r+0xa54>
 800d148:	9a06      	ldr	r2, [sp, #24]
 800d14a:	bb1a      	cbnz	r2, 800d194 <_dtoa_r+0xa54>
 800d14c:	9a07      	ldr	r2, [sp, #28]
 800d14e:	bb0a      	cbnz	r2, 800d194 <_dtoa_r+0xa54>
 800d150:	2b00      	cmp	r3, #0
 800d152:	ddec      	ble.n	800d12e <_dtoa_r+0x9ee>
 800d154:	2201      	movs	r2, #1
 800d156:	9904      	ldr	r1, [sp, #16]
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 fb27 	bl	800d7ac <__lshift>
 800d15e:	4639      	mov	r1, r7
 800d160:	9004      	str	r0, [sp, #16]
 800d162:	f000 fb77 	bl	800d854 <__mcmp>
 800d166:	2800      	cmp	r0, #0
 800d168:	dc03      	bgt.n	800d172 <_dtoa_r+0xa32>
 800d16a:	d1e0      	bne.n	800d12e <_dtoa_r+0x9ee>
 800d16c:	f018 0f01 	tst.w	r8, #1
 800d170:	d0dd      	beq.n	800d12e <_dtoa_r+0x9ee>
 800d172:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d176:	d1d8      	bne.n	800d12a <_dtoa_r+0x9ea>
 800d178:	9b05      	ldr	r3, [sp, #20]
 800d17a:	9a05      	ldr	r2, [sp, #20]
 800d17c:	1c5d      	adds	r5, r3, #1
 800d17e:	2339      	movs	r3, #57	; 0x39
 800d180:	7013      	strb	r3, [r2, #0]
 800d182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d186:	2b39      	cmp	r3, #57	; 0x39
 800d188:	f105 32ff 	add.w	r2, r5, #4294967295
 800d18c:	d04f      	beq.n	800d22e <_dtoa_r+0xaee>
 800d18e:	3301      	adds	r3, #1
 800d190:	7013      	strb	r3, [r2, #0]
 800d192:	e754      	b.n	800d03e <_dtoa_r+0x8fe>
 800d194:	9a05      	ldr	r2, [sp, #20]
 800d196:	2b00      	cmp	r3, #0
 800d198:	f102 0501 	add.w	r5, r2, #1
 800d19c:	dd06      	ble.n	800d1ac <_dtoa_r+0xa6c>
 800d19e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1a2:	d0e9      	beq.n	800d178 <_dtoa_r+0xa38>
 800d1a4:	f108 0801 	add.w	r8, r8, #1
 800d1a8:	9b05      	ldr	r3, [sp, #20]
 800d1aa:	e7c2      	b.n	800d132 <_dtoa_r+0x9f2>
 800d1ac:	9a02      	ldr	r2, [sp, #8]
 800d1ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d1b2:	eba5 030b 	sub.w	r3, r5, fp
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d021      	beq.n	800d1fe <_dtoa_r+0xabe>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	220a      	movs	r2, #10
 800d1be:	9904      	ldr	r1, [sp, #16]
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f000 f97d 	bl	800d4c0 <__multadd>
 800d1c6:	45b1      	cmp	r9, r6
 800d1c8:	9004      	str	r0, [sp, #16]
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	f04f 020a 	mov.w	r2, #10
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	d105      	bne.n	800d1e4 <_dtoa_r+0xaa4>
 800d1d8:	f000 f972 	bl	800d4c0 <__multadd>
 800d1dc:	4681      	mov	r9, r0
 800d1de:	4606      	mov	r6, r0
 800d1e0:	9505      	str	r5, [sp, #20]
 800d1e2:	e776      	b.n	800d0d2 <_dtoa_r+0x992>
 800d1e4:	f000 f96c 	bl	800d4c0 <__multadd>
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4681      	mov	r9, r0
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	220a      	movs	r2, #10
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f000 f965 	bl	800d4c0 <__multadd>
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	e7f2      	b.n	800d1e0 <_dtoa_r+0xaa0>
 800d1fa:	f04f 0900 	mov.w	r9, #0
 800d1fe:	2201      	movs	r2, #1
 800d200:	9904      	ldr	r1, [sp, #16]
 800d202:	4620      	mov	r0, r4
 800d204:	f000 fad2 	bl	800d7ac <__lshift>
 800d208:	4639      	mov	r1, r7
 800d20a:	9004      	str	r0, [sp, #16]
 800d20c:	f000 fb22 	bl	800d854 <__mcmp>
 800d210:	2800      	cmp	r0, #0
 800d212:	dcb6      	bgt.n	800d182 <_dtoa_r+0xa42>
 800d214:	d102      	bne.n	800d21c <_dtoa_r+0xadc>
 800d216:	f018 0f01 	tst.w	r8, #1
 800d21a:	d1b2      	bne.n	800d182 <_dtoa_r+0xa42>
 800d21c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d220:	2b30      	cmp	r3, #48	; 0x30
 800d222:	f105 32ff 	add.w	r2, r5, #4294967295
 800d226:	f47f af0a 	bne.w	800d03e <_dtoa_r+0x8fe>
 800d22a:	4615      	mov	r5, r2
 800d22c:	e7f6      	b.n	800d21c <_dtoa_r+0xadc>
 800d22e:	4593      	cmp	fp, r2
 800d230:	d105      	bne.n	800d23e <_dtoa_r+0xafe>
 800d232:	2331      	movs	r3, #49	; 0x31
 800d234:	f10a 0a01 	add.w	sl, sl, #1
 800d238:	f88b 3000 	strb.w	r3, [fp]
 800d23c:	e6ff      	b.n	800d03e <_dtoa_r+0x8fe>
 800d23e:	4615      	mov	r5, r2
 800d240:	e79f      	b.n	800d182 <_dtoa_r+0xa42>
 800d242:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d2a8 <_dtoa_r+0xb68>
 800d246:	e007      	b.n	800d258 <_dtoa_r+0xb18>
 800d248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d24a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d2ac <_dtoa_r+0xb6c>
 800d24e:	b11b      	cbz	r3, 800d258 <_dtoa_r+0xb18>
 800d250:	f10b 0308 	add.w	r3, fp, #8
 800d254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	4658      	mov	r0, fp
 800d25a:	b017      	add	sp, #92	; 0x5c
 800d25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d260:	9b06      	ldr	r3, [sp, #24]
 800d262:	2b01      	cmp	r3, #1
 800d264:	f77f ae35 	ble.w	800ced2 <_dtoa_r+0x792>
 800d268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d26a:	9307      	str	r3, [sp, #28]
 800d26c:	e649      	b.n	800cf02 <_dtoa_r+0x7c2>
 800d26e:	9b02      	ldr	r3, [sp, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	dc03      	bgt.n	800d27c <_dtoa_r+0xb3c>
 800d274:	9b06      	ldr	r3, [sp, #24]
 800d276:	2b02      	cmp	r3, #2
 800d278:	f73f aecc 	bgt.w	800d014 <_dtoa_r+0x8d4>
 800d27c:	465d      	mov	r5, fp
 800d27e:	4639      	mov	r1, r7
 800d280:	9804      	ldr	r0, [sp, #16]
 800d282:	f7ff f9d1 	bl	800c628 <quorem>
 800d286:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d28a:	f805 8b01 	strb.w	r8, [r5], #1
 800d28e:	9a02      	ldr	r2, [sp, #8]
 800d290:	eba5 030b 	sub.w	r3, r5, fp
 800d294:	429a      	cmp	r2, r3
 800d296:	ddb0      	ble.n	800d1fa <_dtoa_r+0xaba>
 800d298:	2300      	movs	r3, #0
 800d29a:	220a      	movs	r2, #10
 800d29c:	9904      	ldr	r1, [sp, #16]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f000 f90e 	bl	800d4c0 <__multadd>
 800d2a4:	9004      	str	r0, [sp, #16]
 800d2a6:	e7ea      	b.n	800d27e <_dtoa_r+0xb3e>
 800d2a8:	0800e0c4 	.word	0x0800e0c4
 800d2ac:	0800e0e8 	.word	0x0800e0e8

0800d2b0 <_getc_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	b118      	cbz	r0, 800d2c0 <_getc_r+0x10>
 800d2b8:	6983      	ldr	r3, [r0, #24]
 800d2ba:	b90b      	cbnz	r3, 800d2c0 <_getc_r+0x10>
 800d2bc:	f7fe f95c 	bl	800b578 <__sinit>
 800d2c0:	4b0e      	ldr	r3, [pc, #56]	; (800d2fc <_getc_r+0x4c>)
 800d2c2:	429c      	cmp	r4, r3
 800d2c4:	d10b      	bne.n	800d2de <_getc_r+0x2e>
 800d2c6:	686c      	ldr	r4, [r5, #4]
 800d2c8:	6863      	ldr	r3, [r4, #4]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	6063      	str	r3, [r4, #4]
 800d2d0:	da0f      	bge.n	800d2f2 <_getc_r+0x42>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2da:	f000 bce1 	b.w	800dca0 <__srget_r>
 800d2de:	4b08      	ldr	r3, [pc, #32]	; (800d300 <_getc_r+0x50>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	d101      	bne.n	800d2e8 <_getc_r+0x38>
 800d2e4:	68ac      	ldr	r4, [r5, #8]
 800d2e6:	e7ef      	b.n	800d2c8 <_getc_r+0x18>
 800d2e8:	4b06      	ldr	r3, [pc, #24]	; (800d304 <_getc_r+0x54>)
 800d2ea:	429c      	cmp	r4, r3
 800d2ec:	bf08      	it	eq
 800d2ee:	68ec      	ldreq	r4, [r5, #12]
 800d2f0:	e7ea      	b.n	800d2c8 <_getc_r+0x18>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	6022      	str	r2, [r4, #0]
 800d2f8:	7818      	ldrb	r0, [r3, #0]
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	0800e070 	.word	0x0800e070
 800d300:	0800e090 	.word	0x0800e090
 800d304:	0800e050 	.word	0x0800e050

0800d308 <_localeconv_r>:
 800d308:	4b04      	ldr	r3, [pc, #16]	; (800d31c <_localeconv_r+0x14>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6a18      	ldr	r0, [r3, #32]
 800d30e:	4b04      	ldr	r3, [pc, #16]	; (800d320 <_localeconv_r+0x18>)
 800d310:	2800      	cmp	r0, #0
 800d312:	bf08      	it	eq
 800d314:	4618      	moveq	r0, r3
 800d316:	30f0      	adds	r0, #240	; 0xf0
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	2000017c 	.word	0x2000017c
 800d320:	200001e0 	.word	0x200001e0

0800d324 <_lseek_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4c07      	ldr	r4, [pc, #28]	; (800d344 <_lseek_r+0x20>)
 800d328:	4605      	mov	r5, r0
 800d32a:	4608      	mov	r0, r1
 800d32c:	4611      	mov	r1, r2
 800d32e:	2200      	movs	r2, #0
 800d330:	6022      	str	r2, [r4, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	f7fd faa4 	bl	800a880 <_lseek>
 800d338:	1c43      	adds	r3, r0, #1
 800d33a:	d102      	bne.n	800d342 <_lseek_r+0x1e>
 800d33c:	6823      	ldr	r3, [r4, #0]
 800d33e:	b103      	cbz	r3, 800d342 <_lseek_r+0x1e>
 800d340:	602b      	str	r3, [r5, #0]
 800d342:	bd38      	pop	{r3, r4, r5, pc}
 800d344:	20001fd8 	.word	0x20001fd8

0800d348 <__swhatbuf_r>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	460e      	mov	r6, r1
 800d34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d350:	2900      	cmp	r1, #0
 800d352:	b096      	sub	sp, #88	; 0x58
 800d354:	4614      	mov	r4, r2
 800d356:	461d      	mov	r5, r3
 800d358:	da07      	bge.n	800d36a <__swhatbuf_r+0x22>
 800d35a:	2300      	movs	r3, #0
 800d35c:	602b      	str	r3, [r5, #0]
 800d35e:	89b3      	ldrh	r3, [r6, #12]
 800d360:	061a      	lsls	r2, r3, #24
 800d362:	d410      	bmi.n	800d386 <__swhatbuf_r+0x3e>
 800d364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d368:	e00e      	b.n	800d388 <__swhatbuf_r+0x40>
 800d36a:	466a      	mov	r2, sp
 800d36c:	f000 fcc4 	bl	800dcf8 <_fstat_r>
 800d370:	2800      	cmp	r0, #0
 800d372:	dbf2      	blt.n	800d35a <__swhatbuf_r+0x12>
 800d374:	9a01      	ldr	r2, [sp, #4]
 800d376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d37a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d37e:	425a      	negs	r2, r3
 800d380:	415a      	adcs	r2, r3
 800d382:	602a      	str	r2, [r5, #0]
 800d384:	e7ee      	b.n	800d364 <__swhatbuf_r+0x1c>
 800d386:	2340      	movs	r3, #64	; 0x40
 800d388:	2000      	movs	r0, #0
 800d38a:	6023      	str	r3, [r4, #0]
 800d38c:	b016      	add	sp, #88	; 0x58
 800d38e:	bd70      	pop	{r4, r5, r6, pc}

0800d390 <__smakebuf_r>:
 800d390:	898b      	ldrh	r3, [r1, #12]
 800d392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d394:	079d      	lsls	r5, r3, #30
 800d396:	4606      	mov	r6, r0
 800d398:	460c      	mov	r4, r1
 800d39a:	d507      	bpl.n	800d3ac <__smakebuf_r+0x1c>
 800d39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	6123      	str	r3, [r4, #16]
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	6163      	str	r3, [r4, #20]
 800d3a8:	b002      	add	sp, #8
 800d3aa:	bd70      	pop	{r4, r5, r6, pc}
 800d3ac:	ab01      	add	r3, sp, #4
 800d3ae:	466a      	mov	r2, sp
 800d3b0:	f7ff ffca 	bl	800d348 <__swhatbuf_r>
 800d3b4:	9900      	ldr	r1, [sp, #0]
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f7fe fa1f 	bl	800b7fc <_malloc_r>
 800d3be:	b948      	cbnz	r0, 800d3d4 <__smakebuf_r+0x44>
 800d3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c4:	059a      	lsls	r2, r3, #22
 800d3c6:	d4ef      	bmi.n	800d3a8 <__smakebuf_r+0x18>
 800d3c8:	f023 0303 	bic.w	r3, r3, #3
 800d3cc:	f043 0302 	orr.w	r3, r3, #2
 800d3d0:	81a3      	strh	r3, [r4, #12]
 800d3d2:	e7e3      	b.n	800d39c <__smakebuf_r+0xc>
 800d3d4:	4b0d      	ldr	r3, [pc, #52]	; (800d40c <__smakebuf_r+0x7c>)
 800d3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	6020      	str	r0, [r4, #0]
 800d3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e0:	81a3      	strh	r3, [r4, #12]
 800d3e2:	9b00      	ldr	r3, [sp, #0]
 800d3e4:	6163      	str	r3, [r4, #20]
 800d3e6:	9b01      	ldr	r3, [sp, #4]
 800d3e8:	6120      	str	r0, [r4, #16]
 800d3ea:	b15b      	cbz	r3, 800d404 <__smakebuf_r+0x74>
 800d3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f000 fc93 	bl	800dd1c <_isatty_r>
 800d3f6:	b128      	cbz	r0, 800d404 <__smakebuf_r+0x74>
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	f023 0303 	bic.w	r3, r3, #3
 800d3fe:	f043 0301 	orr.w	r3, r3, #1
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	431d      	orrs	r5, r3
 800d408:	81a5      	strh	r5, [r4, #12]
 800d40a:	e7cd      	b.n	800d3a8 <__smakebuf_r+0x18>
 800d40c:	0800b541 	.word	0x0800b541

0800d410 <memcpy>:
 800d410:	b510      	push	{r4, lr}
 800d412:	1e43      	subs	r3, r0, #1
 800d414:	440a      	add	r2, r1
 800d416:	4291      	cmp	r1, r2
 800d418:	d100      	bne.n	800d41c <memcpy+0xc>
 800d41a:	bd10      	pop	{r4, pc}
 800d41c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d420:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d424:	e7f7      	b.n	800d416 <memcpy+0x6>

0800d426 <__malloc_lock>:
 800d426:	4770      	bx	lr

0800d428 <__malloc_unlock>:
 800d428:	4770      	bx	lr

0800d42a <_Balloc>:
 800d42a:	b570      	push	{r4, r5, r6, lr}
 800d42c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d42e:	4604      	mov	r4, r0
 800d430:	460e      	mov	r6, r1
 800d432:	b93d      	cbnz	r5, 800d444 <_Balloc+0x1a>
 800d434:	2010      	movs	r0, #16
 800d436:	f7fe f97b 	bl	800b730 <malloc>
 800d43a:	6260      	str	r0, [r4, #36]	; 0x24
 800d43c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d440:	6005      	str	r5, [r0, #0]
 800d442:	60c5      	str	r5, [r0, #12]
 800d444:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d446:	68eb      	ldr	r3, [r5, #12]
 800d448:	b183      	cbz	r3, 800d46c <_Balloc+0x42>
 800d44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d452:	b9b8      	cbnz	r0, 800d484 <_Balloc+0x5a>
 800d454:	2101      	movs	r1, #1
 800d456:	fa01 f506 	lsl.w	r5, r1, r6
 800d45a:	1d6a      	adds	r2, r5, #5
 800d45c:	0092      	lsls	r2, r2, #2
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fabe 	bl	800d9e0 <_calloc_r>
 800d464:	b160      	cbz	r0, 800d480 <_Balloc+0x56>
 800d466:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d46a:	e00e      	b.n	800d48a <_Balloc+0x60>
 800d46c:	2221      	movs	r2, #33	; 0x21
 800d46e:	2104      	movs	r1, #4
 800d470:	4620      	mov	r0, r4
 800d472:	f000 fab5 	bl	800d9e0 <_calloc_r>
 800d476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d478:	60e8      	str	r0, [r5, #12]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e4      	bne.n	800d44a <_Balloc+0x20>
 800d480:	2000      	movs	r0, #0
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	6802      	ldr	r2, [r0, #0]
 800d486:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d48a:	2300      	movs	r3, #0
 800d48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d490:	e7f7      	b.n	800d482 <_Balloc+0x58>

0800d492 <_Bfree>:
 800d492:	b570      	push	{r4, r5, r6, lr}
 800d494:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d496:	4606      	mov	r6, r0
 800d498:	460d      	mov	r5, r1
 800d49a:	b93c      	cbnz	r4, 800d4ac <_Bfree+0x1a>
 800d49c:	2010      	movs	r0, #16
 800d49e:	f7fe f947 	bl	800b730 <malloc>
 800d4a2:	6270      	str	r0, [r6, #36]	; 0x24
 800d4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4a8:	6004      	str	r4, [r0, #0]
 800d4aa:	60c4      	str	r4, [r0, #12]
 800d4ac:	b13d      	cbz	r5, 800d4be <_Bfree+0x2c>
 800d4ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4b0:	686a      	ldr	r2, [r5, #4]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4b8:	6029      	str	r1, [r5, #0]
 800d4ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d4be:	bd70      	pop	{r4, r5, r6, pc}

0800d4c0 <__multadd>:
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	690d      	ldr	r5, [r1, #16]
 800d4c6:	461f      	mov	r7, r3
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	f101 0c14 	add.w	ip, r1, #20
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f8dc 0000 	ldr.w	r0, [ip]
 800d4d6:	b281      	uxth	r1, r0
 800d4d8:	fb02 7101 	mla	r1, r2, r1, r7
 800d4dc:	0c0f      	lsrs	r7, r1, #16
 800d4de:	0c00      	lsrs	r0, r0, #16
 800d4e0:	fb02 7000 	mla	r0, r2, r0, r7
 800d4e4:	b289      	uxth	r1, r1
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d4ec:	429d      	cmp	r5, r3
 800d4ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d4f2:	f84c 1b04 	str.w	r1, [ip], #4
 800d4f6:	dcec      	bgt.n	800d4d2 <__multadd+0x12>
 800d4f8:	b1d7      	cbz	r7, 800d530 <__multadd+0x70>
 800d4fa:	68a3      	ldr	r3, [r4, #8]
 800d4fc:	42ab      	cmp	r3, r5
 800d4fe:	dc12      	bgt.n	800d526 <__multadd+0x66>
 800d500:	6861      	ldr	r1, [r4, #4]
 800d502:	4630      	mov	r0, r6
 800d504:	3101      	adds	r1, #1
 800d506:	f7ff ff90 	bl	800d42a <_Balloc>
 800d50a:	6922      	ldr	r2, [r4, #16]
 800d50c:	3202      	adds	r2, #2
 800d50e:	f104 010c 	add.w	r1, r4, #12
 800d512:	4680      	mov	r8, r0
 800d514:	0092      	lsls	r2, r2, #2
 800d516:	300c      	adds	r0, #12
 800d518:	f7ff ff7a 	bl	800d410 <memcpy>
 800d51c:	4621      	mov	r1, r4
 800d51e:	4630      	mov	r0, r6
 800d520:	f7ff ffb7 	bl	800d492 <_Bfree>
 800d524:	4644      	mov	r4, r8
 800d526:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d52a:	3501      	adds	r5, #1
 800d52c:	615f      	str	r7, [r3, #20]
 800d52e:	6125      	str	r5, [r4, #16]
 800d530:	4620      	mov	r0, r4
 800d532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d536 <__hi0bits>:
 800d536:	0c02      	lsrs	r2, r0, #16
 800d538:	0412      	lsls	r2, r2, #16
 800d53a:	4603      	mov	r3, r0
 800d53c:	b9b2      	cbnz	r2, 800d56c <__hi0bits+0x36>
 800d53e:	0403      	lsls	r3, r0, #16
 800d540:	2010      	movs	r0, #16
 800d542:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d546:	bf04      	itt	eq
 800d548:	021b      	lsleq	r3, r3, #8
 800d54a:	3008      	addeq	r0, #8
 800d54c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d550:	bf04      	itt	eq
 800d552:	011b      	lsleq	r3, r3, #4
 800d554:	3004      	addeq	r0, #4
 800d556:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d55a:	bf04      	itt	eq
 800d55c:	009b      	lsleq	r3, r3, #2
 800d55e:	3002      	addeq	r0, #2
 800d560:	2b00      	cmp	r3, #0
 800d562:	db06      	blt.n	800d572 <__hi0bits+0x3c>
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	d503      	bpl.n	800d570 <__hi0bits+0x3a>
 800d568:	3001      	adds	r0, #1
 800d56a:	4770      	bx	lr
 800d56c:	2000      	movs	r0, #0
 800d56e:	e7e8      	b.n	800d542 <__hi0bits+0xc>
 800d570:	2020      	movs	r0, #32
 800d572:	4770      	bx	lr

0800d574 <__lo0bits>:
 800d574:	6803      	ldr	r3, [r0, #0]
 800d576:	f013 0207 	ands.w	r2, r3, #7
 800d57a:	4601      	mov	r1, r0
 800d57c:	d00b      	beq.n	800d596 <__lo0bits+0x22>
 800d57e:	07da      	lsls	r2, r3, #31
 800d580:	d423      	bmi.n	800d5ca <__lo0bits+0x56>
 800d582:	0798      	lsls	r0, r3, #30
 800d584:	bf49      	itett	mi
 800d586:	085b      	lsrmi	r3, r3, #1
 800d588:	089b      	lsrpl	r3, r3, #2
 800d58a:	2001      	movmi	r0, #1
 800d58c:	600b      	strmi	r3, [r1, #0]
 800d58e:	bf5c      	itt	pl
 800d590:	600b      	strpl	r3, [r1, #0]
 800d592:	2002      	movpl	r0, #2
 800d594:	4770      	bx	lr
 800d596:	b298      	uxth	r0, r3
 800d598:	b9a8      	cbnz	r0, 800d5c6 <__lo0bits+0x52>
 800d59a:	0c1b      	lsrs	r3, r3, #16
 800d59c:	2010      	movs	r0, #16
 800d59e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d5a2:	bf04      	itt	eq
 800d5a4:	0a1b      	lsreq	r3, r3, #8
 800d5a6:	3008      	addeq	r0, #8
 800d5a8:	071a      	lsls	r2, r3, #28
 800d5aa:	bf04      	itt	eq
 800d5ac:	091b      	lsreq	r3, r3, #4
 800d5ae:	3004      	addeq	r0, #4
 800d5b0:	079a      	lsls	r2, r3, #30
 800d5b2:	bf04      	itt	eq
 800d5b4:	089b      	lsreq	r3, r3, #2
 800d5b6:	3002      	addeq	r0, #2
 800d5b8:	07da      	lsls	r2, r3, #31
 800d5ba:	d402      	bmi.n	800d5c2 <__lo0bits+0x4e>
 800d5bc:	085b      	lsrs	r3, r3, #1
 800d5be:	d006      	beq.n	800d5ce <__lo0bits+0x5a>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	600b      	str	r3, [r1, #0]
 800d5c4:	4770      	bx	lr
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	e7e9      	b.n	800d59e <__lo0bits+0x2a>
 800d5ca:	2000      	movs	r0, #0
 800d5cc:	4770      	bx	lr
 800d5ce:	2020      	movs	r0, #32
 800d5d0:	4770      	bx	lr

0800d5d2 <__i2b>:
 800d5d2:	b510      	push	{r4, lr}
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	f7ff ff27 	bl	800d42a <_Balloc>
 800d5dc:	2201      	movs	r2, #1
 800d5de:	6144      	str	r4, [r0, #20]
 800d5e0:	6102      	str	r2, [r0, #16]
 800d5e2:	bd10      	pop	{r4, pc}

0800d5e4 <__multiply>:
 800d5e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	4614      	mov	r4, r2
 800d5ea:	690a      	ldr	r2, [r1, #16]
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	bfb8      	it	lt
 800d5f2:	460b      	movlt	r3, r1
 800d5f4:	4688      	mov	r8, r1
 800d5f6:	bfbc      	itt	lt
 800d5f8:	46a0      	movlt	r8, r4
 800d5fa:	461c      	movlt	r4, r3
 800d5fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d600:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d604:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d60c:	eb07 0609 	add.w	r6, r7, r9
 800d610:	42b3      	cmp	r3, r6
 800d612:	bfb8      	it	lt
 800d614:	3101      	addlt	r1, #1
 800d616:	f7ff ff08 	bl	800d42a <_Balloc>
 800d61a:	f100 0514 	add.w	r5, r0, #20
 800d61e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d622:	462b      	mov	r3, r5
 800d624:	2200      	movs	r2, #0
 800d626:	4573      	cmp	r3, lr
 800d628:	d316      	bcc.n	800d658 <__multiply+0x74>
 800d62a:	f104 0214 	add.w	r2, r4, #20
 800d62e:	f108 0114 	add.w	r1, r8, #20
 800d632:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d636:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	9201      	str	r2, [sp, #4]
 800d640:	4293      	cmp	r3, r2
 800d642:	d80c      	bhi.n	800d65e <__multiply+0x7a>
 800d644:	2e00      	cmp	r6, #0
 800d646:	dd03      	ble.n	800d650 <__multiply+0x6c>
 800d648:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d05d      	beq.n	800d70c <__multiply+0x128>
 800d650:	6106      	str	r6, [r0, #16]
 800d652:	b003      	add	sp, #12
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	f843 2b04 	str.w	r2, [r3], #4
 800d65c:	e7e3      	b.n	800d626 <__multiply+0x42>
 800d65e:	f8b2 b000 	ldrh.w	fp, [r2]
 800d662:	f1bb 0f00 	cmp.w	fp, #0
 800d666:	d023      	beq.n	800d6b0 <__multiply+0xcc>
 800d668:	4689      	mov	r9, r1
 800d66a:	46ac      	mov	ip, r5
 800d66c:	f04f 0800 	mov.w	r8, #0
 800d670:	f859 4b04 	ldr.w	r4, [r9], #4
 800d674:	f8dc a000 	ldr.w	sl, [ip]
 800d678:	b2a3      	uxth	r3, r4
 800d67a:	fa1f fa8a 	uxth.w	sl, sl
 800d67e:	fb0b a303 	mla	r3, fp, r3, sl
 800d682:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d686:	f8dc 4000 	ldr.w	r4, [ip]
 800d68a:	4443      	add	r3, r8
 800d68c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d690:	fb0b 840a 	mla	r4, fp, sl, r8
 800d694:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d698:	46e2      	mov	sl, ip
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d6a0:	454f      	cmp	r7, r9
 800d6a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d6a6:	f84a 3b04 	str.w	r3, [sl], #4
 800d6aa:	d82b      	bhi.n	800d704 <__multiply+0x120>
 800d6ac:	f8cc 8004 	str.w	r8, [ip, #4]
 800d6b0:	9b01      	ldr	r3, [sp, #4]
 800d6b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d6b6:	3204      	adds	r2, #4
 800d6b8:	f1ba 0f00 	cmp.w	sl, #0
 800d6bc:	d020      	beq.n	800d700 <__multiply+0x11c>
 800d6be:	682b      	ldr	r3, [r5, #0]
 800d6c0:	4689      	mov	r9, r1
 800d6c2:	46a8      	mov	r8, r5
 800d6c4:	f04f 0b00 	mov.w	fp, #0
 800d6c8:	f8b9 c000 	ldrh.w	ip, [r9]
 800d6cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d6d0:	fb0a 440c 	mla	r4, sl, ip, r4
 800d6d4:	445c      	add	r4, fp
 800d6d6:	46c4      	mov	ip, r8
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d6de:	f84c 3b04 	str.w	r3, [ip], #4
 800d6e2:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d6ea:	0c1b      	lsrs	r3, r3, #16
 800d6ec:	fb0a b303 	mla	r3, sl, r3, fp
 800d6f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d6f4:	454f      	cmp	r7, r9
 800d6f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d6fa:	d805      	bhi.n	800d708 <__multiply+0x124>
 800d6fc:	f8c8 3004 	str.w	r3, [r8, #4]
 800d700:	3504      	adds	r5, #4
 800d702:	e79b      	b.n	800d63c <__multiply+0x58>
 800d704:	46d4      	mov	ip, sl
 800d706:	e7b3      	b.n	800d670 <__multiply+0x8c>
 800d708:	46e0      	mov	r8, ip
 800d70a:	e7dd      	b.n	800d6c8 <__multiply+0xe4>
 800d70c:	3e01      	subs	r6, #1
 800d70e:	e799      	b.n	800d644 <__multiply+0x60>

0800d710 <__pow5mult>:
 800d710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d714:	4615      	mov	r5, r2
 800d716:	f012 0203 	ands.w	r2, r2, #3
 800d71a:	4606      	mov	r6, r0
 800d71c:	460f      	mov	r7, r1
 800d71e:	d007      	beq.n	800d730 <__pow5mult+0x20>
 800d720:	3a01      	subs	r2, #1
 800d722:	4c21      	ldr	r4, [pc, #132]	; (800d7a8 <__pow5mult+0x98>)
 800d724:	2300      	movs	r3, #0
 800d726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d72a:	f7ff fec9 	bl	800d4c0 <__multadd>
 800d72e:	4607      	mov	r7, r0
 800d730:	10ad      	asrs	r5, r5, #2
 800d732:	d035      	beq.n	800d7a0 <__pow5mult+0x90>
 800d734:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d736:	b93c      	cbnz	r4, 800d748 <__pow5mult+0x38>
 800d738:	2010      	movs	r0, #16
 800d73a:	f7fd fff9 	bl	800b730 <malloc>
 800d73e:	6270      	str	r0, [r6, #36]	; 0x24
 800d740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d744:	6004      	str	r4, [r0, #0]
 800d746:	60c4      	str	r4, [r0, #12]
 800d748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d74c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d750:	b94c      	cbnz	r4, 800d766 <__pow5mult+0x56>
 800d752:	f240 2171 	movw	r1, #625	; 0x271
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff3b 	bl	800d5d2 <__i2b>
 800d75c:	2300      	movs	r3, #0
 800d75e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d762:	4604      	mov	r4, r0
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	f04f 0800 	mov.w	r8, #0
 800d76a:	07eb      	lsls	r3, r5, #31
 800d76c:	d50a      	bpl.n	800d784 <__pow5mult+0x74>
 800d76e:	4639      	mov	r1, r7
 800d770:	4622      	mov	r2, r4
 800d772:	4630      	mov	r0, r6
 800d774:	f7ff ff36 	bl	800d5e4 <__multiply>
 800d778:	4639      	mov	r1, r7
 800d77a:	4681      	mov	r9, r0
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7ff fe88 	bl	800d492 <_Bfree>
 800d782:	464f      	mov	r7, r9
 800d784:	106d      	asrs	r5, r5, #1
 800d786:	d00b      	beq.n	800d7a0 <__pow5mult+0x90>
 800d788:	6820      	ldr	r0, [r4, #0]
 800d78a:	b938      	cbnz	r0, 800d79c <__pow5mult+0x8c>
 800d78c:	4622      	mov	r2, r4
 800d78e:	4621      	mov	r1, r4
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff ff27 	bl	800d5e4 <__multiply>
 800d796:	6020      	str	r0, [r4, #0]
 800d798:	f8c0 8000 	str.w	r8, [r0]
 800d79c:	4604      	mov	r4, r0
 800d79e:	e7e4      	b.n	800d76a <__pow5mult+0x5a>
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0800e1e8 	.word	0x0800e1e8

0800d7ac <__lshift>:
 800d7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	6849      	ldr	r1, [r1, #4]
 800d7ba:	eb0a 0903 	add.w	r9, sl, r3
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	4616      	mov	r6, r2
 800d7c4:	f109 0501 	add.w	r5, r9, #1
 800d7c8:	42ab      	cmp	r3, r5
 800d7ca:	db32      	blt.n	800d832 <__lshift+0x86>
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	f7ff fe2c 	bl	800d42a <_Balloc>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	f100 0114 	add.w	r1, r0, #20
 800d7da:	461a      	mov	r2, r3
 800d7dc:	4553      	cmp	r3, sl
 800d7de:	db2b      	blt.n	800d838 <__lshift+0x8c>
 800d7e0:	6920      	ldr	r0, [r4, #16]
 800d7e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7e6:	f104 0314 	add.w	r3, r4, #20
 800d7ea:	f016 021f 	ands.w	r2, r6, #31
 800d7ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7f6:	d025      	beq.n	800d844 <__lshift+0x98>
 800d7f8:	f1c2 0e20 	rsb	lr, r2, #32
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	681e      	ldr	r6, [r3, #0]
 800d800:	468a      	mov	sl, r1
 800d802:	4096      	lsls	r6, r2
 800d804:	4330      	orrs	r0, r6
 800d806:	f84a 0b04 	str.w	r0, [sl], #4
 800d80a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d80e:	459c      	cmp	ip, r3
 800d810:	fa20 f00e 	lsr.w	r0, r0, lr
 800d814:	d814      	bhi.n	800d840 <__lshift+0x94>
 800d816:	6048      	str	r0, [r1, #4]
 800d818:	b108      	cbz	r0, 800d81e <__lshift+0x72>
 800d81a:	f109 0502 	add.w	r5, r9, #2
 800d81e:	3d01      	subs	r5, #1
 800d820:	4638      	mov	r0, r7
 800d822:	f8c8 5010 	str.w	r5, [r8, #16]
 800d826:	4621      	mov	r1, r4
 800d828:	f7ff fe33 	bl	800d492 <_Bfree>
 800d82c:	4640      	mov	r0, r8
 800d82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d832:	3101      	adds	r1, #1
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	e7c7      	b.n	800d7c8 <__lshift+0x1c>
 800d838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d83c:	3301      	adds	r3, #1
 800d83e:	e7cd      	b.n	800d7dc <__lshift+0x30>
 800d840:	4651      	mov	r1, sl
 800d842:	e7dc      	b.n	800d7fe <__lshift+0x52>
 800d844:	3904      	subs	r1, #4
 800d846:	f853 2b04 	ldr.w	r2, [r3], #4
 800d84a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d84e:	459c      	cmp	ip, r3
 800d850:	d8f9      	bhi.n	800d846 <__lshift+0x9a>
 800d852:	e7e4      	b.n	800d81e <__lshift+0x72>

0800d854 <__mcmp>:
 800d854:	6903      	ldr	r3, [r0, #16]
 800d856:	690a      	ldr	r2, [r1, #16]
 800d858:	1a9b      	subs	r3, r3, r2
 800d85a:	b530      	push	{r4, r5, lr}
 800d85c:	d10c      	bne.n	800d878 <__mcmp+0x24>
 800d85e:	0092      	lsls	r2, r2, #2
 800d860:	3014      	adds	r0, #20
 800d862:	3114      	adds	r1, #20
 800d864:	1884      	adds	r4, r0, r2
 800d866:	4411      	add	r1, r2
 800d868:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d86c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d870:	4295      	cmp	r5, r2
 800d872:	d003      	beq.n	800d87c <__mcmp+0x28>
 800d874:	d305      	bcc.n	800d882 <__mcmp+0x2e>
 800d876:	2301      	movs	r3, #1
 800d878:	4618      	mov	r0, r3
 800d87a:	bd30      	pop	{r4, r5, pc}
 800d87c:	42a0      	cmp	r0, r4
 800d87e:	d3f3      	bcc.n	800d868 <__mcmp+0x14>
 800d880:	e7fa      	b.n	800d878 <__mcmp+0x24>
 800d882:	f04f 33ff 	mov.w	r3, #4294967295
 800d886:	e7f7      	b.n	800d878 <__mcmp+0x24>

0800d888 <__mdiff>:
 800d888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d88c:	460d      	mov	r5, r1
 800d88e:	4607      	mov	r7, r0
 800d890:	4611      	mov	r1, r2
 800d892:	4628      	mov	r0, r5
 800d894:	4614      	mov	r4, r2
 800d896:	f7ff ffdd 	bl	800d854 <__mcmp>
 800d89a:	1e06      	subs	r6, r0, #0
 800d89c:	d108      	bne.n	800d8b0 <__mdiff+0x28>
 800d89e:	4631      	mov	r1, r6
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	f7ff fdc2 	bl	800d42a <_Balloc>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b0:	bfa4      	itt	ge
 800d8b2:	4623      	movge	r3, r4
 800d8b4:	462c      	movge	r4, r5
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	6861      	ldr	r1, [r4, #4]
 800d8ba:	bfa6      	itte	ge
 800d8bc:	461d      	movge	r5, r3
 800d8be:	2600      	movge	r6, #0
 800d8c0:	2601      	movlt	r6, #1
 800d8c2:	f7ff fdb2 	bl	800d42a <_Balloc>
 800d8c6:	692b      	ldr	r3, [r5, #16]
 800d8c8:	60c6      	str	r6, [r0, #12]
 800d8ca:	6926      	ldr	r6, [r4, #16]
 800d8cc:	f105 0914 	add.w	r9, r5, #20
 800d8d0:	f104 0214 	add.w	r2, r4, #20
 800d8d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d8d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d8dc:	f100 0514 	add.w	r5, r0, #20
 800d8e0:	f04f 0e00 	mov.w	lr, #0
 800d8e4:	f852 ab04 	ldr.w	sl, [r2], #4
 800d8e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d8ec:	fa1e f18a 	uxtah	r1, lr, sl
 800d8f0:	b2a3      	uxth	r3, r4
 800d8f2:	1ac9      	subs	r1, r1, r3
 800d8f4:	0c23      	lsrs	r3, r4, #16
 800d8f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d8fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d8fe:	b289      	uxth	r1, r1
 800d900:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d904:	45c8      	cmp	r8, r9
 800d906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d90a:	4694      	mov	ip, r2
 800d90c:	f845 3b04 	str.w	r3, [r5], #4
 800d910:	d8e8      	bhi.n	800d8e4 <__mdiff+0x5c>
 800d912:	45bc      	cmp	ip, r7
 800d914:	d304      	bcc.n	800d920 <__mdiff+0x98>
 800d916:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d91a:	b183      	cbz	r3, 800d93e <__mdiff+0xb6>
 800d91c:	6106      	str	r6, [r0, #16]
 800d91e:	e7c5      	b.n	800d8ac <__mdiff+0x24>
 800d920:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d924:	fa1e f381 	uxtah	r3, lr, r1
 800d928:	141a      	asrs	r2, r3, #16
 800d92a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d92e:	b29b      	uxth	r3, r3
 800d930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d934:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d938:	f845 3b04 	str.w	r3, [r5], #4
 800d93c:	e7e9      	b.n	800d912 <__mdiff+0x8a>
 800d93e:	3e01      	subs	r6, #1
 800d940:	e7e9      	b.n	800d916 <__mdiff+0x8e>

0800d942 <__d2b>:
 800d942:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d946:	460e      	mov	r6, r1
 800d948:	2101      	movs	r1, #1
 800d94a:	ec59 8b10 	vmov	r8, r9, d0
 800d94e:	4615      	mov	r5, r2
 800d950:	f7ff fd6b 	bl	800d42a <_Balloc>
 800d954:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d958:	4607      	mov	r7, r0
 800d95a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d95e:	bb34      	cbnz	r4, 800d9ae <__d2b+0x6c>
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	f1b8 0300 	subs.w	r3, r8, #0
 800d966:	d027      	beq.n	800d9b8 <__d2b+0x76>
 800d968:	a802      	add	r0, sp, #8
 800d96a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d96e:	f7ff fe01 	bl	800d574 <__lo0bits>
 800d972:	9900      	ldr	r1, [sp, #0]
 800d974:	b1f0      	cbz	r0, 800d9b4 <__d2b+0x72>
 800d976:	9a01      	ldr	r2, [sp, #4]
 800d978:	f1c0 0320 	rsb	r3, r0, #32
 800d97c:	fa02 f303 	lsl.w	r3, r2, r3
 800d980:	430b      	orrs	r3, r1
 800d982:	40c2      	lsrs	r2, r0
 800d984:	617b      	str	r3, [r7, #20]
 800d986:	9201      	str	r2, [sp, #4]
 800d988:	9b01      	ldr	r3, [sp, #4]
 800d98a:	61bb      	str	r3, [r7, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	bf14      	ite	ne
 800d990:	2102      	movne	r1, #2
 800d992:	2101      	moveq	r1, #1
 800d994:	6139      	str	r1, [r7, #16]
 800d996:	b1c4      	cbz	r4, 800d9ca <__d2b+0x88>
 800d998:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d99c:	4404      	add	r4, r0
 800d99e:	6034      	str	r4, [r6, #0]
 800d9a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9a4:	6028      	str	r0, [r5, #0]
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	b003      	add	sp, #12
 800d9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9b2:	e7d5      	b.n	800d960 <__d2b+0x1e>
 800d9b4:	6179      	str	r1, [r7, #20]
 800d9b6:	e7e7      	b.n	800d988 <__d2b+0x46>
 800d9b8:	a801      	add	r0, sp, #4
 800d9ba:	f7ff fddb 	bl	800d574 <__lo0bits>
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	617b      	str	r3, [r7, #20]
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	6139      	str	r1, [r7, #16]
 800d9c6:	3020      	adds	r0, #32
 800d9c8:	e7e5      	b.n	800d996 <__d2b+0x54>
 800d9ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d9ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9d2:	6030      	str	r0, [r6, #0]
 800d9d4:	6918      	ldr	r0, [r3, #16]
 800d9d6:	f7ff fdae 	bl	800d536 <__hi0bits>
 800d9da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d9de:	e7e1      	b.n	800d9a4 <__d2b+0x62>

0800d9e0 <_calloc_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	fb02 f401 	mul.w	r4, r2, r1
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	f7fd ff08 	bl	800b7fc <_malloc_r>
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	b118      	cbz	r0, 800d9f8 <_calloc_r+0x18>
 800d9f0:	4622      	mov	r2, r4
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	f7fd feac 	bl	800b750 <memset>
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}

0800d9fc <__sfputc_r>:
 800d9fc:	6893      	ldr	r3, [r2, #8]
 800d9fe:	3b01      	subs	r3, #1
 800da00:	2b00      	cmp	r3, #0
 800da02:	b410      	push	{r4}
 800da04:	6093      	str	r3, [r2, #8]
 800da06:	da08      	bge.n	800da1a <__sfputc_r+0x1e>
 800da08:	6994      	ldr	r4, [r2, #24]
 800da0a:	42a3      	cmp	r3, r4
 800da0c:	db01      	blt.n	800da12 <__sfputc_r+0x16>
 800da0e:	290a      	cmp	r1, #10
 800da10:	d103      	bne.n	800da1a <__sfputc_r+0x1e>
 800da12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da16:	f7fe bd25 	b.w	800c464 <__swbuf_r>
 800da1a:	6813      	ldr	r3, [r2, #0]
 800da1c:	1c58      	adds	r0, r3, #1
 800da1e:	6010      	str	r0, [r2, #0]
 800da20:	7019      	strb	r1, [r3, #0]
 800da22:	4608      	mov	r0, r1
 800da24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <__sfputs_r>:
 800da2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2c:	4606      	mov	r6, r0
 800da2e:	460f      	mov	r7, r1
 800da30:	4614      	mov	r4, r2
 800da32:	18d5      	adds	r5, r2, r3
 800da34:	42ac      	cmp	r4, r5
 800da36:	d101      	bne.n	800da3c <__sfputs_r+0x12>
 800da38:	2000      	movs	r0, #0
 800da3a:	e007      	b.n	800da4c <__sfputs_r+0x22>
 800da3c:	463a      	mov	r2, r7
 800da3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da42:	4630      	mov	r0, r6
 800da44:	f7ff ffda 	bl	800d9fc <__sfputc_r>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d1f3      	bne.n	800da34 <__sfputs_r+0xa>
 800da4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da50 <_vfiprintf_r>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	460c      	mov	r4, r1
 800da56:	b09d      	sub	sp, #116	; 0x74
 800da58:	4617      	mov	r7, r2
 800da5a:	461d      	mov	r5, r3
 800da5c:	4606      	mov	r6, r0
 800da5e:	b118      	cbz	r0, 800da68 <_vfiprintf_r+0x18>
 800da60:	6983      	ldr	r3, [r0, #24]
 800da62:	b90b      	cbnz	r3, 800da68 <_vfiprintf_r+0x18>
 800da64:	f7fd fd88 	bl	800b578 <__sinit>
 800da68:	4b7c      	ldr	r3, [pc, #496]	; (800dc5c <_vfiprintf_r+0x20c>)
 800da6a:	429c      	cmp	r4, r3
 800da6c:	d158      	bne.n	800db20 <_vfiprintf_r+0xd0>
 800da6e:	6874      	ldr	r4, [r6, #4]
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	0718      	lsls	r0, r3, #28
 800da74:	d55e      	bpl.n	800db34 <_vfiprintf_r+0xe4>
 800da76:	6923      	ldr	r3, [r4, #16]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d05b      	beq.n	800db34 <_vfiprintf_r+0xe4>
 800da7c:	2300      	movs	r3, #0
 800da7e:	9309      	str	r3, [sp, #36]	; 0x24
 800da80:	2320      	movs	r3, #32
 800da82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da86:	2330      	movs	r3, #48	; 0x30
 800da88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da8c:	9503      	str	r5, [sp, #12]
 800da8e:	f04f 0b01 	mov.w	fp, #1
 800da92:	46b8      	mov	r8, r7
 800da94:	4645      	mov	r5, r8
 800da96:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da9a:	b10b      	cbz	r3, 800daa0 <_vfiprintf_r+0x50>
 800da9c:	2b25      	cmp	r3, #37	; 0x25
 800da9e:	d154      	bne.n	800db4a <_vfiprintf_r+0xfa>
 800daa0:	ebb8 0a07 	subs.w	sl, r8, r7
 800daa4:	d00b      	beq.n	800dabe <_vfiprintf_r+0x6e>
 800daa6:	4653      	mov	r3, sl
 800daa8:	463a      	mov	r2, r7
 800daaa:	4621      	mov	r1, r4
 800daac:	4630      	mov	r0, r6
 800daae:	f7ff ffbc 	bl	800da2a <__sfputs_r>
 800dab2:	3001      	adds	r0, #1
 800dab4:	f000 80c2 	beq.w	800dc3c <_vfiprintf_r+0x1ec>
 800dab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daba:	4453      	add	r3, sl
 800dabc:	9309      	str	r3, [sp, #36]	; 0x24
 800dabe:	f898 3000 	ldrb.w	r3, [r8]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f000 80ba 	beq.w	800dc3c <_vfiprintf_r+0x1ec>
 800dac8:	2300      	movs	r3, #0
 800daca:	f04f 32ff 	mov.w	r2, #4294967295
 800dace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad2:	9304      	str	r3, [sp, #16]
 800dad4:	9307      	str	r3, [sp, #28]
 800dad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dada:	931a      	str	r3, [sp, #104]	; 0x68
 800dadc:	46a8      	mov	r8, r5
 800dade:	2205      	movs	r2, #5
 800dae0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dae4:	485e      	ldr	r0, [pc, #376]	; (800dc60 <_vfiprintf_r+0x210>)
 800dae6:	f7f2 fb7b 	bl	80001e0 <memchr>
 800daea:	9b04      	ldr	r3, [sp, #16]
 800daec:	bb78      	cbnz	r0, 800db4e <_vfiprintf_r+0xfe>
 800daee:	06d9      	lsls	r1, r3, #27
 800daf0:	bf44      	itt	mi
 800daf2:	2220      	movmi	r2, #32
 800daf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800daf8:	071a      	lsls	r2, r3, #28
 800dafa:	bf44      	itt	mi
 800dafc:	222b      	movmi	r2, #43	; 0x2b
 800dafe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db02:	782a      	ldrb	r2, [r5, #0]
 800db04:	2a2a      	cmp	r2, #42	; 0x2a
 800db06:	d02a      	beq.n	800db5e <_vfiprintf_r+0x10e>
 800db08:	9a07      	ldr	r2, [sp, #28]
 800db0a:	46a8      	mov	r8, r5
 800db0c:	2000      	movs	r0, #0
 800db0e:	250a      	movs	r5, #10
 800db10:	4641      	mov	r1, r8
 800db12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db16:	3b30      	subs	r3, #48	; 0x30
 800db18:	2b09      	cmp	r3, #9
 800db1a:	d969      	bls.n	800dbf0 <_vfiprintf_r+0x1a0>
 800db1c:	b360      	cbz	r0, 800db78 <_vfiprintf_r+0x128>
 800db1e:	e024      	b.n	800db6a <_vfiprintf_r+0x11a>
 800db20:	4b50      	ldr	r3, [pc, #320]	; (800dc64 <_vfiprintf_r+0x214>)
 800db22:	429c      	cmp	r4, r3
 800db24:	d101      	bne.n	800db2a <_vfiprintf_r+0xda>
 800db26:	68b4      	ldr	r4, [r6, #8]
 800db28:	e7a2      	b.n	800da70 <_vfiprintf_r+0x20>
 800db2a:	4b4f      	ldr	r3, [pc, #316]	; (800dc68 <_vfiprintf_r+0x218>)
 800db2c:	429c      	cmp	r4, r3
 800db2e:	bf08      	it	eq
 800db30:	68f4      	ldreq	r4, [r6, #12]
 800db32:	e79d      	b.n	800da70 <_vfiprintf_r+0x20>
 800db34:	4621      	mov	r1, r4
 800db36:	4630      	mov	r0, r6
 800db38:	f7fe fcf8 	bl	800c52c <__swsetup_r>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d09d      	beq.n	800da7c <_vfiprintf_r+0x2c>
 800db40:	f04f 30ff 	mov.w	r0, #4294967295
 800db44:	b01d      	add	sp, #116	; 0x74
 800db46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4a:	46a8      	mov	r8, r5
 800db4c:	e7a2      	b.n	800da94 <_vfiprintf_r+0x44>
 800db4e:	4a44      	ldr	r2, [pc, #272]	; (800dc60 <_vfiprintf_r+0x210>)
 800db50:	1a80      	subs	r0, r0, r2
 800db52:	fa0b f000 	lsl.w	r0, fp, r0
 800db56:	4318      	orrs	r0, r3
 800db58:	9004      	str	r0, [sp, #16]
 800db5a:	4645      	mov	r5, r8
 800db5c:	e7be      	b.n	800dadc <_vfiprintf_r+0x8c>
 800db5e:	9a03      	ldr	r2, [sp, #12]
 800db60:	1d11      	adds	r1, r2, #4
 800db62:	6812      	ldr	r2, [r2, #0]
 800db64:	9103      	str	r1, [sp, #12]
 800db66:	2a00      	cmp	r2, #0
 800db68:	db01      	blt.n	800db6e <_vfiprintf_r+0x11e>
 800db6a:	9207      	str	r2, [sp, #28]
 800db6c:	e004      	b.n	800db78 <_vfiprintf_r+0x128>
 800db6e:	4252      	negs	r2, r2
 800db70:	f043 0302 	orr.w	r3, r3, #2
 800db74:	9207      	str	r2, [sp, #28]
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	f898 3000 	ldrb.w	r3, [r8]
 800db7c:	2b2e      	cmp	r3, #46	; 0x2e
 800db7e:	d10e      	bne.n	800db9e <_vfiprintf_r+0x14e>
 800db80:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db84:	2b2a      	cmp	r3, #42	; 0x2a
 800db86:	d138      	bne.n	800dbfa <_vfiprintf_r+0x1aa>
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	1d1a      	adds	r2, r3, #4
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	9203      	str	r2, [sp, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	bfb8      	it	lt
 800db94:	f04f 33ff 	movlt.w	r3, #4294967295
 800db98:	f108 0802 	add.w	r8, r8, #2
 800db9c:	9305      	str	r3, [sp, #20]
 800db9e:	4d33      	ldr	r5, [pc, #204]	; (800dc6c <_vfiprintf_r+0x21c>)
 800dba0:	f898 1000 	ldrb.w	r1, [r8]
 800dba4:	2203      	movs	r2, #3
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7f2 fb1a 	bl	80001e0 <memchr>
 800dbac:	b140      	cbz	r0, 800dbc0 <_vfiprintf_r+0x170>
 800dbae:	2340      	movs	r3, #64	; 0x40
 800dbb0:	1b40      	subs	r0, r0, r5
 800dbb2:	fa03 f000 	lsl.w	r0, r3, r0
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	4303      	orrs	r3, r0
 800dbba:	f108 0801 	add.w	r8, r8, #1
 800dbbe:	9304      	str	r3, [sp, #16]
 800dbc0:	f898 1000 	ldrb.w	r1, [r8]
 800dbc4:	482a      	ldr	r0, [pc, #168]	; (800dc70 <_vfiprintf_r+0x220>)
 800dbc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbca:	2206      	movs	r2, #6
 800dbcc:	f108 0701 	add.w	r7, r8, #1
 800dbd0:	f7f2 fb06 	bl	80001e0 <memchr>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d037      	beq.n	800dc48 <_vfiprintf_r+0x1f8>
 800dbd8:	4b26      	ldr	r3, [pc, #152]	; (800dc74 <_vfiprintf_r+0x224>)
 800dbda:	bb1b      	cbnz	r3, 800dc24 <_vfiprintf_r+0x1d4>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	3307      	adds	r3, #7
 800dbe0:	f023 0307 	bic.w	r3, r3, #7
 800dbe4:	3308      	adds	r3, #8
 800dbe6:	9303      	str	r3, [sp, #12]
 800dbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbea:	444b      	add	r3, r9
 800dbec:	9309      	str	r3, [sp, #36]	; 0x24
 800dbee:	e750      	b.n	800da92 <_vfiprintf_r+0x42>
 800dbf0:	fb05 3202 	mla	r2, r5, r2, r3
 800dbf4:	2001      	movs	r0, #1
 800dbf6:	4688      	mov	r8, r1
 800dbf8:	e78a      	b.n	800db10 <_vfiprintf_r+0xc0>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f108 0801 	add.w	r8, r8, #1
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	4619      	mov	r1, r3
 800dc04:	250a      	movs	r5, #10
 800dc06:	4640      	mov	r0, r8
 800dc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc0c:	3a30      	subs	r2, #48	; 0x30
 800dc0e:	2a09      	cmp	r2, #9
 800dc10:	d903      	bls.n	800dc1a <_vfiprintf_r+0x1ca>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0c3      	beq.n	800db9e <_vfiprintf_r+0x14e>
 800dc16:	9105      	str	r1, [sp, #20]
 800dc18:	e7c1      	b.n	800db9e <_vfiprintf_r+0x14e>
 800dc1a:	fb05 2101 	mla	r1, r5, r1, r2
 800dc1e:	2301      	movs	r3, #1
 800dc20:	4680      	mov	r8, r0
 800dc22:	e7f0      	b.n	800dc06 <_vfiprintf_r+0x1b6>
 800dc24:	ab03      	add	r3, sp, #12
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	4622      	mov	r2, r4
 800dc2a:	4b13      	ldr	r3, [pc, #76]	; (800dc78 <_vfiprintf_r+0x228>)
 800dc2c:	a904      	add	r1, sp, #16
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f7fd fed2 	bl	800b9d8 <_printf_float>
 800dc34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc38:	4681      	mov	r9, r0
 800dc3a:	d1d5      	bne.n	800dbe8 <_vfiprintf_r+0x198>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	065b      	lsls	r3, r3, #25
 800dc40:	f53f af7e 	bmi.w	800db40 <_vfiprintf_r+0xf0>
 800dc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc46:	e77d      	b.n	800db44 <_vfiprintf_r+0xf4>
 800dc48:	ab03      	add	r3, sp, #12
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	4b0a      	ldr	r3, [pc, #40]	; (800dc78 <_vfiprintf_r+0x228>)
 800dc50:	a904      	add	r1, sp, #16
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7fe f976 	bl	800bf44 <_printf_i>
 800dc58:	e7ec      	b.n	800dc34 <_vfiprintf_r+0x1e4>
 800dc5a:	bf00      	nop
 800dc5c:	0800e070 	.word	0x0800e070
 800dc60:	0800e1f4 	.word	0x0800e1f4
 800dc64:	0800e090 	.word	0x0800e090
 800dc68:	0800e050 	.word	0x0800e050
 800dc6c:	0800e1fa 	.word	0x0800e1fa
 800dc70:	0800e1fe 	.word	0x0800e1fe
 800dc74:	0800b9d9 	.word	0x0800b9d9
 800dc78:	0800da2b 	.word	0x0800da2b

0800dc7c <_read_r>:
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4c07      	ldr	r4, [pc, #28]	; (800dc9c <_read_r+0x20>)
 800dc80:	4605      	mov	r5, r0
 800dc82:	4608      	mov	r0, r1
 800dc84:	4611      	mov	r1, r2
 800dc86:	2200      	movs	r2, #0
 800dc88:	6022      	str	r2, [r4, #0]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f7fc fd98 	bl	800a7c0 <_read>
 800dc90:	1c43      	adds	r3, r0, #1
 800dc92:	d102      	bne.n	800dc9a <_read_r+0x1e>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	b103      	cbz	r3, 800dc9a <_read_r+0x1e>
 800dc98:	602b      	str	r3, [r5, #0]
 800dc9a:	bd38      	pop	{r3, r4, r5, pc}
 800dc9c:	20001fd8 	.word	0x20001fd8

0800dca0 <__srget_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	460c      	mov	r4, r1
 800dca4:	4605      	mov	r5, r0
 800dca6:	b118      	cbz	r0, 800dcb0 <__srget_r+0x10>
 800dca8:	6983      	ldr	r3, [r0, #24]
 800dcaa:	b90b      	cbnz	r3, 800dcb0 <__srget_r+0x10>
 800dcac:	f7fd fc64 	bl	800b578 <__sinit>
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	; (800dcec <__srget_r+0x4c>)
 800dcb2:	429c      	cmp	r4, r3
 800dcb4:	d10d      	bne.n	800dcd2 <__srget_r+0x32>
 800dcb6:	686c      	ldr	r4, [r5, #4]
 800dcb8:	4621      	mov	r1, r4
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f000 f85a 	bl	800dd74 <__srefill_r>
 800dcc0:	b988      	cbnz	r0, 800dce6 <__srget_r+0x46>
 800dcc2:	6863      	ldr	r3, [r4, #4]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	6063      	str	r3, [r4, #4]
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	6022      	str	r2, [r4, #0]
 800dcce:	7818      	ldrb	r0, [r3, #0]
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	4b07      	ldr	r3, [pc, #28]	; (800dcf0 <__srget_r+0x50>)
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	d101      	bne.n	800dcdc <__srget_r+0x3c>
 800dcd8:	68ac      	ldr	r4, [r5, #8]
 800dcda:	e7ed      	b.n	800dcb8 <__srget_r+0x18>
 800dcdc:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <__srget_r+0x54>)
 800dcde:	429c      	cmp	r4, r3
 800dce0:	bf08      	it	eq
 800dce2:	68ec      	ldreq	r4, [r5, #12]
 800dce4:	e7e8      	b.n	800dcb8 <__srget_r+0x18>
 800dce6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcea:	e7f1      	b.n	800dcd0 <__srget_r+0x30>
 800dcec:	0800e070 	.word	0x0800e070
 800dcf0:	0800e090 	.word	0x0800e090
 800dcf4:	0800e050 	.word	0x0800e050

0800dcf8 <_fstat_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4c07      	ldr	r4, [pc, #28]	; (800dd18 <_fstat_r+0x20>)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4605      	mov	r5, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	f7fc fda0 	bl	800a84a <_fstat>
 800dd0a:	1c43      	adds	r3, r0, #1
 800dd0c:	d102      	bne.n	800dd14 <_fstat_r+0x1c>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	b103      	cbz	r3, 800dd14 <_fstat_r+0x1c>
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
 800dd16:	bf00      	nop
 800dd18:	20001fd8 	.word	0x20001fd8

0800dd1c <_isatty_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4c06      	ldr	r4, [pc, #24]	; (800dd38 <_isatty_r+0x1c>)
 800dd20:	2300      	movs	r3, #0
 800dd22:	4605      	mov	r5, r0
 800dd24:	4608      	mov	r0, r1
 800dd26:	6023      	str	r3, [r4, #0]
 800dd28:	f7fc fd9f 	bl	800a86a <_isatty>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_isatty_r+0x1a>
 800dd30:	6823      	ldr	r3, [r4, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_isatty_r+0x1a>
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	20001fd8 	.word	0x20001fd8

0800dd3c <__ascii_mbtowc>:
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	b901      	cbnz	r1, 800dd42 <__ascii_mbtowc+0x6>
 800dd40:	a901      	add	r1, sp, #4
 800dd42:	b142      	cbz	r2, 800dd56 <__ascii_mbtowc+0x1a>
 800dd44:	b14b      	cbz	r3, 800dd5a <__ascii_mbtowc+0x1e>
 800dd46:	7813      	ldrb	r3, [r2, #0]
 800dd48:	600b      	str	r3, [r1, #0]
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	1c10      	adds	r0, r2, #0
 800dd4e:	bf18      	it	ne
 800dd50:	2001      	movne	r0, #1
 800dd52:	b002      	add	sp, #8
 800dd54:	4770      	bx	lr
 800dd56:	4610      	mov	r0, r2
 800dd58:	e7fb      	b.n	800dd52 <__ascii_mbtowc+0x16>
 800dd5a:	f06f 0001 	mvn.w	r0, #1
 800dd5e:	e7f8      	b.n	800dd52 <__ascii_mbtowc+0x16>

0800dd60 <lflush>:
 800dd60:	8983      	ldrh	r3, [r0, #12]
 800dd62:	f003 0309 	and.w	r3, r3, #9
 800dd66:	2b09      	cmp	r3, #9
 800dd68:	d101      	bne.n	800dd6e <lflush+0xe>
 800dd6a:	f7fd bbb3 	b.w	800b4d4 <fflush>
 800dd6e:	2000      	movs	r0, #0
 800dd70:	4770      	bx	lr
	...

0800dd74 <__srefill_r>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	460c      	mov	r4, r1
 800dd78:	4605      	mov	r5, r0
 800dd7a:	b118      	cbz	r0, 800dd84 <__srefill_r+0x10>
 800dd7c:	6983      	ldr	r3, [r0, #24]
 800dd7e:	b90b      	cbnz	r3, 800dd84 <__srefill_r+0x10>
 800dd80:	f7fd fbfa 	bl	800b578 <__sinit>
 800dd84:	4b3c      	ldr	r3, [pc, #240]	; (800de78 <__srefill_r+0x104>)
 800dd86:	429c      	cmp	r4, r3
 800dd88:	d10a      	bne.n	800dda0 <__srefill_r+0x2c>
 800dd8a:	686c      	ldr	r4, [r5, #4]
 800dd8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd90:	2300      	movs	r3, #0
 800dd92:	6063      	str	r3, [r4, #4]
 800dd94:	b293      	uxth	r3, r2
 800dd96:	069e      	lsls	r6, r3, #26
 800dd98:	d50c      	bpl.n	800ddb4 <__srefill_r+0x40>
 800dd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd9e:	e067      	b.n	800de70 <__srefill_r+0xfc>
 800dda0:	4b36      	ldr	r3, [pc, #216]	; (800de7c <__srefill_r+0x108>)
 800dda2:	429c      	cmp	r4, r3
 800dda4:	d101      	bne.n	800ddaa <__srefill_r+0x36>
 800dda6:	68ac      	ldr	r4, [r5, #8]
 800dda8:	e7f0      	b.n	800dd8c <__srefill_r+0x18>
 800ddaa:	4b35      	ldr	r3, [pc, #212]	; (800de80 <__srefill_r+0x10c>)
 800ddac:	429c      	cmp	r4, r3
 800ddae:	bf08      	it	eq
 800ddb0:	68ec      	ldreq	r4, [r5, #12]
 800ddb2:	e7eb      	b.n	800dd8c <__srefill_r+0x18>
 800ddb4:	0758      	lsls	r0, r3, #29
 800ddb6:	d449      	bmi.n	800de4c <__srefill_r+0xd8>
 800ddb8:	06d9      	lsls	r1, r3, #27
 800ddba:	d405      	bmi.n	800ddc8 <__srefill_r+0x54>
 800ddbc:	2309      	movs	r3, #9
 800ddbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ddc2:	602b      	str	r3, [r5, #0]
 800ddc4:	81a2      	strh	r2, [r4, #12]
 800ddc6:	e7e8      	b.n	800dd9a <__srefill_r+0x26>
 800ddc8:	071a      	lsls	r2, r3, #28
 800ddca:	d50b      	bpl.n	800dde4 <__srefill_r+0x70>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f7fd fb56 	bl	800b480 <_fflush_r>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d1e0      	bne.n	800dd9a <__srefill_r+0x26>
 800ddd8:	89a3      	ldrh	r3, [r4, #12]
 800ddda:	60a0      	str	r0, [r4, #8]
 800dddc:	f023 0308 	bic.w	r3, r3, #8
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	61a0      	str	r0, [r4, #24]
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	f043 0304 	orr.w	r3, r3, #4
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	6923      	ldr	r3, [r4, #16]
 800ddee:	b91b      	cbnz	r3, 800ddf8 <__srefill_r+0x84>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f7ff facc 	bl	800d390 <__smakebuf_r>
 800ddf8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800ddfc:	b2be      	uxth	r6, r7
 800ddfe:	07b3      	lsls	r3, r6, #30
 800de00:	d00f      	beq.n	800de22 <__srefill_r+0xae>
 800de02:	2301      	movs	r3, #1
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	4b1f      	ldr	r3, [pc, #124]	; (800de84 <__srefill_r+0x110>)
 800de08:	491f      	ldr	r1, [pc, #124]	; (800de88 <__srefill_r+0x114>)
 800de0a:	6818      	ldr	r0, [r3, #0]
 800de0c:	f006 0609 	and.w	r6, r6, #9
 800de10:	f7fd fc1e 	bl	800b650 <_fwalk>
 800de14:	2e09      	cmp	r6, #9
 800de16:	81a7      	strh	r7, [r4, #12]
 800de18:	d103      	bne.n	800de22 <__srefill_r+0xae>
 800de1a:	4621      	mov	r1, r4
 800de1c:	4628      	mov	r0, r5
 800de1e:	f7fd faa9 	bl	800b374 <__sflush_r>
 800de22:	6922      	ldr	r2, [r4, #16]
 800de24:	6022      	str	r2, [r4, #0]
 800de26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de28:	6963      	ldr	r3, [r4, #20]
 800de2a:	6a21      	ldr	r1, [r4, #32]
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b0      	blx	r6
 800de30:	2800      	cmp	r0, #0
 800de32:	6060      	str	r0, [r4, #4]
 800de34:	dc1d      	bgt.n	800de72 <__srefill_r+0xfe>
 800de36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de3a:	bf17      	itett	ne
 800de3c:	2200      	movne	r2, #0
 800de3e:	f043 0320 	orreq.w	r3, r3, #32
 800de42:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800de46:	6062      	strne	r2, [r4, #4]
 800de48:	81a3      	strh	r3, [r4, #12]
 800de4a:	e7a6      	b.n	800dd9a <__srefill_r+0x26>
 800de4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4e:	2900      	cmp	r1, #0
 800de50:	d0cc      	beq.n	800ddec <__srefill_r+0x78>
 800de52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de56:	4299      	cmp	r1, r3
 800de58:	d002      	beq.n	800de60 <__srefill_r+0xec>
 800de5a:	4628      	mov	r0, r5
 800de5c:	f7fd fc80 	bl	800b760 <_free_r>
 800de60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de62:	6063      	str	r3, [r4, #4]
 800de64:	2000      	movs	r0, #0
 800de66:	6360      	str	r0, [r4, #52]	; 0x34
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0bf      	beq.n	800ddec <__srefill_r+0x78>
 800de6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800de6e:	6023      	str	r3, [r4, #0]
 800de70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de72:	2000      	movs	r0, #0
 800de74:	e7fc      	b.n	800de70 <__srefill_r+0xfc>
 800de76:	bf00      	nop
 800de78:	0800e070 	.word	0x0800e070
 800de7c:	0800e090 	.word	0x0800e090
 800de80:	0800e050 	.word	0x0800e050
 800de84:	0800e0b0 	.word	0x0800e0b0
 800de88:	0800dd61 	.word	0x0800dd61

0800de8c <__ascii_wctomb>:
 800de8c:	b149      	cbz	r1, 800dea2 <__ascii_wctomb+0x16>
 800de8e:	2aff      	cmp	r2, #255	; 0xff
 800de90:	bf85      	ittet	hi
 800de92:	238a      	movhi	r3, #138	; 0x8a
 800de94:	6003      	strhi	r3, [r0, #0]
 800de96:	700a      	strbls	r2, [r1, #0]
 800de98:	f04f 30ff 	movhi.w	r0, #4294967295
 800de9c:	bf98      	it	ls
 800de9e:	2001      	movls	r0, #1
 800dea0:	4770      	bx	lr
 800dea2:	4608      	mov	r0, r1
 800dea4:	4770      	bx	lr
	...

0800dea8 <_init>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	bf00      	nop
 800deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deae:	bc08      	pop	{r3}
 800deb0:	469e      	mov	lr, r3
 800deb2:	4770      	bx	lr

0800deb4 <_fini>:
 800deb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb6:	bf00      	nop
 800deb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deba:	bc08      	pop	{r3}
 800debc:	469e      	mov	lr, r3
 800debe:	4770      	bx	lr
