
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f060  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800f1f0  0800f1f0  0001f1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6b8  0800f6b8  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6b8  0800f6b8  0001f6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6c0  0800f6c0  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6c0  0800f6c0  0001f6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6c4  0800f6c4  0001f6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800f6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  20000350  0800fa18  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fdc  0800fa18  00021fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022203  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004665  00000000  00000000  00042583  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc0  00000000  00000000  00046be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  000487a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027eaa  00000000  00000000  0004a180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019036  00000000  00000000  0007202a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9940  00000000  00000000  0008b060  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001649a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008628  00000000  00000000  00164a1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1d8 	.word	0x0800f1d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800f1d8 	.word	0x0800f1d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fd37 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f009 fff2 	bl	800aec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd4f 	bl	80019ae <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fd17 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000118 	.word	0x20000118
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000390 	.word	0x20000390

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000390 	.word	0x20000390

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_Delay+0x40>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e033      	b.n	800104e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f009 ff90 	bl	800af14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001016:	f023 0302 	bic.w	r3, r3, #2
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fa40 	bl	80014a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f023 0303 	bic.w	r3, r3, #3
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	e001      	b.n	8001044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Start_DMA+0x1e>
 8001072:	2302      	movs	r3, #2
 8001074:	e0cc      	b.n	8001210 <HAL_ADC_Start_DMA+0x1b8>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	d018      	beq.n	80010be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <HAL_ADC_Start_DMA+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5e      	ldr	r2, [pc, #376]	; (800121c <HAL_ADC_Start_DMA+0x1c4>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9a      	lsrs	r2, r3, #18
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b0:	e002      	b.n	80010b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f9      	bne.n	80010b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 80a0 	bne.w	800120e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110c:	d106      	bne.n	800111c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f023 0206 	bic.w	r2, r3, #6
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
 800111a:	e002      	b.n	8001122 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 800112c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	4a3c      	ldr	r2, [pc, #240]	; (8001224 <HAL_ADC_Start_DMA+0x1cc>)
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <HAL_ADC_Start_DMA+0x1d0>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	4a3a      	ldr	r2, [pc, #232]	; (800122c <HAL_ADC_Start_DMA+0x1d4>)
 8001144:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800114e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800115e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	334c      	adds	r3, #76	; 0x4c
 800117a:	4619      	mov	r1, r3
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f000 fcd0 	bl	8001b24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_ADC_Start_DMA+0x1d8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d015      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x16e>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <HAL_ADC_Start_DMA+0x1dc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Start_DMA+0x158>
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_ADC_Start_DMA+0x1e0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d129      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d823      	bhi.n	800120e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11c      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e013      	b.n	800120e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_ADC_Start_DMA+0x1d8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10e      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000118 	.word	0x20000118
 800121c:	431bde83 	.word	0x431bde83
 8001220:	40012300 	.word	0x40012300
 8001224:	080016a1 	.word	0x080016a1
 8001228:	0800175b 	.word	0x0800175b
 800122c:	08001777 	.word	0x08001777
 8001230:	40012000 	.word	0x40012000
 8001234:	40012100 	.word	0x40012100
 8001238:	40012200 	.word	0x40012200

0800123c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c>
 800127c:	2302      	movs	r3, #2
 800127e:	e105      	b.n	800148c <HAL_ADC_ConfigChannel+0x228>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d925      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	2207      	movs	r2, #7
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68d9      	ldr	r1, [r3, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4403      	add	r3, r0
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	409a      	lsls	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e022      	b.n	8001322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4403      	add	r3, r0
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d824      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b05      	subs	r3, #5
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e04c      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b23      	subs	r3, #35	; 0x23
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	e023      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_ADC_ConfigChannel+0x234>)
 8001410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d109      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d105      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d003      	beq.n	800144a <HAL_ADC_ConfigChannel+0x1e6>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b11      	cmp	r3, #17
 8001448:	d11b      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d111      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_ConfigChannel+0x240>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000
 80014a0:	20000118 	.word	0x20000118
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <ADC_Init+0x1f0>)
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <ADC_Init+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d022      	beq.n	8001586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800154e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e00f      	b.n	80015a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0202 	bic.w	r2, r2, #2
 80015b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e1b      	ldrb	r3, [r3, #24]
 80015c0:	005a      	lsls	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	3b01      	subs	r3, #1
 8001600:	035a      	lsls	r2, r3, #13
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e007      	b.n	800161c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	3b01      	subs	r3, #1
 8001638:	051a      	lsls	r2, r3, #20
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165e:	025a      	lsls	r2, r3, #9
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	029a      	lsls	r2, r3, #10
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40012300 	.word	0x40012300
 800169c:	0f000001 	.word	0x0f000001

080016a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d13c      	bne.n	8001734 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d12b      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d127      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d119      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0220 	bic.w	r2, r2, #32
 8001706:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f009 f9c5 	bl	800aabc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001732:	e00e      	b.n	8001752 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fd85 	bl	8001250 <HAL_ADC_ErrorCallback>
}
 8001746:	e004      	b.n	8001752 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fd67 	bl	800123c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fd5a 	bl	8001250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff face 	bl	8000f74 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e099      	b.n	8001b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	e00f      	b.n	8001a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a06:	f7ff fab5 	bl	8000f74 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d908      	bls.n	8001a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e078      	b.n	8001b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e8      	bne.n	8001a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_DMA_Init+0x158>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f023 0307 	bic.w	r3, r3, #7
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d117      	bne.n	8001aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fa77 	bl	8001fc0 <DMA_CheckFifoParam>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e016      	b.n	8001b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fa2e 	bl	8001f54 <DMA_CalcBaseAndBitshift>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	f010803f 	.word	0xf010803f

08001b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_DMA_Start_IT+0x26>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e048      	b.n	8001bdc <HAL_DMA_Start_IT+0xb8>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d137      	bne.n	8001bce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f9c0 	bl	8001ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0216 	orr.w	r2, r2, #22
 8001b92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0208 	orr.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e005      	b.n	8001bda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf0:	4b92      	ldr	r3, [pc, #584]	; (8001e3c <HAL_DMA_IRQHandler+0x258>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a92      	ldr	r2, [pc, #584]	; (8001e40 <HAL_DMA_IRQHandler+0x25c>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2208      	movs	r2, #8
 8001c10:	409a      	lsls	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2201      	movs	r2, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f043 0202 	orr.w	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	2204      	movs	r2, #4
 8001caa:	409a      	lsls	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f043 0204 	orr.w	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d03c      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2210      	movs	r2, #16
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d108      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d024      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
 8001d12:	e01f      	b.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0208 	bic.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2220      	movs	r2, #32
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 808e 	beq.w	8001e82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8086 	beq.w	8001e82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d136      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0216 	bic.w	r2, r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_DMA_IRQHandler+0x1da>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	223f      	movs	r2, #63	; 0x3f
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d07d      	beq.n	8001eee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
        }
        return;
 8001dfa:	e078      	b.n	8001eee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01c      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d108      	bne.n	8001e2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d030      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
 8001e28:	e02b      	b.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d027      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
 8001e3a:	e022      	b.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
 8001e3c:	20000118 	.word	0x20000118
 8001e40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0210 	bic.w	r2, r2, #16
 8001e60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d032      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d022      	beq.n	8001edc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d307      	bcc.n	8001eca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f2      	bne.n	8001eae <HAL_DMA_IRQHandler+0x2ca>
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001eca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e000      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001eee:	bf00      	nop
    }
  }
}
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop

08001ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d108      	bne.n	8001f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f36:	e007      	b.n	8001f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3b10      	subs	r3, #16
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <DMA_CalcBaseAndBitshift+0x68>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d909      	bls.n	8001f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
 8001f94:	e007      	b.n	8001fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	aaaaaaab 	.word	0xaaaaaaab
 8001fbc:	0800f39c 	.word	0x0800f39c

08001fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11f      	bne.n	800201a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d855      	bhi.n	800208c <DMA_CheckFifoParam+0xcc>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x28>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	0800200b 	.word	0x0800200b
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	0800208d 	.word	0x0800208d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d045      	beq.n	8002090 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e042      	b.n	8002090 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002012:	d13f      	bne.n	8002094 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e03c      	b.n	8002094 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d121      	bne.n	8002068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d836      	bhi.n	8002098 <DMA_CheckFifoParam+0xd8>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <DMA_CheckFifoParam+0x70>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002047 	.word	0x08002047
 8002038:	08002041 	.word	0x08002041
 800203c:	08002059 	.word	0x08002059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e02f      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d024      	beq.n	800209c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002056:	e021      	b.n	800209c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002060:	d11e      	bne.n	80020a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002066:	e01b      	b.n	80020a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d902      	bls.n	8002074 <DMA_CheckFifoParam+0xb4>
 800206e:	2b03      	cmp	r3, #3
 8002070:	d003      	beq.n	800207a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002072:	e018      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e015      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      break;
 800208a:	e00b      	b.n	80020a4 <DMA_CheckFifoParam+0xe4>
      break;
 800208c:	bf00      	nop
 800208e:	e00a      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002090:	bf00      	nop
 8002092:	e008      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002094:	bf00      	nop
 8002096:	e006      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002098:	bf00      	nop
 800209a:	e004      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 800209c:	bf00      	nop
 800209e:	e002      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80020a0:	bf00      	nop
 80020a2:	e000      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 80020a4:	bf00      	nop
    }
  } 
  
  return status; 
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e16b      	b.n	80023a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 815a 	bne.w	80023a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x4a>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00b      	beq.n	800219a <HAL_GPIO_Init+0xe6>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218e:	2b11      	cmp	r3, #17
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b12      	cmp	r3, #18
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80b4 	beq.w	80023a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_GPIO_Init+0x308>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_GPIO_Init+0x308>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_GPIO_Init+0x308>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002256:	4a5a      	ldr	r2, [pc, #360]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a51      	ldr	r2, [pc, #324]	; (80023c4 <HAL_GPIO_Init+0x310>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02b      	beq.n	80022da <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_GPIO_Init+0x314>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d025      	beq.n	80022d6 <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4f      	ldr	r2, [pc, #316]	; (80023cc <HAL_GPIO_Init+0x318>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4e      	ldr	r2, [pc, #312]	; (80023d0 <HAL_GPIO_Init+0x31c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x21a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4d      	ldr	r2, [pc, #308]	; (80023d4 <HAL_GPIO_Init+0x320>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x216>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4c      	ldr	r2, [pc, #304]	; (80023d8 <HAL_GPIO_Init+0x324>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x212>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	; (80023dc <HAL_GPIO_Init+0x328>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x20e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4a      	ldr	r2, [pc, #296]	; (80023e0 <HAL_GPIO_Init+0x32c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x20a>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00e      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022be:	2308      	movs	r3, #8
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4934      	ldr	r1, [pc, #208]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_GPIO_Init+0x330>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231e:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_GPIO_Init+0x330>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_GPIO_Init+0x330>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae90 	bls.w	80020d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	3724      	adds	r7, #36	; 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40021400 	.word	0x40021400
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40021c00 	.word	0x40021c00
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e001      	b.n	800240a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	4618      	mov	r0, r3
 800246c:	f008 fb42 	bl	800aaf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e10f      	b.n	80026ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f008 fdae 	bl	800b004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024c0:	f003 f964 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a7b      	ldr	r2, [pc, #492]	; (80026b8 <HAL_I2C_Init+0x23c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d807      	bhi.n	80024e0 <HAL_I2C_Init+0x64>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7a      	ldr	r2, [pc, #488]	; (80026bc <HAL_I2C_Init+0x240>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	e006      	b.n	80024ee <HAL_I2C_Init+0x72>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_I2C_Init+0x244>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0db      	b.n	80026ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a72      	ldr	r2, [pc, #456]	; (80026c4 <HAL_I2C_Init+0x248>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0c9b      	lsrs	r3, r3, #18
 8002500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a64      	ldr	r2, [pc, #400]	; (80026b8 <HAL_I2C_Init+0x23c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d802      	bhi.n	8002530 <HAL_I2C_Init+0xb4>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3301      	adds	r3, #1
 800252e:	e009      	b.n	8002544 <HAL_I2C_Init+0xc8>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_I2C_Init+0x24c>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	3301      	adds	r3, #1
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	430b      	orrs	r3, r1
 800254a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4956      	ldr	r1, [pc, #344]	; (80026b8 <HAL_I2C_Init+0x23c>)
 8002560:	428b      	cmp	r3, r1
 8002562:	d80d      	bhi.n	8002580 <HAL_I2C_Init+0x104>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1e59      	subs	r1, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b04      	cmp	r3, #4
 800257a:	bf38      	it	cc
 800257c:	2304      	movcc	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x130>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x156>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x15e>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x184>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1a4>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	461a      	mov	r2, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	817b      	strh	r3, [r7, #10]
 80026dc:	4613      	mov	r3, r2
 80026de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7fe fc48 	bl	8000f74 <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80e0 	bne.w	80028b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2319      	movs	r3, #25
 80026fa:	2201      	movs	r2, #1
 80026fc:	4970      	ldr	r1, [pc, #448]	; (80028c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fc34 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	e0d3      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2C_Master_Transmit+0x50>
 8002718:	2302      	movs	r3, #2
 800271a:	e0cc      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d007      	beq.n	8002742 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2221      	movs	r2, #33	; 0x21
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2210      	movs	r2, #16
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	893a      	ldrh	r2, [r7, #8]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6a3a      	ldr	r2, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fac2 	bl	8002d14 <I2C_MasterRequestWrite>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e08d      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027b0:	e066      	b.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	6a39      	ldr	r1, [r7, #32]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fcae 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11b      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x188>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fc9e 	bl	800319a <I2C_WaitOnBTFFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b04      	cmp	r3, #4
 800286a:	d107      	bne.n	800287c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e01a      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d194      	bne.n	80027b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7fe fb4a 	bl	8000f74 <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 820b 	bne.w	8002d06 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	497c      	ldr	r1, [pc, #496]	; (8002aec <HAL_I2C_Master_Receive+0x224>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fb36 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e1fe      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Receive+0x50>
 8002914:	2302      	movs	r3, #2
 8002916:	e1f7      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2222      	movs	r2, #34	; 0x22
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_I2C_Master_Receive+0x228>)
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa3a 	bl	8002e00 <I2C_MasterRequestRead>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1b8      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	2b00      	cmp	r3, #0
 800299c:	d113      	bne.n	80029c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e18c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d11b      	bne.n	8002a06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e16c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d11b      	bne.n	8002a46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	e14c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e138      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 80f1 	bhi.w	8002c5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fbc9 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e139      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac6:	e10b      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d14e      	bne.n	8002b6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_I2C_Master_Receive+0x22c>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa46 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e10e      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6c:	e0b8      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2200      	movs	r2, #0
 8002b76:	4966      	ldr	r1, [pc, #408]	; (8002d10 <HAL_I2C_Master_Receive+0x448>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f9f7 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0bf      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_I2C_Master_Receive+0x448>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f9c9 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e091      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e042      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fadc 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e04c      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d118      	bne.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aec2 	bne.w	8002a6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010004 	.word	0x00010004

08002d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d006      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d003      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00b      	b.n	8002d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d107      	bne.n	8002d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f8f9 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e035      	b.n	8002df0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8c:	d108      	bne.n	8002da0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d9c:	611a      	str	r2, [r3, #16]
 8002d9e:	e01b      	b.n	8002dd8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002da0:	897b      	ldrh	r3, [r7, #10]
 8002da2:	11db      	asrs	r3, r3, #7
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f003 0306 	and.w	r3, r3, #6
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f063 030f 	orn	r3, r3, #15
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <I2C_MasterRequestWrite+0xe4>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f92b 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e010      	b.n	8002df0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4907      	ldr	r1, [pc, #28]	; (8002dfc <I2C_MasterRequestWrite+0xe8>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f91b 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	00010008 	.word	0x00010008
 8002dfc:	00010002 	.word	0x00010002

08002e00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d006      	beq.n	8002e3a <I2C_MasterRequestRead+0x3a>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d003      	beq.n	8002e3a <I2C_MasterRequestRead+0x3a>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e38:	d108      	bne.n	8002e4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e00b      	b.n	8002e64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	d107      	bne.n	8002e64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f87b 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e06d      	b.n	8002f5c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e88:	d108      	bne.n	8002e9c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	e053      	b.n	8002f44 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e9c:	897b      	ldrh	r3, [r7, #10]
 8002e9e:	11db      	asrs	r3, r3, #7
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 0306 	and.w	r3, r3, #6
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f063 030f 	orn	r3, r3, #15
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	492a      	ldr	r1, [pc, #168]	; (8002f64 <I2C_MasterRequestRead+0x164>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8ad 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e048      	b.n	8002f5c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eca:	897b      	ldrh	r3, [r7, #10]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4923      	ldr	r1, [pc, #140]	; (8002f68 <I2C_MasterRequestRead+0x168>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f89d 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e038      	b.n	8002f5c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f825 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e017      	b.n	8002f5c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f2c:	897b      	ldrh	r3, [r7, #10]
 8002f2e:	11db      	asrs	r3, r3, #7
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0306 	and.w	r3, r3, #6
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f063 030e 	orn	r3, r3, #14
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4907      	ldr	r1, [pc, #28]	; (8002f68 <I2C_MasterRequestRead+0x168>)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f865 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	00010008 	.word	0x00010008
 8002f68:	00010002 	.word	0x00010002

08002f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	e025      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d021      	beq.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fd fff5 	bl	8000f74 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d116      	bne.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e023      	b.n	8003012 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10d      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	e00c      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d0b6      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003028:	e051      	b.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d123      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e046      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d021      	beq.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fd ff73 	bl	8000f74 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10c      	bne.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	e00b      	b.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d18d      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003124:	e02d      	b.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f8ce 	bl	80032c8 <I2C_IsAcknowledgeFailed>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e02d      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d021      	beq.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7fd ff19 	bl	8000f74 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d116      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d1ca      	bne.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a6:	e02d      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f88d 	bl	80032c8 <I2C_IsAcknowledgeFailed>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e02d      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d021      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c0:	f7fd fed8 	bl	8000f74 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d302      	bcc.n	80031d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d1ca      	bne.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003228:	e042      	b.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d119      	bne.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e029      	b.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7fd fe82 	bl	8000f74 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d1b5      	bne.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d11b      	bne.n	8003318 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e128      	b.n	800358c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a90      	ldr	r2, [pc, #576]	; (8003594 <HAL_I2S_Init+0x26c>)
 8003352:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f007 fe9d 	bl	800b094 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003370:	f023 030f 	bic.w	r3, r3, #15
 8003374:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2202      	movs	r2, #2
 800337c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d060      	beq.n	8003448 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800338e:	2310      	movs	r3, #16
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e001      	b.n	8003398 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b20      	cmp	r3, #32
 800339e:	d802      	bhi.n	80033a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033a6:	2001      	movs	r0, #1
 80033a8:	f002 fafa 	bl	80059a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80033ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b6:	d125      	bne.n	8003404 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	461a      	mov	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	3305      	adds	r3, #5
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	e01f      	b.n	8003422 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	461a      	mov	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	3305      	adds	r3, #5
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e00e      	b.n	8003422 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fbb2 f2f3 	udiv	r2, r2, r3
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	3305      	adds	r3, #5
 8003420:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4a5c      	ldr	r2, [pc, #368]	; (8003598 <HAL_I2S_Init+0x270>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e003      	b.n	8003450 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003448:	2302      	movs	r3, #2
 800344a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d902      	bls.n	800345c <HAL_I2S_Init+0x134>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d907      	bls.n	800346c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f043 0210 	orr.w	r2, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e08f      	b.n	800358c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	ea42 0103 	orr.w	r1, r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	430a      	orrs	r2, r1
 800347e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800348a:	f023 030f 	bic.w	r3, r3, #15
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6851      	ldr	r1, [r2, #4]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6992      	ldr	r2, [r2, #24]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d161      	bne.n	800357c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a38      	ldr	r2, [pc, #224]	; (800359c <HAL_I2S_Init+0x274>)
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a37      	ldr	r2, [pc, #220]	; (80035a0 <HAL_I2S_Init+0x278>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_I2S_Init+0x1a4>
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_I2S_Init+0x27c>)
 80034ca:	e001      	b.n	80034d0 <HAL_I2S_Init+0x1a8>
 80034cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4932      	ldr	r1, [pc, #200]	; (80035a0 <HAL_I2S_Init+0x278>)
 80034d8:	428a      	cmp	r2, r1
 80034da:	d101      	bne.n	80034e0 <HAL_I2S_Init+0x1b8>
 80034dc:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <HAL_I2S_Init+0x27c>)
 80034de:	e001      	b.n	80034e4 <HAL_I2S_Init+0x1bc>
 80034e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034e8:	f023 030f 	bic.w	r3, r3, #15
 80034ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <HAL_I2S_Init+0x278>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_I2S_Init+0x1d4>
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_I2S_Init+0x27c>)
 80034fa:	e001      	b.n	8003500 <HAL_I2S_Init+0x1d8>
 80034fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003500:	2202      	movs	r2, #2
 8003502:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <HAL_I2S_Init+0x278>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_I2S_Init+0x1ea>
 800350e:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_I2S_Init+0x27c>)
 8003510:	e001      	b.n	8003516 <HAL_I2S_Init+0x1ee>
 8003512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003522:	d003      	beq.n	800352c <HAL_I2S_Init+0x204>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800352c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e001      	b.n	8003538 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	b299      	uxth	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800354e:	4303      	orrs	r3, r0
 8003550:	b29b      	uxth	r3, r3
 8003552:	430b      	orrs	r3, r1
 8003554:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003556:	4313      	orrs	r3, r2
 8003558:	b29a      	uxth	r2, r3
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	4313      	orrs	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003564:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a0d      	ldr	r2, [pc, #52]	; (80035a0 <HAL_I2S_Init+0x278>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_I2S_Init+0x24c>
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_I2S_Init+0x27c>)
 8003572:	e001      	b.n	8003578 <HAL_I2S_Init+0x250>
 8003574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003578:	897a      	ldrh	r2, [r7, #10]
 800357a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0800369f 	.word	0x0800369f
 8003598:	cccccccd 	.word	0xcccccccd
 800359c:	080037b5 	.word	0x080037b5
 80035a0:	40003800 	.word	0x40003800
 80035a4:	40003400 	.word	0x40003400

080035a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10e      	bne.n	8003638 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003628:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffb8 	bl	80035a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	b292      	uxth	r2, r2
 8003654:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003686:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff93 	bl	80035bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d13a      	bne.n	8003730 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d109      	bne.n	80036d8 <I2S_IRQHandler+0x3a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d102      	bne.n	80036d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffb4 	bl	8003640 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d126      	bne.n	8003730 <I2S_IRQHandler+0x92>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d11f      	bne.n	8003730 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff50 	bl	80035d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d136      	bne.n	80037aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d109      	bne.n	800375a <I2S_IRQHandler+0xbc>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d102      	bne.n	800375a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff45 	bl	80035e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d122      	bne.n	80037aa <I2S_IRQHandler+0x10c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	d11b      	bne.n	80037aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff13 	bl	80035d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4aa2      	ldr	r2, [pc, #648]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037ce:	4ba2      	ldr	r3, [pc, #648]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a9b      	ldr	r2, [pc, #620]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037ec:	4b9a      	ldr	r3, [pc, #616]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ee:	e001      	b.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d004      	beq.n	800380c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 8099 	bne.w	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d107      	bne.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f925 	bl	8003a70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f9c8 	bl	8003bd0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d13a      	bne.n	80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d035      	beq.n	80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7e      	ldr	r2, [pc, #504]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800385e:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003860:	e001      	b.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4979      	ldr	r1, [pc, #484]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800386e:	428b      	cmp	r3, r1
 8003870:	d101      	bne.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003872:	4b79      	ldr	r3, [pc, #484]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003874:	e001      	b.n	800387a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800387e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800388e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fe88 	bl	80035d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	f040 80be 	bne.w	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80b8 	beq.w	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038f2:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f4:	e001      	b.n	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4954      	ldr	r1, [pc, #336]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003902:	428b      	cmp	r3, r1
 8003904:	d101      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003906:	4b54      	ldr	r3, [pc, #336]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003908:	e001      	b.n	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800390a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003912:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe4a 	bl	80035d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800393c:	e084      	b.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d107      	bne.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8be 	bl	8003ad4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f8fd 	bl	8003b6c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d12f      	bne.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d02a      	beq.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003994:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2e      	ldr	r2, [pc, #184]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a2:	e001      	b.n	80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4929      	ldr	r1, [pc, #164]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d101      	bne.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039b6:	e001      	b.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f043 0202 	orr.w	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fdfa 	bl	80035d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d131      	bne.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02c      	beq.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039fc:	e001      	b.n	8003a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4912      	ldr	r1, [pc, #72]	; (8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a0a:	428b      	cmp	r3, r1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a10:	e001      	b.n	8003a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a2a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fdc5 	bl	80035d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a46:	e000      	b.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a48:	bf00      	nop
}
 8003a4a:	bf00      	nop
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40003800 	.word	0x40003800
 8003a58:	40003400 	.word	0x40003400

08003a5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c99      	adds	r1, r3, #2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6251      	str	r1, [r2, #36]	; 0x24
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ab0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ffc9 	bl	8003a5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c99      	adds	r1, r3, #2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ae6:	8819      	ldrh	r1, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <I2SEx_TxISR_I2SExt+0x90>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <I2SEx_TxISR_I2SExt+0x22>
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <I2SEx_TxISR_I2SExt+0x94>)
 8003af4:	e001      	b.n	8003afa <I2SEx_TxISR_I2SExt+0x26>
 8003af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afa:	460a      	mov	r2, r1
 8003afc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d121      	bne.n	8003b5a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <I2SEx_TxISR_I2SExt+0x90>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <I2SEx_TxISR_I2SExt+0x50>
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <I2SEx_TxISR_I2SExt+0x94>)
 8003b22:	e001      	b.n	8003b28 <I2SEx_TxISR_I2SExt+0x54>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	490d      	ldr	r1, [pc, #52]	; (8003b64 <I2SEx_TxISR_I2SExt+0x90>)
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d101      	bne.n	8003b38 <I2SEx_TxISR_I2SExt+0x64>
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <I2SEx_TxISR_I2SExt+0x94>)
 8003b36:	e001      	b.n	8003b3c <I2SEx_TxISR_I2SExt+0x68>
 8003b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff81 	bl	8003a5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40003800 	.word	0x40003800
 8003b68:	40003400 	.word	0x40003400

08003b6c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68d8      	ldr	r0, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	1c99      	adds	r1, r3, #2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b84:	b282      	uxth	r2, r0
 8003b86:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d113      	bne.n	8003bc8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ff4a 	bl	8003a5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <I2SEx_RxISR_I2SExt+0x90>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <I2SEx_RxISR_I2SExt+0x16>
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <I2SEx_RxISR_I2SExt+0x94>)
 8003be4:	e001      	b.n	8003bea <I2SEx_RxISR_I2SExt+0x1a>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bea:	68d8      	ldr	r0, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	1c99      	adds	r1, r3, #2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bf6:	b282      	uxth	r2, r0
 8003bf8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d121      	bne.n	8003c56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <I2SEx_RxISR_I2SExt+0x90>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d101      	bne.n	8003c20 <I2SEx_RxISR_I2SExt+0x50>
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <I2SEx_RxISR_I2SExt+0x94>)
 8003c1e:	e001      	b.n	8003c24 <I2SEx_RxISR_I2SExt+0x54>
 8003c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	490d      	ldr	r1, [pc, #52]	; (8003c60 <I2SEx_RxISR_I2SExt+0x90>)
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	d101      	bne.n	8003c34 <I2SEx_RxISR_I2SExt+0x64>
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <I2SEx_RxISR_I2SExt+0x94>)
 8003c32:	e001      	b.n	8003c38 <I2SEx_RxISR_I2SExt+0x68>
 8003c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff03 	bl	8003a5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40003800 	.word	0x40003800
 8003c64:	40003400 	.word	0x40003400

08003c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	b08f      	sub	sp, #60	; 0x3c
 8003c6c:	af0a      	add	r7, sp, #40	; 0x28
 8003c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e10f      	b.n	8003e9a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f007 fdb3 	bl	800b800 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 f9ba 	bl	8007032 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	687e      	ldr	r6, [r7, #4]
 8003cc6:	466d      	mov	r5, sp
 8003cc8:	f106 0410 	add.w	r4, r6, #16
 8003ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cdc:	1d33      	adds	r3, r6, #4
 8003cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f003 f891 	bl	8006e08 <USB_CoreInit>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0d0      	b.n	8003e9a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 f9a8 	bl	8007054 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	e04a      	b.n	8003da0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	333d      	adds	r3, #61	; 0x3d
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	333c      	adds	r3, #60	; 0x3c
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	b298      	uxth	r0, r3
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3342      	adds	r3, #66	; 0x42
 8003d46:	4602      	mov	r2, r0
 8003d48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	333f      	adds	r3, #63	; 0x3f
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	3344      	adds	r3, #68	; 0x44
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3348      	adds	r3, #72	; 0x48
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3350      	adds	r3, #80	; 0x50
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d3af      	bcc.n	8003d0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e044      	b.n	8003e3a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	3301      	adds	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3b5      	bcc.n	8003db0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	687e      	ldr	r6, [r7, #4]
 8003e4c:	466d      	mov	r5, sp
 8003e4e:	f106 0410 	add.w	r4, r6, #16
 8003e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e62:	1d33      	adds	r3, r6, #4
 8003e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e66:	6838      	ldr	r0, [r7, #0]
 8003e68:	f003 f91e 	bl	80070a8 <USB_DevInit>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e00d      	b.n	8003e9a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f004 f913 	bl	80080be <USB_DevDisconnect>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ea2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_PCD_Start+0x1c>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e020      	b.n	8003f00 <HAL_PCD_Start+0x5e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d109      	bne.n	8003ee2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d005      	beq.n	8003ee2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 f8d1 	bl	800808e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f003 f88d 	bl	8007010 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b08d      	sub	sp, #52	; 0x34
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 f978 	bl	8008214 <USB_GetMode>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 838e 	bne.w	8004648 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f004 f8dc 	bl	80080ee <USB_ReadInterrupts>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8384 	beq.w	8004646 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 f8d3 	bl	80080ee <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d107      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 0202 	and.w	r2, r2, #2
 8003f60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f004 f8c1 	bl	80080ee <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f76:	d17b      	bne.n	8004070 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 f8c7 	bl	8008114 <USB_ReadDevAllOutEpInterrupt>
 8003f86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f88:	e06f      	b.n	800406a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d064      	beq.n	800405e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 f8ec 	bl	800817c <USB_ReadDevOutEPInterrupt>
 8003fa4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00c      	beq.n	8003fca <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fe0d 	bl	8004be4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 ff0c 	bl	8004df4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2308      	movs	r3, #8
 8003fec:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	461a      	mov	r2, r3
 8004006:	2310      	movs	r3, #16
 8004008:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d108      	bne.n	800402e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004026:	461a      	mov	r2, r3
 8004028:	2101      	movs	r1, #1
 800402a:	f004 f937 	bl	800829c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	461a      	mov	r2, r3
 800403c:	2320      	movs	r3, #32
 800403e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004056:	461a      	mov	r2, r3
 8004058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800405c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	3301      	adds	r3, #1
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d18c      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f004 f83a 	bl	80080ee <USB_ReadInterrupts>
 800407a:	4603      	mov	r3, r0
 800407c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004084:	f040 80c4 	bne.w	8004210 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f004 f85b 	bl	8008148 <USB_ReadDevAllInEpInterrupt>
 8004092:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004098:	e0b6      	b.n	8004208 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80ab 	beq.w	80041fc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 f881 	bl	80081b8 <USB_ReadDevInEPInterrupt>
 80040b6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d05b      	beq.n	800417a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2201      	movs	r2, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	43db      	mvns	r3, r3
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e2:	4013      	ands	r3, r2
 80040e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	461a      	mov	r2, r3
 80040f4:	2301      	movs	r3, #1
 80040f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d11b      	bne.n	8004138 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3348      	adds	r3, #72	; 0x48
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4403      	add	r3, r0
 8004120:	3344      	adds	r3, #68	; 0x44
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4419      	add	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4403      	add	r3, r0
 8004134:	3348      	adds	r3, #72	; 0x48
 8004136:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f007 fbed 	bl	800b91e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d116      	bne.n	800417a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d113      	bne.n	800417a <HAL_PCD_IRQHandler+0x272>
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3350      	adds	r3, #80	; 0x50
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d108      	bne.n	800417a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004172:	461a      	mov	r2, r3
 8004174:	2101      	movs	r1, #1
 8004176:	f004 f891 	bl	800829c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	461a      	mov	r2, r3
 8004192:	2308      	movs	r3, #8
 8004194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	461a      	mov	r2, r3
 80041ae:	2310      	movs	r3, #16
 80041b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c8:	461a      	mov	r2, r3
 80041ca:	2340      	movs	r3, #64	; 0x40
 80041cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	461a      	mov	r2, r3
 80041e6:	2302      	movs	r3, #2
 80041e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fc67 	bl	8004aca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	3301      	adds	r3, #1
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	f47f af45 	bne.w	800409a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 ff6a 	bl	80080ee <USB_ReadInterrupts>
 800421a:	4603      	mov	r3, r0
 800421c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004224:	d122      	bne.n	800426c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004240:	2b01      	cmp	r3, #1
 8004242:	d108      	bne.n	8004256 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800424c:	2100      	movs	r1, #0
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fe88 	bl	8004f64 <HAL_PCDEx_LPM_Callback>
 8004254:	e002      	b.n	800425c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f007 fbd8 	bl	800ba0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800426a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f003 ff3c 	bl	80080ee <USB_ReadInterrupts>
 8004276:	4603      	mov	r3, r0
 8004278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004280:	d112      	bne.n	80042a8 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f007 fb94 	bl	800b9c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695a      	ldr	r2, [r3, #20]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80042a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f003 ff1e 	bl	80080ee <USB_ReadInterrupts>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	f040 80a7 	bne.w	800440e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2110      	movs	r1, #16
 80042da:	4618      	mov	r0, r3
 80042dc:	f003 f856 	bl	800738c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e4:	e036      	b.n	8004354 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004318:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800432c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	440a      	add	r2, r1
 8004344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004348:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800434c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	3301      	adds	r3, #1
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435a:	429a      	cmp	r2, r3
 800435c:	d3c3      	bcc.n	80042e6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004370:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438a:	f043 030b 	orr.w	r3, r3, #11
 800438e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a0:	f043 030b 	orr.w	r3, r3, #11
 80043a4:	6453      	str	r3, [r2, #68]	; 0x44
 80043a6:	e015      	b.n	80043d4 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ce:	f043 030b 	orr.w	r3, r3, #11
 80043d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043f8:	461a      	mov	r2, r3
 80043fa:	f003 ff4f 	bl	800829c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800440c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f003 fe6b 	bl	80080ee <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004422:	d124      	bne.n	800446e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f003 ff01 	bl	8008230 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f003 f80b 	bl	800744e <USB_GetDevSpeed>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681c      	ldr	r4, [r3, #0]
 8004444:	f001 f996 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8004448:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	4620      	mov	r0, r4
 8004454:	f002 fd3a 	bl	8006ecc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f007 fa88 	bl	800b96e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800446c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f003 fe3b 	bl	80080ee <USB_ReadInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d161      	bne.n	8004546 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0210 	bic.w	r2, r2, #16
 8004490:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 020f 	and.w	r2, r3, #15
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	0c5b      	lsrs	r3, r3, #17
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d124      	bne.n	8004508 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d035      	beq.n	8004536 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d8:	b29b      	uxth	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	6a38      	ldr	r0, [r7, #32]
 80044de:	f003 fcb3 	bl	8007e48 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004500:	441a      	add	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	619a      	str	r2, [r3, #24]
 8004506:	e016      	b.n	8004536 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	0c5b      	lsrs	r3, r3, #17
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	2b06      	cmp	r3, #6
 8004512:	d110      	bne.n	8004536 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800451a:	2208      	movs	r2, #8
 800451c:	4619      	mov	r1, r3
 800451e:	6a38      	ldr	r0, [r7, #32]
 8004520:	f003 fc92 	bl	8007e48 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0210 	orr.w	r2, r2, #16
 8004544:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f003 fdcf 	bl	80080ee <USB_ReadInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b08      	cmp	r3, #8
 8004558:	d10a      	bne.n	8004570 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f007 f9f9 	bl	800b952 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f002 0208 	and.w	r2, r2, #8
 800456e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f003 fdba 	bl	80080ee <USB_ReadInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	d10f      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f007 fa5b 	bl	800ba4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f003 fd9f 	bl	80080ee <USB_ReadInterrupts>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ba:	d10f      	bne.n	80045dc <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f007 fa2e 	bl	800ba28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f003 fd84 	bl	80080ee <USB_ReadInterrupts>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d10a      	bne.n	8004608 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f007 fa3c 	bl	800ba70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f003 fd6e 	bl	80080ee <USB_ReadInterrupts>
 8004612:	4603      	mov	r3, r0
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b04      	cmp	r3, #4
 800461a:	d115      	bne.n	8004648 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f007 fa2c 	bl	800ba8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
 8004644:	e000      	b.n	8004648 <HAL_PCD_IRQHandler+0x740>
      return;
 8004646:	bf00      	nop
    }
  }
}
 8004648:	3734      	adds	r7, #52	; 0x34
 800464a:	46bd      	mov	sp, r7
 800464c:	bd90      	pop	{r4, r7, pc}

0800464e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	460b      	mov	r3, r1
 8004658:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_PCD_SetAddress+0x1a>
 8004664:	2302      	movs	r3, #2
 8004666:	e013      	b.n	8004690 <HAL_PCD_SetAddress+0x42>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f003 fcde 	bl	8008042 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	4608      	mov	r0, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	461a      	mov	r2, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	70fb      	strb	r3, [r7, #3]
 80046aa:	460b      	mov	r3, r1
 80046ac:	803b      	strh	r3, [r7, #0]
 80046ae:	4613      	mov	r3, r2
 80046b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da0f      	bge.n	80046de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	3338      	adds	r3, #56	; 0x38
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	705a      	strb	r2, [r3, #1]
 80046dc:	e00f      	b.n	80046fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4413      	add	r3, r2
 80046f4:	3304      	adds	r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800470a:	883a      	ldrh	r2, [r7, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	78ba      	ldrb	r2, [r7, #2]
 8004714:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004728:	78bb      	ldrb	r3, [r7, #2]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d102      	bne.n	8004734 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_PCD_EP_Open+0xaa>
 800473e:	2302      	movs	r3, #2
 8004740:	e00e      	b.n	8004760 <HAL_PCD_EP_Open+0xc8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f002 fea1 	bl	8007498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800475e:	7afb      	ldrb	r3, [r7, #11]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	da0f      	bge.n	800479c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	3338      	adds	r3, #56	; 0x38
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4413      	add	r3, r2
 8004790:	3304      	adds	r3, #4
 8004792:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	705a      	strb	r2, [r3, #1]
 800479a:	e00f      	b.n	80047bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 020f 	and.w	r2, r3, #15
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	3304      	adds	r3, #4
 80047b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_PCD_EP_Close+0x6e>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e00e      	b.n	80047f4 <HAL_PCD_EP_Close+0x8c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f002 fedf 	bl	80075a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	460b      	mov	r3, r1
 800480a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800480c:	7afb      	ldrb	r3, [r7, #11]
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	b2da      	uxtb	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d102      	bne.n	8004858 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004858:	7afb      	ldrb	r3, [r7, #11]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	6979      	ldr	r1, [r7, #20]
 8004870:	f003 f962 	bl	8007b38 <USB_EP0StartXfer>
 8004874:	e008      	b.n	8004888 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	f002 ff14 	bl	80076b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048b4:	681b      	ldr	r3, [r3, #0]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	460b      	mov	r3, r1
 80048d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	3338      	adds	r3, #56	; 0x38
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2201      	movs	r2, #1
 8004900:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	b2da      	uxtb	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d102      	bne.n	800491c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800491c:	7afb      	ldrb	r3, [r7, #11]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	f003 f900 	bl	8007b38 <USB_EP0StartXfer>
 8004938:	e008      	b.n	800494c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	6979      	ldr	r1, [r7, #20]
 8004948:	f002 feb2 	bl	80076b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	d901      	bls.n	8004974 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e050      	b.n	8004a16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	da0f      	bge.n	800499c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3338      	adds	r3, #56	; 0x38
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	3304      	adds	r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	705a      	strb	r2, [r3, #1]
 800499a:	e00d      	b.n	80049b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_PCD_EP_SetStall+0x82>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e01e      	b.n	8004a16 <HAL_PCD_EP_SetStall+0xc0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 fa57 	bl	8007e9a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	b2d9      	uxtb	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a06:	461a      	mov	r2, r3
 8004a08:	f003 fc48 	bl	800829c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d901      	bls.n	8004a3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e042      	b.n	8004ac2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da0f      	bge.n	8004a64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 020f 	and.w	r2, r3, #15
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	3338      	adds	r3, #56	; 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	705a      	strb	r2, [r3, #1]
 8004a62:	e00f      	b.n	8004a84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 030f 	and.w	r3, r3, #15
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_PCD_EP_ClrStall+0x86>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e00e      	b.n	8004ac2 <HAL_PCD_EP_ClrStall+0xa4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 fa5f 	bl	8007f76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b08a      	sub	sp, #40	; 0x28
 8004ace:	af02      	add	r7, sp, #8
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	3338      	adds	r3, #56	; 0x38
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	3304      	adds	r3, #4
 8004af0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d901      	bls.n	8004b02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06c      	b.n	8004bdc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d902      	bls.n	8004b1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3303      	adds	r3, #3
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b26:	e02b      	b.n	8004b80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d902      	bls.n	8004b44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3303      	adds	r3, #3
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68d9      	ldr	r1, [r3, #12]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	4603      	mov	r3, r0
 8004b62:	6978      	ldr	r0, [r7, #20]
 8004b64:	f003 f93b 	bl	8007dde <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	441a      	add	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d809      	bhi.n	8004baa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d203      	bcs.n	8004baa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1be      	bne.n	8004b28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d811      	bhi.n	8004bda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	6939      	ldr	r1, [r7, #16]
 8004bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	333c      	adds	r3, #60	; 0x3c
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	f040 80b3 	bne.w	8004d82 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d028      	beq.n	8004c78 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a70      	ldr	r2, [pc, #448]	; (8004dec <PCD_EP_OutXfrComplete_int+0x208>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d90e      	bls.n	8004c4c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	461a      	mov	r2, r3
 8004c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f006 fe39 	bl	800b8c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	2101      	movs	r1, #1
 8004c60:	f003 fb1c 	bl	800829c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	461a      	mov	r2, r3
 8004c72:	2308      	movs	r3, #8
 8004c74:	6093      	str	r3, [r2, #8]
 8004c76:	e0b3      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2320      	movs	r3, #32
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	e0a4      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 809f 	bne.w	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a51      	ldr	r2, [pc, #324]	; (8004dec <PCD_EP_OutXfrComplete_int+0x208>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d90f      	bls.n	8004cca <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	6093      	str	r3, [r2, #8]
 8004cc8:	e08a      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cdc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	0159      	lsls	r1, r3, #5
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004cf0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4403      	add	r3, r0
 8004d00:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d04:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4403      	add	r3, r0
 8004d28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4419      	add	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4403      	add	r3, r0
 8004d3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d42:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f006 fdcc 	bl	800b8e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d144      	bne.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d138      	bne.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	f003 fa8e 	bl	800829c <USB_EP0_OutStart>
 8004d80:	e02e      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d124      	bne.n	8004dd4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	6093      	str	r3, [r2, #8]
 8004da8:	e01a      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f006 fd8b 	bl	800b8e8 <HAL_PCD_DataOutStageCallback>
 8004dd2:	e005      	b.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f006 fd84 	bl	800b8e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	4f54300a 	.word	0x4f54300a
 8004df0:	4f54310a 	.word	0x4f54310a

08004df4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	333c      	adds	r3, #60	; 0x3c
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d113      	bne.n	8004e52 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <PCD_EP_OutSetupPacket_int+0xb8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d922      	bls.n	8004e78 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01d      	beq.n	8004e78 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	6093      	str	r3, [r2, #8]
 8004e50:	e012      	b.n	8004e78 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10e      	bne.n	8004e78 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	461a      	mov	r2, r3
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f006 fd23 	bl	800b8c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <PCD_EP_OutSetupPacket_int+0xb8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d90c      	bls.n	8004ea0 <PCD_EP_OutSetupPacket_int+0xac>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d108      	bne.n	8004ea0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	f003 f9fe 	bl	800829c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	4f54300a 	.word	0x4f54300a
 8004eb0:	4f54310a 	.word	0x4f54310a

08004eb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ed2:	883b      	ldrh	r3, [r7, #0]
 8004ed4:	0419      	lsls	r1, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee0:	e028      	b.n	8004f34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4413      	add	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e00d      	b.n	8004f12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3340      	adds	r3, #64	; 0x40
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4413      	add	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3ec      	bcc.n	8004ef6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f1c:	883b      	ldrh	r3, [r7, #0]
 8004f1e:	0418      	lsls	r0, r3, #16
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	4302      	orrs	r2, r0
 8004f2c:	3340      	adds	r3, #64	; 0x40
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e22d      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d075      	beq.n	8005086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9a:	4ba3      	ldr	r3, [pc, #652]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa6:	4ba0      	ldr	r3, [pc, #640]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d112      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb2:	4b9d      	ldr	r3, [pc, #628]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	4b99      	ldr	r3, [pc, #612]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05b      	beq.n	8005084 <HAL_RCC_OscConfig+0x108>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d157      	bne.n	8005084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e208      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x74>
 8004fe2:	4b91      	ldr	r3, [pc, #580]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a90      	ldr	r2, [pc, #576]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xb0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0x98>
 8004ffa:	4b8b      	ldr	r3, [pc, #556]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a8a      	ldr	r2, [pc, #552]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b88      	ldr	r3, [pc, #544]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a87      	ldr	r2, [pc, #540]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xb0>
 8005014:	4b84      	ldr	r3, [pc, #528]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a83      	ldr	r2, [pc, #524]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b81      	ldr	r3, [pc, #516]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a80      	ldr	r2, [pc, #512]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fb ff9e 	bl	8000f74 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800503c:	f7fb ff9a 	bl	8000f74 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e1cd      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xc0>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fb ff8a 	bl	8000f74 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005064:	f7fb ff86 	bl	8000f74 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e1b9      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0xe8>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d063      	beq.n	800515a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005092:	4b65      	ldr	r3, [pc, #404]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509e:	4b62      	ldr	r3, [pc, #392]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d11c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050aa:	4b5f      	ldr	r3, [pc, #380]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	4b5c      	ldr	r3, [pc, #368]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_RCC_OscConfig+0x152>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e18d      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b56      	ldr	r3, [pc, #344]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4952      	ldr	r1, [pc, #328]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e2:	e03a      	b.n	800515a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d020      	beq.n	800512e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ec:	4b4f      	ldr	r3, [pc, #316]	; (800522c <HAL_RCC_OscConfig+0x2b0>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fb ff3f 	bl	8000f74 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050fa:	f7fb ff3b 	bl	8000f74 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e16e      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	4b46      	ldr	r3, [pc, #280]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b43      	ldr	r3, [pc, #268]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4940      	ldr	r1, [pc, #256]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b3f      	ldr	r3, [pc, #252]	; (800522c <HAL_RCC_OscConfig+0x2b0>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fb ff1e 	bl	8000f74 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513c:	f7fb ff1a 	bl	8000f74 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e14d      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	4b36      	ldr	r3, [pc, #216]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d030      	beq.n	80051c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516e:	4b30      	ldr	r3, [pc, #192]	; (8005230 <HAL_RCC_OscConfig+0x2b4>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fb fefe 	bl	8000f74 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800517c:	f7fb fefa 	bl	8000f74 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e12d      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x200>
 800519a:	e015      	b.n	80051c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800519c:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_RCC_OscConfig+0x2b4>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a2:	f7fb fee7 	bl	8000f74 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051aa:	f7fb fee3 	bl	8000f74 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e116      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051bc:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80051be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a0 	beq.w	8005316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a0e      	ldr	r2, [pc, #56]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCC_OscConfig+0x2b8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d121      	bne.n	8005256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_RCC_OscConfig+0x2b8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a07      	ldr	r2, [pc, #28]	; (8005234 <HAL_RCC_OscConfig+0x2b8>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521e:	f7fb fea9 	bl	8000f74 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005224:	e011      	b.n	800524a <HAL_RCC_OscConfig+0x2ce>
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	42470000 	.word	0x42470000
 8005230:	42470e80 	.word	0x42470e80
 8005234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005238:	f7fb fe9c 	bl	8000f74 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e0cf      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <HAL_RCC_OscConfig+0x478>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d106      	bne.n	800526c <HAL_RCC_OscConfig+0x2f0>
 800525e:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a65      	ldr	r2, [pc, #404]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
 800526a:	e01c      	b.n	80052a6 <HAL_RCC_OscConfig+0x32a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d10c      	bne.n	800528e <HAL_RCC_OscConfig+0x312>
 8005274:	4b60      	ldr	r3, [pc, #384]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	4a5f      	ldr	r2, [pc, #380]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 800527a:	f043 0304 	orr.w	r3, r3, #4
 800527e:	6713      	str	r3, [r2, #112]	; 0x70
 8005280:	4b5d      	ldr	r3, [pc, #372]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	4a5c      	ldr	r2, [pc, #368]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6713      	str	r3, [r2, #112]	; 0x70
 800528c:	e00b      	b.n	80052a6 <HAL_RCC_OscConfig+0x32a>
 800528e:	4b5a      	ldr	r3, [pc, #360]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a59      	ldr	r2, [pc, #356]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	4a56      	ldr	r2, [pc, #344]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d015      	beq.n	80052da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fb fe61 	bl	8000f74 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b4:	e00a      	b.n	80052cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fb fe5d 	bl	8000f74 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e08e      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	4b4a      	ldr	r3, [pc, #296]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ee      	beq.n	80052b6 <HAL_RCC_OscConfig+0x33a>
 80052d8:	e014      	b.n	8005304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052da:	f7fb fe4b 	bl	8000f74 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fb fe47 	bl	8000f74 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e078      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f8:	4b3f      	ldr	r3, [pc, #252]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ee      	bne.n	80052e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d105      	bne.n	8005316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530a:	4b3b      	ldr	r3, [pc, #236]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a3a      	ldr	r2, [pc, #232]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d064      	beq.n	80053e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800531e:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b08      	cmp	r3, #8
 8005328:	d05c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d141      	bne.n	80053b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005332:	4b32      	ldr	r3, [pc, #200]	; (80053fc <HAL_RCC_OscConfig+0x480>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fb fe1c 	bl	8000f74 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005340:	f7fb fe18 	bl	8000f74 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e04b      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	3b01      	subs	r3, #1
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	061b      	lsls	r3, r3, #24
 8005382:	491d      	ldr	r1, [pc, #116]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005388:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <HAL_RCC_OscConfig+0x480>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538e:	f7fb fdf1 	bl	8000f74 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005396:	f7fb fded 	bl	8000f74 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e020      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x41a>
 80053b4:	e018      	b.n	80053e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b6:	4b11      	ldr	r3, [pc, #68]	; (80053fc <HAL_RCC_OscConfig+0x480>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7fb fdda 	bl	8000f74 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fb fdd6 	bl	8000f74 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e009      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <HAL_RCC_OscConfig+0x47c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x448>
 80053e2:	e001      	b.n	80053e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40007000 	.word	0x40007000
 80053f8:	40023800 	.word	0x40023800
 80053fc:	42470060 	.word	0x42470060

08005400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0ca      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <HAL_RCC_ClockConfig+0x1b4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d90c      	bls.n	800543c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b64      	ldr	r3, [pc, #400]	; (80055b4 <HAL_RCC_ClockConfig+0x1b4>)
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <HAL_RCC_ClockConfig+0x1b4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0b6      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d020      	beq.n	800548a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005454:	4b58      	ldr	r3, [pc, #352]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4a57      	ldr	r2, [pc, #348]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 800545a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800545e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800546c:	4b52      	ldr	r3, [pc, #328]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a51      	ldr	r2, [pc, #324]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005478:	4b4f      	ldr	r3, [pc, #316]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	494c      	ldr	r1, [pc, #304]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d044      	beq.n	8005520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d107      	bne.n	80054ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d119      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e07d      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d003      	beq.n	80054be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d107      	bne.n	80054ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054be:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e06d      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ce:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e065      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054de:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f023 0203 	bic.w	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4933      	ldr	r1, [pc, #204]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f0:	f7fb fd40 	bl	8000f74 <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	e00a      	b.n	800550e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f8:	f7fb fd3c 	bl	8000f74 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	f241 3288 	movw	r2, #5000	; 0x1388
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e04d      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 020c 	and.w	r2, r3, #12
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	429a      	cmp	r2, r3
 800551e:	d1eb      	bne.n	80054f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005520:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <HAL_RCC_ClockConfig+0x1b4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d20c      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <HAL_RCC_ClockConfig+0x1b4>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <HAL_RCC_ClockConfig+0x1b4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e030      	b.n	80055aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005554:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4915      	ldr	r1, [pc, #84]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005562:	4313      	orrs	r3, r2
 8005564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	490d      	ldr	r1, [pc, #52]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005586:	f000 f81d 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 800558a:	4601      	mov	r1, r0
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	5cd3      	ldrb	r3, [r2, r3]
 800559a:	fa21 f303 	lsr.w	r3, r1, r3
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80055a2:	2000      	movs	r0, #0
 80055a4:	f7fb fca2 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40023c00 	.word	0x40023c00
 80055b8:	40023800 	.word	0x40023800
 80055bc:	0800f3a4 	.word	0x0800f3a4
 80055c0:	20000118 	.word	0x20000118

080055c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	2300      	movs	r3, #0
 80055d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055da:	4b63      	ldr	r3, [pc, #396]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d007      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0x32>
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d008      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x38>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 80b4 	bne.w	8005758 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f0:	4b5e      	ldr	r3, [pc, #376]	; (800576c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80055f2:	60bb      	str	r3, [r7, #8]
       break;
 80055f4:	e0b3      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f6:	4b5e      	ldr	r3, [pc, #376]	; (8005770 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80055f8:	60bb      	str	r3, [r7, #8]
      break;
 80055fa:	e0b0      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055fc:	4b5a      	ldr	r3, [pc, #360]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005606:	4b58      	ldr	r3, [pc, #352]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d04a      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005612:	4b55      	ldr	r3, [pc, #340]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	ea03 0501 	and.w	r5, r3, r1
 8005628:	ea04 0602 	and.w	r6, r4, r2
 800562c:	4629      	mov	r1, r5
 800562e:	4632      	mov	r2, r6
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	0154      	lsls	r4, r2, #5
 800563a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800563e:	014b      	lsls	r3, r1, #5
 8005640:	4619      	mov	r1, r3
 8005642:	4622      	mov	r2, r4
 8005644:	1b49      	subs	r1, r1, r5
 8005646:	eb62 0206 	sbc.w	r2, r2, r6
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	f04f 0400 	mov.w	r4, #0
 8005652:	0194      	lsls	r4, r2, #6
 8005654:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005658:	018b      	lsls	r3, r1, #6
 800565a:	1a5b      	subs	r3, r3, r1
 800565c:	eb64 0402 	sbc.w	r4, r4, r2
 8005660:	f04f 0100 	mov.w	r1, #0
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	00e2      	lsls	r2, r4, #3
 800566a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800566e:	00d9      	lsls	r1, r3, #3
 8005670:	460b      	mov	r3, r1
 8005672:	4614      	mov	r4, r2
 8005674:	195b      	adds	r3, r3, r5
 8005676:	eb44 0406 	adc.w	r4, r4, r6
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	0262      	lsls	r2, r4, #9
 8005684:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005688:	0259      	lsls	r1, r3, #9
 800568a:	460b      	mov	r3, r1
 800568c:	4614      	mov	r4, r2
 800568e:	4618      	mov	r0, r3
 8005690:	4621      	mov	r1, r4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	461a      	mov	r2, r3
 800569a:	4623      	mov	r3, r4
 800569c:	f7fb fa84 	bl	8000ba8 <__aeabi_uldivmod>
 80056a0:	4603      	mov	r3, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e049      	b.n	800573c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a8:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	099b      	lsrs	r3, r3, #6
 80056ae:	f04f 0400 	mov.w	r4, #0
 80056b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	ea03 0501 	and.w	r5, r3, r1
 80056be:	ea04 0602 	and.w	r6, r4, r2
 80056c2:	4629      	mov	r1, r5
 80056c4:	4632      	mov	r2, r6
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	0154      	lsls	r4, r2, #5
 80056d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80056d4:	014b      	lsls	r3, r1, #5
 80056d6:	4619      	mov	r1, r3
 80056d8:	4622      	mov	r2, r4
 80056da:	1b49      	subs	r1, r1, r5
 80056dc:	eb62 0206 	sbc.w	r2, r2, r6
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	f04f 0400 	mov.w	r4, #0
 80056e8:	0194      	lsls	r4, r2, #6
 80056ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056ee:	018b      	lsls	r3, r1, #6
 80056f0:	1a5b      	subs	r3, r3, r1
 80056f2:	eb64 0402 	sbc.w	r4, r4, r2
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	00e2      	lsls	r2, r4, #3
 8005700:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005704:	00d9      	lsls	r1, r3, #3
 8005706:	460b      	mov	r3, r1
 8005708:	4614      	mov	r4, r2
 800570a:	195b      	adds	r3, r3, r5
 800570c:	eb44 0406 	adc.w	r4, r4, r6
 8005710:	f04f 0100 	mov.w	r1, #0
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	02a2      	lsls	r2, r4, #10
 800571a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800571e:	0299      	lsls	r1, r3, #10
 8005720:	460b      	mov	r3, r1
 8005722:	4614      	mov	r4, r2
 8005724:	4618      	mov	r0, r3
 8005726:	4621      	mov	r1, r4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f04f 0400 	mov.w	r4, #0
 800572e:	461a      	mov	r2, r3
 8005730:	4623      	mov	r3, r4
 8005732:	f7fb fa39 	bl	8000ba8 <__aeabi_uldivmod>
 8005736:	4603      	mov	r3, r0
 8005738:	460c      	mov	r4, r1
 800573a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	0c1b      	lsrs	r3, r3, #16
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	3301      	adds	r3, #1
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	60bb      	str	r3, [r7, #8]
      break;
 8005756:	e002      	b.n	800575e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800575a:	60bb      	str	r3, [r7, #8]
      break;
 800575c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575e:	68bb      	ldr	r3, [r7, #8]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	00f42400 	.word	0x00f42400
 8005770:	007a1200 	.word	0x007a1200

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <HAL_RCC_GetHCLKFreq+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20000118 	.word	0x20000118

0800578c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005790:	f7ff fff0 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005794:	4601      	mov	r1, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4a03      	ldr	r2, [pc, #12]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a2:	5cd3      	ldrb	r3, [r2, r3]
 80057a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	0800f3b4 	.word	0x0800f3b4

080057b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057b8:	f7ff ffdc 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 80057bc:	4601      	mov	r1, r0
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0b5b      	lsrs	r3, r3, #13
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4a03      	ldr	r2, [pc, #12]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ca:	5cd3      	ldrb	r3, [r2, r3]
 80057cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	0800f3b4 	.word	0x0800f3b4

080057dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d105      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005800:	2b00      	cmp	r3, #0
 8005802:	d035      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005804:	4b62      	ldr	r3, [pc, #392]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800580a:	f7fb fbb3 	bl	8000f74 <HAL_GetTick>
 800580e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005812:	f7fb fbaf 	bl	8000f74 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0b0      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005824:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	019a      	lsls	r2, r3, #6
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	071b      	lsls	r3, r3, #28
 800583c:	4955      	ldr	r1, [pc, #340]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005844:	4b52      	ldr	r3, [pc, #328]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800584a:	f7fb fb93 	bl	8000f74 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005852:	f7fb fb8f 	bl	8000f74 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e090      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005864:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8083 	beq.w	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	4b44      	ldr	r3, [pc, #272]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a43      	ldr	r2, [pc, #268]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b41      	ldr	r3, [pc, #260]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800589a:	4b3f      	ldr	r3, [pc, #252]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a3e      	ldr	r2, [pc, #248]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058a6:	f7fb fb65 	bl	8000f74 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058ac:	e008      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058ae:	f7fb fb61 	bl	8000f74 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e062      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058cc:	4b31      	ldr	r3, [pc, #196]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02f      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d028      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058f4:	4b29      	ldr	r3, [pc, #164]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005900:	4a24      	ldr	r2, [pc, #144]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d114      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005912:	f7fb fb2f 	bl	8000f74 <HAL_GetTick>
 8005916:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005918:	e00a      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591a:	f7fb fb2b 	bl	8000f74 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	f241 3288 	movw	r2, #5000	; 0x1388
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e02a      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005930:	4b18      	ldr	r3, [pc, #96]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0ee      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005948:	d10d      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	490d      	ldr	r1, [pc, #52]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]
 8005964:	e005      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800596c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005970:	6093      	str	r3, [r2, #8]
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597e:	4905      	ldr	r1, [pc, #20]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005980:	4313      	orrs	r3, r2
 8005982:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	42470068 	.word	0x42470068
 8005994:	40023800 	.word	0x40023800
 8005998:	40007000 	.word	0x40007000
 800599c:	42470e40 	.word	0x42470e40

080059a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d13d      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059be:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059c6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d004      	beq.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d12f      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059d4:	617b      	str	r3, [r7, #20]
          break;
 80059d6:	e02f      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e4:	d108      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059e6:	4b18      	ldr	r3, [pc, #96]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ee:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	e007      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a00:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a08:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0e:	099b      	lsrs	r3, r3, #6
 8005a10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a22:	0f1b      	lsrs	r3, r3, #28
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2e:	617b      	str	r3, [r7, #20]
          break;
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
          break;
 8005a36:	bf00      	nop
        }
      }
      break;
 8005a38:	bf00      	nop
    }
  }
  return frequency;
 8005a3a:	697b      	ldr	r3, [r7, #20]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	00bb8000 	.word	0x00bb8000
 8005a50:	007a1200 	.word	0x007a1200
 8005a54:	00f42400 	.word	0x00f42400

08005a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e056      	b.n	8005b18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f005 fb6d 	bl	800b164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	ea42 0103 	orr.w	r1, r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	f003 0104 	and.w	r1, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69da      	ldr	r2, [r3, #28]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e01d      	b.n	8005b6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f005 fb54 	bl	800b1f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f000 fa1e 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d007      	beq.n	8005ba8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e01d      	b.n	8005c0c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f815 	bl	8005c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f000 f9cf 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2201      	movs	r2, #1
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fc9a 	bl	8006574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_TIM_PWM_Start+0x74>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_PWM_Start+0x2c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <HAL_TIM_PWM_Start+0x78>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_PWM_Start+0x30>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_TIM_PWM_Start+0x32>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b06      	cmp	r3, #6
 8005c7e:	d007      	beq.n	8005c90 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40010400 	.word	0x40010400

08005ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e0b4      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	f200 809f 	bhi.w	8005e14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005e15 	.word	0x08005e15
 8005ce4:	08005e15 	.word	0x08005e15
 8005ce8:	08005e15 	.word	0x08005e15
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005e15 	.word	0x08005e15
 8005cf4:	08005e15 	.word	0x08005e15
 8005cf8:	08005e15 	.word	0x08005e15
 8005cfc:	08005d93 	.word	0x08005d93
 8005d00:	08005e15 	.word	0x08005e15
 8005d04:	08005e15 	.word	0x08005e15
 8005d08:	08005e15 	.word	0x08005e15
 8005d0c:	08005dd3 	.word	0x08005dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f9e2 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0208 	orr.w	r2, r2, #8
 8005d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0204 	bic.w	r2, r2, #4
 8005d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	619a      	str	r2, [r3, #24]
      break;
 8005d4e:	e062      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fa32 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
      break;
 8005d90:	e041      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fa87 	bl	80062ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0204 	bic.w	r2, r2, #4
 8005dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69d9      	ldr	r1, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	61da      	str	r2, [r3, #28]
      break;
 8005dd0:	e021      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fadb 	bl	8006394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	61da      	str	r2, [r3, #28]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_ConfigClockSource+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0a6      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x166>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d067      	beq.n	8005f50 <HAL_TIM_ConfigClockSource+0x120>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d80b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x6c>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d073      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d802      	bhi.n	8005e92 <HAL_TIM_ConfigClockSource+0x62>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d06f      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e90:	e078      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d06c      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d06a      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e9a:	e073      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d00d      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x8c>
 8005ea0:	2b70      	cmp	r3, #112	; 0x70
 8005ea2:	d804      	bhi.n	8005eae <HAL_TIM_ConfigClockSource+0x7e>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d033      	beq.n	8005f10 <HAL_TIM_ConfigClockSource+0xe0>
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d041      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005eac:	e06a      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d066      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x152>
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d017      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eba:	e063      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6899      	ldr	r1, [r3, #8]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f000 fb32 	bl	8006534 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ede:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
      break;
 8005ee8:	e04c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6899      	ldr	r1, [r3, #8]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f000 fb1b 	bl	8006534 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0c:	609a      	str	r2, [r3, #8]
      break;
 8005f0e:	e039      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f000 fa8f 	bl	8006440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2150      	movs	r1, #80	; 0x50
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fae8 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f2e:	e029      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f000 faae 	bl	800649e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2160      	movs	r1, #96	; 0x60
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fad8 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f4e:	e019      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6859      	ldr	r1, [r3, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f000 fa6f 	bl	8006440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fac8 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f6e:	e009      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f000 fabf 	bl	80064fe <TIM_ITRx_SetConfig>
      break;
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a40      	ldr	r2, [pc, #256]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d00f      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <TIM_Base_SetConfig+0x118>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00b      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <TIM_Base_SetConfig+0x11c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3b      	ldr	r2, [pc, #236]	; (80060c0 <TIM_Base_SetConfig+0x120>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3a      	ldr	r2, [pc, #232]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2f      	ldr	r2, [pc, #188]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d027      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	; (80060b8 <TIM_Base_SetConfig+0x118>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d023      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <TIM_Base_SetConfig+0x11c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <TIM_Base_SetConfig+0x120>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d017      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a28      	ldr	r2, [pc, #160]	; (80060c8 <TIM_Base_SetConfig+0x128>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a27      	ldr	r2, [pc, #156]	; (80060cc <TIM_Base_SetConfig+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <TIM_Base_SetConfig+0x130>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a25      	ldr	r2, [pc, #148]	; (80060d4 <TIM_Base_SetConfig+0x134>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a24      	ldr	r2, [pc, #144]	; (80060d8 <TIM_Base_SetConfig+0x138>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <TIM_Base_SetConfig+0x13c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d108      	bne.n	8006064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <TIM_Base_SetConfig+0x114>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <TIM_Base_SetConfig+0x124>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40001c00 	.word	0x40001c00
 80060dc:	40002000 	.word	0x40002000

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a20      	ldr	r2, [pc, #128]	; (80061b8 <TIM_OC1_SetConfig+0xd8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_OC1_SetConfig+0x64>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0308 	bic.w	r3, r3, #8
 800614a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	; (80061b8 <TIM_OC1_SetConfig+0xd8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC1_SetConfig+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <TIM_OC1_SetConfig+0xdc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <TIM_OC2_SetConfig+0xe4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10d      	bne.n	8006244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <TIM_OC2_SetConfig+0xe4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x94>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a16      	ldr	r2, [pc, #88]	; (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d113      	bne.n	800627c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800625a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a21      	ldr	r2, [pc, #132]	; (800638c <TIM_OC3_SetConfig+0xe0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_OC3_SetConfig+0x66>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a20      	ldr	r2, [pc, #128]	; (8006390 <TIM_OC3_SetConfig+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10d      	bne.n	800632e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800632c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	; (800638c <TIM_OC3_SetConfig+0xe0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x92>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	; (8006390 <TIM_OC3_SetConfig+0xe4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d113      	bne.n	8006366 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	621a      	str	r2, [r3, #32]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400

08006394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a12      	ldr	r2, [pc, #72]	; (8006438 <TIM_OC4_SetConfig+0xa4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC4_SetConfig+0x68>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a11      	ldr	r2, [pc, #68]	; (800643c <TIM_OC4_SetConfig+0xa8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d109      	bne.n	8006410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800646a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 030a 	bic.w	r3, r3, #10
 800647c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649e:	b480      	push	{r7}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 0210 	bic.w	r2, r3, #16
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	031b      	lsls	r3, r3, #12
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	f043 0307 	orr.w	r3, r3, #7
 8006520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800654e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	431a      	orrs	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2201      	movs	r2, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	43db      	mvns	r3, r3
 8006596:	401a      	ands	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e032      	b.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	4313      	orrs	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e03f      	b.n	80066da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f004 fe84 	bl	800b37c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	; 0x24
 8006678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9b1 	bl	80069f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b088      	sub	sp, #32
 80066e6:	af02      	add	r7, sp, #8
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	f040 8083 	bne.w	800680a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_UART_Transmit+0x2e>
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e07b      	b.n	800680c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Transmit+0x40>
 800671e:	2302      	movs	r3, #2
 8006720:	e074      	b.n	800680c <HAL_UART_Transmit+0x12a>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2221      	movs	r2, #33	; 0x21
 8006734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006738:	f7fa fc1c 	bl	8000f74 <HAL_GetTick>
 800673c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800674a:	e042      	b.n	80067d2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006762:	d122      	bne.n	80067aa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2200      	movs	r2, #0
 800676c:	2180      	movs	r1, #128	; 0x80
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f8f6 	bl	8006960 <UART_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e046      	b.n	800680c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006790:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	3302      	adds	r3, #2
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	e017      	b.n	80067d2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	e013      	b.n	80067d2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f8d3 	bl	8006960 <UART_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e023      	b.n	800680c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	60ba      	str	r2, [r7, #8]
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1b7      	bne.n	800674c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2200      	movs	r2, #0
 80067e4:	2140      	movs	r1, #64	; 0x40
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8ba 	bl	8006960 <UART_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e00a      	b.n	800680c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b20      	cmp	r3, #32
 8006832:	f040 8090 	bne.w	8006956 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_UART_Receive+0x2e>
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e088      	b.n	8006958 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_UART_Receive+0x40>
 8006850:	2302      	movs	r3, #2
 8006852:	e081      	b.n	8006958 <HAL_UART_Receive+0x144>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2222      	movs	r2, #34	; 0x22
 8006866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800686a:	f7fa fb83 	bl	8000f74 <HAL_GetTick>
 800686e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800687c:	e05c      	b.n	8006938 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006894:	d12b      	bne.n	80068ee <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2200      	movs	r2, #0
 800689e:	2120      	movs	r1, #32
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f85d 	bl	8006960 <UART_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e053      	b.n	8006958 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10c      	bne.n	80068d6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3302      	adds	r3, #2
 80068d2:	60bb      	str	r3, [r7, #8]
 80068d4:	e030      	b.n	8006938 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	e024      	b.n	8006938 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	2120      	movs	r1, #32
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f831 	bl	8006960 <UART_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e027      	b.n	8006958 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	60ba      	str	r2, [r7, #8]
 800691c:	b2ca      	uxtb	r2, r1
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e00a      	b.n	8006938 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d19d      	bne.n	800687e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006970:	e02c      	b.n	80069cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d028      	beq.n	80069cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d007      	beq.n	8006990 <UART_WaitOnFlagUntilTimeout+0x30>
 8006980:	f7fa faf8 	bl	8000f74 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	429a      	cmp	r2, r3
 800698e:	d21d      	bcs.n	80069cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800699e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695a      	ldr	r2, [r3, #20]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e00f      	b.n	80069ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4013      	ands	r3, r2
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	bf0c      	ite	eq
 80069dc:	2301      	moveq	r3, #1
 80069de:	2300      	movne	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d0c3      	beq.n	8006972 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f4:	b5b0      	push	{r4, r5, r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a34:	f023 030c 	bic.w	r3, r3, #12
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	f040 80e4 	bne.w	8006c2c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4aab      	ldr	r2, [pc, #684]	; (8006d18 <UART_SetConfig+0x324>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <UART_SetConfig+0x84>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4aaa      	ldr	r2, [pc, #680]	; (8006d1c <UART_SetConfig+0x328>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d16c      	bne.n	8006b52 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006a78:	f7fe fe9c 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009a      	lsls	r2, r3, #2
 8006a86:	441a      	add	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a92:	4aa3      	ldr	r2, [pc, #652]	; (8006d20 <UART_SetConfig+0x32c>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	011c      	lsls	r4, r3, #4
 8006a9c:	f7fe fe8a 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009a      	lsls	r2, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ab6:	f7fe fe7d 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009a      	lsls	r2, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad0:	4a93      	ldr	r2, [pc, #588]	; (8006d20 <UART_SetConfig+0x32c>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	2264      	movs	r2, #100	; 0x64
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	1aeb      	subs	r3, r5, r3
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	3332      	adds	r3, #50	; 0x32
 8006ae4:	4a8e      	ldr	r2, [pc, #568]	; (8006d20 <UART_SetConfig+0x32c>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006af2:	441c      	add	r4, r3
 8006af4:	f7fe fe5e 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009a      	lsls	r2, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006b0e:	f7fe fe51 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006b12:	4602      	mov	r2, r0
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009a      	lsls	r2, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b28:	4a7d      	ldr	r2, [pc, #500]	; (8006d20 <UART_SetConfig+0x32c>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	2264      	movs	r2, #100	; 0x64
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	1aeb      	subs	r3, r5, r3
 8006b38:	00db      	lsls	r3, r3, #3
 8006b3a:	3332      	adds	r3, #50	; 0x32
 8006b3c:	4a78      	ldr	r2, [pc, #480]	; (8006d20 <UART_SetConfig+0x32c>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	f003 0207 	and.w	r2, r3, #7
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4422      	add	r2, r4
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	e154      	b.n	8006dfc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006b52:	f7fe fe1b 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009a      	lsls	r2, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	4a6c      	ldr	r2, [pc, #432]	; (8006d20 <UART_SetConfig+0x32c>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	011c      	lsls	r4, r3, #4
 8006b76:	f7fe fe09 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009a      	lsls	r2, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006b90:	f7fe fdfc 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009a      	lsls	r2, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	4a5d      	ldr	r2, [pc, #372]	; (8006d20 <UART_SetConfig+0x32c>)
 8006bac:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2264      	movs	r2, #100	; 0x64
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	1aeb      	subs	r3, r5, r3
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	4a58      	ldr	r2, [pc, #352]	; (8006d20 <UART_SetConfig+0x32c>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bcc:	441c      	add	r4, r3
 8006bce:	f7fe fddd 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009a      	lsls	r2, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006be8:	f7fe fdd0 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006bec:	4602      	mov	r2, r0
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009a      	lsls	r2, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	4a47      	ldr	r2, [pc, #284]	; (8006d20 <UART_SetConfig+0x32c>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	2264      	movs	r2, #100	; 0x64
 8006c0c:	fb02 f303 	mul.w	r3, r2, r3
 8006c10:	1aeb      	subs	r3, r5, r3
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	3332      	adds	r3, #50	; 0x32
 8006c16:	4a42      	ldr	r2, [pc, #264]	; (8006d20 <UART_SetConfig+0x32c>)
 8006c18:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	f003 0207 	and.w	r2, r3, #7
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4422      	add	r2, r4
 8006c28:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006c2a:	e0e7      	b.n	8006dfc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a39      	ldr	r2, [pc, #228]	; (8006d18 <UART_SetConfig+0x324>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <UART_SetConfig+0x24c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a38      	ldr	r2, [pc, #224]	; (8006d1c <UART_SetConfig+0x328>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d171      	bne.n	8006d24 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c40:	f7fe fdb8 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009a      	lsls	r2, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5a:	4a31      	ldr	r2, [pc, #196]	; (8006d20 <UART_SetConfig+0x32c>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	011c      	lsls	r4, r3, #4
 8006c64:	f7fe fda6 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009a      	lsls	r2, r3, #2
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c7e:	f7fe fd99 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006c82:	4602      	mov	r2, r0
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009a      	lsls	r2, r3, #2
 8006c8c:	441a      	add	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	4a21      	ldr	r2, [pc, #132]	; (8006d20 <UART_SetConfig+0x32c>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	2264      	movs	r2, #100	; 0x64
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	1aeb      	subs	r3, r5, r3
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	3332      	adds	r3, #50	; 0x32
 8006cac:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <UART_SetConfig+0x32c>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cb8:	441c      	add	r4, r3
 8006cba:	f7fe fd7b 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009a      	lsls	r2, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cd4:	f7fe fd6e 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009a      	lsls	r2, r3, #2
 8006ce2:	441a      	add	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	4a0c      	ldr	r2, [pc, #48]	; (8006d20 <UART_SetConfig+0x32c>)
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	2264      	movs	r2, #100	; 0x64
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	1aeb      	subs	r3, r5, r3
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	3332      	adds	r3, #50	; 0x32
 8006d02:	4a07      	ldr	r2, [pc, #28]	; (8006d20 <UART_SetConfig+0x32c>)
 8006d04:	fba2 2303 	umull	r2, r3, r2, r3
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	f003 020f 	and.w	r2, r3, #15
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4422      	add	r2, r4
 8006d14:	609a      	str	r2, [r3, #8]
 8006d16:	e071      	b.n	8006dfc <UART_SetConfig+0x408>
 8006d18:	40011000 	.word	0x40011000
 8006d1c:	40011400 	.word	0x40011400
 8006d20:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d24:	f7fe fd32 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009a      	lsls	r2, r3, #2
 8006d32:	441a      	add	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	4a31      	ldr	r2, [pc, #196]	; (8006e04 <UART_SetConfig+0x410>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	011c      	lsls	r4, r3, #4
 8006d48:	f7fe fd20 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009a      	lsls	r2, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d62:	f7fe fd13 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006d66:	4602      	mov	r2, r0
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009a      	lsls	r2, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	4a21      	ldr	r2, [pc, #132]	; (8006e04 <UART_SetConfig+0x410>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	2264      	movs	r2, #100	; 0x64
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	1aeb      	subs	r3, r5, r3
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3332      	adds	r3, #50	; 0x32
 8006d90:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <UART_SetConfig+0x410>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d9c:	441c      	add	r4, r3
 8006d9e:	f7fe fcf5 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009a      	lsls	r2, r3, #2
 8006dac:	441a      	add	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006db8:	f7fe fce8 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009a      	lsls	r2, r3, #2
 8006dc6:	441a      	add	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <UART_SetConfig+0x410>)
 8006dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	2264      	movs	r2, #100	; 0x64
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
 8006de0:	1aeb      	subs	r3, r5, r3
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	3332      	adds	r3, #50	; 0x32
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <UART_SetConfig+0x410>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4422      	add	r2, r4
 8006df8:	609a      	str	r2, [r3, #8]
}
 8006dfa:	e7ff      	b.n	8006dfc <UART_SetConfig+0x408>
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bdb0      	pop	{r4, r5, r7, pc}
 8006e04:	51eb851f 	.word	0x51eb851f

08006e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e08:	b084      	sub	sp, #16
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	f107 001c 	add.w	r0, r7, #28
 8006e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d122      	bne.n	8006e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fa7c 	bl	8008358 <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	e01a      	b.n	8006e9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fa70 	bl	8008358 <USB_CoreReset>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e8e:	e005      	b.n	8006e9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d10b      	bne.n	8006eba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f043 0206 	orr.w	r2, r3, #6
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f043 0220 	orr.w	r2, r3, #32
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec6:	b004      	add	sp, #16
 8006ec8:	4770      	bx	lr
	...

08006ecc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d165      	bne.n	8006fac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4a41      	ldr	r2, [pc, #260]	; (8006fe8 <USB_SetTurnaroundTime+0x11c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d906      	bls.n	8006ef6 <USB_SetTurnaroundTime+0x2a>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4a40      	ldr	r2, [pc, #256]	; (8006fec <USB_SetTurnaroundTime+0x120>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d802      	bhi.n	8006ef6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e062      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4a3c      	ldr	r2, [pc, #240]	; (8006fec <USB_SetTurnaroundTime+0x120>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d906      	bls.n	8006f0c <USB_SetTurnaroundTime+0x40>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4a3b      	ldr	r2, [pc, #236]	; (8006ff0 <USB_SetTurnaroundTime+0x124>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d802      	bhi.n	8006f0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f06:	230e      	movs	r3, #14
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e057      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4a38      	ldr	r2, [pc, #224]	; (8006ff0 <USB_SetTurnaroundTime+0x124>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d906      	bls.n	8006f22 <USB_SetTurnaroundTime+0x56>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4a37      	ldr	r2, [pc, #220]	; (8006ff4 <USB_SetTurnaroundTime+0x128>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d802      	bhi.n	8006f22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f1c:	230d      	movs	r3, #13
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	e04c      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4a33      	ldr	r2, [pc, #204]	; (8006ff4 <USB_SetTurnaroundTime+0x128>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d906      	bls.n	8006f38 <USB_SetTurnaroundTime+0x6c>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4a32      	ldr	r2, [pc, #200]	; (8006ff8 <USB_SetTurnaroundTime+0x12c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d802      	bhi.n	8006f38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f32:	230c      	movs	r3, #12
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e041      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4a2f      	ldr	r2, [pc, #188]	; (8006ff8 <USB_SetTurnaroundTime+0x12c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d906      	bls.n	8006f4e <USB_SetTurnaroundTime+0x82>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4a2e      	ldr	r2, [pc, #184]	; (8006ffc <USB_SetTurnaroundTime+0x130>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d802      	bhi.n	8006f4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f48:	230b      	movs	r3, #11
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	e036      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <USB_SetTurnaroundTime+0x130>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d906      	bls.n	8006f64 <USB_SetTurnaroundTime+0x98>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4a29      	ldr	r2, [pc, #164]	; (8007000 <USB_SetTurnaroundTime+0x134>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d802      	bhi.n	8006f64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f5e:	230a      	movs	r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	e02b      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4a26      	ldr	r2, [pc, #152]	; (8007000 <USB_SetTurnaroundTime+0x134>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d906      	bls.n	8006f7a <USB_SetTurnaroundTime+0xae>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4a25      	ldr	r2, [pc, #148]	; (8007004 <USB_SetTurnaroundTime+0x138>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d802      	bhi.n	8006f7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f74:	2309      	movs	r3, #9
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e020      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <USB_SetTurnaroundTime+0x138>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d906      	bls.n	8006f90 <USB_SetTurnaroundTime+0xc4>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4a20      	ldr	r2, [pc, #128]	; (8007008 <USB_SetTurnaroundTime+0x13c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d802      	bhi.n	8006f90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e015      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <USB_SetTurnaroundTime+0x13c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d906      	bls.n	8006fa6 <USB_SetTurnaroundTime+0xda>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	; (800700c <USB_SetTurnaroundTime+0x140>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d802      	bhi.n	8006fa6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fa0:	2307      	movs	r3, #7
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e00a      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006fa6:	2306      	movs	r3, #6
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e007      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fb2:	2309      	movs	r3, #9
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e001      	b.n	8006fbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fb8:	2309      	movs	r3, #9
 8006fba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	00d8acbf 	.word	0x00d8acbf
 8006fec:	00e4e1bf 	.word	0x00e4e1bf
 8006ff0:	00f423ff 	.word	0x00f423ff
 8006ff4:	0106737f 	.word	0x0106737f
 8006ff8:	011a499f 	.word	0x011a499f
 8006ffc:	01312cff 	.word	0x01312cff
 8007000:	014ca43f 	.word	0x014ca43f
 8007004:	016e35ff 	.word	0x016e35ff
 8007008:	01a6ab1f 	.word	0x01a6ab1f
 800700c:	01e847ff 	.word	0x01e847ff

08007010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f043 0201 	orr.w	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f023 0201 	bic.w	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d106      	bne.n	8007080 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60da      	str	r2, [r3, #12]
 800707e:	e00b      	b.n	8007098 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e001      	b.n	8007098 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e003      	b.n	80070a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007098:	2032      	movs	r0, #50	; 0x32
 800709a:	f7f9 ff77 	bl	8000f8c <HAL_Delay>

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070a8:	b084      	sub	sp, #16
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b086      	sub	sp, #24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80070b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	613b      	str	r3, [r7, #16]
 80070c6:	e009      	b.n	80070dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3340      	adds	r3, #64	; 0x40
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	3301      	adds	r3, #1
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b0e      	cmp	r3, #14
 80070e0:	d9f2      	bls.n	80070c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d112      	bne.n	800710e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	639a      	str	r2, [r3, #56]	; 0x38
 800710c:	e00b      	b.n	8007126 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	4619      	mov	r1, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	461a      	mov	r2, r3
 8007142:	680b      	ldr	r3, [r1, #0]
 8007144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10c      	bne.n	8007166 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007152:	2100      	movs	r1, #0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f961 	bl	800741c <USB_SetDevSpeed>
 800715a:	e008      	b.n	800716e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800715c:	2101      	movs	r1, #1
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f95c 	bl	800741c <USB_SetDevSpeed>
 8007164:	e003      	b.n	800716e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007166:	2103      	movs	r1, #3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f957 	bl	800741c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800716e:	2110      	movs	r1, #16
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f90b 	bl	800738c <USB_FlushTxFifo>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f929 	bl	80073d8 <USB_FlushRxFifo>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	461a      	mov	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a2:	461a      	mov	r2, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	461a      	mov	r2, r3
 80071b0:	2300      	movs	r3, #0
 80071b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	e043      	b.n	8007242 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d0:	d118      	bne.n	8007204 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	461a      	mov	r2, r3
 80071e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e013      	b.n	8007216 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	461a      	mov	r2, r3
 80071fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e008      	b.n	8007216 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	461a      	mov	r2, r3
 8007212:	2300      	movs	r3, #0
 8007214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007222:	461a      	mov	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007234:	461a      	mov	r2, r3
 8007236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800723a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3301      	adds	r3, #1
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d3b7      	bcc.n	80071ba <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	e043      	b.n	80072d8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007266:	d118      	bne.n	800729a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	461a      	mov	r2, r3
 800727c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e013      	b.n	80072ac <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	461a      	mov	r2, r3
 8007292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	e008      	b.n	80072ac <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a6:	461a      	mov	r2, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b8:	461a      	mov	r2, r3
 80072ba:	2300      	movs	r3, #0
 80072bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	461a      	mov	r2, r3
 80072cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3301      	adds	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d3b7      	bcc.n	8007250 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d111      	bne.n	800731e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007300:	461a      	mov	r2, r3
 8007302:	4b20      	ldr	r3, [pc, #128]	; (8007384 <USB_DevInit+0x2dc>)
 8007304:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	f043 0303 	orr.w	r3, r3, #3
 800731c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800732a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f043 0210 	orr.w	r2, r3, #16
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <USB_DevInit+0x2e0>)
 8007344:	4313      	orrs	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f043 0208 	orr.w	r2, r3, #8
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800735c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d107      	bne.n	8007372 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800736a:	f043 0304 	orr.w	r3, r3, #4
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800737e:	b004      	add	sp, #16
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	00800100 	.word	0x00800100
 8007388:	803c3800 	.word	0x803c3800

0800738c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	019b      	lsls	r3, r3, #6
 800739e:	f043 0220 	orr.w	r2, r3, #32
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <USB_FlushTxFifo+0x48>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d901      	bls.n	80073b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e006      	b.n	80073c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d0f0      	beq.n	80073a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	00030d40 	.word	0x00030d40

080073d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2210      	movs	r2, #16
 80073e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a09      	ldr	r2, [pc, #36]	; (8007418 <USB_FlushRxFifo+0x40>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e006      	b.n	800740a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b10      	cmp	r3, #16
 8007406:	d0f0      	beq.n	80073ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	00030d40 	.word	0x00030d40

0800741c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743c:	4313      	orrs	r3, r2
 800743e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800744e:	b480      	push	{r7}
 8007450:	b087      	sub	sp, #28
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 0306 	and.w	r3, r3, #6
 8007466:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]
 8007472:	e00a      	b.n	800748a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d002      	beq.n	8007480 <USB_GetDevSpeed+0x32>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b06      	cmp	r3, #6
 800747e:	d102      	bne.n	8007486 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007480:	2302      	movs	r3, #2
 8007482:	75fb      	strb	r3, [r7, #23]
 8007484:	e001      	b.n	800748a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007486:	230f      	movs	r3, #15
 8007488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
}
 800748c:	4618      	mov	r0, r3
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d13a      	bne.n	800752a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	2101      	movs	r1, #1
 80074c6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d155      	bne.n	8007598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	78db      	ldrb	r3, [r3, #3]
 8007506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	059b      	lsls	r3, r3, #22
 800750e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007510:	4313      	orrs	r3, r2
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e036      	b.n	8007598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007530:	69da      	ldr	r2, [r3, #28]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	2101      	movs	r1, #1
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007548:	4313      	orrs	r3, r2
 800754a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d11a      	bne.n	8007598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	78db      	ldrb	r3, [r3, #3]
 800757c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800757e:	430b      	orrs	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d135      	bne.n	8007630 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	2101      	movs	r1, #1
 80075d6:	fa01 f303 	lsl.w	r3, r1, r3
 80075da:	b29b      	uxth	r3, r3
 80075dc:	43db      	mvns	r3, r3
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e4:	4013      	ands	r3, r2
 80075e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	2101      	movs	r1, #1
 80075fa:	fa01 f303 	lsl.w	r3, r1, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	43db      	mvns	r3, r3
 8007602:	68f9      	ldr	r1, [r7, #12]
 8007604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007608:	4013      	ands	r3, r2
 800760a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	0159      	lsls	r1, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	440b      	add	r3, r1
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	4619      	mov	r1, r3
 8007628:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <USB_DeactivateEndpoint+0x100>)
 800762a:	4013      	ands	r3, r2
 800762c:	600b      	str	r3, [r1, #0]
 800762e:	e034      	b.n	800769a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	2101      	movs	r1, #1
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	43db      	mvns	r3, r3
 800764a:	68f9      	ldr	r1, [r7, #12]
 800764c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007650:	4013      	ands	r3, r2
 8007652:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	2101      	movs	r1, #1
 8007666:	fa01 f303 	lsl.w	r3, r1, r3
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	43db      	mvns	r3, r3
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007674:	4013      	ands	r3, r2
 8007676:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	0159      	lsls	r1, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	440b      	add	r3, r1
 800768e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007692:	4619      	mov	r1, r3
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <USB_DeactivateEndpoint+0x104>)
 8007696:	4013      	ands	r3, r2
 8007698:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	ec337800 	.word	0xec337800
 80076ac:	eff37800 	.word	0xeff37800

080076b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	f040 815c 	bne.w	800798a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d132      	bne.n	8007740 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800771c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007738:	0cdb      	lsrs	r3, r3, #19
 800773a:	04db      	lsls	r3, r3, #19
 800773c:	6113      	str	r3, [r2, #16]
 800773e:	e074      	b.n	800782a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775a:	0cdb      	lsrs	r3, r3, #19
 800775c:	04db      	lsls	r3, r3, #19
 800775e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800777e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	691a      	ldr	r2, [r3, #16]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6959      	ldr	r1, [r3, #20]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	440b      	add	r3, r1
 800779c:	1e59      	subs	r1, r3, #1
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80077a6:	04d9      	lsls	r1, r3, #19
 80077a8:	4b9d      	ldr	r3, [pc, #628]	; (8007a20 <USB_EPStartXfer+0x370>)
 80077aa:	400b      	ands	r3, r1
 80077ac:	69b9      	ldr	r1, [r7, #24]
 80077ae:	0148      	lsls	r0, r1, #5
 80077b0:	69f9      	ldr	r1, [r7, #28]
 80077b2:	4401      	add	r1, r0
 80077b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077b8:	4313      	orrs	r3, r2
 80077ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077d2:	69b9      	ldr	r1, [r7, #24]
 80077d4:	0148      	lsls	r0, r1, #5
 80077d6:	69f9      	ldr	r1, [r7, #28]
 80077d8:	4401      	add	r1, r0
 80077da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077de:	4313      	orrs	r3, r2
 80077e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	78db      	ldrb	r3, [r3, #3]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d11f      	bne.n	800782a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007804:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007808:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007828:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d14b      	bne.n	80078c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	461a      	mov	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	78db      	ldrb	r3, [r3, #3]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d128      	bne.n	80078a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	e00f      	b.n	80078a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e12f      	b.n	8007b28 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	78db      	ldrb	r3, [r3, #3]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d015      	beq.n	800791c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8117 	beq.w	8007b28 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	2101      	movs	r1, #1
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007916:	4313      	orrs	r3, r2
 8007918:	634b      	str	r3, [r1, #52]	; 0x34
 800791a:	e105      	b.n	8007b28 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	2b00      	cmp	r3, #0
 800792a:	d110      	bne.n	800794e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	e00f      	b.n	800796e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	0151      	lsls	r1, r2, #5
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	440a      	add	r2, r1
 8007964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800796c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	68d9      	ldr	r1, [r3, #12]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	b298      	uxth	r0, r3
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4603      	mov	r3, r0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fa2b 	bl	8007dde <USB_WritePacket>
 8007988:	e0ce      	b.n	8007b28 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a4:	0cdb      	lsrs	r3, r3, #19
 80079a6:	04db      	lsls	r3, r3, #19
 80079a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	69fa      	ldr	r2, [r7, #28]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d126      	bne.n	8007a24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	0148      	lsls	r0, r1, #5
 80079f0:	69f9      	ldr	r1, [r7, #28]
 80079f2:	4401      	add	r1, r0
 80079f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a1a:	6113      	str	r3, [r2, #16]
 8007a1c:	e036      	b.n	8007a8c <USB_EPStartXfer+0x3dc>
 8007a1e:	bf00      	nop
 8007a20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	695a      	ldr	r2, [r3, #20]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	1e5a      	subs	r2, r3, #1
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	8afb      	ldrh	r3, [r7, #22]
 8007a4a:	04d9      	lsls	r1, r3, #19
 8007a4c:	4b39      	ldr	r3, [pc, #228]	; (8007b34 <USB_EPStartXfer+0x484>)
 8007a4e:	400b      	ands	r3, r1
 8007a50:	69b9      	ldr	r1, [r7, #24]
 8007a52:	0148      	lsls	r0, r1, #5
 8007a54:	69f9      	ldr	r1, [r7, #28]
 8007a56:	4401      	add	r1, r0
 8007a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6c:	691a      	ldr	r2, [r3, #16]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	8af9      	ldrh	r1, [r7, #22]
 8007a74:	fb01 f303 	mul.w	r3, r1, r3
 8007a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a7c:	69b9      	ldr	r1, [r7, #24]
 8007a7e:	0148      	lsls	r0, r1, #5
 8007a80:	69f9      	ldr	r1, [r7, #28]
 8007a82:	4401      	add	r1, r0
 8007a84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10d      	bne.n	8007aae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68d9      	ldr	r1, [r3, #12]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aaa:	460a      	mov	r2, r1
 8007aac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	78db      	ldrb	r3, [r3, #3]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d128      	bne.n	8007b08 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d110      	bne.n	8007ae8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e00f      	b.n	8007b08 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3720      	adds	r7, #32
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	1ff80000 	.word	0x1ff80000

08007b38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 80cd 	bne.w	8007cf4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d132      	bne.n	8007bc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc0:	0cdb      	lsrs	r3, r3, #19
 8007bc2:	04db      	lsls	r3, r3, #19
 8007bc4:	6113      	str	r3, [r2, #16]
 8007bc6:	e04e      	b.n	8007c66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be2:	0cdb      	lsrs	r3, r3, #19
 8007be4:	04db      	lsls	r3, r3, #19
 8007be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	695a      	ldr	r2, [r3, #20]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d903      	bls.n	8007c20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c56:	6939      	ldr	r1, [r7, #16]
 8007c58:	0148      	lsls	r0, r1, #5
 8007c5a:	6979      	ldr	r1, [r7, #20]
 8007c5c:	4401      	add	r1, r0
 8007c5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c62:	4313      	orrs	r3, r2
 8007c64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d11e      	bne.n	8007caa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d009      	beq.n	8007c88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c80:	461a      	mov	r2, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	e092      	b.n	8007dd0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	0151      	lsls	r1, r2, #5
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	440a      	add	r2, r1
 8007cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cc8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d07e      	beq.n	8007dd0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	6979      	ldr	r1, [r7, #20]
 8007cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	634b      	str	r3, [r1, #52]	; 0x34
 8007cf2:	e06d      	b.n	8007dd0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d0e:	0cdb      	lsrs	r3, r3, #19
 8007d10:	04db      	lsls	r3, r3, #19
 8007d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d36:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d7e:	6939      	ldr	r1, [r7, #16]
 8007d80:	0148      	lsls	r0, r1, #5
 8007d82:	6979      	ldr	r1, [r7, #20]
 8007d84:	4401      	add	r1, r0
 8007d86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d10d      	bne.n	8007db0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d009      	beq.n	8007db0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	68d9      	ldr	r1, [r3, #12]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dac:	460a      	mov	r2, r1
 8007dae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b089      	sub	sp, #36	; 0x24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	4611      	mov	r1, r2
 8007dea:	461a      	mov	r2, r3
 8007dec:	460b      	mov	r3, r1
 8007dee:	71fb      	strb	r3, [r7, #7]
 8007df0:	4613      	mov	r3, r2
 8007df2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007dfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11a      	bne.n	8007e3a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e04:	88bb      	ldrh	r3, [r7, #4]
 8007e06:	3303      	adds	r3, #3
 8007e08:	089b      	lsrs	r3, r3, #2
 8007e0a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e00f      	b.n	8007e32 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	031a      	lsls	r2, r3, #12
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1e:	461a      	mov	r2, r3
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3eb      	bcc.n	8007e12 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3724      	adds	r7, #36	; 0x24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b089      	sub	sp, #36	; 0x24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e00b      	b.n	8007e84 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3ef      	bcc.n	8007e6c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007e8c:	69fb      	ldr	r3, [r7, #28]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3724      	adds	r7, #36	; 0x24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d12c      	bne.n	8007f10 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	db12      	blt.n	8007eee <USB_EPSetStall+0x54>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00f      	beq.n	8007eee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	0151      	lsls	r1, r2, #5
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	440a      	add	r2, r1
 8007ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e02b      	b.n	8007f68 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	db12      	blt.n	8007f48 <USB_EPSetStall+0xae>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00f      	beq.n	8007f48 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f46:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d128      	bne.n	8007fe4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	0151      	lsls	r1, r2, #5
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	440a      	add	r2, r1
 8007fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	78db      	ldrb	r3, [r3, #3]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d003      	beq.n	8007fc2 <USB_EPClearStall+0x4c>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	78db      	ldrb	r3, [r3, #3]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d138      	bne.n	8008034 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	0151      	lsls	r1, r2, #5
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	440a      	add	r2, r1
 8007fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	e027      	b.n	8008034 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008002:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	78db      	ldrb	r3, [r3, #3]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d003      	beq.n	8008014 <USB_EPClearStall+0x9e>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	78db      	ldrb	r3, [r3, #3]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d10f      	bne.n	8008034 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008032:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008060:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008064:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080a8:	f023 0302 	bic.w	r3, r3, #2
 80080ac:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80080ae:	2003      	movs	r0, #3
 80080b0:	f7f8 ff6c 	bl	8000f8c <HAL_Delay>

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080d8:	f043 0302 	orr.w	r3, r3, #2
 80080dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80080de:	2003      	movs	r0, #3
 80080e0:	f7f8 ff54 	bl	8000f8c <HAL_Delay>

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4013      	ands	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4013      	ands	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	0c1b      	lsrs	r3, r3, #16
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	4013      	ands	r3, r2
 800816a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	b29b      	uxth	r3, r3
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	4013      	ands	r3, r2
 80081a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081aa:	68bb      	ldr	r3, [r7, #8]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	01db      	lsls	r3, r3, #7
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4013      	ands	r3, r2
 8008204:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008206:	68bb      	ldr	r3, [r7, #8]
}
 8008208:	4618      	mov	r0, r3
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f003 0301 	and.w	r3, r3, #1
}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800824e:	f023 0307 	bic.w	r3, r3, #7
 8008252:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0306 	and.w	r3, r3, #6
 8008260:	2b04      	cmp	r3, #4
 8008262:	d109      	bne.n	8008278 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008272:	f043 0303 	orr.w	r3, r3, #3
 8008276:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	460b      	mov	r3, r1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	333c      	adds	r3, #60	; 0x3c
 80082b2:	3304      	adds	r3, #4
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4a26      	ldr	r2, [pc, #152]	; (8008354 <USB_EP0_OutStart+0xb8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d90a      	bls.n	80082d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d0:	d101      	bne.n	80082d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e037      	b.n	8008346 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	461a      	mov	r2, r3
 80082de:	2300      	movs	r3, #0
 80082e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f043 0318 	orr.w	r3, r3, #24
 8008308:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008318:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800831c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d10f      	bne.n	8008344 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832a:	461a      	mov	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800833e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	4f54300a 	.word	0x4f54300a

08008358 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3301      	adds	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4a13      	ldr	r2, [pc, #76]	; (80083bc <USB_CoreReset+0x64>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d901      	bls.n	8008376 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e01b      	b.n	80083ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	daf2      	bge.n	8008364 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f043 0201 	orr.w	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3301      	adds	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <USB_CoreReset+0x64>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d901      	bls.n	80083a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e006      	b.n	80083ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d0f0      	beq.n	800838e <USB_CoreReset+0x36>

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	00030d40 	.word	0x00030d40

080083c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	7c1b      	ldrb	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d115      	bne.n	8008404 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083dc:	2202      	movs	r2, #2
 80083de:	2181      	movs	r1, #129	; 0x81
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f003 fbc8 	bl	800bb76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f0:	2202      	movs	r2, #2
 80083f2:	2101      	movs	r1, #1
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f003 fbbe 	bl	800bb76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008402:	e012      	b.n	800842a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	2202      	movs	r2, #2
 8008408:	2181      	movs	r1, #129	; 0x81
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f003 fbb3 	bl	800bb76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	2202      	movs	r2, #2
 800841a:	2101      	movs	r1, #1
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f003 fbaa 	bl	800bb76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800842a:	2308      	movs	r3, #8
 800842c:	2203      	movs	r2, #3
 800842e:	2182      	movs	r1, #130	; 0x82
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f003 fba0 	bl	800bb76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800843c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008440:	f004 f808 	bl	800c454 <malloc>
 8008444:	4603      	mov	r3, r0
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008458:	2301      	movs	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	e026      	b.n	80084ac <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008464:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2200      	movs	r2, #0
 800847c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	7c1b      	ldrb	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800848e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008492:	2101      	movs	r1, #1
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f003 fc5f 	bl	800bd58 <USBD_LL_PrepareReceive>
 800849a:	e007      	b.n	80084ac <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084a2:	2340      	movs	r3, #64	; 0x40
 80084a4:	2101      	movs	r1, #1
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f003 fc56 	bl	800bd58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80084c6:	2181      	movs	r1, #129	; 0x81
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f003 fb7a 	bl	800bbc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80084d4:	2101      	movs	r1, #1
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f003 fb73 	bl	800bbc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80084e4:	2182      	movs	r1, #130	; 0x82
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f003 fb6b 	bl	800bbc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00e      	beq.n	800851a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800850c:	4618      	mov	r0, r3
 800850e:	f003 ffa9 	bl	800c464 <free>
    pdev->pClassData = NULL;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008534:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800854a:	2b00      	cmp	r3, #0
 800854c:	d039      	beq.n	80085c2 <USBD_CDC_Setup+0x9e>
 800854e:	2b20      	cmp	r3, #32
 8008550:	d17c      	bne.n	800864c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88db      	ldrh	r3, [r3, #6]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d029      	beq.n	80085ae <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b25b      	sxtb	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	da11      	bge.n	8008588 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008570:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	88d2      	ldrh	r2, [r2, #6]
 8008576:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008578:	6939      	ldr	r1, [r7, #16]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	88db      	ldrh	r3, [r3, #6]
 800857e:	461a      	mov	r2, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f99b 	bl	80098bc <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008586:	e068      	b.n	800865a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	785a      	ldrb	r2, [r3, #1]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800859e:	6939      	ldr	r1, [r7, #16]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	88db      	ldrh	r3, [r3, #6]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 f9b6 	bl	8009918 <USBD_CtlPrepareRx>
    break;
 80085ac:	e055      	b.n	800865a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	7850      	ldrb	r0, [r2, #1]
 80085ba:	2200      	movs	r2, #0
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	4798      	blx	r3
    break;
 80085c0:	e04b      	b.n	800865a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b0a      	cmp	r3, #10
 80085c8:	d017      	beq.n	80085fa <USBD_CDC_Setup+0xd6>
 80085ca:	2b0b      	cmp	r3, #11
 80085cc:	d029      	beq.n	8008622 <USBD_CDC_Setup+0xfe>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d133      	bne.n	800863a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d107      	bne.n	80085ec <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80085dc:	f107 030c 	add.w	r3, r7, #12
 80085e0:	2202      	movs	r2, #2
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f969 	bl	80098bc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80085ea:	e02e      	b.n	800864a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f8f9 	bl	80097e6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80085f4:	2302      	movs	r3, #2
 80085f6:	75fb      	strb	r3, [r7, #23]
      break;
 80085f8:	e027      	b.n	800864a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008600:	2b03      	cmp	r3, #3
 8008602:	d107      	bne.n	8008614 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008604:	f107 030f 	add.w	r3, r7, #15
 8008608:	2201      	movs	r2, #1
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f955 	bl	80098bc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008612:	e01a      	b.n	800864a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f8e5 	bl	80097e6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800861c:	2302      	movs	r3, #2
 800861e:	75fb      	strb	r3, [r7, #23]
      break;
 8008620:	e013      	b.n	800864a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008628:	2b03      	cmp	r3, #3
 800862a:	d00d      	beq.n	8008648 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 f8d9 	bl	80097e6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008634:	2302      	movs	r3, #2
 8008636:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008638:	e006      	b.n	8008648 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 f8d2 	bl	80097e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008642:	2302      	movs	r3, #2
 8008644:	75fb      	strb	r3, [r7, #23]
      break;
 8008646:	e000      	b.n	800864a <USBD_CDC_Setup+0x126>
      break;
 8008648:	bf00      	nop
    }
    break;
 800864a:	e006      	b.n	800865a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f8c9 	bl	80097e6 <USBD_CtlError>
    ret = USBD_FAIL;
 8008654:	2302      	movs	r3, #2
 8008656:	75fb      	strb	r3, [r7, #23]
    break;
 8008658:	bf00      	nop
  }

  return ret;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008676:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800867e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008686:	2b00      	cmp	r3, #0
 8008688:	d03a      	beq.n	8008700 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	331c      	adds	r3, #28
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d029      	beq.n	80086f4 <USBD_CDC_DataIn+0x90>
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	331c      	adds	r3, #28
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	78f9      	ldrb	r1, [r7, #3]
 80086b4:	68b8      	ldr	r0, [r7, #8]
 80086b6:	460b      	mov	r3, r1
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	1a5b      	subs	r3, r3, r1
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4403      	add	r3, r0
 80086c0:	3344      	adds	r3, #68	; 0x44
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80086c8:	fb03 f301 	mul.w	r3, r3, r1
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d110      	bne.n	80086f4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	331c      	adds	r3, #28
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80086e6:	78f9      	ldrb	r1, [r7, #3]
 80086e8:	2300      	movs	r3, #0
 80086ea:	2200      	movs	r2, #0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f003 fb10 	bl	800bd12 <USBD_LL_Transmit>
 80086f2:	e003      	b.n	80086fc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	e000      	b.n	8008702 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008700:	2302      	movs	r3, #2
  }
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800871c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 fb3b 	bl	800bd9e <USBD_LL_GetRxDataSize>
 8008728:	4602      	mov	r2, r0
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00d      	beq.n	8008756 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800874e:	4611      	mov	r1, r2
 8008750:	4798      	blx	r3

    return USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	e000      	b.n	8008758 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008756:	2302      	movs	r3, #2
  }
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800876e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008776:	2b00      	cmp	r3, #0
 8008778:	d015      	beq.n	80087a6 <USBD_CDC_EP0_RxReady+0x46>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008780:	2bff      	cmp	r3, #255	; 0xff
 8008782:	d010      	beq.n	80087a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008792:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800879a:	b292      	uxth	r2, r2
 800879c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	22ff      	movs	r2, #255	; 0xff
 80087a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2243      	movs	r2, #67	; 0x43
 80087bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80087be:	4b03      	ldr	r3, [pc, #12]	; (80087cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20000090 	.word	0x20000090

080087d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2243      	movs	r2, #67	; 0x43
 80087dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80087de:	4b03      	ldr	r3, [pc, #12]	; (80087ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	2000004c 	.word	0x2000004c

080087f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2243      	movs	r2, #67	; 0x43
 80087fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	200000d4 	.word	0x200000d4

08008810 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	220a      	movs	r2, #10
 800881c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800881e:	4b03      	ldr	r3, [pc, #12]	; (800882c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	20000008 	.word	0x20000008

08008830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800883a:	2302      	movs	r3, #2
 800883c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800885e:	b480      	push	{r7}
 8008860:	b087      	sub	sp, #28
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	4613      	mov	r3, r2
 800886a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008872:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008892:	b480      	push	{r7}
 8008894:	b085      	sub	sp, #20
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d017      	beq.n	8008904 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7c1b      	ldrb	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e6:	2101      	movs	r1, #1
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f003 fa35 	bl	800bd58 <USBD_LL_PrepareReceive>
 80088ee:	e007      	b.n	8008900 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f6:	2340      	movs	r3, #64	; 0x40
 80088f8:	2101      	movs	r1, #1
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f003 fa2c 	bl	800bd58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	e000      	b.n	8008906 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008904:	2302      	movs	r3, #2
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	4613      	mov	r3, r2
 800891a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008922:	2302      	movs	r3, #2
 8008924:	e01a      	b.n	800895c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	79fa      	ldrb	r2, [r7, #7]
 8008952:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f003 f8a7 	bl	800baa8 <USBD_LL_Init>

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d006      	beq.n	8008986 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
 8008984:	e001      	b.n	800898a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008986:	2302      	movs	r3, #2
 8008988:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f003 f8cd 	bl	800bb40 <USBD_LL_Start>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80089d2:	2302      	movs	r3, #2
 80089d4:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00c      	beq.n	80089fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	4611      	mov	r1, r2
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	78fa      	ldrb	r2, [r7, #3]
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fe95 	bl	800976c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d00c      	beq.n	8008a80 <USBD_LL_SetupStage+0x56>
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d302      	bcc.n	8008a70 <USBD_LL_SetupStage+0x46>
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d010      	beq.n	8008a90 <USBD_LL_SetupStage+0x66>
 8008a6e:	e017      	b.n	8008aa0 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa05 	bl	8008e88 <USBD_StdDevReq>
    break;
 8008a7e:	e01a      	b.n	8008ab6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fa67 	bl	8008f5c <USBD_StdItfReq>
    break;
 8008a8e:	e012      	b.n	8008ab6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 faa5 	bl	8008fe8 <USBD_StdEPReq>
    break;
 8008a9e:	e00a      	b.n	8008ab6 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008aa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f003 f8a6 	bl	800bc00 <USBD_LL_StallEP>
    break;
 8008ab4:	bf00      	nop
  }

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008ace:	7afb      	ldrb	r3, [r7, #11]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d14b      	bne.n	8008b6c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008ada:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d134      	bne.n	8008b50 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d919      	bls.n	8008b26 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d203      	bcs.n	8008b14 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	e002      	b.n	8008b1a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 ff18 	bl	8009954 <USBD_CtlContinueRx>
 8008b24:	e038      	b.n	8008b98 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d105      	bne.n	8008b48 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 ff15 	bl	8009978 <USBD_CtlSendStatus>
 8008b4e:	e023      	b.n	8008b98 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008b56:	2b05      	cmp	r3, #5
 8008b58:	d11e      	bne.n	8008b98 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008b62:	2100      	movs	r1, #0
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f003 f84b 	bl	800bc00 <USBD_LL_StallEP>
 8008b6a:	e015      	b.n	8008b98 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00d      	beq.n	8008b94 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d108      	bne.n	8008b94 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	7afa      	ldrb	r2, [r7, #11]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	4798      	blx	r3
 8008b92:	e001      	b.n	8008b98 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b94:	2302      	movs	r3, #2
 8008b96:	e000      	b.n	8008b9a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	460b      	mov	r3, r1
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d17f      	bne.n	8008cb6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3314      	adds	r3, #20
 8008bba:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d15c      	bne.n	8008c80 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d915      	bls.n	8008bfe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	461a      	mov	r2, r3
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fe82 	bl	80098f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f003 f8ae 	bl	800bd58 <USBD_LL_PrepareReceive>
 8008bfc:	e04e      	b.n	8008c9c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	6912      	ldr	r2, [r2, #16]
 8008c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c0a:	fb02 f201 	mul.w	r2, r2, r1
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11c      	bne.n	8008c4e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d316      	bcc.n	8008c4e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d20f      	bcs.n	8008c4e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2100      	movs	r1, #0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fe5e 	bl	80098f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c40:	2300      	movs	r3, #0
 8008c42:	2200      	movs	r2, #0
 8008c44:	2100      	movs	r1, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f003 f886 	bl	800bd58 <USBD_LL_PrepareReceive>
 8008c4c:	e026      	b.n	8008c9c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d105      	bne.n	8008c70 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c70:	2180      	movs	r1, #128	; 0x80
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f002 ffc4 	bl	800bc00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fe90 	bl	800999e <USBD_CtlReceiveStatus>
 8008c7e:	e00d      	b.n	8008c9c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d004      	beq.n	8008c94 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d103      	bne.n	8008c9c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c94:	2180      	movs	r1, #128	; 0x80
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f002 ffb2 	bl	800bc00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d11d      	bne.n	8008ce2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fe82 	bl	80089b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8008cb4:	e015      	b.n	8008ce2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d108      	bne.n	8008cde <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	7afa      	ldrb	r2, [r7, #11]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	4798      	blx	r3
 8008cdc:	e001      	b.n	8008ce2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e000      	b.n	8008ce4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cf4:	2340      	movs	r3, #64	; 0x40
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f002 ff3b 	bl	800bb76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2240      	movs	r2, #64	; 0x40
 8008d0c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	2200      	movs	r2, #0
 8008d14:	2180      	movs	r1, #128	; 0x80
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f002 ff2d 	bl	800bb76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2240      	movs	r2, #64	; 0x40
 8008d26:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6852      	ldr	r2, [r2, #4]
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	4611      	mov	r1, r2
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
  }

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2204      	movs	r2, #4
 8008da6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d10b      	bne.n	8008e04 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	460b      	mov	r3, r1
 8008e18:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6852      	ldr	r2, [r2, #4]
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	4611      	mov	r1, r2
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	4798      	blx	r3

  return USBD_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d004      	beq.n	8008eac <USBD_StdDevReq+0x24>
 8008ea2:	2b40      	cmp	r3, #64	; 0x40
 8008ea4:	d002      	beq.n	8008eac <USBD_StdDevReq+0x24>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d008      	beq.n	8008ebc <USBD_StdDevReq+0x34>
 8008eaa:	e04c      	b.n	8008f46 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
    break;
 8008eba:	e049      	b.n	8008f50 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	2b09      	cmp	r3, #9
 8008ec2:	d83a      	bhi.n	8008f3a <USBD_StdDevReq+0xb2>
 8008ec4:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <USBD_StdDevReq+0x44>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008f1d 	.word	0x08008f1d
 8008ed0:	08008f31 	.word	0x08008f31
 8008ed4:	08008f3b 	.word	0x08008f3b
 8008ed8:	08008f27 	.word	0x08008f27
 8008edc:	08008f3b 	.word	0x08008f3b
 8008ee0:	08008eff 	.word	0x08008eff
 8008ee4:	08008ef5 	.word	0x08008ef5
 8008ee8:	08008f3b 	.word	0x08008f3b
 8008eec:	08008f13 	.word	0x08008f13
 8008ef0:	08008f09 	.word	0x08008f09
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f9d2 	bl	80092a0 <USBD_GetDescriptor>
      break;
 8008efc:	e022      	b.n	8008f44 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fac7 	bl	8009494 <USBD_SetAddress>
      break;
 8008f06:	e01d      	b.n	8008f44 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fb04 	bl	8009518 <USBD_SetConfig>
      break;
 8008f10:	e018      	b.n	8008f44 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fb8d 	bl	8009634 <USBD_GetConfig>
      break;
 8008f1a:	e013      	b.n	8008f44 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fbbc 	bl	800969c <USBD_GetStatus>
      break;
 8008f24:	e00e      	b.n	8008f44 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fbea 	bl	8009702 <USBD_SetFeature>
      break;
 8008f2e:	e009      	b.n	8008f44 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fbf9 	bl	800972a <USBD_ClrFeature>
      break;
 8008f38:	e004      	b.n	8008f44 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fc52 	bl	80097e6 <USBD_CtlError>
      break;
 8008f42:	bf00      	nop
    }
    break;
 8008f44:	e004      	b.n	8008f50 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fc4c 	bl	80097e6 <USBD_CtlError>
    break;
 8008f4e:	bf00      	nop
  }

  return ret;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop

08008f5c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d003      	beq.n	8008f7e <USBD_StdItfReq+0x22>
 8008f76:	2b40      	cmp	r3, #64	; 0x40
 8008f78:	d001      	beq.n	8008f7e <USBD_StdItfReq+0x22>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d12a      	bne.n	8008fd4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008f84:	3b01      	subs	r3, #1
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d81d      	bhi.n	8008fc6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	889b      	ldrh	r3, [r3, #4]
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d813      	bhi.n	8008fbc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	88db      	ldrh	r3, [r3, #6]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d110      	bne.n	8008fd0 <USBD_StdItfReq+0x74>
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10d      	bne.n	8008fd0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fcdf 	bl	8009978 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008fba:	e009      	b.n	8008fd0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fc11 	bl	80097e6 <USBD_CtlError>
      break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fc0c 	bl	80097e6 <USBD_CtlError>
      break;
 8008fce:	e000      	b.n	8008fd2 <USBD_StdItfReq+0x76>
      break;
 8008fd0:	bf00      	nop
    }
    break;
 8008fd2:	e004      	b.n	8008fde <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fc05 	bl	80097e6 <USBD_CtlError>
    break;
 8008fdc:	bf00      	nop
  }

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	889b      	ldrh	r3, [r3, #4]
 8008ffa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009004:	2b20      	cmp	r3, #32
 8009006:	d004      	beq.n	8009012 <USBD_StdEPReq+0x2a>
 8009008:	2b40      	cmp	r3, #64	; 0x40
 800900a:	d002      	beq.n	8009012 <USBD_StdEPReq+0x2a>
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <USBD_StdEPReq+0x3a>
 8009010:	e13b      	b.n	800928a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
    break;
 8009020:	e138      	b.n	8009294 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800902a:	2b20      	cmp	r3, #32
 800902c:	d10a      	bne.n	8009044 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	e128      	b.n	8009296 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	785b      	ldrb	r3, [r3, #1]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d03e      	beq.n	80090ca <USBD_StdEPReq+0xe2>
 800904c:	2b03      	cmp	r3, #3
 800904e:	d002      	beq.n	8009056 <USBD_StdEPReq+0x6e>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d070      	beq.n	8009136 <USBD_StdEPReq+0x14e>
 8009054:	e113      	b.n	800927e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800905c:	2b02      	cmp	r3, #2
 800905e:	d002      	beq.n	8009066 <USBD_StdEPReq+0x7e>
 8009060:	2b03      	cmp	r3, #3
 8009062:	d015      	beq.n	8009090 <USBD_StdEPReq+0xa8>
 8009064:	e02b      	b.n	80090be <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00c      	beq.n	8009086 <USBD_StdEPReq+0x9e>
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b80      	cmp	r3, #128	; 0x80
 8009070:	d009      	beq.n	8009086 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f002 fdc2 	bl	800bc00 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f002 fdbe 	bl	800bc00 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009084:	e020      	b.n	80090c8 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fbac 	bl	80097e6 <USBD_CtlError>
        break;
 800908e:	e01b      	b.n	80090c8 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	885b      	ldrh	r3, [r3, #2]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10e      	bne.n	80090b6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00b      	beq.n	80090b6 <USBD_StdEPReq+0xce>
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d008      	beq.n	80090b6 <USBD_StdEPReq+0xce>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	88db      	ldrh	r3, [r3, #6]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f002 fda5 	bl	800bc00 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fc5e 	bl	8009978 <USBD_CtlSendStatus>

        break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fb90 	bl	80097e6 <USBD_CtlError>
        break;
 80090c6:	bf00      	nop
      }
      break;
 80090c8:	e0de      	b.n	8009288 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d002      	beq.n	80090da <USBD_StdEPReq+0xf2>
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d015      	beq.n	8009104 <USBD_StdEPReq+0x11c>
 80090d8:	e026      	b.n	8009128 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00c      	beq.n	80090fa <USBD_StdEPReq+0x112>
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b80      	cmp	r3, #128	; 0x80
 80090e4:	d009      	beq.n	80090fa <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f002 fd88 	bl	800bc00 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f002 fd84 	bl	800bc00 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80090f8:	e01c      	b.n	8009134 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fb72 	bl	80097e6 <USBD_CtlError>
        break;
 8009102:	e017      	b.n	8009134 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	885b      	ldrh	r3, [r3, #2]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d112      	bne.n	8009132 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f002 fd8f 	bl	800bc3e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fc29 	bl	8009978 <USBD_CtlSendStatus>
        }
        break;
 8009126:	e004      	b.n	8009132 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb5b 	bl	80097e6 <USBD_CtlError>
        break;
 8009130:	e000      	b.n	8009134 <USBD_StdEPReq+0x14c>
        break;
 8009132:	bf00      	nop
      }
      break;
 8009134:	e0a8      	b.n	8009288 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800913c:	2b02      	cmp	r3, #2
 800913e:	d002      	beq.n	8009146 <USBD_StdEPReq+0x15e>
 8009140:	2b03      	cmp	r3, #3
 8009142:	d031      	beq.n	80091a8 <USBD_StdEPReq+0x1c0>
 8009144:	e095      	b.n	8009272 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d007      	beq.n	800915c <USBD_StdEPReq+0x174>
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b80      	cmp	r3, #128	; 0x80
 8009150:	d004      	beq.n	800915c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fb46 	bl	80097e6 <USBD_CtlError>
          break;
 800915a:	e08f      	b.n	800927c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800915c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009160:	2b00      	cmp	r3, #0
 8009162:	da0b      	bge.n	800917c <USBD_StdEPReq+0x194>
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	3310      	adds	r3, #16
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	e00a      	b.n	8009192 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	4413      	add	r3, r2
 8009192:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2202      	movs	r2, #2
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fb8b 	bl	80098bc <USBD_CtlSendData>
          break;
 80091a6:	e069      	b.n	800927c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80091a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da11      	bge.n	80091d4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	f003 020f 	and.w	r2, r3, #15
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	3318      	adds	r3, #24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d117      	bne.n	80091fa <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fb0a 	bl	80097e6 <USBD_CtlError>
            break;
 80091d2:	e053      	b.n	800927c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	f003 020f 	and.w	r2, r3, #15
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d104      	bne.n	80091fa <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 faf7 	bl	80097e6 <USBD_CtlError>
            break;
 80091f8:	e040      	b.n	800927c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80091fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da0b      	bge.n	800921a <USBD_StdEPReq+0x232>
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	3310      	adds	r3, #16
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	3304      	adds	r3, #4
 8009218:	e00a      	b.n	8009230 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009220:	4613      	mov	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <USBD_StdEPReq+0x256>
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d103      	bne.n	8009246 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	e00e      	b.n	8009264 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f002 fd16 	bl	800bc7c <USBD_LL_IsStallEP>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2201      	movs	r2, #1
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	e002      	b.n	8009264 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2202      	movs	r2, #2
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fb26 	bl	80098bc <USBD_CtlSendData>
          break;
 8009270:	e004      	b.n	800927c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fab6 	bl	80097e6 <USBD_CtlError>
        break;
 800927a:	bf00      	nop
      }
      break;
 800927c:	e004      	b.n	8009288 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fab0 	bl	80097e6 <USBD_CtlError>
      break;
 8009286:	bf00      	nop
    }
    break;
 8009288:	e004      	b.n	8009294 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 faaa 	bl	80097e6 <USBD_CtlError>
    break;
 8009292:	bf00      	nop
  }

  return ret;
 8009294:	7bfb      	ldrb	r3, [r7, #15]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	2b06      	cmp	r3, #6
 80092b6:	f200 80c9 	bhi.w	800944c <USBD_GetDescriptor+0x1ac>
 80092ba:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <USBD_GetDescriptor+0x20>)
 80092bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	080092f5 	.word	0x080092f5
 80092c8:	08009335 	.word	0x08009335
 80092cc:	0800944d 	.word	0x0800944d
 80092d0:	0800944d 	.word	0x0800944d
 80092d4:	080093f9 	.word	0x080093f9
 80092d8:	0800941f 	.word	0x0800941f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 010a 	add.w	r1, r7, #10
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
    break;
 80092f2:	e0b0      	b.n	8009456 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	7c1b      	ldrb	r3, [r3, #16]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10d      	bne.n	8009318 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	f107 020a 	add.w	r2, r7, #10
 8009308:	4610      	mov	r0, r2
 800930a:	4798      	blx	r3
 800930c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	2202      	movs	r2, #2
 8009314:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009316:	e09e      	b.n	8009456 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	f107 020a 	add.w	r2, r7, #10
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
 8009328:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3301      	adds	r3, #1
 800932e:	2202      	movs	r2, #2
 8009330:	701a      	strb	r2, [r3, #0]
    break;
 8009332:	e090      	b.n	8009456 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	885b      	ldrh	r3, [r3, #2]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b05      	cmp	r3, #5
 800933c:	d856      	bhi.n	80093ec <USBD_GetDescriptor+0x14c>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBD_GetDescriptor+0xa4>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009375 	.word	0x08009375
 800934c:	0800938d 	.word	0x0800938d
 8009350:	080093a5 	.word	0x080093a5
 8009354:	080093bd 	.word	0x080093bd
 8009358:	080093d5 	.word	0x080093d5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	7c12      	ldrb	r2, [r2, #16]
 8009368:	f107 010a 	add.w	r1, r7, #10
 800936c:	4610      	mov	r0, r2
 800936e:	4798      	blx	r3
 8009370:	60f8      	str	r0, [r7, #12]
      break;
 8009372:	e040      	b.n	80093f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7c12      	ldrb	r2, [r2, #16]
 8009380:	f107 010a 	add.w	r1, r7, #10
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	60f8      	str	r0, [r7, #12]
      break;
 800938a:	e034      	b.n	80093f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 010a 	add.w	r1, r7, #10
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
      break;
 80093a2:	e028      	b.n	80093f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	7c12      	ldrb	r2, [r2, #16]
 80093b0:	f107 010a 	add.w	r1, r7, #10
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
 80093b8:	60f8      	str	r0, [r7, #12]
      break;
 80093ba:	e01c      	b.n	80093f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	7c12      	ldrb	r2, [r2, #16]
 80093c8:	f107 010a 	add.w	r1, r7, #10
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
      break;
 80093d2:	e010      	b.n	80093f6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 010a 	add.w	r1, r7, #10
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
      break;
 80093ea:	e004      	b.n	80093f6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9f9 	bl	80097e6 <USBD_CtlError>
      return;
 80093f4:	e04b      	b.n	800948e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80093f6:	e02e      	b.n	8009456 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7c1b      	ldrb	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009408:	f107 020a 	add.w	r2, r7, #10
 800940c:	4610      	mov	r0, r2
 800940e:	4798      	blx	r3
 8009410:	60f8      	str	r0, [r7, #12]
      break;
 8009412:	e020      	b.n	8009456 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f9e5 	bl	80097e6 <USBD_CtlError>
      return;
 800941c:	e037      	b.n	800948e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7c1b      	ldrb	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10d      	bne.n	8009442 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942e:	f107 020a 	add.w	r2, r7, #10
 8009432:	4610      	mov	r0, r2
 8009434:	4798      	blx	r3
 8009436:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3301      	adds	r3, #1
 800943c:	2207      	movs	r2, #7
 800943e:	701a      	strb	r2, [r3, #0]
      break;
 8009440:	e009      	b.n	8009456 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f9ce 	bl	80097e6 <USBD_CtlError>
      return;
 800944a:	e020      	b.n	800948e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f9c9 	bl	80097e6 <USBD_CtlError>
    return;
 8009454:	e01b      	b.n	800948e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009456:	897b      	ldrh	r3, [r7, #10]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d011      	beq.n	8009480 <USBD_GetDescriptor+0x1e0>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	88db      	ldrh	r3, [r3, #6]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00d      	beq.n	8009480 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	88da      	ldrh	r2, [r3, #6]
 8009468:	897b      	ldrh	r3, [r7, #10]
 800946a:	4293      	cmp	r3, r2
 800946c:	bf28      	it	cs
 800946e:	4613      	movcs	r3, r2
 8009470:	b29b      	uxth	r3, r3
 8009472:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009474:	897b      	ldrh	r3, [r7, #10]
 8009476:	461a      	mov	r2, r3
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fa1e 	bl	80098bc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	88db      	ldrh	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa75 	bl	8009978 <USBD_CtlSendStatus>
  }
}
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	889b      	ldrh	r3, [r3, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d130      	bne.n	8009508 <USBD_SetAddress+0x74>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	88db      	ldrh	r3, [r3, #6]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d12c      	bne.n	8009508 <USBD_SetAddress+0x74>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	885b      	ldrh	r3, [r3, #2]
 80094b2:	2b7f      	cmp	r3, #127	; 0x7f
 80094b4:	d828      	bhi.n	8009508 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	885b      	ldrh	r3, [r3, #2]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d104      	bne.n	80094d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f989 	bl	80097e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d4:	e01c      	b.n	8009510 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7bfa      	ldrb	r2, [r7, #15]
 80094da:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f002 fbf6 	bl	800bcd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fa45 	bl	8009978 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fc:	e008      	b.n	8009510 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	e003      	b.n	8009510 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f96b 	bl	80097e6 <USBD_CtlError>
  }
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	885b      	ldrh	r3, [r3, #2]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	4b41      	ldr	r3, [pc, #260]	; (8009630 <USBD_SetConfig+0x118>)
 800952a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800952c:	4b40      	ldr	r3, [pc, #256]	; (8009630 <USBD_SetConfig+0x118>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d904      	bls.n	800953e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f955 	bl	80097e6 <USBD_CtlError>
 800953c:	e075      	b.n	800962a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009544:	2b02      	cmp	r3, #2
 8009546:	d002      	beq.n	800954e <USBD_SetConfig+0x36>
 8009548:	2b03      	cmp	r3, #3
 800954a:	d023      	beq.n	8009594 <USBD_SetConfig+0x7c>
 800954c:	e062      	b.n	8009614 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800954e:	4b38      	ldr	r3, [pc, #224]	; (8009630 <USBD_SetConfig+0x118>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01a      	beq.n	800958c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009556:	4b36      	ldr	r3, [pc, #216]	; (8009630 <USBD_SetConfig+0x118>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2203      	movs	r2, #3
 8009564:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009568:	4b31      	ldr	r3, [pc, #196]	; (8009630 <USBD_SetConfig+0x118>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff fa29 	bl	80089c6 <USBD_SetClassConfig>
 8009574:	4603      	mov	r3, r0
 8009576:	2b02      	cmp	r3, #2
 8009578:	d104      	bne.n	8009584 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f932 	bl	80097e6 <USBD_CtlError>
          return;
 8009582:	e052      	b.n	800962a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9f7 	bl	8009978 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800958a:	e04e      	b.n	800962a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f9f3 	bl	8009978 <USBD_CtlSendStatus>
      break;
 8009592:	e04a      	b.n	800962a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009594:	4b26      	ldr	r3, [pc, #152]	; (8009630 <USBD_SetConfig+0x118>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d112      	bne.n	80095c2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80095a4:	4b22      	ldr	r3, [pc, #136]	; (8009630 <USBD_SetConfig+0x118>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80095ae:	4b20      	ldr	r3, [pc, #128]	; (8009630 <USBD_SetConfig+0x118>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff fa25 	bl	8008a04 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f9dc 	bl	8009978 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80095c0:	e033      	b.n	800962a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <USBD_SetConfig+0x118>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d01d      	beq.n	800960c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff fa13 	bl	8008a04 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095de:	4b14      	ldr	r3, [pc, #80]	; (8009630 <USBD_SetConfig+0x118>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095e8:	4b11      	ldr	r3, [pc, #68]	; (8009630 <USBD_SetConfig+0x118>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff f9e9 	bl	80089c6 <USBD_SetClassConfig>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d104      	bne.n	8009604 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f8f2 	bl	80097e6 <USBD_CtlError>
          return;
 8009602:	e012      	b.n	800962a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9b7 	bl	8009978 <USBD_CtlSendStatus>
      break;
 800960a:	e00e      	b.n	800962a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9b3 	bl	8009978 <USBD_CtlSendStatus>
      break;
 8009612:	e00a      	b.n	800962a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f8e5 	bl	80097e6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800961c:	4b04      	ldr	r3, [pc, #16]	; (8009630 <USBD_SetConfig+0x118>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff f9ee 	bl	8008a04 <USBD_ClrClassConfig>
      break;
 8009628:	bf00      	nop
    }
  }
}
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	2000036c 	.word	0x2000036c

08009634 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	88db      	ldrh	r3, [r3, #6]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d004      	beq.n	8009650 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f8cc 	bl	80097e6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800964e:	e021      	b.n	8009694 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009656:	2b01      	cmp	r3, #1
 8009658:	db17      	blt.n	800968a <USBD_GetConfig+0x56>
 800965a:	2b02      	cmp	r3, #2
 800965c:	dd02      	ble.n	8009664 <USBD_GetConfig+0x30>
 800965e:	2b03      	cmp	r3, #3
 8009660:	d00b      	beq.n	800967a <USBD_GetConfig+0x46>
 8009662:	e012      	b.n	800968a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3308      	adds	r3, #8
 800966e:	2201      	movs	r2, #1
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f922 	bl	80098bc <USBD_CtlSendData>
      break;
 8009678:	e00c      	b.n	8009694 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	3304      	adds	r3, #4
 800967e:	2201      	movs	r2, #1
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f91a 	bl	80098bc <USBD_CtlSendData>
      break;
 8009688:	e004      	b.n	8009694 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f8aa 	bl	80097e6 <USBD_CtlError>
      break;
 8009692:	bf00      	nop
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096ac:	3b01      	subs	r3, #1
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d81e      	bhi.n	80096f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	88db      	ldrh	r3, [r3, #6]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d004      	beq.n	80096c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f892 	bl	80097e6 <USBD_CtlError>
      break;
 80096c2:	e01a      	b.n	80096fa <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f043 0202 	orr.w	r2, r3, #2
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	330c      	adds	r3, #12
 80096e4:	2202      	movs	r2, #2
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f8e7 	bl	80098bc <USBD_CtlSendData>
    break;
 80096ee:	e004      	b.n	80096fa <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f877 	bl	80097e6 <USBD_CtlError>
    break;
 80096f8:	bf00      	nop
  }
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d106      	bne.n	8009722 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f92b 	bl	8009978 <USBD_CtlSendStatus>
  }

}
 8009722:	bf00      	nop
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800973a:	3b01      	subs	r3, #1
 800973c:	2b02      	cmp	r3, #2
 800973e:	d80b      	bhi.n	8009758 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	885b      	ldrh	r3, [r3, #2]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d10c      	bne.n	8009762 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f911 	bl	8009978 <USBD_CtlSendStatus>
    }
    break;
 8009756:	e004      	b.n	8009762 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f843 	bl	80097e6 <USBD_CtlError>
    break;
 8009760:	e000      	b.n	8009764 <USBD_ClrFeature+0x3a>
    break;
 8009762:	bf00      	nop
  }
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	785a      	ldrb	r2, [r3, #1]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	3302      	adds	r3, #2
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	b29a      	uxth	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	3303      	adds	r3, #3
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	4413      	add	r3, r2
 800979c:	b29a      	uxth	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	3304      	adds	r3, #4
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	3305      	adds	r3, #5
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4413      	add	r3, r2
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	3306      	adds	r3, #6
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	3307      	adds	r3, #7
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	4413      	add	r3, r2
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	80da      	strh	r2, [r3, #6]

}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80097f0:	2180      	movs	r1, #128	; 0x80
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f002 fa04 	bl	800bc00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f002 fa00 	bl	800bc00 <USBD_LL_StallEP>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d032      	beq.n	8009884 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f834 	bl	800988c <USBD_GetLen>
 8009824:	4603      	mov	r3, r0
 8009826:	3301      	adds	r3, #1
 8009828:	b29b      	uxth	r3, r3
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	b29a      	uxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	75fa      	strb	r2, [r7, #23]
 8009838:	461a      	mov	r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	75fa      	strb	r2, [r7, #23]
 800984a:	461a      	mov	r2, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4413      	add	r3, r2
 8009850:	2203      	movs	r2, #3
 8009852:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009854:	e012      	b.n	800987c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	60fa      	str	r2, [r7, #12]
 800985c:	7dfa      	ldrb	r2, [r7, #23]
 800985e:	1c51      	adds	r1, r2, #1
 8009860:	75f9      	strb	r1, [r7, #23]
 8009862:	4611      	mov	r1, r2
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	440a      	add	r2, r1
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	75fa      	strb	r2, [r7, #23]
 8009872:	461a      	mov	r2, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4413      	add	r3, r2
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e8      	bne.n	8009856 <USBD_GetString+0x4e>
    }
  }
}
 8009884:	bf00      	nop
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009898:	e005      	b.n	80098a6 <USBD_GetLen+0x1a>
    {
        len++;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	3301      	adds	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]
        buf++;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3301      	adds	r3, #1
 80098a4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1f5      	bne.n	800989a <USBD_GetLen+0xe>
    }

    return len;
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	4613      	mov	r3, r2
 80098c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2202      	movs	r2, #2
 80098ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80098d2:	88fa      	ldrh	r2, [r7, #6]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	2100      	movs	r1, #0
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f002 fa14 	bl	800bd12 <USBD_LL_Transmit>

  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	2100      	movs	r1, #0
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f002 fa02 	bl	800bd12 <USBD_LL_Transmit>

  return USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2203      	movs	r2, #3
 800992a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800992e:	88fa      	ldrh	r2, [r7, #6]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009936:	88fa      	ldrh	r2, [r7, #6]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	2100      	movs	r1, #0
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f002 fa07 	bl	800bd58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	2100      	movs	r1, #0
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f002 f9f5 	bl	800bd58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2204      	movs	r2, #4
 8009984:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009988:	2300      	movs	r3, #0
 800998a:	2200      	movs	r2, #0
 800998c:	2100      	movs	r1, #0
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f002 f9bf 	bl	800bd12 <USBD_LL_Transmit>

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2205      	movs	r2, #5
 80099aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80099ae:	2300      	movs	r3, #0
 80099b0:	2200      	movs	r2, #0
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f002 f9cf 	bl	800bd58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <DWT_Init>:
  DWT->LAR = 0xC5ACCE55
 */
//#define DWT_DELAY_NEWBIE

void DWT_Init(void)
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80099c8:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <DWT_Init+0x2c>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	4a08      	ldr	r2, [pc, #32]	; (80099f0 <DWT_Init+0x2c>)
 80099ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099d2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80099d4:	4b07      	ldr	r3, [pc, #28]	; (80099f4 <DWT_Init+0x30>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80099da:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <DWT_Init+0x30>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a05      	ldr	r2, [pc, #20]	; (80099f4 <DWT_Init+0x30>)
 80099e0:	f043 0301 	orr.w	r3, r3, #1
 80099e4:	6013      	str	r3, [r2, #0]
    //}
}
 80099e6:	bf00      	nop
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	e000edf0 	.word	0xe000edf0
 80099f4:	e0001000 	.word	0xe0001000

080099f8 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <DWT_Delay+0x40>)
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8009a06:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <DWT_Delay+0x44>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a0d      	ldr	r2, [pc, #52]	; (8009a40 <DWT_Delay+0x48>)
 8009a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a10:	0c9a      	lsrs	r2, r3, #18
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	fb02 f303 	mul.w	r3, r2, r3
 8009a18:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8009a1a:	bf00      	nop
 8009a1c:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <DWT_Delay+0x40>)
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d8f8      	bhi.n	8009a1c <DWT_Delay+0x24>
}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	e0001000 	.word	0xe0001000
 8009a3c:	20000118 	.word	0x20000118
 8009a40:	431bde83 	.word	0x431bde83

08009a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	stdio_setup();
 8009a4e:	f001 f961 	bl	800ad14 <stdio_setup>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009a52:	f7f7 fa29 	bl	8000ea8 <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8009a56:	f7ff ffb5 	bl	80099c4 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009a5a:	f000 fa53 	bl	8009f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009a5e:	f000 fd6f 	bl	800a540 <MX_GPIO_Init>
  MX_DMA_Init();
 8009a62:	f000 fd4d 	bl	800a500 <MX_DMA_Init>
  MX_I2S3_Init();
 8009a66:	f000 fb5d 	bl	800a124 <MX_I2S3_Init>
  MX_USB_DEVICE_Init();
 8009a6a:	f001 fe0b 	bl	800b684 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8009a6e:	f000 fc35 	bl	800a2dc <MX_TIM3_Init>
  MX_TIM4_Init();
 8009a72:	f000 fc81 	bl	800a378 <MX_TIM4_Init>
  MX_TIM2_Init();
 8009a76:	f000 fbbb 	bl	800a1f0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8009a7a:	f000 fac5 	bl	800a008 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8009a7e:	f000 fd15 	bl	800a4ac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8009a82:	f000 fb21 	bl	800a0c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8009a86:	f000 fb7d 	bl	800a184 <MX_SPI1_Init>
  MX_TIM14_Init();
 8009a8a:	f000 fceb 	bl	800a464 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8009a8e:	48b2      	ldr	r0, [pc, #712]	; (8009d58 <main+0x314>)
 8009a90:	f7fc f871 	bl	8005b76 <HAL_TIM_Base_Start>
  initalise_LSM9DS1();
 8009a94:	f000 fe70 	bl	800a778 <initalise_LSM9DS1>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, BUFF*NOM_ADC);
 8009a98:	2202      	movs	r2, #2
 8009a9a:	49b0      	ldr	r1, [pc, #704]	; (8009d5c <main+0x318>)
 8009a9c:	48b0      	ldr	r0, [pc, #704]	; (8009d60 <main+0x31c>)
 8009a9e:	f7f7 fadb 	bl	8001058 <HAL_ADC_Start_DMA>
  FLAG1 = 0;
 8009aa2:	4bb0      	ldr	r3, [pc, #704]	; (8009d64 <main+0x320>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
  	start = HAL_GetTick();
 8009aa8:	f7f7 fa64 	bl	8000f74 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	4bae      	ldr	r3, [pc, #696]	; (8009d68 <main+0x324>)
 8009ab0:	601a      	str	r2, [r3, #0]
  	count = 0;
 8009ab2:	4bae      	ldr	r3, [pc, #696]	; (8009d6c <main+0x328>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
	double Vset;
  	Vset = VEL;
 8009ab8:	f04f 0300 	mov.w	r3, #0
 8009abc:	4cac      	ldr	r4, [pc, #688]	; (8009d70 <main+0x32c>)
 8009abe:	f607 72f8 	addw	r2, r7, #4088	; 0xff8
 8009ac2:	e9c2 3400 	strd	r3, r4, [r2]
  	uint32_t pwm = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
  	uint32_t adaptive = Loop2;		//Counter to time distance loop
 8009acc:	2350      	movs	r3, #80	; 0x50
 8009ace:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
  	double dist = ultrasonic();
 8009ad2:	f001 f831 	bl	800ab38 <ultrasonic>
 8009ad6:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8009ada:	ed83 0b00 	vstr	d0, [r3]
  	uint16_t timcount = LoopFreq;	//Counter to time inner/outer loops
 8009ade:	230a      	movs	r3, #10
 8009ae0:	f8a7 3fe6 	strh.w	r3, [r7, #4070]	; 0xfe6
  	steer_straight();
 8009ae4:	f001 f9ac 	bl	800ae40 <steer_straight>
  	double u3 = VEL;		//Input for Adaptive Cruise Control (cm), should maintain 1s gap at Cruise Control speed
 8009ae8:	f04f 0300 	mov.w	r3, #0
 8009aec:	4ca0      	ldr	r4, [pc, #640]	; (8009d70 <main+0x32c>)
 8009aee:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8009af2:	e9c2 3400 	strd	r3, r4, [r2]
  	double buf1[500];
  	int loop=0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009afc:	f102 0204 	add.w	r2, r2, #4
 8009b00:	6013      	str	r3, [r2, #0]
	char c;
	uint8_t inp[30];
	double direc;
	double cardist = 0;
 8009b02:	f04f 0300 	mov.w	r3, #0
 8009b06:	f04f 0400 	mov.w	r4, #0
 8009b0a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009b0e:	f102 0210 	add.w	r2, r2, #16
 8009b12:	e9c2 3400 	strd	r3, r4, [r2]
	double heading;
	double turn;
	double dist2;
	int k = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009b1c:	f102 020c 	add.w	r2, r2, #12
 8009b20:	6013      	str	r3, [r2, #0]
	int d = 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f8c7 3fd4 	str.w	r3, [r7, #4052]	; 0xfd4

	//steer_right();
	//steer_straight();
	HAL_Delay(100);
 8009b28:	2064      	movs	r0, #100	; 0x64
 8009b2a:	f7f7 fa2f 	bl	8000f8c <HAL_Delay>
	printf("\nSTART\n");
 8009b2e:	4891      	ldr	r0, [pc, #580]	; (8009d74 <main+0x330>)
 8009b30:	f003 fa20 	bl	800cf74 <puts>

	//pwm_setvalue(1, 25);
	steer_straight();
 8009b34:	f001 f984 	bl	800ae40 <steer_straight>
	while (1)
	{
	  c = getchar();
 8009b38:	f002 fc56 	bl	800c3e8 <getchar>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3

		inp[loop] = c;
 8009b42:	f107 0308 	add.w	r3, r7, #8
 8009b46:	3b08      	subs	r3, #8
 8009b48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009b4c:	f102 0204 	add.w	r2, r2, #4
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	4413      	add	r3, r2
 8009b54:	f897 2fd3 	ldrb.w	r2, [r7, #4051]	; 0xfd3
 8009b58:	701a      	strb	r2, [r3, #0]

		if(c == '\0')
 8009b5a:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <main+0x12c>
		{
			loop = -1;
 8009b62:	f04f 33ff 	mov.w	r3, #4294967295
 8009b66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009b6a:	f102 0204 	add.w	r2, r2, #4
 8009b6e:	6013      	str	r3, [r2, #0]
		}


		if(c == '\r')
 8009b70:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 8009b74:	2b0d      	cmp	r3, #13
 8009b76:	d1df      	bne.n	8009b38 <main+0xf4>
		{
			inp[loop] = '\0';
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	3b08      	subs	r3, #8
 8009b7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009b82:	f102 0204 	add.w	r2, r2, #4
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	4413      	add	r3, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	701a      	strb	r2, [r3, #0]
			printf("%d: inp = %s\r\n", loop, inp);
 8009b8e:	f107 0308 	add.w	r3, r7, #8
 8009b92:	3b08      	subs	r3, #8
 8009b94:	461a      	mov	r2, r3
 8009b96:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8009b9a:	f103 0304 	add.w	r3, r3, #4
 8009b9e:	6819      	ldr	r1, [r3, #0]
 8009ba0:	4875      	ldr	r0, [pc, #468]	; (8009d78 <main+0x334>)
 8009ba2:	f003 f973 	bl	800ce8c <iprintf>
			loop = -1;
 8009ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8009baa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009bae:	f102 0204 	add.w	r2, r2, #4
 8009bb2:	6013      	str	r3, [r2, #0]

			break;
 8009bb4:	bf00      	nop
		}
	}

		loop++;
 8009bb6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8009bba:	f103 0304 	add.w	r3, r3, #4
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009bc6:	f102 0204 	add.w	r2, r2, #4
 8009bca:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	while(0)
 8009bcc:	bf00      	nop

	/*Reverse Parallel Park*/

	while(1)
	{
	for (int z = 0; z < 5; z++)
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009bd4:	f102 0208 	add.w	r2, r2, #8
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	e025      	b.n	8009c28 <main+0x1e4>
	{
		mag_get_raw();
 8009bdc:	f000 fe7e 	bl	800a8dc <mag_get_raw>
		direc +=mag_convert_values();
 8009be0:	f000 fe9e 	bl	800a920 <mag_convert_values>
 8009be4:	ec54 3b10 	vmov	r3, r4, d0
 8009be8:	461a      	mov	r2, r3
 8009bea:	4623      	mov	r3, r4
 8009bec:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009bf0:	f101 0118 	add.w	r1, r1, #24
 8009bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009c04:	f102 0218 	add.w	r2, r2, #24
 8009c08:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(200);
 8009c0c:	20c8      	movs	r0, #200	; 0xc8
 8009c0e:	f7f7 f9bd 	bl	8000f8c <HAL_Delay>
	for (int z = 0; z < 5; z++)
 8009c12:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009c16:	f103 0308 	add.w	r3, r3, #8
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009c22:	f102 0208 	add.w	r2, r2, #8
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009c2c:	f103 0308 	add.w	r3, r3, #8
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	ddd2      	ble.n	8009bdc <main+0x198>
	}
	direc = direc/5;
 8009c36:	f04f 0200 	mov.w	r2, #0
 8009c3a:	4b50      	ldr	r3, [pc, #320]	; (8009d7c <main+0x338>)
 8009c3c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009c40:	f101 0118 	add.w	r1, r1, #24
 8009c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c48:	f7f6 fe00 	bl	800084c <__aeabi_ddiv>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009c54:	f102 0218 	add.w	r2, r2, #24
 8009c58:	e9c2 3400 	strd	r3, r4, [r2]
	printf("Direction: %f\n", direc);
 8009c5c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009c60:	f103 0318 	add.w	r3, r3, #24
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	4845      	ldr	r0, [pc, #276]	; (8009d80 <main+0x33c>)
 8009c6a:	f003 f90f 	bl	800ce8c <iprintf>

	for (int z = 0; z < 5; z++)
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009c74:	f102 0204 	add.w	r2, r2, #4
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	e023      	b.n	8009cc4 <main+0x280>
	{
		cardist += ultrasonic2();
 8009c7c:	f000 ffc4 	bl	800ac08 <ultrasonic2>
 8009c80:	ec54 3b10 	vmov	r3, r4, d0
 8009c84:	461a      	mov	r2, r3
 8009c86:	4623      	mov	r3, r4
 8009c88:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009c8c:	f101 0110 	add.w	r1, r1, #16
 8009c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c94:	f7f6 fafa 	bl	800028c <__adddf3>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009ca0:	f102 0210 	add.w	r2, r2, #16
 8009ca4:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(10);
 8009ca8:	200a      	movs	r0, #10
 8009caa:	f7f7 f96f 	bl	8000f8c <HAL_Delay>
	for (int z = 0; z < 5; z++)
 8009cae:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009cb2:	f103 0304 	add.w	r3, r3, #4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009cbe:	f102 0204 	add.w	r2, r2, #4
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009cc8:	f103 0304 	add.w	r3, r3, #4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	ddd4      	ble.n	8009c7c <main+0x238>
	}
	cardist = cardist/5;
 8009cd2:	f04f 0200 	mov.w	r2, #0
 8009cd6:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <main+0x338>)
 8009cd8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009cdc:	f101 0110 	add.w	r1, r1, #16
 8009ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce4:	f7f6 fdb2 	bl	800084c <__aeabi_ddiv>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009cf0:	f102 0210 	add.w	r2, r2, #16
 8009cf4:	e9c2 3400 	strd	r3, r4, [r2]
	printf("Distance from car: %f\n", cardist);
 8009cf8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009cfc:	f103 0310 	add.w	r3, r3, #16
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	481f      	ldr	r0, [pc, #124]	; (8009d84 <main+0x340>)
 8009d06:	f003 f8c1 	bl	800ce8c <iprintf>
	HAL_Delay(500);
 8009d0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d0e:	f7f7 f93d 	bl	8000f8c <HAL_Delay>
	pwm_setvalue(2, 15);
 8009d12:	210f      	movs	r1, #15
 8009d14:	2002      	movs	r0, #2
 8009d16:	f001 f81b 	bl	800ad50 <pwm_setvalue>
	while(1)
	{

		dist2 = ultrasonic2();
 8009d1a:	f000 ff75 	bl	800ac08 <ultrasonic2>
 8009d1e:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8009d22:	ed83 0b00 	vstr	d0, [r3]
		//printf("Distance: %f\n", dist2);
		while (dist2 >= cardist + 10)
 8009d26:	e0c6      	b.n	8009eb6 <main+0x472>
		{
			if(!k)
 8009d28:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009d2c:	f103 030c 	add.w	r3, r3, #12
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d107      	bne.n	8009d46 <main+0x302>
			{
				steer_right();
 8009d36:	f001 f891 	bl	800ae5c <steer_right>
				k = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009d40:	f102 020c 	add.w	r2, r2, #12
 8009d44:	6013      	str	r3, [r2, #0]
			}

			mag_get_raw();
 8009d46:	f000 fdc9 	bl	800a8dc <mag_get_raw>
			heading = mag_convert_values();
 8009d4a:	f000 fde9 	bl	800a920 <mag_convert_values>
 8009d4e:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8009d52:	ed83 0b00 	vstr	d0, [r3]
			//printf("Heading: %f\n", heading);
			while(heading <= direc - 1.5)
 8009d56:	e095      	b.n	8009e84 <main+0x440>
 8009d58:	20000490 	.word	0x20000490
 8009d5c:	200005b4 	.word	0x200005b4
 8009d60:	200004e4 	.word	0x200004e4
 8009d64:	20000534 	.word	0x20000534
 8009d68:	200006c8 	.word	0x200006c8
 8009d6c:	200005bc 	.word	0x200005bc
 8009d70:	40590000 	.word	0x40590000
 8009d74:	0800f1f0 	.word	0x0800f1f0
 8009d78:	0800f1f8 	.word	0x0800f1f8
 8009d7c:	40140000 	.word	0x40140000
 8009d80:	0800f208 	.word	0x0800f208
 8009d84:	0800f218 	.word	0x0800f218
			{
				k = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009d8e:	f102 020c 	add.w	r2, r2, #12
 8009d92:	6013      	str	r3, [r2, #0]
				if(!k)
 8009d94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8009d98:	f103 030c 	add.w	r3, r3, #12
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d107      	bne.n	8009db2 <main+0x36e>
				{
					steer_left();
 8009da2:	f001 f854 	bl	800ae4e <steer_left>
					k = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009dac:	f102 020c 	add.w	r2, r2, #12
 8009db0:	6013      	str	r3, [r2, #0]
				}
				while(1)
				{
					mag_get_raw();
 8009db2:	f000 fd93 	bl	800a8dc <mag_get_raw>
					heading = mag_convert_values();
 8009db6:	f000 fdb3 	bl	800a920 <mag_convert_values>
 8009dba:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8009dbe:	ed83 0b00 	vstr	d0, [r3]
					printf("Heading: %f\n", heading);
 8009dc2:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	4848      	ldr	r0, [pc, #288]	; (8009eec <main+0x4a8>)
 8009dcc:	f003 f85e 	bl	800ce8c <iprintf>
					while (heading >= direc + 5)
 8009dd0:	bf00      	nop
 8009dd2:	f04f 0200 	mov.w	r2, #0
 8009dd6:	4b46      	ldr	r3, [pc, #280]	; (8009ef0 <main+0x4ac>)
 8009dd8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009ddc:	f101 0118 	add.w	r1, r1, #24
 8009de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de4:	f7f6 fa52 	bl	800028c <__adddf3>
 8009de8:	4603      	mov	r3, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	461a      	mov	r2, r3
 8009dee:	4623      	mov	r3, r4
 8009df0:	f507 617c 	add.w	r1, r7, #4032	; 0xfc0
 8009df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df8:	f7f6 fe84 	bl	8000b04 <__aeabi_dcmpge>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0d7      	beq.n	8009db2 <main+0x36e>
					{
						k = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009e08:	f102 020c 	add.w	r2, r2, #12
 8009e0c:	6013      	str	r3, [r2, #0]
						pwm_setvalue(0, 15);
 8009e0e:	210f      	movs	r1, #15
 8009e10:	2000      	movs	r0, #0
 8009e12:	f000 ff9d 	bl	800ad50 <pwm_setvalue>

						steer_straight();
 8009e16:	f001 f813 	bl	800ae40 <steer_straight>
						k = 1;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8009e20:	f102 020c 	add.w	r2, r2, #12
 8009e24:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 8009e26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e2a:	f7f7 f8af 	bl	8000f8c <HAL_Delay>

						while(1)
						{
							dist2 = 0;
 8009e2e:	f04f 0300 	mov.w	r3, #0
 8009e32:	f04f 0400 	mov.w	r4, #0
 8009e36:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 8009e3a:	e9c2 3400 	strd	r3, r4, [r2]
							pwm_setvalue(1, 15);
 8009e3e:	210f      	movs	r1, #15
 8009e40:	2001      	movs	r0, #1
 8009e42:	f000 ff85 	bl	800ad50 <pwm_setvalue>
							dist2 = ultrasonic();
 8009e46:	f000 fe77 	bl	800ab38 <ultrasonic>
 8009e4a:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8009e4e:	ed83 0b00 	vstr	d0, [r3]
							printf("Distance: %f\n", dist2);
 8009e52:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	4826      	ldr	r0, [pc, #152]	; (8009ef4 <main+0x4b0>)
 8009e5c:	f003 f816 	bl	800ce8c <iprintf>
							while (dist2 <= 40)
 8009e60:	e003      	b.n	8009e6a <main+0x426>
							{
								pwm_setvalue(0, 15);
 8009e62:	210f      	movs	r1, #15
 8009e64:	2000      	movs	r0, #0
 8009e66:	f000 ff73 	bl	800ad50 <pwm_setvalue>
							while (dist2 <= 40)
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	4b22      	ldr	r3, [pc, #136]	; (8009ef8 <main+0x4b4>)
 8009e70:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8009e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e78:	f7f6 fe3a 	bl	8000af0 <__aeabi_dcmple>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1ef      	bne.n	8009e62 <main+0x41e>
							dist2 = 0;
 8009e82:	e7d4      	b.n	8009e2e <main+0x3ea>
			while(heading <= direc - 1.5)
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	4b1c      	ldr	r3, [pc, #112]	; (8009efc <main+0x4b8>)
 8009e8a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009e8e:	f101 0118 	add.w	r1, r1, #24
 8009e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e96:	f7f6 f9f7 	bl	8000288 <__aeabi_dsub>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	f507 617c 	add.w	r1, r7, #4032	; 0xfc0
 8009ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eaa:	f7f6 fe21 	bl	8000af0 <__aeabi_dcmple>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f47f af69 	bne.w	8009d88 <main+0x344>
		while (dist2 >= cardist + 10)
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <main+0x4bc>)
 8009ebc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8009ec0:	f101 0110 	add.w	r1, r1, #16
 8009ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ec8:	f7f6 f9e0 	bl	800028c <__adddf3>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4623      	mov	r3, r4
 8009ed4:	f607 71c8 	addw	r1, r7, #4040	; 0xfc8
 8009ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009edc:	f7f6 fe12 	bl	8000b04 <__aeabi_dcmpge>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f47f af20 	bne.w	8009d28 <main+0x2e4>
		dist2 = ultrasonic2();
 8009ee8:	e717      	b.n	8009d1a <main+0x2d6>
 8009eea:	bf00      	nop
 8009eec:	0800f230 	.word	0x0800f230
 8009ef0:	40140000 	.word	0x40140000
 8009ef4:	0800f240 	.word	0x0800f240
 8009ef8:	40440000 	.word	0x40440000
 8009efc:	3ff80000 	.word	0x3ff80000
 8009f00:	40240000 	.word	0x40240000

08009f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b098      	sub	sp, #96	; 0x60
 8009f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f0e:	2230      	movs	r2, #48	; 0x30
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f002 faae 	bl	800c474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f18:	f107 031c 	add.w	r3, r7, #28
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	609a      	str	r2, [r3, #8]
 8009f24:	60da      	str	r2, [r3, #12]
 8009f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f28:	f107 030c 	add.w	r3, r7, #12
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	609a      	str	r2, [r3, #8]
 8009f34:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f36:	2300      	movs	r3, #0
 8009f38:	60bb      	str	r3, [r7, #8]
 8009f3a:	4b31      	ldr	r3, [pc, #196]	; (800a000 <SystemClock_Config+0xfc>)
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	4a30      	ldr	r2, [pc, #192]	; (800a000 <SystemClock_Config+0xfc>)
 8009f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f44:	6413      	str	r3, [r2, #64]	; 0x40
 8009f46:	4b2e      	ldr	r3, [pc, #184]	; (800a000 <SystemClock_Config+0xfc>)
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f4e:	60bb      	str	r3, [r7, #8]
 8009f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f52:	2300      	movs	r3, #0
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <SystemClock_Config+0x100>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a2a      	ldr	r2, [pc, #168]	; (800a004 <SystemClock_Config+0x100>)
 8009f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	4b28      	ldr	r3, [pc, #160]	; (800a004 <SystemClock_Config+0x100>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009f7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009f82:	2308      	movs	r3, #8
 8009f84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009f86:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8009f8a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009f90:	2307      	movs	r3, #7
 8009f92:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fa ffef 	bl	8004f7c <HAL_RCC_OscConfig>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8009fa4:	f000 ff86 	bl	800aeb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009fa8:	230f      	movs	r3, #15
 8009faa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009fac:	2302      	movs	r3, #2
 8009fae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009fb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009fc0:	f107 031c 	add.w	r3, r7, #28
 8009fc4:	2105      	movs	r1, #5
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fb fa1a 	bl	8005400 <HAL_RCC_ClockConfig>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8009fd2:	f000 ff6f 	bl	800aeb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8009fda:	23c0      	movs	r3, #192	; 0xc0
 8009fdc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fe2:	f107 030c 	add.w	r3, r7, #12
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fb fbf8 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009ff2:	f000 ff5f 	bl	800aeb4 <Error_Handler>
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	3760      	adds	r7, #96	; 0x60
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	40023800 	.word	0x40023800
 800a004:	40007000 	.word	0x40007000

0800a008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a00e:	463b      	mov	r3, r7
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	605a      	str	r2, [r3, #4]
 800a016:	609a      	str	r2, [r3, #8]
 800a018:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a01a:	4b29      	ldr	r3, [pc, #164]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a01c:	4a29      	ldr	r2, [pc, #164]	; (800a0c4 <MX_ADC1_Init+0xbc>)
 800a01e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a020:	4b27      	ldr	r3, [pc, #156]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a026:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a028:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a02e:	4b24      	ldr	r3, [pc, #144]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a030:	2201      	movs	r2, #1
 800a032:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a034:	4b22      	ldr	r3, [pc, #136]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a036:	2200      	movs	r2, #0
 800a038:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a03a:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a042:	4b1f      	ldr	r3, [pc, #124]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800a04a:	4b1d      	ldr	r3, [pc, #116]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a04c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a052:	4b1b      	ldr	r3, [pc, #108]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a054:	2200      	movs	r2, #0
 800a056:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800a058:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a05a:	2202      	movs	r2, #2
 800a05c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a05e:	4b18      	ldr	r3, [pc, #96]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a066:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a068:	2201      	movs	r2, #1
 800a06a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a06c:	4814      	ldr	r0, [pc, #80]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a06e:	f7f6 ffaf 	bl	8000fd0 <HAL_ADC_Init>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800a078:	f000 ff1c 	bl	800aeb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a07c:	2301      	movs	r3, #1
 800a07e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a080:	2301      	movs	r3, #1
 800a082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800a084:	2305      	movs	r3, #5
 800a086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a088:	463b      	mov	r3, r7
 800a08a:	4619      	mov	r1, r3
 800a08c:	480c      	ldr	r0, [pc, #48]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a08e:	f7f7 f8e9 	bl	8001264 <HAL_ADC_ConfigChannel>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800a098:	f000 ff0c 	bl	800aeb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a09c:	2302      	movs	r3, #2
 800a09e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a0a4:	463b      	mov	r3, r7
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <MX_ADC1_Init+0xb8>)
 800a0aa:	f7f7 f8db 	bl	8001264 <HAL_ADC_ConfigChannel>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800a0b4:	f000 fefe 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a0b8:	bf00      	nop
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	200004e4 	.word	0x200004e4
 800a0c4:	40012000 	.word	0x40012000

0800a0c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a0cc:	4b12      	ldr	r3, [pc, #72]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <MX_I2C1_Init+0x54>)
 800a0d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a0d2:	4b11      	ldr	r3, [pc, #68]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0d4:	4a12      	ldr	r2, [pc, #72]	; (800a120 <MX_I2C1_Init+0x58>)
 800a0d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a0d8:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a0de:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a0f8:	4b07      	ldr	r3, [pc, #28]	; (800a118 <MX_I2C1_Init+0x50>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a0fe:	4b06      	ldr	r3, [pc, #24]	; (800a118 <MX_I2C1_Init+0x50>)
 800a100:	2200      	movs	r2, #0
 800a102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a104:	4804      	ldr	r0, [pc, #16]	; (800a118 <MX_I2C1_Init+0x50>)
 800a106:	f7f8 f9b9 	bl	800247c <HAL_I2C_Init>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a110:	f000 fed0 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a114:	bf00      	nop
 800a116:	bd80      	pop	{r7, pc}
 800a118:	2000042c 	.word	0x2000042c
 800a11c:	40005400 	.word	0x40005400
 800a120:	000186a0 	.word	0x000186a0

0800a124 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800a128:	4b13      	ldr	r3, [pc, #76]	; (800a178 <MX_I2S3_Init+0x54>)
 800a12a:	4a14      	ldr	r2, [pc, #80]	; (800a17c <MX_I2S3_Init+0x58>)
 800a12c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800a12e:	4b12      	ldr	r3, [pc, #72]	; (800a178 <MX_I2S3_Init+0x54>)
 800a130:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a134:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800a136:	4b10      	ldr	r3, [pc, #64]	; (800a178 <MX_I2S3_Init+0x54>)
 800a138:	2200      	movs	r2, #0
 800a13a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800a13c:	4b0e      	ldr	r3, [pc, #56]	; (800a178 <MX_I2S3_Init+0x54>)
 800a13e:	2200      	movs	r2, #0
 800a140:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <MX_I2S3_Init+0x54>)
 800a144:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a148:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <MX_I2S3_Init+0x54>)
 800a14c:	4a0c      	ldr	r2, [pc, #48]	; (800a180 <MX_I2S3_Init+0x5c>)
 800a14e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800a150:	4b09      	ldr	r3, [pc, #36]	; (800a178 <MX_I2S3_Init+0x54>)
 800a152:	2200      	movs	r2, #0
 800a154:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800a156:	4b08      	ldr	r3, [pc, #32]	; (800a178 <MX_I2S3_Init+0x54>)
 800a158:	2200      	movs	r2, #0
 800a15a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <MX_I2S3_Init+0x54>)
 800a15e:	2200      	movs	r2, #0
 800a160:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800a162:	4805      	ldr	r0, [pc, #20]	; (800a178 <MX_I2S3_Init+0x54>)
 800a164:	f7f9 f8e0 	bl	8003328 <HAL_I2S_Init>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800a16e:	f000 fea1 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800a172:	bf00      	nop
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	200006e4 	.word	0x200006e4
 800a17c:	40003c00 	.word	0x40003c00
 800a180:	00017700 	.word	0x00017700

0800a184 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a188:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a18a:	4a18      	ldr	r2, [pc, #96]	; (800a1ec <MX_SPI1_Init+0x68>)
 800a18c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a18e:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a190:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a196:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a198:	2200      	movs	r2, #0
 800a19a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a19c:	4b12      	ldr	r3, [pc, #72]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1a2:	4b11      	ldr	r3, [pc, #68]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a1a8:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a1ae:	4b0e      	ldr	r3, [pc, #56]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1b8:	2218      	movs	r2, #24
 800a1ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a1bc:	4b0a      	ldr	r3, [pc, #40]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1c8:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a1ce:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a1d4:	4804      	ldr	r0, [pc, #16]	; (800a1e8 <MX_SPI1_Init+0x64>)
 800a1d6:	f7fb fc3f 	bl	8005a58 <HAL_SPI_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a1e0:	f000 fe68 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a1e4:	bf00      	nop
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	200005dc 	.word	0x200005dc
 800a1ec:	40013000 	.word	0x40013000

0800a1f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	; 0x38
 800a1f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	609a      	str	r2, [r3, #8]
 800a202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a204:	f107 0320 	add.w	r3, r7, #32
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a20e:	1d3b      	adds	r3, r7, #4
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	605a      	str	r2, [r3, #4]
 800a216:	609a      	str	r2, [r3, #8]
 800a218:	60da      	str	r2, [r3, #12]
 800a21a:	611a      	str	r2, [r3, #16]
 800a21c:	615a      	str	r2, [r3, #20]
 800a21e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a220:	4b2d      	ldr	r3, [pc, #180]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 540;
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a22a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a22e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a230:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a232:	2200      	movs	r2, #0
 800a234:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800a236:	4b28      	ldr	r3, [pc, #160]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a238:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800a23c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a23e:	4b26      	ldr	r3, [pc, #152]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a240:	2200      	movs	r2, #0
 800a242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a244:	4b24      	ldr	r3, [pc, #144]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a246:	2200      	movs	r2, #0
 800a248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a24a:	4823      	ldr	r0, [pc, #140]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a24c:	f7fb fc68 	bl	8005b20 <HAL_TIM_Base_Init>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800a256:	f000 fe2d 	bl	800aeb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a25a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a264:	4619      	mov	r1, r3
 800a266:	481c      	ldr	r0, [pc, #112]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a268:	f7fb fde2 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800a272:	f000 fe1f 	bl	800aeb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a276:	4818      	ldr	r0, [pc, #96]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a278:	f7fb fca1 	bl	8005bbe <HAL_TIM_PWM_Init>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800a282:	f000 fe17 	bl	800aeb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a286:	2300      	movs	r3, #0
 800a288:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a28e:	f107 0320 	add.w	r3, r7, #32
 800a292:	4619      	mov	r1, r3
 800a294:	4810      	ldr	r0, [pc, #64]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a296:	f7fc f992 	bl	80065be <HAL_TIMEx_MasterConfigSynchronization>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800a2a0:	f000 fe08 	bl	800aeb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2a4:	2360      	movs	r3, #96	; 0x60
 800a2a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 234;
 800a2a8:	23ea      	movs	r3, #234	; 0xea
 800a2aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a2b4:	1d3b      	adds	r3, r7, #4
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4807      	ldr	r0, [pc, #28]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a2bc:	f7fb fcf2 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800a2c6:	f000 fdf5 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a2ca:	4803      	ldr	r0, [pc, #12]	; (800a2d8 <MX_TIM2_Init+0xe8>)
 800a2cc:	f000 fff4 	bl	800b2b8 <HAL_TIM_MspPostInit>

}
 800a2d0:	bf00      	nop
 800a2d2:	3738      	adds	r7, #56	; 0x38
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20000634 	.word	0x20000634

0800a2dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2e2:	f107 0308 	add.w	r3, r7, #8
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	605a      	str	r2, [r3, #4]
 800a2ec:	609a      	str	r2, [r3, #8]
 800a2ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2f0:	463b      	mov	r3, r7
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a2f8:	4b1d      	ldr	r3, [pc, #116]	; (800a370 <MX_TIM3_Init+0x94>)
 800a2fa:	4a1e      	ldr	r2, [pc, #120]	; (800a374 <MX_TIM3_Init+0x98>)
 800a2fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 800a2fe:	4b1c      	ldr	r3, [pc, #112]	; (800a370 <MX_TIM3_Init+0x94>)
 800a300:	f44f 7252 	mov.w	r2, #840	; 0x348
 800a304:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a306:	4b1a      	ldr	r3, [pc, #104]	; (800a370 <MX_TIM3_Init+0x94>)
 800a308:	2200      	movs	r2, #0
 800a30a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800a30c:	4b18      	ldr	r3, [pc, #96]	; (800a370 <MX_TIM3_Init+0x94>)
 800a30e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a314:	4b16      	ldr	r3, [pc, #88]	; (800a370 <MX_TIM3_Init+0x94>)
 800a316:	2200      	movs	r2, #0
 800a318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a31a:	4b15      	ldr	r3, [pc, #84]	; (800a370 <MX_TIM3_Init+0x94>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a320:	4813      	ldr	r0, [pc, #76]	; (800a370 <MX_TIM3_Init+0x94>)
 800a322:	f7fb fbfd 	bl	8005b20 <HAL_TIM_Base_Init>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800a32c:	f000 fdc2 	bl	800aeb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a336:	f107 0308 	add.w	r3, r7, #8
 800a33a:	4619      	mov	r1, r3
 800a33c:	480c      	ldr	r0, [pc, #48]	; (800a370 <MX_TIM3_Init+0x94>)
 800a33e:	f7fb fd77 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800a348:	f000 fdb4 	bl	800aeb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a34c:	2320      	movs	r3, #32
 800a34e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a350:	2300      	movs	r3, #0
 800a352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a354:	463b      	mov	r3, r7
 800a356:	4619      	mov	r1, r3
 800a358:	4805      	ldr	r0, [pc, #20]	; (800a370 <MX_TIM3_Init+0x94>)
 800a35a:	f7fc f930 	bl	80065be <HAL_TIMEx_MasterConfigSynchronization>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800a364:	f000 fda6 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a368:	bf00      	nop
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20000490 	.word	0x20000490
 800a374:	40000400 	.word	0x40000400

0800a378 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08e      	sub	sp, #56	; 0x38
 800a37c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a37e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	605a      	str	r2, [r3, #4]
 800a388:	609a      	str	r2, [r3, #8]
 800a38a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a38c:	f107 0320 	add.w	r3, r7, #32
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a396:	1d3b      	adds	r3, r7, #4
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	605a      	str	r2, [r3, #4]
 800a39e:	609a      	str	r2, [r3, #8]
 800a3a0:	60da      	str	r2, [r3, #12]
 800a3a2:	611a      	str	r2, [r3, #16]
 800a3a4:	615a      	str	r2, [r3, #20]
 800a3a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a3a8:	4b2c      	ldr	r3, [pc, #176]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3aa:	4a2d      	ldr	r2, [pc, #180]	; (800a460 <MX_TIM4_Init+0xe8>)
 800a3ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 800a3ae:	4b2b      	ldr	r3, [pc, #172]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3b0:	22a7      	movs	r2, #167	; 0xa7
 800a3b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3b4:	4b29      	ldr	r3, [pc, #164]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800a3ba:	4b28      	ldr	r3, [pc, #160]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3bc:	2263      	movs	r2, #99	; 0x63
 800a3be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3c0:	4b26      	ldr	r3, [pc, #152]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3c6:	4b25      	ldr	r3, [pc, #148]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a3cc:	4823      	ldr	r0, [pc, #140]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3ce:	f7fb fba7 	bl	8005b20 <HAL_TIM_Base_Init>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800a3d8:	f000 fd6c 	bl	800aeb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a3e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	481c      	ldr	r0, [pc, #112]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3ea:	f7fb fd21 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800a3f4:	f000 fd5e 	bl	800aeb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800a3f8:	4818      	ldr	r0, [pc, #96]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a3fa:	f7fb fbe0 	bl	8005bbe <HAL_TIM_PWM_Init>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800a404:	f000 fd56 	bl	800aeb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a408:	2300      	movs	r3, #0
 800a40a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a410:	f107 0320 	add.w	r3, r7, #32
 800a414:	4619      	mov	r1, r3
 800a416:	4811      	ldr	r0, [pc, #68]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a418:	f7fc f8d1 	bl	80065be <HAL_TIMEx_MasterConfigSynchronization>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800a422:	f000 fd47 	bl	800aeb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a426:	2360      	movs	r3, #96	; 0x60
 800a428:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a436:	1d3b      	adds	r3, r7, #4
 800a438:	2200      	movs	r2, #0
 800a43a:	4619      	mov	r1, r3
 800a43c:	4807      	ldr	r0, [pc, #28]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a43e:	f7fb fc31 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800a448:	f000 fd34 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800a44c:	4803      	ldr	r0, [pc, #12]	; (800a45c <MX_TIM4_Init+0xe4>)
 800a44e:	f000 ff33 	bl	800b2b8 <HAL_TIM_MspPostInit>

}
 800a452:	bf00      	nop
 800a454:	3738      	adds	r7, #56	; 0x38
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	200003a8 	.word	0x200003a8
 800a460:	40000800 	.word	0x40000800

0800a464 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800a468:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a46a:	4a0f      	ldr	r2, [pc, #60]	; (800a4a8 <MX_TIM14_Init+0x44>)
 800a46c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84;
 800a46e:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a470:	2254      	movs	r2, #84	; 0x54
 800a472:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a476:	2200      	movs	r2, #0
 800a478:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800a47a:	4b0a      	ldr	r3, [pc, #40]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a47c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a480:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a482:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a484:	2200      	movs	r2, #0
 800a486:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a488:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a48a:	2280      	movs	r2, #128	; 0x80
 800a48c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800a48e:	4805      	ldr	r0, [pc, #20]	; (800a4a4 <MX_TIM14_Init+0x40>)
 800a490:	f7fb fb46 	bl	8005b20 <HAL_TIM_Base_Init>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800a49a:	f000 fd0b 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800a49e:	bf00      	nop
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000688 	.word	0x20000688
 800a4a8:	40002000 	.word	0x40002000

0800a4ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a4b0:	4b11      	ldr	r3, [pc, #68]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4b2:	4a12      	ldr	r2, [pc, #72]	; (800a4fc <MX_USART3_UART_Init+0x50>)
 800a4b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a4b6:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a4bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a4be:	4b0e      	ldr	r3, [pc, #56]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a4d0:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4d2:	220c      	movs	r2, #12
 800a4d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4d6:	4b08      	ldr	r3, [pc, #32]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4dc:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a4e2:	4805      	ldr	r0, [pc, #20]	; (800a4f8 <MX_USART3_UART_Init+0x4c>)
 800a4e4:	f7fc f8b0 	bl	8006648 <HAL_UART_Init>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a4ee:	f000 fce1 	bl	800aeb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a4f2:	bf00      	nop
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	200003e8 	.word	0x200003e8
 800a4fc:	40004800 	.word	0x40004800

0800a500 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a506:	2300      	movs	r3, #0
 800a508:	607b      	str	r3, [r7, #4]
 800a50a:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <MX_DMA_Init+0x3c>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	4a0b      	ldr	r2, [pc, #44]	; (800a53c <MX_DMA_Init+0x3c>)
 800a510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a514:	6313      	str	r3, [r2, #48]	; 0x30
 800a516:	4b09      	ldr	r3, [pc, #36]	; (800a53c <MX_DMA_Init+0x3c>)
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a51e:	607b      	str	r3, [r7, #4]
 800a520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a522:	2200      	movs	r2, #0
 800a524:	2100      	movs	r1, #0
 800a526:	2038      	movs	r0, #56	; 0x38
 800a528:	f7f7 fa17 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a52c:	2038      	movs	r0, #56	; 0x38
 800a52e:	f7f7 fa30 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	40023800 	.word	0x40023800

0800a540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08c      	sub	sp, #48	; 0x30
 800a544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a546:	f107 031c 	add.w	r3, r7, #28
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	605a      	str	r2, [r3, #4]
 800a550:	609a      	str	r2, [r3, #8]
 800a552:	60da      	str	r2, [r3, #12]
 800a554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a556:	2300      	movs	r3, #0
 800a558:	61bb      	str	r3, [r7, #24]
 800a55a:	4b7f      	ldr	r3, [pc, #508]	; (800a758 <MX_GPIO_Init+0x218>)
 800a55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55e:	4a7e      	ldr	r2, [pc, #504]	; (800a758 <MX_GPIO_Init+0x218>)
 800a560:	f043 0310 	orr.w	r3, r3, #16
 800a564:	6313      	str	r3, [r2, #48]	; 0x30
 800a566:	4b7c      	ldr	r3, [pc, #496]	; (800a758 <MX_GPIO_Init+0x218>)
 800a568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56a:	f003 0310 	and.w	r3, r3, #16
 800a56e:	61bb      	str	r3, [r7, #24]
 800a570:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	4b78      	ldr	r3, [pc, #480]	; (800a758 <MX_GPIO_Init+0x218>)
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	4a77      	ldr	r2, [pc, #476]	; (800a758 <MX_GPIO_Init+0x218>)
 800a57c:	f043 0304 	orr.w	r3, r3, #4
 800a580:	6313      	str	r3, [r2, #48]	; 0x30
 800a582:	4b75      	ldr	r3, [pc, #468]	; (800a758 <MX_GPIO_Init+0x218>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a58e:	2300      	movs	r3, #0
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	4b71      	ldr	r3, [pc, #452]	; (800a758 <MX_GPIO_Init+0x218>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	4a70      	ldr	r2, [pc, #448]	; (800a758 <MX_GPIO_Init+0x218>)
 800a598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59c:	6313      	str	r3, [r2, #48]	; 0x30
 800a59e:	4b6e      	ldr	r3, [pc, #440]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	613b      	str	r3, [r7, #16]
 800a5a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	4b6a      	ldr	r3, [pc, #424]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b2:	4a69      	ldr	r2, [pc, #420]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5b4:	f043 0301 	orr.w	r3, r3, #1
 800a5b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ba:	4b67      	ldr	r3, [pc, #412]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
 800a5ca:	4b63      	ldr	r3, [pc, #396]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	4a62      	ldr	r2, [pc, #392]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5d0:	f043 0302 	orr.w	r3, r3, #2
 800a5d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5d6:	4b60      	ldr	r3, [pc, #384]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	60bb      	str	r3, [r7, #8]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	607b      	str	r3, [r7, #4]
 800a5e6:	4b5c      	ldr	r3, [pc, #368]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ea:	4a5b      	ldr	r2, [pc, #364]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5ec:	f043 0308 	orr.w	r3, r3, #8
 800a5f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5f2:	4b59      	ldr	r3, [pc, #356]	; (800a758 <MX_GPIO_Init+0x218>)
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f6:	f003 0308 	and.w	r3, r3, #8
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a5fe:	2200      	movs	r2, #0
 800a600:	2108      	movs	r1, #8
 800a602:	4856      	ldr	r0, [pc, #344]	; (800a75c <MX_GPIO_Init+0x21c>)
 800a604:	f7f7 ff08 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a608:	2201      	movs	r2, #1
 800a60a:	2101      	movs	r1, #1
 800a60c:	4854      	ldr	r0, [pc, #336]	; (800a760 <MX_GPIO_Init+0x220>)
 800a60e:	f7f7 ff03 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, INA_Pin|INB_Pin|TRIG2_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800a612:	2200      	movs	r2, #0
 800a614:	f246 0114 	movw	r1, #24596	; 0x6014
 800a618:	4852      	ldr	r0, [pc, #328]	; (800a764 <MX_GPIO_Init+0x224>)
 800a61a:	f7f7 fefd 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_RESET);
 800a61e:	2200      	movs	r2, #0
 800a620:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a624:	484e      	ldr	r0, [pc, #312]	; (800a760 <MX_GPIO_Init+0x220>)
 800a626:	f7f7 fef7 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a62a:	2308      	movs	r3, #8
 800a62c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a62e:	2301      	movs	r3, #1
 800a630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a632:	2300      	movs	r3, #0
 800a634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a636:	2300      	movs	r3, #0
 800a638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a63a:	f107 031c 	add.w	r3, r7, #28
 800a63e:	4619      	mov	r1, r3
 800a640:	4846      	ldr	r0, [pc, #280]	; (800a75c <MX_GPIO_Init+0x21c>)
 800a642:	f7f7 fd37 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin TRIGL_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|TRIGL_Pin;
 800a646:	f240 2301 	movw	r3, #513	; 0x201
 800a64a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a64c:	2301      	movs	r3, #1
 800a64e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a654:	2300      	movs	r3, #0
 800a656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a658:	f107 031c 	add.w	r3, r7, #28
 800a65c:	4619      	mov	r1, r3
 800a65e:	4840      	ldr	r0, [pc, #256]	; (800a760 <MX_GPIO_Init+0x220>)
 800a660:	f7f7 fd28 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a664:	2308      	movs	r3, #8
 800a666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a668:	2302      	movs	r3, #2
 800a66a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a670:	2300      	movs	r3, #0
 800a672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a674:	2305      	movs	r3, #5
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a678:	f107 031c 	add.w	r3, r7, #28
 800a67c:	4619      	mov	r1, r3
 800a67e:	4838      	ldr	r0, [pc, #224]	; (800a760 <MX_GPIO_Init+0x220>)
 800a680:	f7f7 fd18 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a684:	2301      	movs	r3, #1
 800a686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a688:	4b37      	ldr	r3, [pc, #220]	; (800a768 <MX_GPIO_Init+0x228>)
 800a68a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a690:	f107 031c 	add.w	r3, r7, #28
 800a694:	4619      	mov	r1, r3
 800a696:	4835      	ldr	r0, [pc, #212]	; (800a76c <MX_GPIO_Init+0x22c>)
 800a698:	f7f7 fd0c 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a69c:	2304      	movs	r3, #4
 800a69e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a6a8:	f107 031c 	add.w	r3, r7, #28
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4830      	ldr	r0, [pc, #192]	; (800a770 <MX_GPIO_Init+0x230>)
 800a6b0:	f7f7 fd00 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a6c6:	2305      	movs	r3, #5
 800a6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800a6ca:	f107 031c 	add.w	r3, r7, #28
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4827      	ldr	r0, [pc, #156]	; (800a770 <MX_GPIO_Init+0x230>)
 800a6d2:	f7f7 fcef 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA_Pin INB_Pin TRIG2_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = INA_Pin|INB_Pin|TRIG2_Pin|Audio_RST_Pin;
 800a6d6:	f246 0314 	movw	r3, #24596	; 0x6014
 800a6da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6e8:	f107 031c 	add.w	r3, r7, #28
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	481d      	ldr	r0, [pc, #116]	; (800a764 <MX_GPIO_Init+0x224>)
 800a6f0:	f7f7 fce0 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_left_Pin ECHO2_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = A0_left_Pin|ECHO2_Pin|OTG_FS_OverCurrent_Pin;
 800a6f4:	f248 0322 	movw	r3, #32802	; 0x8022
 800a6f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a702:	f107 031c 	add.w	r3, r7, #28
 800a706:	4619      	mov	r1, r3
 800a708:	4816      	ldr	r0, [pc, #88]	; (800a764 <MX_GPIO_Init+0x224>)
 800a70a:	f7f7 fcd3 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_right_Pin ECHOL_Pin */
  GPIO_InitStruct.Pin = A0_right_Pin|ECHOL_Pin;
 800a70e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a714:	2300      	movs	r3, #0
 800a716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a71c:	f107 031c 	add.w	r3, r7, #28
 800a720:	4619      	mov	r1, r3
 800a722:	480f      	ldr	r0, [pc, #60]	; (800a760 <MX_GPIO_Init+0x220>)
 800a724:	f7f7 fcc6 	bl	80020b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800a728:	2302      	movs	r3, #2
 800a72a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a72c:	4b11      	ldr	r3, [pc, #68]	; (800a774 <MX_GPIO_Init+0x234>)
 800a72e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a730:	2300      	movs	r3, #0
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800a734:	f107 031c 	add.w	r3, r7, #28
 800a738:	4619      	mov	r1, r3
 800a73a:	4808      	ldr	r0, [pc, #32]	; (800a75c <MX_GPIO_Init+0x21c>)
 800a73c:	f7f7 fcba 	bl	80020b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	2006      	movs	r0, #6
 800a746:	f7f7 f908 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a74a:	2006      	movs	r0, #6
 800a74c:	f7f7 f921 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 800a750:	bf00      	nop
 800a752:	3730      	adds	r7, #48	; 0x30
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	40023800 	.word	0x40023800
 800a75c:	40021000 	.word	0x40021000
 800a760:	40020800 	.word	0x40020800
 800a764:	40020c00 	.word	0x40020c00
 800a768:	10110000 	.word	0x10110000
 800a76c:	40020000 	.word	0x40020000
 800a770:	40020400 	.word	0x40020400
 800a774:	10120000 	.word	0x10120000

0800a778 <initalise_LSM9DS1>:

/* USER CODE BEGIN 4 */

void initalise_LSM9DS1(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af02      	add	r7, sp, #8


	*/

	// Setup Angular rate sensor Control Register 1
	i2cBuf[0] = CTRL_REG1_G;
 800a77e:	4b53      	ldr	r3, [pc, #332]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a780:	2210      	movs	r2, #16
 800a782:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG1_G_VALUE;
 800a784:	4b51      	ldr	r3, [pc, #324]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a786:	22ab      	movs	r2, #171	; 0xab
 800a788:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 800a78a:	230a      	movs	r3, #10
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	2302      	movs	r3, #2
 800a790:	4a4e      	ldr	r2, [pc, #312]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a792:	21d6      	movs	r1, #214	; 0xd6
 800a794:	484e      	ldr	r0, [pc, #312]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a796:	f7f7 ff99 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Angular rate sensor Control Register 3
	i2cBuf[0] = CTRL_REG3_G;
 800a79a:	4b4c      	ldr	r3, [pc, #304]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a79c:	2212      	movs	r2, #18
 800a79e:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG3_G_VALUE;
 800a7a0:	4b4a      	ldr	r3, [pc, #296]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7a2:	2240      	movs	r2, #64	; 0x40
 800a7a4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 800a7a6:	230a      	movs	r3, #10
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	4a47      	ldr	r2, [pc, #284]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7ae:	21d6      	movs	r1, #214	; 0xd6
 800a7b0:	4847      	ldr	r0, [pc, #284]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a7b2:	f7f7 ff8b 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Linear acceleration sensor Control Register 6
	i2cBuf[0] = CTRL_REG6_XL;
 800a7b6:	4b45      	ldr	r3, [pc, #276]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG6_XL_VALUE;
 800a7bc:	4b43      	ldr	r3, [pc, #268]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7be:	22b0      	movs	r2, #176	; 0xb0
 800a7c0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 800a7c2:	230a      	movs	r3, #10
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	4a40      	ldr	r2, [pc, #256]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7ca:	21d6      	movs	r1, #214	; 0xd6
 800a7cc:	4840      	ldr	r0, [pc, #256]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a7ce:	f7f7 ff7d 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Linear acceleration sensor Control Register 7
	i2cBuf[0] = CTRL_REG7_XL;
 800a7d2:	4b3e      	ldr	r3, [pc, #248]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7d4:	2221      	movs	r2, #33	; 0x21
 800a7d6:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG7_XL_VALUE;
 800a7d8:	4b3c      	ldr	r3, [pc, #240]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7da:	22e0      	movs	r2, #224	; 0xe0
 800a7dc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Acc_write_address, i2cBuf, 2, 10);
 800a7de:	230a      	movs	r3, #10
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	4a39      	ldr	r2, [pc, #228]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7e6:	21d6      	movs	r1, #214	; 0xd6
 800a7e8:	4839      	ldr	r0, [pc, #228]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a7ea:	f7f7 ff6f 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Magnetometer register 1
	i2cBuf[0] = CTRL_REG1_M;
 800a7ee:	4b37      	ldr	r3, [pc, #220]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG1_M_VALUE;
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a7f6:	22d0      	movs	r2, #208	; 0xd0
 800a7f8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a7fa:	230a      	movs	r3, #10
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2302      	movs	r3, #2
 800a800:	4a32      	ldr	r2, [pc, #200]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a802:	213c      	movs	r1, #60	; 0x3c
 800a804:	4832      	ldr	r0, [pc, #200]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a806:	f7f7 ff61 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Magnetometer register 2
	i2cBuf[0] = CTRL_REG2_M;
 800a80a:	4b30      	ldr	r3, [pc, #192]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a80c:	2221      	movs	r2, #33	; 0x21
 800a80e:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG2_M_VALUE;
 800a810:	4b2e      	ldr	r3, [pc, #184]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a812:	2200      	movs	r2, #0
 800a814:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a816:	230a      	movs	r3, #10
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	2302      	movs	r3, #2
 800a81c:	4a2b      	ldr	r2, [pc, #172]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a81e:	213c      	movs	r1, #60	; 0x3c
 800a820:	482b      	ldr	r0, [pc, #172]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a822:	f7f7 ff53 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Setup Magnetometer register 3
	i2cBuf[0] = CTRL_REG3_M;
 800a826:	4b29      	ldr	r3, [pc, #164]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a828:	2222      	movs	r2, #34	; 0x22
 800a82a:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = CTRL_REG3_M_Value;
 800a82c:	4b27      	ldr	r3, [pc, #156]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a82e:	2200      	movs	r2, #0
 800a830:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a832:	230a      	movs	r3, #10
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	2302      	movs	r3, #2
 800a838:	4a24      	ldr	r2, [pc, #144]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a83a:	213c      	movs	r1, #60	; 0x3c
 800a83c:	4824      	ldr	r0, [pc, #144]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a83e:	f7f7 ff45 	bl	80026cc <HAL_I2C_Master_Transmit>

	// lower y offset register
	i2cBuf[0] = 0x07;
 800a842:	4b22      	ldr	r3, [pc, #136]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a844:	2207      	movs	r2, #7
 800a846:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x00;	//S ?
 800a848:	4b20      	ldr	r3, [pc, #128]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a84e:	230a      	movs	r3, #10
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	2302      	movs	r3, #2
 800a854:	4a1d      	ldr	r2, [pc, #116]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a856:	213c      	movs	r1, #60	; 0x3c
 800a858:	481d      	ldr	r0, [pc, #116]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a85a:	f7f7 ff37 	bl	80026cc <HAL_I2C_Master_Transmit>

	// High y offset register
	i2cBuf[0] = 0x08;
 800a85e:	4b1b      	ldr	r3, [pc, #108]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a860:	2208      	movs	r2, #8
 800a862:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x00;
 800a864:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a866:	2200      	movs	r2, #0
 800a868:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a86a:	230a      	movs	r3, #10
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	2302      	movs	r3, #2
 800a870:	4a16      	ldr	r2, [pc, #88]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a872:	213c      	movs	r1, #60	; 0x3c
 800a874:	4816      	ldr	r0, [pc, #88]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a876:	f7f7 ff29 	bl	80026cc <HAL_I2C_Master_Transmit>

	// Low X offset register
	i2cBuf[0] = 0x05;
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a87c:	2205      	movs	r2, #5
 800a87e:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x00;	//E
 800a880:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a882:	2200      	movs	r2, #0
 800a884:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a886:	230a      	movs	r3, #10
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	2302      	movs	r3, #2
 800a88c:	4a0f      	ldr	r2, [pc, #60]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a88e:	213c      	movs	r1, #60	; 0x3c
 800a890:	480f      	ldr	r0, [pc, #60]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a892:	f7f7 ff1b 	bl	80026cc <HAL_I2C_Master_Transmit>

	// High X offset register
	i2cBuf[0] = 0x06;
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a898:	2206      	movs	r2, #6
 800a89a:	701a      	strb	r2, [r3, #0]
	i2cBuf[1] = 0x03;
 800a89c:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a89e:	2203      	movs	r2, #3
 800a8a0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_Mag_write_address, i2cBuf, 2, 10);
 800a8a2:	230a      	movs	r3, #10
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <initalise_LSM9DS1+0x154>)
 800a8aa:	213c      	movs	r1, #60	; 0x3c
 800a8ac:	4808      	ldr	r0, [pc, #32]	; (800a8d0 <initalise_LSM9DS1+0x158>)
 800a8ae:	f7f7 ff0d 	bl	80026cc <HAL_I2C_Master_Transmit>



	printf("Register setup Complete\n");
 800a8b2:	4808      	ldr	r0, [pc, #32]	; (800a8d4 <initalise_LSM9DS1+0x15c>)
 800a8b4:	f002 fb5e 	bl	800cf74 <puts>
	fflush(stdout);
 800a8b8:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <initalise_LSM9DS1+0x160>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 fc9a 	bl	800c1f8 <fflush>

}
 800a8c4:	bf00      	nop
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200006d8 	.word	0x200006d8
 800a8d0:	2000042c 	.word	0x2000042c
 800a8d4:	0800f250 	.word	0x0800f250
 800a8d8:	2000017c 	.word	0x2000017c

0800a8dc <mag_get_raw>:
/**************************************
 * Function to get raw magnetic data
 **************************************/
void mag_get_raw(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af02      	add	r7, sp, #8
	// Send address to read
   i2cBuf[0] = OUT_X_L_M;
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <mag_get_raw+0x34>)
 800a8e4:	2228      	movs	r2, #40	; 0x28
 800a8e6:	701a      	strb	r2, [r3, #0]
   HAL_I2C_Master_Transmit(&hi2c1,LSM9DS1_Mag_Read_address, i2cBuf, 1,10);
 800a8e8:	230a      	movs	r3, #10
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	4a08      	ldr	r2, [pc, #32]	; (800a910 <mag_get_raw+0x34>)
 800a8f0:	213d      	movs	r1, #61	; 0x3d
 800a8f2:	4808      	ldr	r0, [pc, #32]	; (800a914 <mag_get_raw+0x38>)
 800a8f4:	f7f7 feea 	bl	80026cc <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c1, LSM9DS1_Mag_Read_address, &MagBuff[0], 6, 10);
 800a8f8:	230a      	movs	r3, #10
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	2306      	movs	r3, #6
 800a8fe:	4a06      	ldr	r2, [pc, #24]	; (800a918 <mag_get_raw+0x3c>)
 800a900:	213d      	movs	r1, #61	; 0x3d
 800a902:	4804      	ldr	r0, [pc, #16]	; (800a914 <mag_get_raw+0x38>)
 800a904:	f7f7 ffe0 	bl	80028c8 <HAL_I2C_Master_Receive>
}
 800a908:	bf00      	nop
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	200006d8 	.word	0x200006d8
 800a914:	2000042c 	.word	0x2000042c
 800a918:	200006cc 	.word	0x200006cc
 800a91c:	00000000 	.word	0x00000000

0800a920 <mag_convert_values>:

/**********************************************************
 * Function to convert magnetic values to compass bearings
 ***********************************************************/
double mag_convert_values()
{
 800a920:	b598      	push	{r3, r4, r7, lr}
 800a922:	af00      	add	r7, sp, #0

	}
*/
	//Bit shift to combine upper and lower byte

	mx = (MagBuff[1] << 8 | MagBuff[0]);
 800a924:	4b5c      	ldr	r3, [pc, #368]	; (800aa98 <mag_convert_values+0x178>)
 800a926:	785b      	ldrb	r3, [r3, #1]
 800a928:	021b      	lsls	r3, r3, #8
 800a92a:	b21a      	sxth	r2, r3
 800a92c:	4b5a      	ldr	r3, [pc, #360]	; (800aa98 <mag_convert_values+0x178>)
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b21b      	sxth	r3, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	b21a      	sxth	r2, r3
 800a936:	4b59      	ldr	r3, [pc, #356]	; (800aa9c <mag_convert_values+0x17c>)
 800a938:	801a      	strh	r2, [r3, #0]
	my = (MagBuff[3] << 8 | MagBuff[2]);
 800a93a:	4b57      	ldr	r3, [pc, #348]	; (800aa98 <mag_convert_values+0x178>)
 800a93c:	78db      	ldrb	r3, [r3, #3]
 800a93e:	021b      	lsls	r3, r3, #8
 800a940:	b21a      	sxth	r2, r3
 800a942:	4b55      	ldr	r3, [pc, #340]	; (800aa98 <mag_convert_values+0x178>)
 800a944:	789b      	ldrb	r3, [r3, #2]
 800a946:	b21b      	sxth	r3, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	b21a      	sxth	r2, r3
 800a94c:	4b54      	ldr	r3, [pc, #336]	; (800aaa0 <mag_convert_values+0x180>)
 800a94e:	801a      	strh	r2, [r3, #0]
	mz = (MagBuff[5] << 8 | MagBuff[4]);
 800a950:	4b51      	ldr	r3, [pc, #324]	; (800aa98 <mag_convert_values+0x178>)
 800a952:	795b      	ldrb	r3, [r3, #5]
 800a954:	021b      	lsls	r3, r3, #8
 800a956:	b21a      	sxth	r2, r3
 800a958:	4b4f      	ldr	r3, [pc, #316]	; (800aa98 <mag_convert_values+0x178>)
 800a95a:	791b      	ldrb	r3, [r3, #4]
 800a95c:	b21b      	sxth	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b21a      	sxth	r2, r3
 800a962:	4b50      	ldr	r3, [pc, #320]	; (800aaa4 <mag_convert_values+0x184>)
 800a964:	801a      	strh	r2, [r3, #0]

//	printf("mx = %d my = %d mz = %d\n", (int) mx, (int) my, (int) mz);

	//Convert to unit of degrees

	Xmag = (float)mx*0.14;
 800a966:	4b4d      	ldr	r3, [pc, #308]	; (800aa9c <mag_convert_values+0x17c>)
 800a968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a96c:	ee07 3a90 	vmov	s15, r3
 800a970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a974:	ee17 0a90 	vmov	r0, s15
 800a978:	f7f5 fde6 	bl	8000548 <__aeabi_f2d>
 800a97c:	a33e      	add	r3, pc, #248	; (adr r3, 800aa78 <mag_convert_values+0x158>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f7f5 fe39 	bl	80005f8 <__aeabi_dmul>
 800a986:	4603      	mov	r3, r0
 800a988:	460c      	mov	r4, r1
 800a98a:	4a47      	ldr	r2, [pc, #284]	; (800aaa8 <mag_convert_values+0x188>)
 800a98c:	e9c2 3400 	strd	r3, r4, [r2]
	Ymag = (float)my*0.14;
 800a990:	4b43      	ldr	r3, [pc, #268]	; (800aaa0 <mag_convert_values+0x180>)
 800a992:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a99e:	ee17 0a90 	vmov	r0, s15
 800a9a2:	f7f5 fdd1 	bl	8000548 <__aeabi_f2d>
 800a9a6:	a334      	add	r3, pc, #208	; (adr r3, 800aa78 <mag_convert_values+0x158>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f7f5 fe24 	bl	80005f8 <__aeabi_dmul>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	4a3d      	ldr	r2, [pc, #244]	; (800aaac <mag_convert_values+0x18c>)
 800a9b6:	e9c2 3400 	strd	r3, r4, [r2]
	Zmag = (float)mz*0.14;
 800a9ba:	4b3a      	ldr	r3, [pc, #232]	; (800aaa4 <mag_convert_values+0x184>)
 800a9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9c0:	ee07 3a90 	vmov	s15, r3
 800a9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9c8:	ee17 0a90 	vmov	r0, s15
 800a9cc:	f7f5 fdbc 	bl	8000548 <__aeabi_f2d>
 800a9d0:	a329      	add	r3, pc, #164	; (adr r3, 800aa78 <mag_convert_values+0x158>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f5 fe0f 	bl	80005f8 <__aeabi_dmul>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	460c      	mov	r4, r1
 800a9de:	4a34      	ldr	r2, [pc, #208]	; (800aab0 <mag_convert_values+0x190>)
 800a9e0:	e9c2 3400 	strd	r3, r4, [r2]

//	printf("Xmag  = %0.2lfmg Ymag = %0.2lfmg Zmag = %0.2lfmg\n", Xmag , Ymag, Zmag);
//	fflush(stdout);

	angle = atan2f(mx,my)*(180/3.14);
 800a9e4:	4b2d      	ldr	r3, [pc, #180]	; (800aa9c <mag_convert_values+0x17c>)
 800a9e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9f2:	4b2b      	ldr	r3, [pc, #172]	; (800aaa0 <mag_convert_values+0x180>)
 800a9f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9f8:	ee07 3a10 	vmov	s14, r3
 800a9fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa00:	eef0 0a47 	vmov.f32	s1, s14
 800aa04:	eeb0 0a67 	vmov.f32	s0, s15
 800aa08:	f004 f946 	bl	800ec98 <atan2f>
 800aa0c:	ee10 3a10 	vmov	r3, s0
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7f5 fd99 	bl	8000548 <__aeabi_f2d>
 800aa16:	a31a      	add	r3, pc, #104	; (adr r3, 800aa80 <mag_convert_values+0x160>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fdec 	bl	80005f8 <__aeabi_dmul>
 800aa20:	4603      	mov	r3, r0
 800aa22:	460c      	mov	r4, r1
 800aa24:	4a23      	ldr	r2, [pc, #140]	; (800aab4 <mag_convert_values+0x194>)
 800aa26:	e9c2 3400 	strd	r3, r4, [r2]
	//printf("angle = %0.2f\n", angle);

	direction = fmod((450-angle),360);
 800aa2a:	4b22      	ldr	r3, [pc, #136]	; (800aab4 <mag_convert_values+0x194>)
 800aa2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa30:	461a      	mov	r2, r3
 800aa32:	4623      	mov	r3, r4
 800aa34:	a114      	add	r1, pc, #80	; (adr r1, 800aa88 <mag_convert_values+0x168>)
 800aa36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa3a:	f7f5 fc25 	bl	8000288 <__aeabi_dsub>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	ec44 3b17 	vmov	d7, r3, r4
 800aa46:	ed9f 1b12 	vldr	d1, [pc, #72]	; 800aa90 <mag_convert_values+0x170>
 800aa4a:	eeb0 0a47 	vmov.f32	s0, s14
 800aa4e:	eef0 0a67 	vmov.f32	s1, s15
 800aa52:	f004 f8bd 	bl	800ebd0 <fmod>
 800aa56:	eeb0 7a40 	vmov.f32	s14, s0
 800aa5a:	eef0 7a60 	vmov.f32	s15, s1
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <mag_convert_values+0x198>)
 800aa60:	ed83 7b00 	vstr	d7, [r3]

	//printf("Direction = %0.2f\n", direction);

	return(direction);
 800aa64:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <mag_convert_values+0x198>)
 800aa66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa6a:	ec44 3b17 	vmov	d7, r3, r4

}
 800aa6e:	eeb0 0a47 	vmov.f32	s0, s14
 800aa72:	eef0 0a67 	vmov.f32	s1, s15
 800aa76:	bd98      	pop	{r3, r4, r7, pc}
 800aa78:	1eb851ec 	.word	0x1eb851ec
 800aa7c:	3fc1eb85 	.word	0x3fc1eb85
 800aa80:	61d59ae7 	.word	0x61d59ae7
 800aa84:	404ca994 	.word	0x404ca994
 800aa88:	00000000 	.word	0x00000000
 800aa8c:	407c2000 	.word	0x407c2000
 800aa90:	00000000 	.word	0x00000000
 800aa94:	40768000 	.word	0x40768000
 800aa98:	200006cc 	.word	0x200006cc
 800aa9c:	200006e2 	.word	0x200006e2
 800aaa0:	2000048c 	.word	0x2000048c
 800aaa4:	200005d8 	.word	0x200005d8
 800aaa8:	20000538 	.word	0x20000538
 800aaac:	20000678 	.word	0x20000678
 800aab0:	200005c0 	.word	0x200005c0
 800aab4:	20000548 	.word	0x20000548
 800aab8:	200004d8 	.word	0x200004d8

0800aabc <HAL_ADC_ConvCpltCallback>:
   printf("Temperature = %.2f\n",deg);


}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]

	//HAL_ADC_Stop_DMA(&hadc1);

	//speed = (double)count;
	current = (double)data[1];
 800aac4:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <HAL_ADC_ConvCpltCallback+0x2c>)
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7f5 fd1b 	bl	8000504 <__aeabi_ui2d>
 800aace:	4603      	mov	r3, r0
 800aad0:	460c      	mov	r4, r1
 800aad2:	4a06      	ldr	r2, [pc, #24]	; (800aaec <HAL_ADC_ConvCpltCallback+0x30>)
 800aad4:	e9c2 3400 	strd	r3, r4, [r2]
	FLAG1 = 1;
 800aad8:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <HAL_ADC_ConvCpltCallback+0x34>)
 800aada:	2201      	movs	r2, #1
 800aadc:	601a      	str	r2, [r3, #0]

}
 800aade:	bf00      	nop
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd90      	pop	{r4, r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200005b4 	.word	0x200005b4
 800aaec:	20000370 	.word	0x20000370
 800aaf0:	20000534 	.word	0x20000534

0800aaf4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	4603      	mov	r3, r0
 800aafc:	80fb      	strh	r3, [r7, #6]
	tnew = HAL_GetTick();
 800aafe:	f7f6 fa39 	bl	8000f74 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4b08      	ldr	r3, [pc, #32]	; (800ab28 <HAL_GPIO_EXTI_Callback+0x34>)
 800ab06:	601a      	str	r2, [r3, #0]
	tdiff = tnew - told;
 800ab08:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <HAL_GPIO_EXTI_Callback+0x34>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <HAL_GPIO_EXTI_Callback+0x38>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	4a07      	ldr	r2, [pc, #28]	; (800ab30 <HAL_GPIO_EXTI_Callback+0x3c>)
 800ab14:	6013      	str	r3, [r2, #0]
	told = tnew;
 800ab16:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <HAL_GPIO_EXTI_Callback+0x34>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a04      	ldr	r2, [pc, #16]	; (800ab2c <HAL_GPIO_EXTI_Callback+0x38>)
 800ab1c:	6013      	str	r3, [r2, #0]
	//count++;		//Hall Effect
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20000378 	.word	0x20000378
 800ab2c:	2000037c 	.word	0x2000037c
 800ab30:	20000380 	.word	0x20000380
 800ab34:	00000000 	.word	0x00000000

0800ab38 <ultrasonic>:

double ultrasonic(void){
 800ab38:	b590      	push	{r4, r7, lr}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0

	uint32_t localtime = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]

	double distance = 0;
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	f04f 0400 	mov.w	r4, #0
 800ab4a:	e9c7 3400 	strd	r3, r4, [r7]

	HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_RESET);  // set the TRIG pin low initially
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab54:	482a      	ldr	r0, [pc, #168]	; (800ac00 <ultrasonic+0xc8>)
 800ab56:	f7f7 fc5f 	bl	8002418 <HAL_GPIO_WritePin>
	DWT_Delay(2);
 800ab5a:	2002      	movs	r0, #2
 800ab5c:	f7fe ff4c 	bl	80099f8 <DWT_Delay>

	localtime = 0;		//Restart local clock
 800ab60:	2300      	movs	r3, #0
 800ab62:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_SET);  // set TRIG pin HIGH for 10us
 800ab64:	2201      	movs	r2, #1
 800ab66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab6a:	4825      	ldr	r0, [pc, #148]	; (800ac00 <ultrasonic+0xc8>)
 800ab6c:	f7f7 fc54 	bl	8002418 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 800ab70:	200a      	movs	r0, #10
 800ab72:	f7fe ff41 	bl	80099f8 <DWT_Delay>

	HAL_GPIO_WritePin(TRIGL_GPIO_Port, TRIGL_Pin, GPIO_PIN_RESET);  // set the TRIG pin low
 800ab76:	2200      	movs	r2, #0
 800ab78:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab7c:	4820      	ldr	r0, [pc, #128]	; (800ac00 <ultrasonic+0xc8>)
 800ab7e:	f7f7 fc4b 	bl	8002418 <HAL_GPIO_WritePin>

	//Read ECHO Pin to calculate length of echo pulse

	while (!(HAL_GPIO_ReadPin(ECHOL_GPIO_Port, ECHOL_Pin)));  // wait for the ECHO pin to go high
 800ab82:	bf00      	nop
 800ab84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab88:	481d      	ldr	r0, [pc, #116]	; (800ac00 <ultrasonic+0xc8>)
 800ab8a:	f7f7 fc2d 	bl	80023e8 <HAL_GPIO_ReadPin>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0f7      	beq.n	800ab84 <ultrasonic+0x4c>
	while (HAL_GPIO_ReadPin(ECHOL_GPIO_Port, ECHOL_Pin))    // while the pin is high
 800ab94:	e005      	b.n	800aba2 <ultrasonic+0x6a>
	{
		localtime++;   // measure time for which the pin is high
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	60fb      	str	r3, [r7, #12]
		DWT_Delay(1);
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	f7fe ff2b 	bl	80099f8 <DWT_Delay>
	while (HAL_GPIO_ReadPin(ECHOL_GPIO_Port, ECHOL_Pin))    // while the pin is high
 800aba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aba6:	4816      	ldr	r0, [pc, #88]	; (800ac00 <ultrasonic+0xc8>)
 800aba8:	f7f7 fc1e 	bl	80023e8 <HAL_GPIO_ReadPin>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f1      	bne.n	800ab96 <ultrasonic+0x5e>
	}

	distance = (0.034*(double)localtime) - 2;			//0.034 = Speed of sound in cm/microsecond
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7f5 fca6 	bl	8000504 <__aeabi_ui2d>
 800abb8:	a30f      	add	r3, pc, #60	; (adr r3, 800abf8 <ultrasonic+0xc0>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fd1b 	bl	80005f8 <__aeabi_dmul>
 800abc2:	4603      	mov	r3, r0
 800abc4:	460c      	mov	r4, r1
 800abc6:	4618      	mov	r0, r3
 800abc8:	4621      	mov	r1, r4
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abd2:	f7f5 fb59 	bl	8000288 <__aeabi_dsub>
 800abd6:	4603      	mov	r3, r0
 800abd8:	460c      	mov	r4, r1
 800abda:	e9c7 3400 	strd	r3, r4, [r7]
													//(-2) accounts for sensor dead zone (mount 2cm from front)
	//Possible Filtering

	return distance;
 800abde:	e9d7 3400 	ldrd	r3, r4, [r7]
 800abe2:	ec44 3b17 	vmov	d7, r3, r4
}
 800abe6:	eeb0 0a47 	vmov.f32	s0, s14
 800abea:	eef0 0a67 	vmov.f32	s1, s15
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd90      	pop	{r4, r7, pc}
 800abf4:	f3af 8000 	nop.w
 800abf8:	b020c49c 	.word	0xb020c49c
 800abfc:	3fa16872 	.word	0x3fa16872
 800ac00:	40020800 	.word	0x40020800
 800ac04:	00000000 	.word	0x00000000

0800ac08 <ultrasonic2>:

double ultrasonic2(void){
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0

	uint32_t localtime = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]

	double distance = 0;
 800ac12:	f04f 0300 	mov.w	r3, #0
 800ac16:	f04f 0400 	mov.w	r4, #0
 800ac1a:	e9c7 3400 	strd	r3, r4, [r7]

	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_RESET);  // set the TRIG pin low initially
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2104      	movs	r1, #4
 800ac22:	4829      	ldr	r0, [pc, #164]	; (800acc8 <ultrasonic2+0xc0>)
 800ac24:	f7f7 fbf8 	bl	8002418 <HAL_GPIO_WritePin>
	DWT_Delay(2);
 800ac28:	2002      	movs	r0, #2
 800ac2a:	f7fe fee5 	bl	80099f8 <DWT_Delay>

	localtime = 0;		//Restart local clock
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_SET);  // set TRIG pin HIGH for 10us
 800ac32:	2201      	movs	r2, #1
 800ac34:	2104      	movs	r1, #4
 800ac36:	4824      	ldr	r0, [pc, #144]	; (800acc8 <ultrasonic2+0xc0>)
 800ac38:	f7f7 fbee 	bl	8002418 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 800ac3c:	200a      	movs	r0, #10
 800ac3e:	f7fe fedb 	bl	80099f8 <DWT_Delay>

	HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_RESET);  // set the TRIG pin low
 800ac42:	2200      	movs	r2, #0
 800ac44:	2104      	movs	r1, #4
 800ac46:	4820      	ldr	r0, [pc, #128]	; (800acc8 <ultrasonic2+0xc0>)
 800ac48:	f7f7 fbe6 	bl	8002418 <HAL_GPIO_WritePin>

	//Read ECHO Pin to calculate length of echo pulse

	while (!(HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin)));  // wait for the ECHO pin to go high
 800ac4c:	bf00      	nop
 800ac4e:	2102      	movs	r1, #2
 800ac50:	481d      	ldr	r0, [pc, #116]	; (800acc8 <ultrasonic2+0xc0>)
 800ac52:	f7f7 fbc9 	bl	80023e8 <HAL_GPIO_ReadPin>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0f8      	beq.n	800ac4e <ultrasonic2+0x46>
	while (HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin))    // while the pin is high
 800ac5c:	e005      	b.n	800ac6a <ultrasonic2+0x62>
	{
		localtime++;   // measure time for which the pin is high
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]
		DWT_Delay(1);
 800ac64:	2001      	movs	r0, #1
 800ac66:	f7fe fec7 	bl	80099f8 <DWT_Delay>
	while (HAL_GPIO_ReadPin(ECHO2_GPIO_Port, ECHO2_Pin))    // while the pin is high
 800ac6a:	2102      	movs	r1, #2
 800ac6c:	4816      	ldr	r0, [pc, #88]	; (800acc8 <ultrasonic2+0xc0>)
 800ac6e:	f7f7 fbbb 	bl	80023e8 <HAL_GPIO_ReadPin>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1f2      	bne.n	800ac5e <ultrasonic2+0x56>
	}

	distance = (0.034*(double)localtime) - 2;			//0.034 = Speed of sound in cm/microsecond
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7f5 fc43 	bl	8000504 <__aeabi_ui2d>
 800ac7e:	a310      	add	r3, pc, #64	; (adr r3, 800acc0 <ultrasonic2+0xb8>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 fcb8 	bl	80005f8 <__aeabi_dmul>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	4621      	mov	r1, r4
 800ac90:	f04f 0200 	mov.w	r2, #0
 800ac94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac98:	f7f5 faf6 	bl	8000288 <__aeabi_dsub>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	460c      	mov	r4, r1
 800aca0:	e9c7 3400 	strd	r3, r4, [r7]
													//(-2) accounts for sensor dead zone (mount 2cm from front)
	//Possible Filtering

	return distance;
 800aca4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800aca8:	ec44 3b17 	vmov	d7, r3, r4
}
 800acac:	eeb0 0a47 	vmov.f32	s0, s14
 800acb0:	eef0 0a67 	vmov.f32	s1, s15
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd90      	pop	{r4, r7, pc}
 800acba:	bf00      	nop
 800acbc:	f3af 8000 	nop.w
 800acc0:	b020c49c 	.word	0xb020c49c
 800acc4:	3fa16872 	.word	0x3fa16872
 800acc8:	40020c00 	.word	0x40020c00

0800accc <__io_putchar>:

int __io_putchar(int ch)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)(&ch), 1, 0xFFFF);
 800acd4:	1d39      	adds	r1, r7, #4
 800acd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acda:	2201      	movs	r2, #1
 800acdc:	4803      	ldr	r0, [pc, #12]	; (800acec <__io_putchar+0x20>)
 800acde:	f7fb fd00 	bl	80066e2 <HAL_UART_Transmit>
  return 1;
 800ace2:	2301      	movs	r3, #1
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	200003e8 	.word	0x200003e8

0800acf0 <__io_getchar>:

int __io_getchar(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
  uint8_t ch;
  HAL_UART_Receive(&huart3, (uint8_t *)(&ch), 1, 0xFFFF);
 800acf6:	1df9      	adds	r1, r7, #7
 800acf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acfc:	2201      	movs	r2, #1
 800acfe:	4804      	ldr	r0, [pc, #16]	; (800ad10 <__io_getchar+0x20>)
 800ad00:	f7fb fd88 	bl	8006814 <HAL_UART_Receive>
  return (int)ch;
 800ad04:	79fb      	ldrb	r3, [r7, #7]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	200003e8 	.word	0x200003e8

0800ad14 <stdio_setup>:

void stdio_setup(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
    // Turn off buffers, so I/O occurs immediately
    setvbuf(stdin, NULL, _IONBF, 0);
 800ad18:	4b0c      	ldr	r3, [pc, #48]	; (800ad4c <stdio_setup+0x38>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6858      	ldr	r0, [r3, #4]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	2202      	movs	r2, #2
 800ad22:	2100      	movs	r1, #0
 800ad24:	f002 f93e 	bl	800cfa4 <setvbuf>
    setvbuf(stdout, NULL, _IONBF, 0);
 800ad28:	4b08      	ldr	r3, [pc, #32]	; (800ad4c <stdio_setup+0x38>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6898      	ldr	r0, [r3, #8]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2202      	movs	r2, #2
 800ad32:	2100      	movs	r1, #0
 800ad34:	f002 f936 	bl	800cfa4 <setvbuf>
    setvbuf(stderr, NULL, _IONBF, 0);
 800ad38:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <stdio_setup+0x38>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68d8      	ldr	r0, [r3, #12]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2202      	movs	r2, #2
 800ad42:	2100      	movs	r1, #0
 800ad44:	f002 f92e 	bl	800cfa4 <setvbuf>
}
 800ad48:	bf00      	nop
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	2000017c 	.word	0x2000017c

0800ad50 <pwm_setvalue>:

void pwm_setvalue(int a, uint32_t pwm)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08a      	sub	sp, #40	; 0x28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	//Timer configuration setup

	TIM_OC_InitTypeDef sConfigOC;

	//Timer setup
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ad5a:	2360      	movs	r3, #96	; 0x60
 800ad5c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	61fb      	str	r3, [r7, #28]

	//Stop motors: turn on both low gates
	switch(a){
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d023      	beq.n	800adb4 <pwm_setvalue+0x64>
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d040      	beq.n	800adf2 <pwm_setvalue+0xa2>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d000      	beq.n	800ad76 <pwm_setvalue+0x26>
			HAL_GPIO_WritePin(GPIOD, INA_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOD, INB_Pin, GPIO_PIN_RESET);

		break;
	}
}
 800ad74:	e05c      	b.n	800ae30 <pwm_setvalue+0xe0>
			sConfigOC.Pulse = pwm;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	613b      	str	r3, [r7, #16]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ad7a:	f107 030c 	add.w	r3, r7, #12
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4619      	mov	r1, r3
 800ad82:	482d      	ldr	r0, [pc, #180]	; (800ae38 <pwm_setvalue+0xe8>)
 800ad84:	f7fa ff8e 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <pwm_setvalue+0x42>
				Error_Handler();
 800ad8e:	f000 f891 	bl	800aeb4 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800ad92:	2100      	movs	r1, #0
 800ad94:	4828      	ldr	r0, [pc, #160]	; (800ae38 <pwm_setvalue+0xe8>)
 800ad96:	f7fa ff47 	bl	8005c28 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOD, INA_Pin, GPIO_PIN_SET);
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ada0:	4826      	ldr	r0, [pc, #152]	; (800ae3c <pwm_setvalue+0xec>)
 800ada2:	f7f7 fb39 	bl	8002418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, INB_Pin, GPIO_PIN_SET);
 800ada6:	2201      	movs	r2, #1
 800ada8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800adac:	4823      	ldr	r0, [pc, #140]	; (800ae3c <pwm_setvalue+0xec>)
 800adae:	f7f7 fb33 	bl	8002418 <HAL_GPIO_WritePin>
		break;
 800adb2:	e03d      	b.n	800ae30 <pwm_setvalue+0xe0>
			sConfigOC.Pulse = pwm;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	613b      	str	r3, [r7, #16]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	2200      	movs	r2, #0
 800adbe:	4619      	mov	r1, r3
 800adc0:	481d      	ldr	r0, [pc, #116]	; (800ae38 <pwm_setvalue+0xe8>)
 800adc2:	f7fa ff6f 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <pwm_setvalue+0x80>
				Error_Handler();
 800adcc:	f000 f872 	bl	800aeb4 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800add0:	2100      	movs	r1, #0
 800add2:	4819      	ldr	r0, [pc, #100]	; (800ae38 <pwm_setvalue+0xe8>)
 800add4:	f7fa ff28 	bl	8005c28 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOD, INA_Pin, GPIO_PIN_RESET);
 800add8:	2200      	movs	r2, #0
 800adda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800adde:	4817      	ldr	r0, [pc, #92]	; (800ae3c <pwm_setvalue+0xec>)
 800ade0:	f7f7 fb1a 	bl	8002418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, INB_Pin, GPIO_PIN_SET);
 800ade4:	2201      	movs	r2, #1
 800ade6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800adea:	4814      	ldr	r0, [pc, #80]	; (800ae3c <pwm_setvalue+0xec>)
 800adec:	f7f7 fb14 	bl	8002418 <HAL_GPIO_WritePin>
		break;
 800adf0:	e01e      	b.n	800ae30 <pwm_setvalue+0xe0>
			sConfigOC.Pulse = pwm;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	613b      	str	r3, [r7, #16]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800adf6:	f107 030c 	add.w	r3, r7, #12
 800adfa:	2200      	movs	r2, #0
 800adfc:	4619      	mov	r1, r3
 800adfe:	480e      	ldr	r0, [pc, #56]	; (800ae38 <pwm_setvalue+0xe8>)
 800ae00:	f7fa ff50 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <pwm_setvalue+0xbe>
				Error_Handler();
 800ae0a:	f000 f853 	bl	800aeb4 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4809      	ldr	r0, [pc, #36]	; (800ae38 <pwm_setvalue+0xe8>)
 800ae12:	f7fa ff09 	bl	8005c28 <HAL_TIM_PWM_Start>
			HAL_GPIO_WritePin(GPIOD, INA_Pin, GPIO_PIN_SET);
 800ae16:	2201      	movs	r2, #1
 800ae18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ae1c:	4807      	ldr	r0, [pc, #28]	; (800ae3c <pwm_setvalue+0xec>)
 800ae1e:	f7f7 fafb 	bl	8002418 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, INB_Pin, GPIO_PIN_RESET);
 800ae22:	2200      	movs	r2, #0
 800ae24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ae28:	4804      	ldr	r0, [pc, #16]	; (800ae3c <pwm_setvalue+0xec>)
 800ae2a:	f7f7 faf5 	bl	8002418 <HAL_GPIO_WritePin>
		break;
 800ae2e:	bf00      	nop
}
 800ae30:	bf00      	nop
 800ae32:	3728      	adds	r7, #40	; 0x28
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	200003a8 	.word	0x200003a8
 800ae3c:	40020c00 	.word	0x40020c00

0800ae40 <steer_straight>:

void steer_straight(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
	steer_pwm_setvalue(234);
 800ae44:	20ea      	movs	r0, #234	; 0xea
 800ae46:	f000 f811 	bl	800ae6c <steer_pwm_setvalue>
}
 800ae4a:	bf00      	nop
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <steer_left>:

void steer_left()
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	af00      	add	r7, sp, #0
	steer_pwm_setvalue(200);
 800ae52:	20c8      	movs	r0, #200	; 0xc8
 800ae54:	f000 f80a 	bl	800ae6c <steer_pwm_setvalue>
}
 800ae58:	bf00      	nop
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <steer_right>:

void steer_right()
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
	steer_pwm_setvalue(290);
 800ae60:	f44f 7091 	mov.w	r0, #290	; 0x122
 800ae64:	f000 f802 	bl	800ae6c <steer_pwm_setvalue>
}
 800ae68:	bf00      	nop
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <steer_pwm_setvalue>:



void steer_pwm_setvalue(uint16_t value)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ae76:	2360      	movs	r3, #96	; 0x60
 800ae78:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 800ae7a:	88fb      	ldrh	r3, [r7, #6]
 800ae7c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]

	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ae86:	f107 030c 	add.w	r3, r7, #12
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4808      	ldr	r0, [pc, #32]	; (800aeb0 <steer_pwm_setvalue+0x44>)
 800ae90:	f7fa ff08 	bl	8005ca4 <HAL_TIM_PWM_ConfigChannel>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <steer_pwm_setvalue+0x32>
	{
		Error_Handler();
 800ae9a:	f000 f80b 	bl	800aeb4 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800ae9e:	2100      	movs	r1, #0
 800aea0:	4803      	ldr	r0, [pc, #12]	; (800aeb0 <steer_pwm_setvalue+0x44>)
 800aea2:	f7fa fec1 	bl	8005c28 <HAL_TIM_PWM_Start>
}
 800aea6:	bf00      	nop
 800aea8:	3728      	adds	r7, #40	; 0x28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20000634 	.word	0x20000634

0800aeb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800aeb8:	bf00      	nop
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aeca:	2300      	movs	r3, #0
 800aecc:	607b      	str	r3, [r7, #4]
 800aece:	4b10      	ldr	r3, [pc, #64]	; (800af10 <HAL_MspInit+0x4c>)
 800aed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed2:	4a0f      	ldr	r2, [pc, #60]	; (800af10 <HAL_MspInit+0x4c>)
 800aed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aed8:	6453      	str	r3, [r2, #68]	; 0x44
 800aeda:	4b0d      	ldr	r3, [pc, #52]	; (800af10 <HAL_MspInit+0x4c>)
 800aedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aee6:	2300      	movs	r3, #0
 800aee8:	603b      	str	r3, [r7, #0]
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <HAL_MspInit+0x4c>)
 800aeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeee:	4a08      	ldr	r2, [pc, #32]	; (800af10 <HAL_MspInit+0x4c>)
 800aef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aef4:	6413      	str	r3, [r2, #64]	; 0x40
 800aef6:	4b06      	ldr	r3, [pc, #24]	; (800af10 <HAL_MspInit+0x4c>)
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aefe:	603b      	str	r3, [r7, #0]
 800af00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800af02:	2007      	movs	r0, #7
 800af04:	f7f6 fd1e 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800af08:	bf00      	nop
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	40023800 	.word	0x40023800

0800af14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af1c:	f107 0314 	add.w	r3, r7, #20
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	609a      	str	r2, [r3, #8]
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a2f      	ldr	r2, [pc, #188]	; (800aff0 <HAL_ADC_MspInit+0xdc>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d157      	bne.n	800afe6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	4b2e      	ldr	r3, [pc, #184]	; (800aff4 <HAL_ADC_MspInit+0xe0>)
 800af3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3e:	4a2d      	ldr	r2, [pc, #180]	; (800aff4 <HAL_ADC_MspInit+0xe0>)
 800af40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af44:	6453      	str	r3, [r2, #68]	; 0x44
 800af46:	4b2b      	ldr	r3, [pc, #172]	; (800aff4 <HAL_ADC_MspInit+0xe0>)
 800af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af52:	2300      	movs	r3, #0
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	4b27      	ldr	r3, [pc, #156]	; (800aff4 <HAL_ADC_MspInit+0xe0>)
 800af58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5a:	4a26      	ldr	r2, [pc, #152]	; (800aff4 <HAL_ADC_MspInit+0xe0>)
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	6313      	str	r3, [r2, #48]	; 0x30
 800af62:	4b24      	ldr	r3, [pc, #144]	; (800aff4 <HAL_ADC_MspInit+0xe0>)
 800af64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800af6e:	2306      	movs	r3, #6
 800af70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800af72:	2303      	movs	r3, #3
 800af74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af76:	2300      	movs	r3, #0
 800af78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af7a:	f107 0314 	add.w	r3, r7, #20
 800af7e:	4619      	mov	r1, r3
 800af80:	481d      	ldr	r0, [pc, #116]	; (800aff8 <HAL_ADC_MspInit+0xe4>)
 800af82:	f7f7 f897 	bl	80020b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800af86:	4b1d      	ldr	r3, [pc, #116]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800af88:	4a1d      	ldr	r2, [pc, #116]	; (800b000 <HAL_ADC_MspInit+0xec>)
 800af8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800af8c:	4b1b      	ldr	r3, [pc, #108]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800af8e:	2200      	movs	r2, #0
 800af90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af92:	4b1a      	ldr	r3, [pc, #104]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800af94:	2200      	movs	r2, #0
 800af96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800af98:	4b18      	ldr	r3, [pc, #96]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800af9e:	4b17      	ldr	r3, [pc, #92]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800afa6:	4b15      	ldr	r3, [pc, #84]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800afae:	4b13      	ldr	r3, [pc, #76]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800afb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800afb6:	4b11      	ldr	r3, [pc, #68]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800afc4:	4b0d      	ldr	r3, [pc, #52]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800afca:	480c      	ldr	r0, [pc, #48]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afcc:	f7f6 fcfc 	bl	80019c8 <HAL_DMA_Init>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800afd6:	f7ff ff6d 	bl	800aeb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a07      	ldr	r2, [pc, #28]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afde:	639a      	str	r2, [r3, #56]	; 0x38
 800afe0:	4a06      	ldr	r2, [pc, #24]	; (800affc <HAL_ADC_MspInit+0xe8>)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800afe6:	bf00      	nop
 800afe8:	3728      	adds	r7, #40	; 0x28
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	40012000 	.word	0x40012000
 800aff4:	40023800 	.word	0x40023800
 800aff8:	40020000 	.word	0x40020000
 800affc:	20000550 	.word	0x20000550
 800b000:	40026410 	.word	0x40026410

0800b004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	; 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b00c:	f107 0314 	add.w	r3, r7, #20
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	609a      	str	r2, [r3, #8]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a19      	ldr	r2, [pc, #100]	; (800b088 <HAL_I2C_MspInit+0x84>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d12b      	bne.n	800b07e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	4b18      	ldr	r3, [pc, #96]	; (800b08c <HAL_I2C_MspInit+0x88>)
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	4a17      	ldr	r2, [pc, #92]	; (800b08c <HAL_I2C_MspInit+0x88>)
 800b030:	f043 0302 	orr.w	r3, r3, #2
 800b034:	6313      	str	r3, [r2, #48]	; 0x30
 800b036:	4b15      	ldr	r3, [pc, #84]	; (800b08c <HAL_I2C_MspInit+0x88>)
 800b038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03a:	f003 0302 	and.w	r3, r3, #2
 800b03e:	613b      	str	r3, [r7, #16]
 800b040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b042:	23c0      	movs	r3, #192	; 0xc0
 800b044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b046:	2312      	movs	r3, #18
 800b048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b04a:	2301      	movs	r3, #1
 800b04c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b04e:	2303      	movs	r3, #3
 800b050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b052:	2304      	movs	r3, #4
 800b054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b056:	f107 0314 	add.w	r3, r7, #20
 800b05a:	4619      	mov	r1, r3
 800b05c:	480c      	ldr	r0, [pc, #48]	; (800b090 <HAL_I2C_MspInit+0x8c>)
 800b05e:	f7f7 f829 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b062:	2300      	movs	r3, #0
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	4b09      	ldr	r3, [pc, #36]	; (800b08c <HAL_I2C_MspInit+0x88>)
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	4a08      	ldr	r2, [pc, #32]	; (800b08c <HAL_I2C_MspInit+0x88>)
 800b06c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b070:	6413      	str	r3, [r2, #64]	; 0x40
 800b072:	4b06      	ldr	r3, [pc, #24]	; (800b08c <HAL_I2C_MspInit+0x88>)
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b07e:	bf00      	nop
 800b080:	3728      	adds	r7, #40	; 0x28
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	40005400 	.word	0x40005400
 800b08c:	40023800 	.word	0x40023800
 800b090:	40020400 	.word	0x40020400

0800b094 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	; 0x28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b09c:	f107 0314 	add.w	r3, r7, #20
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	605a      	str	r2, [r3, #4]
 800b0a6:	609a      	str	r2, [r3, #8]
 800b0a8:	60da      	str	r2, [r3, #12]
 800b0aa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a28      	ldr	r2, [pc, #160]	; (800b154 <HAL_I2S_MspInit+0xc0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d14a      	bne.n	800b14c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
 800b0ba:	4b27      	ldr	r3, [pc, #156]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	4a26      	ldr	r2, [pc, #152]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0ce:	613b      	str	r3, [r7, #16]
 800b0d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	4b20      	ldr	r3, [pc, #128]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0da:	4a1f      	ldr	r2, [pc, #124]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0dc:	f043 0301 	orr.w	r3, r3, #1
 800b0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60bb      	str	r3, [r7, #8]
 800b0f2:	4b19      	ldr	r3, [pc, #100]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	4a18      	ldr	r2, [pc, #96]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b0f8:	f043 0304 	orr.w	r3, r3, #4
 800b0fc:	6313      	str	r3, [r2, #48]	; 0x30
 800b0fe:	4b16      	ldr	r3, [pc, #88]	; (800b158 <HAL_I2S_MspInit+0xc4>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	f003 0304 	and.w	r3, r3, #4
 800b106:	60bb      	str	r3, [r7, #8]
 800b108:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800b10a:	2310      	movs	r3, #16
 800b10c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b10e:	2302      	movs	r3, #2
 800b110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b112:	2300      	movs	r3, #0
 800b114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b116:	2300      	movs	r3, #0
 800b118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b11a:	2306      	movs	r3, #6
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800b11e:	f107 0314 	add.w	r3, r7, #20
 800b122:	4619      	mov	r1, r3
 800b124:	480d      	ldr	r0, [pc, #52]	; (800b15c <HAL_I2S_MspInit+0xc8>)
 800b126:	f7f6 ffc5 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800b12a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800b12e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b130:	2302      	movs	r3, #2
 800b132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b134:	2300      	movs	r3, #0
 800b136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b138:	2300      	movs	r3, #0
 800b13a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b13c:	2306      	movs	r3, #6
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b140:	f107 0314 	add.w	r3, r7, #20
 800b144:	4619      	mov	r1, r3
 800b146:	4806      	ldr	r0, [pc, #24]	; (800b160 <HAL_I2S_MspInit+0xcc>)
 800b148:	f7f6 ffb4 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b14c:	bf00      	nop
 800b14e:	3728      	adds	r7, #40	; 0x28
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	40003c00 	.word	0x40003c00
 800b158:	40023800 	.word	0x40023800
 800b15c:	40020000 	.word	0x40020000
 800b160:	40020800 	.word	0x40020800

0800b164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08a      	sub	sp, #40	; 0x28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b16c:	f107 0314 	add.w	r3, r7, #20
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	605a      	str	r2, [r3, #4]
 800b176:	609a      	str	r2, [r3, #8]
 800b178:	60da      	str	r2, [r3, #12]
 800b17a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a19      	ldr	r2, [pc, #100]	; (800b1e8 <HAL_SPI_MspInit+0x84>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d12b      	bne.n	800b1de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <HAL_SPI_MspInit+0x88>)
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	4a17      	ldr	r2, [pc, #92]	; (800b1ec <HAL_SPI_MspInit+0x88>)
 800b190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b194:	6453      	str	r3, [r2, #68]	; 0x44
 800b196:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <HAL_SPI_MspInit+0x88>)
 800b198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <HAL_SPI_MspInit+0x88>)
 800b1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1aa:	4a10      	ldr	r2, [pc, #64]	; (800b1ec <HAL_SPI_MspInit+0x88>)
 800b1ac:	f043 0301 	orr.w	r3, r3, #1
 800b1b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b1b2:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <HAL_SPI_MspInit+0x88>)
 800b1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800b1be:	23e0      	movs	r3, #224	; 0xe0
 800b1c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1ce:	2305      	movs	r3, #5
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1d2:	f107 0314 	add.w	r3, r7, #20
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <HAL_SPI_MspInit+0x8c>)
 800b1da:	f7f6 ff6b 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b1de:	bf00      	nop
 800b1e0:	3728      	adds	r7, #40	; 0x28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	40013000 	.word	0x40013000
 800b1ec:	40023800 	.word	0x40023800
 800b1f0:	40020000 	.word	0x40020000

0800b1f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b204:	d10e      	bne.n	800b224 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b206:	2300      	movs	r3, #0
 800b208:	617b      	str	r3, [r7, #20]
 800b20a:	4b27      	ldr	r3, [pc, #156]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	4a26      	ldr	r2, [pc, #152]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b210:	f043 0301 	orr.w	r3, r3, #1
 800b214:	6413      	str	r3, [r2, #64]	; 0x40
 800b216:	4b24      	ldr	r3, [pc, #144]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800b222:	e03a      	b.n	800b29a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a20      	ldr	r2, [pc, #128]	; (800b2ac <HAL_TIM_Base_MspInit+0xb8>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d10e      	bne.n	800b24c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b22e:	2300      	movs	r3, #0
 800b230:	613b      	str	r3, [r7, #16]
 800b232:	4b1d      	ldr	r3, [pc, #116]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b236:	4a1c      	ldr	r2, [pc, #112]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b238:	f043 0302 	orr.w	r3, r3, #2
 800b23c:	6413      	str	r3, [r2, #64]	; 0x40
 800b23e:	4b1a      	ldr	r3, [pc, #104]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	613b      	str	r3, [r7, #16]
 800b248:	693b      	ldr	r3, [r7, #16]
}
 800b24a:	e026      	b.n	800b29a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a17      	ldr	r2, [pc, #92]	; (800b2b0 <HAL_TIM_Base_MspInit+0xbc>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d10e      	bne.n	800b274 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	4a12      	ldr	r2, [pc, #72]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b260:	f043 0304 	orr.w	r3, r3, #4
 800b264:	6413      	str	r3, [r2, #64]	; 0x40
 800b266:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	60fb      	str	r3, [r7, #12]
 800b270:	68fb      	ldr	r3, [r7, #12]
}
 800b272:	e012      	b.n	800b29a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <HAL_TIM_Base_MspInit+0xc0>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d10d      	bne.n	800b29a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800b27e:	2300      	movs	r3, #0
 800b280:	60bb      	str	r3, [r7, #8]
 800b282:	4b09      	ldr	r3, [pc, #36]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b286:	4a08      	ldr	r2, [pc, #32]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b28c:	6413      	str	r3, [r2, #64]	; 0x40
 800b28e:	4b06      	ldr	r3, [pc, #24]	; (800b2a8 <HAL_TIM_Base_MspInit+0xb4>)
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b296:	60bb      	str	r3, [r7, #8]
 800b298:	68bb      	ldr	r3, [r7, #8]
}
 800b29a:	bf00      	nop
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40023800 	.word	0x40023800
 800b2ac:	40000400 	.word	0x40000400
 800b2b0:	40000800 	.word	0x40000800
 800b2b4:	40002000 	.word	0x40002000

0800b2b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08a      	sub	sp, #40	; 0x28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2c0:	f107 0314 	add.w	r3, r7, #20
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	605a      	str	r2, [r3, #4]
 800b2ca:	609a      	str	r2, [r3, #8]
 800b2cc:	60da      	str	r2, [r3, #12]
 800b2ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d8:	d11f      	bne.n	800b31a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2da:	2300      	movs	r3, #0
 800b2dc:	613b      	str	r3, [r7, #16]
 800b2de:	4b23      	ldr	r3, [pc, #140]	; (800b36c <HAL_TIM_MspPostInit+0xb4>)
 800b2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e2:	4a22      	ldr	r2, [pc, #136]	; (800b36c <HAL_TIM_MspPostInit+0xb4>)
 800b2e4:	f043 0301 	orr.w	r3, r3, #1
 800b2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ea:	4b20      	ldr	r3, [pc, #128]	; (800b36c <HAL_TIM_MspPostInit+0xb4>)
 800b2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	613b      	str	r3, [r7, #16]
 800b2f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b300:	2300      	movs	r3, #0
 800b302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b304:	2300      	movs	r3, #0
 800b306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b308:	2301      	movs	r3, #1
 800b30a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b30c:	f107 0314 	add.w	r3, r7, #20
 800b310:	4619      	mov	r1, r3
 800b312:	4817      	ldr	r0, [pc, #92]	; (800b370 <HAL_TIM_MspPostInit+0xb8>)
 800b314:	f7f6 fece 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800b318:	e023      	b.n	800b362 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a15      	ldr	r2, [pc, #84]	; (800b374 <HAL_TIM_MspPostInit+0xbc>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d11e      	bne.n	800b362 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	4b10      	ldr	r3, [pc, #64]	; (800b36c <HAL_TIM_MspPostInit+0xb4>)
 800b32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32c:	4a0f      	ldr	r2, [pc, #60]	; (800b36c <HAL_TIM_MspPostInit+0xb4>)
 800b32e:	f043 0308 	orr.w	r3, r3, #8
 800b332:	6313      	str	r3, [r2, #48]	; 0x30
 800b334:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <HAL_TIM_MspPostInit+0xb4>)
 800b336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b338:	f003 0308 	and.w	r3, r3, #8
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800b340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b346:	2302      	movs	r3, #2
 800b348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b34e:	2300      	movs	r3, #0
 800b350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b352:	2302      	movs	r3, #2
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b356:	f107 0314 	add.w	r3, r7, #20
 800b35a:	4619      	mov	r1, r3
 800b35c:	4806      	ldr	r0, [pc, #24]	; (800b378 <HAL_TIM_MspPostInit+0xc0>)
 800b35e:	f7f6 fea9 	bl	80020b4 <HAL_GPIO_Init>
}
 800b362:	bf00      	nop
 800b364:	3728      	adds	r7, #40	; 0x28
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	40023800 	.word	0x40023800
 800b370:	40020000 	.word	0x40020000
 800b374:	40000800 	.word	0x40000800
 800b378:	40020c00 	.word	0x40020c00

0800b37c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b08a      	sub	sp, #40	; 0x28
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b384:	f107 0314 	add.w	r3, r7, #20
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	605a      	str	r2, [r3, #4]
 800b38e:	609a      	str	r2, [r3, #8]
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a29      	ldr	r2, [pc, #164]	; (800b440 <HAL_UART_MspInit+0xc4>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d14b      	bne.n	800b436 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
 800b3a2:	4b28      	ldr	r3, [pc, #160]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a6:	4a27      	ldr	r2, [pc, #156]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b3ae:	4b25      	ldr	r3, [pc, #148]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3b6:	613b      	str	r3, [r7, #16]
 800b3b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	4b21      	ldr	r3, [pc, #132]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c2:	4a20      	ldr	r2, [pc, #128]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3c4:	f043 0302 	orr.w	r3, r3, #2
 800b3c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b3ca:	4b1e      	ldr	r3, [pc, #120]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60bb      	str	r3, [r7, #8]
 800b3da:	4b1a      	ldr	r3, [pc, #104]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	4a19      	ldr	r2, [pc, #100]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3e0:	f043 0308 	orr.w	r3, r3, #8
 800b3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3e6:	4b17      	ldr	r3, [pc, #92]	; (800b444 <HAL_UART_MspInit+0xc8>)
 800b3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ea:	f003 0308 	and.w	r3, r3, #8
 800b3ee:	60bb      	str	r3, [r7, #8]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b3f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b400:	2303      	movs	r3, #3
 800b402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b404:	2307      	movs	r3, #7
 800b406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b408:	f107 0314 	add.w	r3, r7, #20
 800b40c:	4619      	mov	r1, r3
 800b40e:	480e      	ldr	r0, [pc, #56]	; (800b448 <HAL_UART_MspInit+0xcc>)
 800b410:	f7f6 fe50 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800b414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b41a:	2302      	movs	r3, #2
 800b41c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b41e:	2301      	movs	r3, #1
 800b420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b422:	2303      	movs	r3, #3
 800b424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b426:	2307      	movs	r3, #7
 800b428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b42a:	f107 0314 	add.w	r3, r7, #20
 800b42e:	4619      	mov	r1, r3
 800b430:	4806      	ldr	r0, [pc, #24]	; (800b44c <HAL_UART_MspInit+0xd0>)
 800b432:	f7f6 fe3f 	bl	80020b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b436:	bf00      	nop
 800b438:	3728      	adds	r7, #40	; 0x28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40004800 	.word	0x40004800
 800b444:	40023800 	.word	0x40023800
 800b448:	40020400 	.word	0x40020400
 800b44c:	40020c00 	.word	0x40020c00

0800b450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b454:	bf00      	nop
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b45e:	b480      	push	{r7}
 800b460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b462:	e7fe      	b.n	800b462 <HardFault_Handler+0x4>

0800b464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b468:	e7fe      	b.n	800b468 <MemManage_Handler+0x4>

0800b46a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b46a:	b480      	push	{r7}
 800b46c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b46e:	e7fe      	b.n	800b46e <BusFault_Handler+0x4>

0800b470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b474:	e7fe      	b.n	800b474 <UsageFault_Handler+0x4>

0800b476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b476:	b480      	push	{r7}
 800b478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b47a:	bf00      	nop
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b484:	b480      	push	{r7}
 800b486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b488:	bf00      	nop
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b492:	b480      	push	{r7}
 800b494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b496:	bf00      	nop
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b4a4:	f7f5 fd52 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b4a8:	bf00      	nop
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	f7f6 ffcb 	bl	800244c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800b4b6:	bf00      	nop
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b4c0:	4802      	ldr	r0, [pc, #8]	; (800b4cc <DMA2_Stream0_IRQHandler+0x10>)
 800b4c2:	f7f6 fb8f 	bl	8001be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b4c6:	bf00      	nop
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20000550 	.word	0x20000550

0800b4d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b4d4:	4802      	ldr	r0, [pc, #8]	; (800b4e0 <OTG_FS_IRQHandler+0x10>)
 800b4d6:	f7f8 fd17 	bl	8003f08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b4da:	bf00      	nop
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	200019d0 	.word	0x200019d0

0800b4e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e00a      	b.n	800b50c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b4f6:	f7ff fbfb 	bl	800acf0 <__io_getchar>
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	1c5a      	adds	r2, r3, #1
 800b500:	60ba      	str	r2, [r7, #8]
 800b502:	b2ca      	uxtb	r2, r1
 800b504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	3301      	adds	r3, #1
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	dbf0      	blt.n	800b4f6 <_read+0x12>
	}

return len;
 800b514:	687b      	ldr	r3, [r7, #4]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b086      	sub	sp, #24
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	e009      	b.n	800b544 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	60ba      	str	r2, [r7, #8]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff fbc7 	bl	800accc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	3301      	adds	r3, #1
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	dbf1      	blt.n	800b530 <_write+0x12>
	}
	return len;
 800b54c:	687b      	ldr	r3, [r7, #4]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3718      	adds	r7, #24
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <_close>:

int _close(int file)
{
 800b556:	b480      	push	{r7}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
	return -1;
 800b55e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b57e:	605a      	str	r2, [r3, #4]
	return 0;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <_isatty>:

int _isatty(int file)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
	return 1;
 800b596:	2301      	movs	r3, #1
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
	return 0;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b5c8:	4b11      	ldr	r3, [pc, #68]	; (800b610 <_sbrk+0x50>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <_sbrk+0x16>
		heap_end = &end;
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <_sbrk+0x50>)
 800b5d2:	4a10      	ldr	r2, [pc, #64]	; (800b614 <_sbrk+0x54>)
 800b5d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b5d6:	4b0e      	ldr	r3, [pc, #56]	; (800b610 <_sbrk+0x50>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b5dc:	4b0c      	ldr	r3, [pc, #48]	; (800b610 <_sbrk+0x50>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	466a      	mov	r2, sp
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d907      	bls.n	800b5fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b5ea:	f000 fd4f 	bl	800c08c <__errno>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f8:	e006      	b.n	800b608 <_sbrk+0x48>
	}

	heap_end += incr;
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <_sbrk+0x50>)
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4413      	add	r3, r2
 800b602:	4a03      	ldr	r2, [pc, #12]	; (800b610 <_sbrk+0x50>)
 800b604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b606:	68fb      	ldr	r3, [r7, #12]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	20000384 	.word	0x20000384
 800b614:	20001fe0 	.word	0x20001fe0

0800b618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b61c:	4b16      	ldr	r3, [pc, #88]	; (800b678 <SystemInit+0x60>)
 800b61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b622:	4a15      	ldr	r2, [pc, #84]	; (800b678 <SystemInit+0x60>)
 800b624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b62c:	4b13      	ldr	r3, [pc, #76]	; (800b67c <SystemInit+0x64>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a12      	ldr	r2, [pc, #72]	; (800b67c <SystemInit+0x64>)
 800b632:	f043 0301 	orr.w	r3, r3, #1
 800b636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b638:	4b10      	ldr	r3, [pc, #64]	; (800b67c <SystemInit+0x64>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b63e:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <SystemInit+0x64>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a0e      	ldr	r2, [pc, #56]	; (800b67c <SystemInit+0x64>)
 800b644:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b64c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b64e:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <SystemInit+0x64>)
 800b650:	4a0b      	ldr	r2, [pc, #44]	; (800b680 <SystemInit+0x68>)
 800b652:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b654:	4b09      	ldr	r3, [pc, #36]	; (800b67c <SystemInit+0x64>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a08      	ldr	r2, [pc, #32]	; (800b67c <SystemInit+0x64>)
 800b65a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b65e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b660:	4b06      	ldr	r3, [pc, #24]	; (800b67c <SystemInit+0x64>)
 800b662:	2200      	movs	r2, #0
 800b664:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b666:	4b04      	ldr	r3, [pc, #16]	; (800b678 <SystemInit+0x60>)
 800b668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b66c:	609a      	str	r2, [r3, #8]
#endif
}
 800b66e:	bf00      	nop
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	e000ed00 	.word	0xe000ed00
 800b67c:	40023800 	.word	0x40023800
 800b680:	24003010 	.word	0x24003010

0800b684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b688:	2200      	movs	r2, #0
 800b68a:	4912      	ldr	r1, [pc, #72]	; (800b6d4 <MX_USB_DEVICE_Init+0x50>)
 800b68c:	4812      	ldr	r0, [pc, #72]	; (800b6d8 <MX_USB_DEVICE_Init+0x54>)
 800b68e:	f7fd f93e 	bl	800890e <USBD_Init>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b698:	f7ff fc0c 	bl	800aeb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b69c:	490f      	ldr	r1, [pc, #60]	; (800b6dc <MX_USB_DEVICE_Init+0x58>)
 800b69e:	480e      	ldr	r0, [pc, #56]	; (800b6d8 <MX_USB_DEVICE_Init+0x54>)
 800b6a0:	f7fd f960 	bl	8008964 <USBD_RegisterClass>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6aa:	f7ff fc03 	bl	800aeb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6ae:	490c      	ldr	r1, [pc, #48]	; (800b6e0 <MX_USB_DEVICE_Init+0x5c>)
 800b6b0:	4809      	ldr	r0, [pc, #36]	; (800b6d8 <MX_USB_DEVICE_Init+0x54>)
 800b6b2:	f7fd f8bd 	bl	8008830 <USBD_CDC_RegisterInterface>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6bc:	f7ff fbfa 	bl	800aeb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6c0:	4805      	ldr	r0, [pc, #20]	; (800b6d8 <MX_USB_DEVICE_Init+0x54>)
 800b6c2:	f7fd f969 	bl	8008998 <USBD_Start>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6cc:	f7ff fbf2 	bl	800aeb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6d0:	bf00      	nop
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	2000012c 	.word	0x2000012c
 800b6d8:	20000734 	.word	0x20000734
 800b6dc:	20000014 	.word	0x20000014
 800b6e0:	2000011c 	.word	0x2000011c

0800b6e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4905      	ldr	r1, [pc, #20]	; (800b700 <CDC_Init_FS+0x1c>)
 800b6ec:	4805      	ldr	r0, [pc, #20]	; (800b704 <CDC_Init_FS+0x20>)
 800b6ee:	f7fd f8b6 	bl	800885e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6f2:	4905      	ldr	r1, [pc, #20]	; (800b708 <CDC_Init_FS+0x24>)
 800b6f4:	4803      	ldr	r0, [pc, #12]	; (800b704 <CDC_Init_FS+0x20>)
 800b6f6:	f7fd f8cc 	bl	8008892 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	200011d0 	.word	0x200011d0
 800b704:	20000734 	.word	0x20000734
 800b708:	200009d0 	.word	0x200009d0

0800b70c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b710:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b712:	4618      	mov	r0, r3
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	6039      	str	r1, [r7, #0]
 800b726:	71fb      	strb	r3, [r7, #7]
 800b728:	4613      	mov	r3, r2
 800b72a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	2b23      	cmp	r3, #35	; 0x23
 800b730:	d84a      	bhi.n	800b7c8 <CDC_Control_FS+0xac>
 800b732:	a201      	add	r2, pc, #4	; (adr r2, 800b738 <CDC_Control_FS+0x1c>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b7c9 	.word	0x0800b7c9
 800b73c:	0800b7c9 	.word	0x0800b7c9
 800b740:	0800b7c9 	.word	0x0800b7c9
 800b744:	0800b7c9 	.word	0x0800b7c9
 800b748:	0800b7c9 	.word	0x0800b7c9
 800b74c:	0800b7c9 	.word	0x0800b7c9
 800b750:	0800b7c9 	.word	0x0800b7c9
 800b754:	0800b7c9 	.word	0x0800b7c9
 800b758:	0800b7c9 	.word	0x0800b7c9
 800b75c:	0800b7c9 	.word	0x0800b7c9
 800b760:	0800b7c9 	.word	0x0800b7c9
 800b764:	0800b7c9 	.word	0x0800b7c9
 800b768:	0800b7c9 	.word	0x0800b7c9
 800b76c:	0800b7c9 	.word	0x0800b7c9
 800b770:	0800b7c9 	.word	0x0800b7c9
 800b774:	0800b7c9 	.word	0x0800b7c9
 800b778:	0800b7c9 	.word	0x0800b7c9
 800b77c:	0800b7c9 	.word	0x0800b7c9
 800b780:	0800b7c9 	.word	0x0800b7c9
 800b784:	0800b7c9 	.word	0x0800b7c9
 800b788:	0800b7c9 	.word	0x0800b7c9
 800b78c:	0800b7c9 	.word	0x0800b7c9
 800b790:	0800b7c9 	.word	0x0800b7c9
 800b794:	0800b7c9 	.word	0x0800b7c9
 800b798:	0800b7c9 	.word	0x0800b7c9
 800b79c:	0800b7c9 	.word	0x0800b7c9
 800b7a0:	0800b7c9 	.word	0x0800b7c9
 800b7a4:	0800b7c9 	.word	0x0800b7c9
 800b7a8:	0800b7c9 	.word	0x0800b7c9
 800b7ac:	0800b7c9 	.word	0x0800b7c9
 800b7b0:	0800b7c9 	.word	0x0800b7c9
 800b7b4:	0800b7c9 	.word	0x0800b7c9
 800b7b8:	0800b7c9 	.word	0x0800b7c9
 800b7bc:	0800b7c9 	.word	0x0800b7c9
 800b7c0:	0800b7c9 	.word	0x0800b7c9
 800b7c4:	0800b7c9 	.word	0x0800b7c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7c8:	bf00      	nop
  }

  return (USBD_OK);
 800b7ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	4805      	ldr	r0, [pc, #20]	; (800b7fc <CDC_Receive_FS+0x24>)
 800b7e6:	f7fd f854 	bl	8008892 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7ea:	4804      	ldr	r0, [pc, #16]	; (800b7fc <CDC_Receive_FS+0x24>)
 800b7ec:	f7fd f865 	bl	80088ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b7f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20000734 	.word	0x20000734

0800b800 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	; 0x28
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b808:	f107 0314 	add.w	r3, r7, #20
 800b80c:	2200      	movs	r2, #0
 800b80e:	601a      	str	r2, [r3, #0]
 800b810:	605a      	str	r2, [r3, #4]
 800b812:	609a      	str	r2, [r3, #8]
 800b814:	60da      	str	r2, [r3, #12]
 800b816:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b820:	d147      	bne.n	800b8b2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b822:	2300      	movs	r3, #0
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	4b25      	ldr	r3, [pc, #148]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82a:	4a24      	ldr	r2, [pc, #144]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b82c:	f043 0301 	orr.w	r3, r3, #1
 800b830:	6313      	str	r3, [r2, #48]	; 0x30
 800b832:	4b22      	ldr	r3, [pc, #136]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	613b      	str	r3, [r7, #16]
 800b83c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b83e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b844:	2300      	movs	r3, #0
 800b846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b84c:	f107 0314 	add.w	r3, r7, #20
 800b850:	4619      	mov	r1, r3
 800b852:	481b      	ldr	r0, [pc, #108]	; (800b8c0 <HAL_PCD_MspInit+0xc0>)
 800b854:	f7f6 fc2e 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b858:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b85c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b85e:	2302      	movs	r3, #2
 800b860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b866:	2300      	movs	r3, #0
 800b868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b86a:	230a      	movs	r3, #10
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b86e:	f107 0314 	add.w	r3, r7, #20
 800b872:	4619      	mov	r1, r3
 800b874:	4812      	ldr	r0, [pc, #72]	; (800b8c0 <HAL_PCD_MspInit+0xc0>)
 800b876:	f7f6 fc1d 	bl	80020b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b87a:	4b10      	ldr	r3, [pc, #64]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87e:	4a0f      	ldr	r2, [pc, #60]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b884:	6353      	str	r3, [r2, #52]	; 0x34
 800b886:	2300      	movs	r3, #0
 800b888:	60fb      	str	r3, [r7, #12]
 800b88a:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88e:	4a0b      	ldr	r2, [pc, #44]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b894:	6453      	str	r3, [r2, #68]	; 0x44
 800b896:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <HAL_PCD_MspInit+0xbc>)
 800b898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	2043      	movs	r0, #67	; 0x43
 800b8a8:	f7f6 f857 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8ac:	2043      	movs	r0, #67	; 0x43
 800b8ae:	f7f6 f870 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8b2:	bf00      	nop
 800b8b4:	3728      	adds	r7, #40	; 0x28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	40023800 	.word	0x40023800
 800b8c0:	40020000 	.word	0x40020000

0800b8c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f7fd f8a5 	bl	8008a2a <USBD_LL_SetupStage>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b8fa:	78fa      	ldrb	r2, [r7, #3]
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	4613      	mov	r3, r2
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	1a9b      	subs	r3, r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	440b      	add	r3, r1
 800b908:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	78fb      	ldrb	r3, [r7, #3]
 800b910:	4619      	mov	r1, r3
 800b912:	f7fd f8d5 	bl	8008ac0 <USBD_LL_DataOutStage>
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b930:	78fa      	ldrb	r2, [r7, #3]
 800b932:	6879      	ldr	r1, [r7, #4]
 800b934:	4613      	mov	r3, r2
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	1a9b      	subs	r3, r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	440b      	add	r3, r1
 800b93e:	3348      	adds	r3, #72	; 0x48
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	78fb      	ldrb	r3, [r7, #3]
 800b944:	4619      	mov	r1, r3
 800b946:	f7fd f92c 	bl	8008ba2 <USBD_LL_DataInStage>
}
 800b94a:	bf00      	nop
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b960:	4618      	mov	r0, r3
 800b962:	f7fd fa3a 	bl	8008dda <USBD_LL_SOF>
}
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b976:	2301      	movs	r3, #1
 800b978:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d102      	bne.n	800b988 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
 800b986:	e008      	b.n	800b99a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d102      	bne.n	800b996 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b990:	2301      	movs	r3, #1
 800b992:	73fb      	strb	r3, [r7, #15]
 800b994:	e001      	b.n	800b99a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b996:	f7ff fa8d 	bl	800aeb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9a0:	7bfa      	ldrb	r2, [r7, #15]
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fd f9e2 	bl	8008d6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fd f99b 	bl	8008cec <USBD_LL_Reset>
}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fd f9dd 	bl	8008d8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9e6:	f043 0301 	orr.w	r3, r3, #1
 800b9ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a1b      	ldr	r3, [r3, #32]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d005      	beq.n	800ba00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9f4:	4b04      	ldr	r3, [pc, #16]	; (800ba08 <HAL_PCD_SuspendCallback+0x48>)
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	4a03      	ldr	r2, [pc, #12]	; (800ba08 <HAL_PCD_SuspendCallback+0x48>)
 800b9fa:	f043 0306 	orr.w	r3, r3, #6
 800b9fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	e000ed00 	.word	0xe000ed00

0800ba0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fd f9cc 	bl	8008db8 <USBD_LL_Resume>
}
 800ba20:	bf00      	nop
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba3a:	78fa      	ldrb	r2, [r7, #3]
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7fd f9f2 	bl	8008e28 <USBD_LL_IsoOUTIncomplete>
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd f9d3 	bl	8008e0e <USBD_LL_IsoINIncomplete>
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fd f9df 	bl	8008e42 <USBD_LL_DevConnected>
}
 800ba84:	bf00      	nop
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fd f9dc 	bl	8008e58 <USBD_LL_DevDisconnected>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d13c      	bne.n	800bb32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bab8:	4a20      	ldr	r2, [pc, #128]	; (800bb3c <USBD_LL_Init+0x94>)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a1e      	ldr	r2, [pc, #120]	; (800bb3c <USBD_LL_Init+0x94>)
 800bac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bac8:	4b1c      	ldr	r3, [pc, #112]	; (800bb3c <USBD_LL_Init+0x94>)
 800baca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bace:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bad0:	4b1a      	ldr	r3, [pc, #104]	; (800bb3c <USBD_LL_Init+0x94>)
 800bad2:	2204      	movs	r2, #4
 800bad4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bad6:	4b19      	ldr	r3, [pc, #100]	; (800bb3c <USBD_LL_Init+0x94>)
 800bad8:	2202      	movs	r2, #2
 800bada:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800badc:	4b17      	ldr	r3, [pc, #92]	; (800bb3c <USBD_LL_Init+0x94>)
 800bade:	2200      	movs	r2, #0
 800bae0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bae2:	4b16      	ldr	r3, [pc, #88]	; (800bb3c <USBD_LL_Init+0x94>)
 800bae4:	2202      	movs	r2, #2
 800bae6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bae8:	4b14      	ldr	r3, [pc, #80]	; (800bb3c <USBD_LL_Init+0x94>)
 800baea:	2200      	movs	r2, #0
 800baec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <USBD_LL_Init+0x94>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800baf4:	4b11      	ldr	r3, [pc, #68]	; (800bb3c <USBD_LL_Init+0x94>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <USBD_LL_Init+0x94>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <USBD_LL_Init+0x94>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb06:	480d      	ldr	r0, [pc, #52]	; (800bb3c <USBD_LL_Init+0x94>)
 800bb08:	f7f8 f8ae 	bl	8003c68 <HAL_PCD_Init>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d001      	beq.n	800bb16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb12:	f7ff f9cf 	bl	800aeb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb16:	2180      	movs	r1, #128	; 0x80
 800bb18:	4808      	ldr	r0, [pc, #32]	; (800bb3c <USBD_LL_Init+0x94>)
 800bb1a:	f7f9 fa12 	bl	8004f42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb1e:	2240      	movs	r2, #64	; 0x40
 800bb20:	2100      	movs	r1, #0
 800bb22:	4806      	ldr	r0, [pc, #24]	; (800bb3c <USBD_LL_Init+0x94>)
 800bb24:	f7f9 f9c6 	bl	8004eb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb28:	2280      	movs	r2, #128	; 0x80
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	4803      	ldr	r0, [pc, #12]	; (800bb3c <USBD_LL_Init+0x94>)
 800bb2e:	f7f9 f9c1 	bl	8004eb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	200019d0 	.word	0x200019d0

0800bb40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7f8 f9a3 	bl	8003ea2 <HAL_PCD_Start>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 f92e 	bl	800bdc4 <USBD_Get_USB_Status>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	4608      	mov	r0, r1
 800bb80:	4611      	mov	r1, r2
 800bb82:	461a      	mov	r2, r3
 800bb84:	4603      	mov	r3, r0
 800bb86:	70fb      	strb	r3, [r7, #3]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70bb      	strb	r3, [r7, #2]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bb9e:	78bb      	ldrb	r3, [r7, #2]
 800bba0:	883a      	ldrh	r2, [r7, #0]
 800bba2:	78f9      	ldrb	r1, [r7, #3]
 800bba4:	f7f8 fd78 	bl	8004698 <HAL_PCD_EP_Open>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f908 	bl	800bdc4 <USBD_Get_USB_Status>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bbdc:	78fa      	ldrb	r2, [r7, #3]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f8 fdc1 	bl	8004768 <HAL_PCD_EP_Close>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 f8e9 	bl	800bdc4 <USBD_Get_USB_Status>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc1a:	78fa      	ldrb	r2, [r7, #3]
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f8 fe99 	bl	8004956 <HAL_PCD_EP_SetStall>
 800bc24:	4603      	mov	r3, r0
 800bc26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 f8ca 	bl	800bdc4 <USBD_Get_USB_Status>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc58:	78fa      	ldrb	r2, [r7, #3]
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f8 fede 	bl	8004a1e <HAL_PCD_EP_ClrStall>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f8ab 	bl	800bdc4 <USBD_Get_USB_Status>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bc72:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc8e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bc90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	da0b      	bge.n	800bcb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc9e:	68f9      	ldr	r1, [r7, #12]
 800bca0:	4613      	mov	r3, r2
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	1a9b      	subs	r3, r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	440b      	add	r3, r1
 800bcaa:	333e      	adds	r3, #62	; 0x3e
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	e00b      	b.n	800bcc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcb6:	68f9      	ldr	r1, [r7, #12]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	00db      	lsls	r3, r3, #3
 800bcbc:	1a9b      	subs	r3, r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	440b      	add	r3, r1
 800bcc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bcee:	78fa      	ldrb	r2, [r7, #3]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7f8 fcab 	bl	800464e <HAL_PCD_SetAddress>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 f860 	bl	800bdc4 <USBD_Get_USB_Status>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	460b      	mov	r3, r1
 800bd20:	72fb      	strb	r3, [r7, #11]
 800bd22:	4613      	mov	r3, r2
 800bd24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd34:	893b      	ldrh	r3, [r7, #8]
 800bd36:	7af9      	ldrb	r1, [r7, #11]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	f7f8 fdc2 	bl	80048c2 <HAL_PCD_EP_Transmit>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bd42:	7dfb      	ldrb	r3, [r7, #23]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 f83d 	bl	800bdc4 <USBD_Get_USB_Status>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bd4e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	607a      	str	r2, [r7, #4]
 800bd62:	461a      	mov	r2, r3
 800bd64:	460b      	mov	r3, r1
 800bd66:	72fb      	strb	r3, [r7, #11]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd7a:	893b      	ldrh	r3, [r7, #8]
 800bd7c:	7af9      	ldrb	r1, [r7, #11]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	f7f8 fd3c 	bl	80047fc <HAL_PCD_EP_Receive>
 800bd84:	4603      	mov	r3, r0
 800bd86:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bd88:	7dfb      	ldrb	r3, [r7, #23]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 f81a 	bl	800bdc4 <USBD_Get_USB_Status>
 800bd90:	4603      	mov	r3, r0
 800bd92:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bd94:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	460b      	mov	r3, r1
 800bda8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bdb0:	78fa      	ldrb	r2, [r7, #3]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f8 fd6c 	bl	8004892 <HAL_PCD_EP_GetRxCount>
 800bdba:	4603      	mov	r3, r0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	4603      	mov	r3, r0
 800bdcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdd2:	79fb      	ldrb	r3, [r7, #7]
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	d817      	bhi.n	800be08 <USBD_Get_USB_Status+0x44>
 800bdd8:	a201      	add	r2, pc, #4	; (adr r2, 800bde0 <USBD_Get_USB_Status+0x1c>)
 800bdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdde:	bf00      	nop
 800bde0:	0800bdf1 	.word	0x0800bdf1
 800bde4:	0800bdf7 	.word	0x0800bdf7
 800bde8:	0800bdfd 	.word	0x0800bdfd
 800bdec:	0800be03 	.word	0x0800be03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf4:	e00b      	b.n	800be0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdfa:	e008      	b.n	800be0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800be00:	e005      	b.n	800be0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be02:	2302      	movs	r3, #2
 800be04:	73fb      	strb	r3, [r7, #15]
    break;
 800be06:	e002      	b.n	800be0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be08:	2302      	movs	r3, #2
 800be0a:	73fb      	strb	r3, [r7, #15]
    break;
 800be0c:	bf00      	nop
  }
  return usb_status;
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	6039      	str	r1, [r7, #0]
 800be26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2212      	movs	r2, #18
 800be2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be2e:	4b03      	ldr	r3, [pc, #12]	; (800be3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20000148 	.word	0x20000148

0800be40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	6039      	str	r1, [r7, #0]
 800be4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2204      	movs	r2, #4
 800be50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be52:	4b03      	ldr	r3, [pc, #12]	; (800be60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	2000015c 	.word	0x2000015c

0800be64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	6039      	str	r1, [r7, #0]
 800be6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d105      	bne.n	800be82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	4907      	ldr	r1, [pc, #28]	; (800be98 <USBD_FS_ProductStrDescriptor+0x34>)
 800be7a:	4808      	ldr	r0, [pc, #32]	; (800be9c <USBD_FS_ProductStrDescriptor+0x38>)
 800be7c:	f7fd fcc4 	bl	8009808 <USBD_GetString>
 800be80:	e004      	b.n	800be8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	4904      	ldr	r1, [pc, #16]	; (800be98 <USBD_FS_ProductStrDescriptor+0x34>)
 800be86:	4805      	ldr	r0, [pc, #20]	; (800be9c <USBD_FS_ProductStrDescriptor+0x38>)
 800be88:	f7fd fcbe 	bl	8009808 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be8c:	4b02      	ldr	r3, [pc, #8]	; (800be98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20001dd8 	.word	0x20001dd8
 800be9c:	0800f354 	.word	0x0800f354

0800bea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	6039      	str	r1, [r7, #0]
 800beaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800beac:	683a      	ldr	r2, [r7, #0]
 800beae:	4904      	ldr	r1, [pc, #16]	; (800bec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800beb0:	4804      	ldr	r0, [pc, #16]	; (800bec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800beb2:	f7fd fca9 	bl	8009808 <USBD_GetString>
  return USBD_StrDesc;
 800beb6:	4b02      	ldr	r3, [pc, #8]	; (800bec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20001dd8 	.word	0x20001dd8
 800bec4:	0800f36c 	.word	0x0800f36c

0800bec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	6039      	str	r1, [r7, #0]
 800bed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	221a      	movs	r2, #26
 800bed8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800beda:	f000 f843 	bl	800bf64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bede:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20000160 	.word	0x20000160

0800beec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	4603      	mov	r3, r0
 800bef4:	6039      	str	r1, [r7, #0]
 800bef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d105      	bne.n	800bf0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	4907      	ldr	r1, [pc, #28]	; (800bf20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf02:	4808      	ldr	r0, [pc, #32]	; (800bf24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf04:	f7fd fc80 	bl	8009808 <USBD_GetString>
 800bf08:	e004      	b.n	800bf14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	4904      	ldr	r1, [pc, #16]	; (800bf20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf0e:	4805      	ldr	r0, [pc, #20]	; (800bf24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf10:	f7fd fc7a 	bl	8009808 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf14:	4b02      	ldr	r3, [pc, #8]	; (800bf20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20001dd8 	.word	0x20001dd8
 800bf24:	0800f380 	.word	0x0800f380

0800bf28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	6039      	str	r1, [r7, #0]
 800bf32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d105      	bne.n	800bf46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	4907      	ldr	r1, [pc, #28]	; (800bf5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf3e:	4808      	ldr	r0, [pc, #32]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf40:	f7fd fc62 	bl	8009808 <USBD_GetString>
 800bf44:	e004      	b.n	800bf50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	4904      	ldr	r1, [pc, #16]	; (800bf5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf4a:	4805      	ldr	r0, [pc, #20]	; (800bf60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf4c:	f7fd fc5c 	bl	8009808 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf50:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20001dd8 	.word	0x20001dd8
 800bf60:	0800f38c 	.word	0x0800f38c

0800bf64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf6a:	4b0f      	ldr	r3, [pc, #60]	; (800bfa8 <Get_SerialNum+0x44>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf70:	4b0e      	ldr	r3, [pc, #56]	; (800bfac <Get_SerialNum+0x48>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf76:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <Get_SerialNum+0x4c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4413      	add	r3, r2
 800bf82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d009      	beq.n	800bf9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf8a:	2208      	movs	r2, #8
 800bf8c:	4909      	ldr	r1, [pc, #36]	; (800bfb4 <Get_SerialNum+0x50>)
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 f814 	bl	800bfbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf94:	2204      	movs	r2, #4
 800bf96:	4908      	ldr	r1, [pc, #32]	; (800bfb8 <Get_SerialNum+0x54>)
 800bf98:	68b8      	ldr	r0, [r7, #8]
 800bf9a:	f000 f80f 	bl	800bfbc <IntToUnicode>
  }
}
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	1fff7a10 	.word	0x1fff7a10
 800bfac:	1fff7a14 	.word	0x1fff7a14
 800bfb0:	1fff7a18 	.word	0x1fff7a18
 800bfb4:	20000162 	.word	0x20000162
 800bfb8:	20000172 	.word	0x20000172

0800bfbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfce:	2300      	movs	r3, #0
 800bfd0:	75fb      	strb	r3, [r7, #23]
 800bfd2:	e027      	b.n	800c024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	0f1b      	lsrs	r3, r3, #28
 800bfd8:	2b09      	cmp	r3, #9
 800bfda:	d80b      	bhi.n	800bff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	0f1b      	lsrs	r3, r3, #28
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	005b      	lsls	r3, r3, #1
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	440b      	add	r3, r1
 800bfec:	3230      	adds	r2, #48	; 0x30
 800bfee:	b2d2      	uxtb	r2, r2
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	e00a      	b.n	800c00a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	0f1b      	lsrs	r3, r3, #28
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	4619      	mov	r1, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	440b      	add	r3, r1
 800c004:	3237      	adds	r2, #55	; 0x37
 800c006:	b2d2      	uxtb	r2, r2
 800c008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	011b      	lsls	r3, r3, #4
 800c00e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c010:	7dfb      	ldrb	r3, [r7, #23]
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	3301      	adds	r3, #1
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4413      	add	r3, r2
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	3301      	adds	r3, #1
 800c022:	75fb      	strb	r3, [r7, #23]
 800c024:	7dfa      	ldrb	r2, [r7, #23]
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d3d3      	bcc.n	800bfd4 <IntToUnicode+0x18>
  }
}
 800c02c:	bf00      	nop
 800c02e:	371c      	adds	r7, #28
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c038:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c03c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c03e:	e003      	b.n	800c048 <LoopCopyDataInit>

0800c040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c040:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c046:	3104      	adds	r1, #4

0800c048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c048:	480b      	ldr	r0, [pc, #44]	; (800c078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c04a:	4b0c      	ldr	r3, [pc, #48]	; (800c07c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c04c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c04e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c050:	d3f6      	bcc.n	800c040 <CopyDataInit>
  ldr  r2, =_sbss
 800c052:	4a0b      	ldr	r2, [pc, #44]	; (800c080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c054:	e002      	b.n	800c05c <LoopFillZerobss>

0800c056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c058:	f842 3b04 	str.w	r3, [r2], #4

0800c05c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c05c:	4b09      	ldr	r3, [pc, #36]	; (800c084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c05e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c060:	d3f9      	bcc.n	800c056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c062:	f7ff fad9 	bl	800b618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c066:	f000 f9d1 	bl	800c40c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c06a:	f7fd fceb 	bl	8009a44 <main>
  bx  lr    
 800c06e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c070:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c074:	0800f6c8 	.word	0x0800f6c8
  ldr  r0, =_sdata
 800c078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c07c:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 800c080:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800c084:	20001fdc 	.word	0x20001fdc

0800c088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c088:	e7fe      	b.n	800c088 <ADC_IRQHandler>
	...

0800c08c <__errno>:
 800c08c:	4b01      	ldr	r3, [pc, #4]	; (800c094 <__errno+0x8>)
 800c08e:	6818      	ldr	r0, [r3, #0]
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	2000017c 	.word	0x2000017c

0800c098 <__sflush_r>:
 800c098:	898a      	ldrh	r2, [r1, #12]
 800c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	4605      	mov	r5, r0
 800c0a0:	0710      	lsls	r0, r2, #28
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	d458      	bmi.n	800c158 <__sflush_r+0xc0>
 800c0a6:	684b      	ldr	r3, [r1, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dc05      	bgt.n	800c0b8 <__sflush_r+0x20>
 800c0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dc02      	bgt.n	800c0b8 <__sflush_r+0x20>
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	d0f9      	beq.n	800c0b2 <__sflush_r+0x1a>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0c4:	682f      	ldr	r7, [r5, #0]
 800c0c6:	6a21      	ldr	r1, [r4, #32]
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	d032      	beq.n	800c132 <__sflush_r+0x9a>
 800c0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	075a      	lsls	r2, r3, #29
 800c0d2:	d505      	bpl.n	800c0e0 <__sflush_r+0x48>
 800c0d4:	6863      	ldr	r3, [r4, #4]
 800c0d6:	1ac0      	subs	r0, r0, r3
 800c0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0da:	b10b      	cbz	r3, 800c0e0 <__sflush_r+0x48>
 800c0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0de:	1ac0      	subs	r0, r0, r3
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0e6:	6a21      	ldr	r1, [r4, #32]
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	47b0      	blx	r6
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	d106      	bne.n	800c100 <__sflush_r+0x68>
 800c0f2:	6829      	ldr	r1, [r5, #0]
 800c0f4:	291d      	cmp	r1, #29
 800c0f6:	d848      	bhi.n	800c18a <__sflush_r+0xf2>
 800c0f8:	4a29      	ldr	r2, [pc, #164]	; (800c1a0 <__sflush_r+0x108>)
 800c0fa:	40ca      	lsrs	r2, r1
 800c0fc:	07d6      	lsls	r6, r2, #31
 800c0fe:	d544      	bpl.n	800c18a <__sflush_r+0xf2>
 800c100:	2200      	movs	r2, #0
 800c102:	6062      	str	r2, [r4, #4]
 800c104:	04d9      	lsls	r1, r3, #19
 800c106:	6922      	ldr	r2, [r4, #16]
 800c108:	6022      	str	r2, [r4, #0]
 800c10a:	d504      	bpl.n	800c116 <__sflush_r+0x7e>
 800c10c:	1c42      	adds	r2, r0, #1
 800c10e:	d101      	bne.n	800c114 <__sflush_r+0x7c>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b903      	cbnz	r3, 800c116 <__sflush_r+0x7e>
 800c114:	6560      	str	r0, [r4, #84]	; 0x54
 800c116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c118:	602f      	str	r7, [r5, #0]
 800c11a:	2900      	cmp	r1, #0
 800c11c:	d0c9      	beq.n	800c0b2 <__sflush_r+0x1a>
 800c11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c122:	4299      	cmp	r1, r3
 800c124:	d002      	beq.n	800c12c <__sflush_r+0x94>
 800c126:	4628      	mov	r0, r5
 800c128:	f000 f9ac 	bl	800c484 <_free_r>
 800c12c:	2000      	movs	r0, #0
 800c12e:	6360      	str	r0, [r4, #52]	; 0x34
 800c130:	e7c0      	b.n	800c0b4 <__sflush_r+0x1c>
 800c132:	2301      	movs	r3, #1
 800c134:	4628      	mov	r0, r5
 800c136:	47b0      	blx	r6
 800c138:	1c41      	adds	r1, r0, #1
 800c13a:	d1c8      	bne.n	800c0ce <__sflush_r+0x36>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0c5      	beq.n	800c0ce <__sflush_r+0x36>
 800c142:	2b1d      	cmp	r3, #29
 800c144:	d001      	beq.n	800c14a <__sflush_r+0xb2>
 800c146:	2b16      	cmp	r3, #22
 800c148:	d101      	bne.n	800c14e <__sflush_r+0xb6>
 800c14a:	602f      	str	r7, [r5, #0]
 800c14c:	e7b1      	b.n	800c0b2 <__sflush_r+0x1a>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	e7ad      	b.n	800c0b4 <__sflush_r+0x1c>
 800c158:	690f      	ldr	r7, [r1, #16]
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	d0a9      	beq.n	800c0b2 <__sflush_r+0x1a>
 800c15e:	0793      	lsls	r3, r2, #30
 800c160:	680e      	ldr	r6, [r1, #0]
 800c162:	bf08      	it	eq
 800c164:	694b      	ldreq	r3, [r1, #20]
 800c166:	600f      	str	r7, [r1, #0]
 800c168:	bf18      	it	ne
 800c16a:	2300      	movne	r3, #0
 800c16c:	eba6 0807 	sub.w	r8, r6, r7
 800c170:	608b      	str	r3, [r1, #8]
 800c172:	f1b8 0f00 	cmp.w	r8, #0
 800c176:	dd9c      	ble.n	800c0b2 <__sflush_r+0x1a>
 800c178:	4643      	mov	r3, r8
 800c17a:	463a      	mov	r2, r7
 800c17c:	6a21      	ldr	r1, [r4, #32]
 800c17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c180:	4628      	mov	r0, r5
 800c182:	47b0      	blx	r6
 800c184:	2800      	cmp	r0, #0
 800c186:	dc06      	bgt.n	800c196 <__sflush_r+0xfe>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c18e:	81a3      	strh	r3, [r4, #12]
 800c190:	f04f 30ff 	mov.w	r0, #4294967295
 800c194:	e78e      	b.n	800c0b4 <__sflush_r+0x1c>
 800c196:	4407      	add	r7, r0
 800c198:	eba8 0800 	sub.w	r8, r8, r0
 800c19c:	e7e9      	b.n	800c172 <__sflush_r+0xda>
 800c19e:	bf00      	nop
 800c1a0:	20400001 	.word	0x20400001

0800c1a4 <_fflush_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	690b      	ldr	r3, [r1, #16]
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	b1db      	cbz	r3, 800c1e6 <_fflush_r+0x42>
 800c1ae:	b118      	cbz	r0, 800c1b8 <_fflush_r+0x14>
 800c1b0:	6983      	ldr	r3, [r0, #24]
 800c1b2:	b90b      	cbnz	r3, 800c1b8 <_fflush_r+0x14>
 800c1b4:	f000 f872 	bl	800c29c <__sinit>
 800c1b8:	4b0c      	ldr	r3, [pc, #48]	; (800c1ec <_fflush_r+0x48>)
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d109      	bne.n	800c1d2 <_fflush_r+0x2e>
 800c1be:	686c      	ldr	r4, [r5, #4]
 800c1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c4:	b17b      	cbz	r3, 800c1e6 <_fflush_r+0x42>
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1ce:	f7ff bf63 	b.w	800c098 <__sflush_r>
 800c1d2:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <_fflush_r+0x4c>)
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	d101      	bne.n	800c1dc <_fflush_r+0x38>
 800c1d8:	68ac      	ldr	r4, [r5, #8]
 800c1da:	e7f1      	b.n	800c1c0 <_fflush_r+0x1c>
 800c1dc:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <_fflush_r+0x50>)
 800c1de:	429c      	cmp	r4, r3
 800c1e0:	bf08      	it	eq
 800c1e2:	68ec      	ldreq	r4, [r5, #12]
 800c1e4:	e7ec      	b.n	800c1c0 <_fflush_r+0x1c>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800f3dc 	.word	0x0800f3dc
 800c1f0:	0800f3fc 	.word	0x0800f3fc
 800c1f4:	0800f3bc 	.word	0x0800f3bc

0800c1f8 <fflush>:
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	b920      	cbnz	r0, 800c206 <fflush+0xe>
 800c1fc:	4b04      	ldr	r3, [pc, #16]	; (800c210 <fflush+0x18>)
 800c1fe:	4905      	ldr	r1, [pc, #20]	; (800c214 <fflush+0x1c>)
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	f000 b8d3 	b.w	800c3ac <_fwalk_reent>
 800c206:	4b04      	ldr	r3, [pc, #16]	; (800c218 <fflush+0x20>)
 800c208:	6818      	ldr	r0, [r3, #0]
 800c20a:	f7ff bfcb 	b.w	800c1a4 <_fflush_r>
 800c20e:	bf00      	nop
 800c210:	0800f41c 	.word	0x0800f41c
 800c214:	0800c1a5 	.word	0x0800c1a5
 800c218:	2000017c 	.word	0x2000017c

0800c21c <std>:
 800c21c:	2300      	movs	r3, #0
 800c21e:	b510      	push	{r4, lr}
 800c220:	4604      	mov	r4, r0
 800c222:	e9c0 3300 	strd	r3, r3, [r0]
 800c226:	6083      	str	r3, [r0, #8]
 800c228:	8181      	strh	r1, [r0, #12]
 800c22a:	6643      	str	r3, [r0, #100]	; 0x64
 800c22c:	81c2      	strh	r2, [r0, #14]
 800c22e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c232:	6183      	str	r3, [r0, #24]
 800c234:	4619      	mov	r1, r3
 800c236:	2208      	movs	r2, #8
 800c238:	305c      	adds	r0, #92	; 0x5c
 800c23a:	f000 f91b 	bl	800c474 <memset>
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <std+0x38>)
 800c240:	6263      	str	r3, [r4, #36]	; 0x24
 800c242:	4b05      	ldr	r3, [pc, #20]	; (800c258 <std+0x3c>)
 800c244:	62a3      	str	r3, [r4, #40]	; 0x28
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <std+0x40>)
 800c248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c24a:	4b05      	ldr	r3, [pc, #20]	; (800c260 <std+0x44>)
 800c24c:	6224      	str	r4, [r4, #32]
 800c24e:	6323      	str	r3, [r4, #48]	; 0x30
 800c250:	bd10      	pop	{r4, pc}
 800c252:	bf00      	nop
 800c254:	0800d101 	.word	0x0800d101
 800c258:	0800d123 	.word	0x0800d123
 800c25c:	0800d15b 	.word	0x0800d15b
 800c260:	0800d17f 	.word	0x0800d17f

0800c264 <_cleanup_r>:
 800c264:	4901      	ldr	r1, [pc, #4]	; (800c26c <_cleanup_r+0x8>)
 800c266:	f000 b8a1 	b.w	800c3ac <_fwalk_reent>
 800c26a:	bf00      	nop
 800c26c:	0800c1a5 	.word	0x0800c1a5

0800c270 <__sfmoreglue>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	1e4a      	subs	r2, r1, #1
 800c274:	2568      	movs	r5, #104	; 0x68
 800c276:	4355      	muls	r5, r2
 800c278:	460e      	mov	r6, r1
 800c27a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c27e:	f000 f94f 	bl	800c520 <_malloc_r>
 800c282:	4604      	mov	r4, r0
 800c284:	b140      	cbz	r0, 800c298 <__sfmoreglue+0x28>
 800c286:	2100      	movs	r1, #0
 800c288:	e9c0 1600 	strd	r1, r6, [r0]
 800c28c:	300c      	adds	r0, #12
 800c28e:	60a0      	str	r0, [r4, #8]
 800c290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c294:	f000 f8ee 	bl	800c474 <memset>
 800c298:	4620      	mov	r0, r4
 800c29a:	bd70      	pop	{r4, r5, r6, pc}

0800c29c <__sinit>:
 800c29c:	6983      	ldr	r3, [r0, #24]
 800c29e:	b510      	push	{r4, lr}
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	bb33      	cbnz	r3, 800c2f2 <__sinit+0x56>
 800c2a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c2a8:	6503      	str	r3, [r0, #80]	; 0x50
 800c2aa:	4b12      	ldr	r3, [pc, #72]	; (800c2f4 <__sinit+0x58>)
 800c2ac:	4a12      	ldr	r2, [pc, #72]	; (800c2f8 <__sinit+0x5c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6282      	str	r2, [r0, #40]	; 0x28
 800c2b2:	4298      	cmp	r0, r3
 800c2b4:	bf04      	itt	eq
 800c2b6:	2301      	moveq	r3, #1
 800c2b8:	6183      	streq	r3, [r0, #24]
 800c2ba:	f000 f81f 	bl	800c2fc <__sfp>
 800c2be:	6060      	str	r0, [r4, #4]
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 f81b 	bl	800c2fc <__sfp>
 800c2c6:	60a0      	str	r0, [r4, #8]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f000 f817 	bl	800c2fc <__sfp>
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	60e0      	str	r0, [r4, #12]
 800c2d2:	2104      	movs	r1, #4
 800c2d4:	6860      	ldr	r0, [r4, #4]
 800c2d6:	f7ff ffa1 	bl	800c21c <std>
 800c2da:	2201      	movs	r2, #1
 800c2dc:	2109      	movs	r1, #9
 800c2de:	68a0      	ldr	r0, [r4, #8]
 800c2e0:	f7ff ff9c 	bl	800c21c <std>
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	2112      	movs	r1, #18
 800c2e8:	68e0      	ldr	r0, [r4, #12]
 800c2ea:	f7ff ff97 	bl	800c21c <std>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	61a3      	str	r3, [r4, #24]
 800c2f2:	bd10      	pop	{r4, pc}
 800c2f4:	0800f41c 	.word	0x0800f41c
 800c2f8:	0800c265 	.word	0x0800c265

0800c2fc <__sfp>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	4b1b      	ldr	r3, [pc, #108]	; (800c36c <__sfp+0x70>)
 800c300:	681e      	ldr	r6, [r3, #0]
 800c302:	69b3      	ldr	r3, [r6, #24]
 800c304:	4607      	mov	r7, r0
 800c306:	b913      	cbnz	r3, 800c30e <__sfp+0x12>
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff ffc7 	bl	800c29c <__sinit>
 800c30e:	3648      	adds	r6, #72	; 0x48
 800c310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c314:	3b01      	subs	r3, #1
 800c316:	d503      	bpl.n	800c320 <__sfp+0x24>
 800c318:	6833      	ldr	r3, [r6, #0]
 800c31a:	b133      	cbz	r3, 800c32a <__sfp+0x2e>
 800c31c:	6836      	ldr	r6, [r6, #0]
 800c31e:	e7f7      	b.n	800c310 <__sfp+0x14>
 800c320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c324:	b16d      	cbz	r5, 800c342 <__sfp+0x46>
 800c326:	3468      	adds	r4, #104	; 0x68
 800c328:	e7f4      	b.n	800c314 <__sfp+0x18>
 800c32a:	2104      	movs	r1, #4
 800c32c:	4638      	mov	r0, r7
 800c32e:	f7ff ff9f 	bl	800c270 <__sfmoreglue>
 800c332:	6030      	str	r0, [r6, #0]
 800c334:	2800      	cmp	r0, #0
 800c336:	d1f1      	bne.n	800c31c <__sfp+0x20>
 800c338:	230c      	movs	r3, #12
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	4604      	mov	r4, r0
 800c33e:	4620      	mov	r0, r4
 800c340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <__sfp+0x74>)
 800c344:	6665      	str	r5, [r4, #100]	; 0x64
 800c346:	e9c4 5500 	strd	r5, r5, [r4]
 800c34a:	60a5      	str	r5, [r4, #8]
 800c34c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c350:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c354:	2208      	movs	r2, #8
 800c356:	4629      	mov	r1, r5
 800c358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c35c:	f000 f88a 	bl	800c474 <memset>
 800c360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c368:	e7e9      	b.n	800c33e <__sfp+0x42>
 800c36a:	bf00      	nop
 800c36c:	0800f41c 	.word	0x0800f41c
 800c370:	ffff0001 	.word	0xffff0001

0800c374 <_fwalk>:
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	4688      	mov	r8, r1
 800c37a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c37e:	2600      	movs	r6, #0
 800c380:	b914      	cbnz	r4, 800c388 <_fwalk+0x14>
 800c382:	4630      	mov	r0, r6
 800c384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c388:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c38c:	3f01      	subs	r7, #1
 800c38e:	d501      	bpl.n	800c394 <_fwalk+0x20>
 800c390:	6824      	ldr	r4, [r4, #0]
 800c392:	e7f5      	b.n	800c380 <_fwalk+0xc>
 800c394:	89ab      	ldrh	r3, [r5, #12]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d906      	bls.n	800c3a8 <_fwalk+0x34>
 800c39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	d002      	beq.n	800c3a8 <_fwalk+0x34>
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	47c0      	blx	r8
 800c3a6:	4306      	orrs	r6, r0
 800c3a8:	3568      	adds	r5, #104	; 0x68
 800c3aa:	e7ef      	b.n	800c38c <_fwalk+0x18>

0800c3ac <_fwalk_reent>:
 800c3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b0:	4680      	mov	r8, r0
 800c3b2:	4689      	mov	r9, r1
 800c3b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3b8:	2600      	movs	r6, #0
 800c3ba:	b914      	cbnz	r4, 800c3c2 <_fwalk_reent+0x16>
 800c3bc:	4630      	mov	r0, r6
 800c3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c3c6:	3f01      	subs	r7, #1
 800c3c8:	d501      	bpl.n	800c3ce <_fwalk_reent+0x22>
 800c3ca:	6824      	ldr	r4, [r4, #0]
 800c3cc:	e7f5      	b.n	800c3ba <_fwalk_reent+0xe>
 800c3ce:	89ab      	ldrh	r3, [r5, #12]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d907      	bls.n	800c3e4 <_fwalk_reent+0x38>
 800c3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	d003      	beq.n	800c3e4 <_fwalk_reent+0x38>
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4640      	mov	r0, r8
 800c3e0:	47c8      	blx	r9
 800c3e2:	4306      	orrs	r6, r0
 800c3e4:	3568      	adds	r5, #104	; 0x68
 800c3e6:	e7ee      	b.n	800c3c6 <_fwalk_reent+0x1a>

0800c3e8 <getchar>:
 800c3e8:	4b07      	ldr	r3, [pc, #28]	; (800c408 <getchar+0x20>)
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	681c      	ldr	r4, [r3, #0]
 800c3ee:	b124      	cbz	r4, 800c3fa <getchar+0x12>
 800c3f0:	69a3      	ldr	r3, [r4, #24]
 800c3f2:	b913      	cbnz	r3, 800c3fa <getchar+0x12>
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f7ff ff51 	bl	800c29c <__sinit>
 800c3fa:	6861      	ldr	r1, [r4, #4]
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c402:	f001 bde9 	b.w	800dfd8 <_getc_r>
 800c406:	bf00      	nop
 800c408:	2000017c 	.word	0x2000017c

0800c40c <__libc_init_array>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	4e0d      	ldr	r6, [pc, #52]	; (800c444 <__libc_init_array+0x38>)
 800c410:	4c0d      	ldr	r4, [pc, #52]	; (800c448 <__libc_init_array+0x3c>)
 800c412:	1ba4      	subs	r4, r4, r6
 800c414:	10a4      	asrs	r4, r4, #2
 800c416:	2500      	movs	r5, #0
 800c418:	42a5      	cmp	r5, r4
 800c41a:	d109      	bne.n	800c430 <__libc_init_array+0x24>
 800c41c:	4e0b      	ldr	r6, [pc, #44]	; (800c44c <__libc_init_array+0x40>)
 800c41e:	4c0c      	ldr	r4, [pc, #48]	; (800c450 <__libc_init_array+0x44>)
 800c420:	f002 feda 	bl	800f1d8 <_init>
 800c424:	1ba4      	subs	r4, r4, r6
 800c426:	10a4      	asrs	r4, r4, #2
 800c428:	2500      	movs	r5, #0
 800c42a:	42a5      	cmp	r5, r4
 800c42c:	d105      	bne.n	800c43a <__libc_init_array+0x2e>
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c434:	4798      	blx	r3
 800c436:	3501      	adds	r5, #1
 800c438:	e7ee      	b.n	800c418 <__libc_init_array+0xc>
 800c43a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c43e:	4798      	blx	r3
 800c440:	3501      	adds	r5, #1
 800c442:	e7f2      	b.n	800c42a <__libc_init_array+0x1e>
 800c444:	0800f6c0 	.word	0x0800f6c0
 800c448:	0800f6c0 	.word	0x0800f6c0
 800c44c:	0800f6c0 	.word	0x0800f6c0
 800c450:	0800f6c4 	.word	0x0800f6c4

0800c454 <malloc>:
 800c454:	4b02      	ldr	r3, [pc, #8]	; (800c460 <malloc+0xc>)
 800c456:	4601      	mov	r1, r0
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f000 b861 	b.w	800c520 <_malloc_r>
 800c45e:	bf00      	nop
 800c460:	2000017c 	.word	0x2000017c

0800c464 <free>:
 800c464:	4b02      	ldr	r3, [pc, #8]	; (800c470 <free+0xc>)
 800c466:	4601      	mov	r1, r0
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f000 b80b 	b.w	800c484 <_free_r>
 800c46e:	bf00      	nop
 800c470:	2000017c 	.word	0x2000017c

0800c474 <memset>:
 800c474:	4402      	add	r2, r0
 800c476:	4603      	mov	r3, r0
 800c478:	4293      	cmp	r3, r2
 800c47a:	d100      	bne.n	800c47e <memset+0xa>
 800c47c:	4770      	bx	lr
 800c47e:	f803 1b01 	strb.w	r1, [r3], #1
 800c482:	e7f9      	b.n	800c478 <memset+0x4>

0800c484 <_free_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4605      	mov	r5, r0
 800c488:	2900      	cmp	r1, #0
 800c48a:	d045      	beq.n	800c518 <_free_r+0x94>
 800c48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c490:	1f0c      	subs	r4, r1, #4
 800c492:	2b00      	cmp	r3, #0
 800c494:	bfb8      	it	lt
 800c496:	18e4      	addlt	r4, r4, r3
 800c498:	f001 fe59 	bl	800e14e <__malloc_lock>
 800c49c:	4a1f      	ldr	r2, [pc, #124]	; (800c51c <_free_r+0x98>)
 800c49e:	6813      	ldr	r3, [r2, #0]
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	b933      	cbnz	r3, 800c4b2 <_free_r+0x2e>
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	6014      	str	r4, [r2, #0]
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ae:	f001 be4f 	b.w	800e150 <__malloc_unlock>
 800c4b2:	42a3      	cmp	r3, r4
 800c4b4:	d90c      	bls.n	800c4d0 <_free_r+0x4c>
 800c4b6:	6821      	ldr	r1, [r4, #0]
 800c4b8:	1862      	adds	r2, r4, r1
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	bf04      	itt	eq
 800c4be:	681a      	ldreq	r2, [r3, #0]
 800c4c0:	685b      	ldreq	r3, [r3, #4]
 800c4c2:	6063      	str	r3, [r4, #4]
 800c4c4:	bf04      	itt	eq
 800c4c6:	1852      	addeq	r2, r2, r1
 800c4c8:	6022      	streq	r2, [r4, #0]
 800c4ca:	6004      	str	r4, [r0, #0]
 800c4cc:	e7ec      	b.n	800c4a8 <_free_r+0x24>
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	b10a      	cbz	r2, 800c4d8 <_free_r+0x54>
 800c4d4:	42a2      	cmp	r2, r4
 800c4d6:	d9fa      	bls.n	800c4ce <_free_r+0x4a>
 800c4d8:	6819      	ldr	r1, [r3, #0]
 800c4da:	1858      	adds	r0, r3, r1
 800c4dc:	42a0      	cmp	r0, r4
 800c4de:	d10b      	bne.n	800c4f8 <_free_r+0x74>
 800c4e0:	6820      	ldr	r0, [r4, #0]
 800c4e2:	4401      	add	r1, r0
 800c4e4:	1858      	adds	r0, r3, r1
 800c4e6:	4282      	cmp	r2, r0
 800c4e8:	6019      	str	r1, [r3, #0]
 800c4ea:	d1dd      	bne.n	800c4a8 <_free_r+0x24>
 800c4ec:	6810      	ldr	r0, [r2, #0]
 800c4ee:	6852      	ldr	r2, [r2, #4]
 800c4f0:	605a      	str	r2, [r3, #4]
 800c4f2:	4401      	add	r1, r0
 800c4f4:	6019      	str	r1, [r3, #0]
 800c4f6:	e7d7      	b.n	800c4a8 <_free_r+0x24>
 800c4f8:	d902      	bls.n	800c500 <_free_r+0x7c>
 800c4fa:	230c      	movs	r3, #12
 800c4fc:	602b      	str	r3, [r5, #0]
 800c4fe:	e7d3      	b.n	800c4a8 <_free_r+0x24>
 800c500:	6820      	ldr	r0, [r4, #0]
 800c502:	1821      	adds	r1, r4, r0
 800c504:	428a      	cmp	r2, r1
 800c506:	bf04      	itt	eq
 800c508:	6811      	ldreq	r1, [r2, #0]
 800c50a:	6852      	ldreq	r2, [r2, #4]
 800c50c:	6062      	str	r2, [r4, #4]
 800c50e:	bf04      	itt	eq
 800c510:	1809      	addeq	r1, r1, r0
 800c512:	6021      	streq	r1, [r4, #0]
 800c514:	605c      	str	r4, [r3, #4]
 800c516:	e7c7      	b.n	800c4a8 <_free_r+0x24>
 800c518:	bd38      	pop	{r3, r4, r5, pc}
 800c51a:	bf00      	nop
 800c51c:	20000388 	.word	0x20000388

0800c520 <_malloc_r>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	1ccd      	adds	r5, r1, #3
 800c524:	f025 0503 	bic.w	r5, r5, #3
 800c528:	3508      	adds	r5, #8
 800c52a:	2d0c      	cmp	r5, #12
 800c52c:	bf38      	it	cc
 800c52e:	250c      	movcc	r5, #12
 800c530:	2d00      	cmp	r5, #0
 800c532:	4606      	mov	r6, r0
 800c534:	db01      	blt.n	800c53a <_malloc_r+0x1a>
 800c536:	42a9      	cmp	r1, r5
 800c538:	d903      	bls.n	800c542 <_malloc_r+0x22>
 800c53a:	230c      	movs	r3, #12
 800c53c:	6033      	str	r3, [r6, #0]
 800c53e:	2000      	movs	r0, #0
 800c540:	bd70      	pop	{r4, r5, r6, pc}
 800c542:	f001 fe04 	bl	800e14e <__malloc_lock>
 800c546:	4a21      	ldr	r2, [pc, #132]	; (800c5cc <_malloc_r+0xac>)
 800c548:	6814      	ldr	r4, [r2, #0]
 800c54a:	4621      	mov	r1, r4
 800c54c:	b991      	cbnz	r1, 800c574 <_malloc_r+0x54>
 800c54e:	4c20      	ldr	r4, [pc, #128]	; (800c5d0 <_malloc_r+0xb0>)
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	b91b      	cbnz	r3, 800c55c <_malloc_r+0x3c>
 800c554:	4630      	mov	r0, r6
 800c556:	f000 fd15 	bl	800cf84 <_sbrk_r>
 800c55a:	6020      	str	r0, [r4, #0]
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f000 fd10 	bl	800cf84 <_sbrk_r>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d124      	bne.n	800c5b2 <_malloc_r+0x92>
 800c568:	230c      	movs	r3, #12
 800c56a:	6033      	str	r3, [r6, #0]
 800c56c:	4630      	mov	r0, r6
 800c56e:	f001 fdef 	bl	800e150 <__malloc_unlock>
 800c572:	e7e4      	b.n	800c53e <_malloc_r+0x1e>
 800c574:	680b      	ldr	r3, [r1, #0]
 800c576:	1b5b      	subs	r3, r3, r5
 800c578:	d418      	bmi.n	800c5ac <_malloc_r+0x8c>
 800c57a:	2b0b      	cmp	r3, #11
 800c57c:	d90f      	bls.n	800c59e <_malloc_r+0x7e>
 800c57e:	600b      	str	r3, [r1, #0]
 800c580:	50cd      	str	r5, [r1, r3]
 800c582:	18cc      	adds	r4, r1, r3
 800c584:	4630      	mov	r0, r6
 800c586:	f001 fde3 	bl	800e150 <__malloc_unlock>
 800c58a:	f104 000b 	add.w	r0, r4, #11
 800c58e:	1d23      	adds	r3, r4, #4
 800c590:	f020 0007 	bic.w	r0, r0, #7
 800c594:	1ac3      	subs	r3, r0, r3
 800c596:	d0d3      	beq.n	800c540 <_malloc_r+0x20>
 800c598:	425a      	negs	r2, r3
 800c59a:	50e2      	str	r2, [r4, r3]
 800c59c:	e7d0      	b.n	800c540 <_malloc_r+0x20>
 800c59e:	428c      	cmp	r4, r1
 800c5a0:	684b      	ldr	r3, [r1, #4]
 800c5a2:	bf16      	itet	ne
 800c5a4:	6063      	strne	r3, [r4, #4]
 800c5a6:	6013      	streq	r3, [r2, #0]
 800c5a8:	460c      	movne	r4, r1
 800c5aa:	e7eb      	b.n	800c584 <_malloc_r+0x64>
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	6849      	ldr	r1, [r1, #4]
 800c5b0:	e7cc      	b.n	800c54c <_malloc_r+0x2c>
 800c5b2:	1cc4      	adds	r4, r0, #3
 800c5b4:	f024 0403 	bic.w	r4, r4, #3
 800c5b8:	42a0      	cmp	r0, r4
 800c5ba:	d005      	beq.n	800c5c8 <_malloc_r+0xa8>
 800c5bc:	1a21      	subs	r1, r4, r0
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f000 fce0 	bl	800cf84 <_sbrk_r>
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	d0cf      	beq.n	800c568 <_malloc_r+0x48>
 800c5c8:	6025      	str	r5, [r4, #0]
 800c5ca:	e7db      	b.n	800c584 <_malloc_r+0x64>
 800c5cc:	20000388 	.word	0x20000388
 800c5d0:	2000038c 	.word	0x2000038c

0800c5d4 <__cvt>:
 800c5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d8:	ec55 4b10 	vmov	r4, r5, d0
 800c5dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c5de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	460e      	mov	r6, r1
 800c5e6:	4691      	mov	r9, r2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	bfb8      	it	lt
 800c5ec:	4622      	movlt	r2, r4
 800c5ee:	462b      	mov	r3, r5
 800c5f0:	f027 0720 	bic.w	r7, r7, #32
 800c5f4:	bfbb      	ittet	lt
 800c5f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5fa:	461d      	movlt	r5, r3
 800c5fc:	2300      	movge	r3, #0
 800c5fe:	232d      	movlt	r3, #45	; 0x2d
 800c600:	bfb8      	it	lt
 800c602:	4614      	movlt	r4, r2
 800c604:	2f46      	cmp	r7, #70	; 0x46
 800c606:	700b      	strb	r3, [r1, #0]
 800c608:	d004      	beq.n	800c614 <__cvt+0x40>
 800c60a:	2f45      	cmp	r7, #69	; 0x45
 800c60c:	d100      	bne.n	800c610 <__cvt+0x3c>
 800c60e:	3601      	adds	r6, #1
 800c610:	2102      	movs	r1, #2
 800c612:	e000      	b.n	800c616 <__cvt+0x42>
 800c614:	2103      	movs	r1, #3
 800c616:	ab03      	add	r3, sp, #12
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	ab02      	add	r3, sp, #8
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	4632      	mov	r2, r6
 800c620:	4653      	mov	r3, sl
 800c622:	ec45 4b10 	vmov	d0, r4, r5
 800c626:	f000 ff1f 	bl	800d468 <_dtoa_r>
 800c62a:	2f47      	cmp	r7, #71	; 0x47
 800c62c:	4680      	mov	r8, r0
 800c62e:	d102      	bne.n	800c636 <__cvt+0x62>
 800c630:	f019 0f01 	tst.w	r9, #1
 800c634:	d026      	beq.n	800c684 <__cvt+0xb0>
 800c636:	2f46      	cmp	r7, #70	; 0x46
 800c638:	eb08 0906 	add.w	r9, r8, r6
 800c63c:	d111      	bne.n	800c662 <__cvt+0x8e>
 800c63e:	f898 3000 	ldrb.w	r3, [r8]
 800c642:	2b30      	cmp	r3, #48	; 0x30
 800c644:	d10a      	bne.n	800c65c <__cvt+0x88>
 800c646:	2200      	movs	r2, #0
 800c648:	2300      	movs	r3, #0
 800c64a:	4620      	mov	r0, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f4 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c652:	b918      	cbnz	r0, 800c65c <__cvt+0x88>
 800c654:	f1c6 0601 	rsb	r6, r6, #1
 800c658:	f8ca 6000 	str.w	r6, [sl]
 800c65c:	f8da 3000 	ldr.w	r3, [sl]
 800c660:	4499      	add	r9, r3
 800c662:	2200      	movs	r2, #0
 800c664:	2300      	movs	r3, #0
 800c666:	4620      	mov	r0, r4
 800c668:	4629      	mov	r1, r5
 800c66a:	f7f4 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c66e:	b938      	cbnz	r0, 800c680 <__cvt+0xac>
 800c670:	2230      	movs	r2, #48	; 0x30
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	454b      	cmp	r3, r9
 800c676:	d205      	bcs.n	800c684 <__cvt+0xb0>
 800c678:	1c59      	adds	r1, r3, #1
 800c67a:	9103      	str	r1, [sp, #12]
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e7f8      	b.n	800c672 <__cvt+0x9e>
 800c680:	f8cd 900c 	str.w	r9, [sp, #12]
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c688:	eba3 0308 	sub.w	r3, r3, r8
 800c68c:	4640      	mov	r0, r8
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	b004      	add	sp, #16
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c696 <__exponent>:
 800c696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c698:	2900      	cmp	r1, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	bfba      	itte	lt
 800c69e:	4249      	neglt	r1, r1
 800c6a0:	232d      	movlt	r3, #45	; 0x2d
 800c6a2:	232b      	movge	r3, #43	; 0x2b
 800c6a4:	2909      	cmp	r1, #9
 800c6a6:	f804 2b02 	strb.w	r2, [r4], #2
 800c6aa:	7043      	strb	r3, [r0, #1]
 800c6ac:	dd20      	ble.n	800c6f0 <__exponent+0x5a>
 800c6ae:	f10d 0307 	add.w	r3, sp, #7
 800c6b2:	461f      	mov	r7, r3
 800c6b4:	260a      	movs	r6, #10
 800c6b6:	fb91 f5f6 	sdiv	r5, r1, r6
 800c6ba:	fb06 1115 	mls	r1, r6, r5, r1
 800c6be:	3130      	adds	r1, #48	; 0x30
 800c6c0:	2d09      	cmp	r5, #9
 800c6c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6c6:	f103 32ff 	add.w	r2, r3, #4294967295
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	dc09      	bgt.n	800c6e2 <__exponent+0x4c>
 800c6ce:	3130      	adds	r1, #48	; 0x30
 800c6d0:	3b02      	subs	r3, #2
 800c6d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c6d6:	42bb      	cmp	r3, r7
 800c6d8:	4622      	mov	r2, r4
 800c6da:	d304      	bcc.n	800c6e6 <__exponent+0x50>
 800c6dc:	1a10      	subs	r0, r2, r0
 800c6de:	b003      	add	sp, #12
 800c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	e7e7      	b.n	800c6b6 <__exponent+0x20>
 800c6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ea:	f804 2b01 	strb.w	r2, [r4], #1
 800c6ee:	e7f2      	b.n	800c6d6 <__exponent+0x40>
 800c6f0:	2330      	movs	r3, #48	; 0x30
 800c6f2:	4419      	add	r1, r3
 800c6f4:	7083      	strb	r3, [r0, #2]
 800c6f6:	1d02      	adds	r2, r0, #4
 800c6f8:	70c1      	strb	r1, [r0, #3]
 800c6fa:	e7ef      	b.n	800c6dc <__exponent+0x46>

0800c6fc <_printf_float>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	b08d      	sub	sp, #52	; 0x34
 800c702:	460c      	mov	r4, r1
 800c704:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c708:	4616      	mov	r6, r2
 800c70a:	461f      	mov	r7, r3
 800c70c:	4605      	mov	r5, r0
 800c70e:	f001 fc8f 	bl	800e030 <_localeconv_r>
 800c712:	6803      	ldr	r3, [r0, #0]
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	4618      	mov	r0, r3
 800c718:	f7f3 fd5a 	bl	80001d0 <strlen>
 800c71c:	2300      	movs	r3, #0
 800c71e:	930a      	str	r3, [sp, #40]	; 0x28
 800c720:	f8d8 3000 	ldr.w	r3, [r8]
 800c724:	9005      	str	r0, [sp, #20]
 800c726:	3307      	adds	r3, #7
 800c728:	f023 0307 	bic.w	r3, r3, #7
 800c72c:	f103 0208 	add.w	r2, r3, #8
 800c730:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c734:	f8d4 b000 	ldr.w	fp, [r4]
 800c738:	f8c8 2000 	str.w	r2, [r8]
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c744:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c748:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c74c:	9307      	str	r3, [sp, #28]
 800c74e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c752:	f04f 32ff 	mov.w	r2, #4294967295
 800c756:	4ba7      	ldr	r3, [pc, #668]	; (800c9f4 <_printf_float+0x2f8>)
 800c758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c75c:	f7f4 f9e6 	bl	8000b2c <__aeabi_dcmpun>
 800c760:	bb70      	cbnz	r0, 800c7c0 <_printf_float+0xc4>
 800c762:	f04f 32ff 	mov.w	r2, #4294967295
 800c766:	4ba3      	ldr	r3, [pc, #652]	; (800c9f4 <_printf_float+0x2f8>)
 800c768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c76c:	f7f4 f9c0 	bl	8000af0 <__aeabi_dcmple>
 800c770:	bb30      	cbnz	r0, 800c7c0 <_printf_float+0xc4>
 800c772:	2200      	movs	r2, #0
 800c774:	2300      	movs	r3, #0
 800c776:	4640      	mov	r0, r8
 800c778:	4649      	mov	r1, r9
 800c77a:	f7f4 f9af 	bl	8000adc <__aeabi_dcmplt>
 800c77e:	b110      	cbz	r0, 800c786 <_printf_float+0x8a>
 800c780:	232d      	movs	r3, #45	; 0x2d
 800c782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c786:	4a9c      	ldr	r2, [pc, #624]	; (800c9f8 <_printf_float+0x2fc>)
 800c788:	4b9c      	ldr	r3, [pc, #624]	; (800c9fc <_printf_float+0x300>)
 800c78a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c78e:	bf8c      	ite	hi
 800c790:	4690      	movhi	r8, r2
 800c792:	4698      	movls	r8, r3
 800c794:	2303      	movs	r3, #3
 800c796:	f02b 0204 	bic.w	r2, fp, #4
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	6022      	str	r2, [r4, #0]
 800c79e:	f04f 0900 	mov.w	r9, #0
 800c7a2:	9700      	str	r7, [sp, #0]
 800c7a4:	4633      	mov	r3, r6
 800c7a6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f000 f9e6 	bl	800cb7c <_printf_common>
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	f040 808d 	bne.w	800c8d0 <_printf_float+0x1d4>
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	b00d      	add	sp, #52	; 0x34
 800c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	4649      	mov	r1, r9
 800c7c8:	f7f4 f9b0 	bl	8000b2c <__aeabi_dcmpun>
 800c7cc:	b110      	cbz	r0, 800c7d4 <_printf_float+0xd8>
 800c7ce:	4a8c      	ldr	r2, [pc, #560]	; (800ca00 <_printf_float+0x304>)
 800c7d0:	4b8c      	ldr	r3, [pc, #560]	; (800ca04 <_printf_float+0x308>)
 800c7d2:	e7da      	b.n	800c78a <_printf_float+0x8e>
 800c7d4:	6861      	ldr	r1, [r4, #4]
 800c7d6:	1c4b      	adds	r3, r1, #1
 800c7d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c7dc:	a80a      	add	r0, sp, #40	; 0x28
 800c7de:	d13e      	bne.n	800c85e <_printf_float+0x162>
 800c7e0:	2306      	movs	r3, #6
 800c7e2:	6063      	str	r3, [r4, #4]
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c7ea:	ab09      	add	r3, sp, #36	; 0x24
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	ec49 8b10 	vmov	d0, r8, r9
 800c7f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	f8cd a004 	str.w	sl, [sp, #4]
 800c7fc:	6861      	ldr	r1, [r4, #4]
 800c7fe:	4628      	mov	r0, r5
 800c800:	f7ff fee8 	bl	800c5d4 <__cvt>
 800c804:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c808:	2b47      	cmp	r3, #71	; 0x47
 800c80a:	4680      	mov	r8, r0
 800c80c:	d109      	bne.n	800c822 <_printf_float+0x126>
 800c80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c810:	1cd8      	adds	r0, r3, #3
 800c812:	db02      	blt.n	800c81a <_printf_float+0x11e>
 800c814:	6862      	ldr	r2, [r4, #4]
 800c816:	4293      	cmp	r3, r2
 800c818:	dd47      	ble.n	800c8aa <_printf_float+0x1ae>
 800c81a:	f1aa 0a02 	sub.w	sl, sl, #2
 800c81e:	fa5f fa8a 	uxtb.w	sl, sl
 800c822:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c826:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c828:	d824      	bhi.n	800c874 <_printf_float+0x178>
 800c82a:	3901      	subs	r1, #1
 800c82c:	4652      	mov	r2, sl
 800c82e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c832:	9109      	str	r1, [sp, #36]	; 0x24
 800c834:	f7ff ff2f 	bl	800c696 <__exponent>
 800c838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c83a:	1813      	adds	r3, r2, r0
 800c83c:	2a01      	cmp	r2, #1
 800c83e:	4681      	mov	r9, r0
 800c840:	6123      	str	r3, [r4, #16]
 800c842:	dc02      	bgt.n	800c84a <_printf_float+0x14e>
 800c844:	6822      	ldr	r2, [r4, #0]
 800c846:	07d1      	lsls	r1, r2, #31
 800c848:	d501      	bpl.n	800c84e <_printf_float+0x152>
 800c84a:	3301      	adds	r3, #1
 800c84c:	6123      	str	r3, [r4, #16]
 800c84e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0a5      	beq.n	800c7a2 <_printf_float+0xa6>
 800c856:	232d      	movs	r3, #45	; 0x2d
 800c858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c85c:	e7a1      	b.n	800c7a2 <_printf_float+0xa6>
 800c85e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c862:	f000 8177 	beq.w	800cb54 <_printf_float+0x458>
 800c866:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c86a:	d1bb      	bne.n	800c7e4 <_printf_float+0xe8>
 800c86c:	2900      	cmp	r1, #0
 800c86e:	d1b9      	bne.n	800c7e4 <_printf_float+0xe8>
 800c870:	2301      	movs	r3, #1
 800c872:	e7b6      	b.n	800c7e2 <_printf_float+0xe6>
 800c874:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c878:	d119      	bne.n	800c8ae <_printf_float+0x1b2>
 800c87a:	2900      	cmp	r1, #0
 800c87c:	6863      	ldr	r3, [r4, #4]
 800c87e:	dd0c      	ble.n	800c89a <_printf_float+0x19e>
 800c880:	6121      	str	r1, [r4, #16]
 800c882:	b913      	cbnz	r3, 800c88a <_printf_float+0x18e>
 800c884:	6822      	ldr	r2, [r4, #0]
 800c886:	07d2      	lsls	r2, r2, #31
 800c888:	d502      	bpl.n	800c890 <_printf_float+0x194>
 800c88a:	3301      	adds	r3, #1
 800c88c:	440b      	add	r3, r1
 800c88e:	6123      	str	r3, [r4, #16]
 800c890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c892:	65a3      	str	r3, [r4, #88]	; 0x58
 800c894:	f04f 0900 	mov.w	r9, #0
 800c898:	e7d9      	b.n	800c84e <_printf_float+0x152>
 800c89a:	b913      	cbnz	r3, 800c8a2 <_printf_float+0x1a6>
 800c89c:	6822      	ldr	r2, [r4, #0]
 800c89e:	07d0      	lsls	r0, r2, #31
 800c8a0:	d501      	bpl.n	800c8a6 <_printf_float+0x1aa>
 800c8a2:	3302      	adds	r3, #2
 800c8a4:	e7f3      	b.n	800c88e <_printf_float+0x192>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e7f1      	b.n	800c88e <_printf_float+0x192>
 800c8aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c8ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	db05      	blt.n	800c8c2 <_printf_float+0x1c6>
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	6123      	str	r3, [r4, #16]
 800c8ba:	07d1      	lsls	r1, r2, #31
 800c8bc:	d5e8      	bpl.n	800c890 <_printf_float+0x194>
 800c8be:	3301      	adds	r3, #1
 800c8c0:	e7e5      	b.n	800c88e <_printf_float+0x192>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bfd4      	ite	le
 800c8c6:	f1c3 0302 	rsble	r3, r3, #2
 800c8ca:	2301      	movgt	r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	e7de      	b.n	800c88e <_printf_float+0x192>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	055a      	lsls	r2, r3, #21
 800c8d4:	d407      	bmi.n	800c8e6 <_printf_float+0x1ea>
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	4642      	mov	r2, r8
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4628      	mov	r0, r5
 800c8de:	47b8      	blx	r7
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d12b      	bne.n	800c93c <_printf_float+0x240>
 800c8e4:	e767      	b.n	800c7b6 <_printf_float+0xba>
 800c8e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c8ea:	f240 80dc 	bls.w	800caa6 <_printf_float+0x3aa>
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8f6:	f7f4 f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d033      	beq.n	800c966 <_printf_float+0x26a>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4a41      	ldr	r2, [pc, #260]	; (800ca08 <_printf_float+0x30c>)
 800c902:	4631      	mov	r1, r6
 800c904:	4628      	mov	r0, r5
 800c906:	47b8      	blx	r7
 800c908:	3001      	adds	r0, #1
 800c90a:	f43f af54 	beq.w	800c7b6 <_printf_float+0xba>
 800c90e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c912:	429a      	cmp	r2, r3
 800c914:	db02      	blt.n	800c91c <_printf_float+0x220>
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	07d8      	lsls	r0, r3, #31
 800c91a:	d50f      	bpl.n	800c93c <_printf_float+0x240>
 800c91c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c920:	4631      	mov	r1, r6
 800c922:	4628      	mov	r0, r5
 800c924:	47b8      	blx	r7
 800c926:	3001      	adds	r0, #1
 800c928:	f43f af45 	beq.w	800c7b6 <_printf_float+0xba>
 800c92c:	f04f 0800 	mov.w	r8, #0
 800c930:	f104 091a 	add.w	r9, r4, #26
 800c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c936:	3b01      	subs	r3, #1
 800c938:	4543      	cmp	r3, r8
 800c93a:	dc09      	bgt.n	800c950 <_printf_float+0x254>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	079b      	lsls	r3, r3, #30
 800c940:	f100 8103 	bmi.w	800cb4a <_printf_float+0x44e>
 800c944:	68e0      	ldr	r0, [r4, #12]
 800c946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c948:	4298      	cmp	r0, r3
 800c94a:	bfb8      	it	lt
 800c94c:	4618      	movlt	r0, r3
 800c94e:	e734      	b.n	800c7ba <_printf_float+0xbe>
 800c950:	2301      	movs	r3, #1
 800c952:	464a      	mov	r2, r9
 800c954:	4631      	mov	r1, r6
 800c956:	4628      	mov	r0, r5
 800c958:	47b8      	blx	r7
 800c95a:	3001      	adds	r0, #1
 800c95c:	f43f af2b 	beq.w	800c7b6 <_printf_float+0xba>
 800c960:	f108 0801 	add.w	r8, r8, #1
 800c964:	e7e6      	b.n	800c934 <_printf_float+0x238>
 800c966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c968:	2b00      	cmp	r3, #0
 800c96a:	dc2b      	bgt.n	800c9c4 <_printf_float+0x2c8>
 800c96c:	2301      	movs	r3, #1
 800c96e:	4a26      	ldr	r2, [pc, #152]	; (800ca08 <_printf_float+0x30c>)
 800c970:	4631      	mov	r1, r6
 800c972:	4628      	mov	r0, r5
 800c974:	47b8      	blx	r7
 800c976:	3001      	adds	r0, #1
 800c978:	f43f af1d 	beq.w	800c7b6 <_printf_float+0xba>
 800c97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c97e:	b923      	cbnz	r3, 800c98a <_printf_float+0x28e>
 800c980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c982:	b913      	cbnz	r3, 800c98a <_printf_float+0x28e>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	07d9      	lsls	r1, r3, #31
 800c988:	d5d8      	bpl.n	800c93c <_printf_float+0x240>
 800c98a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c98e:	4631      	mov	r1, r6
 800c990:	4628      	mov	r0, r5
 800c992:	47b8      	blx	r7
 800c994:	3001      	adds	r0, #1
 800c996:	f43f af0e 	beq.w	800c7b6 <_printf_float+0xba>
 800c99a:	f04f 0900 	mov.w	r9, #0
 800c99e:	f104 0a1a 	add.w	sl, r4, #26
 800c9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a4:	425b      	negs	r3, r3
 800c9a6:	454b      	cmp	r3, r9
 800c9a8:	dc01      	bgt.n	800c9ae <_printf_float+0x2b2>
 800c9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ac:	e794      	b.n	800c8d8 <_printf_float+0x1dc>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	4652      	mov	r2, sl
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	47b8      	blx	r7
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	f43f aefc 	beq.w	800c7b6 <_printf_float+0xba>
 800c9be:	f109 0901 	add.w	r9, r9, #1
 800c9c2:	e7ee      	b.n	800c9a2 <_printf_float+0x2a6>
 800c9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	bfa8      	it	ge
 800c9cc:	461a      	movge	r2, r3
 800c9ce:	2a00      	cmp	r2, #0
 800c9d0:	4691      	mov	r9, r2
 800c9d2:	dd07      	ble.n	800c9e4 <_printf_float+0x2e8>
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	4642      	mov	r2, r8
 800c9da:	4628      	mov	r0, r5
 800c9dc:	47b8      	blx	r7
 800c9de:	3001      	adds	r0, #1
 800c9e0:	f43f aee9 	beq.w	800c7b6 <_printf_float+0xba>
 800c9e4:	f104 031a 	add.w	r3, r4, #26
 800c9e8:	f04f 0b00 	mov.w	fp, #0
 800c9ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9f0:	9306      	str	r3, [sp, #24]
 800c9f2:	e015      	b.n	800ca20 <_printf_float+0x324>
 800c9f4:	7fefffff 	.word	0x7fefffff
 800c9f8:	0800f424 	.word	0x0800f424
 800c9fc:	0800f420 	.word	0x0800f420
 800ca00:	0800f42c 	.word	0x0800f42c
 800ca04:	0800f428 	.word	0x0800f428
 800ca08:	0800f430 	.word	0x0800f430
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	9a06      	ldr	r2, [sp, #24]
 800ca10:	4631      	mov	r1, r6
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b8      	blx	r7
 800ca16:	3001      	adds	r0, #1
 800ca18:	f43f aecd 	beq.w	800c7b6 <_printf_float+0xba>
 800ca1c:	f10b 0b01 	add.w	fp, fp, #1
 800ca20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ca24:	ebaa 0309 	sub.w	r3, sl, r9
 800ca28:	455b      	cmp	r3, fp
 800ca2a:	dcef      	bgt.n	800ca0c <_printf_float+0x310>
 800ca2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca30:	429a      	cmp	r2, r3
 800ca32:	44d0      	add	r8, sl
 800ca34:	db15      	blt.n	800ca62 <_printf_float+0x366>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	07da      	lsls	r2, r3, #31
 800ca3a:	d412      	bmi.n	800ca62 <_printf_float+0x366>
 800ca3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca40:	eba3 020a 	sub.w	r2, r3, sl
 800ca44:	eba3 0a01 	sub.w	sl, r3, r1
 800ca48:	4592      	cmp	sl, r2
 800ca4a:	bfa8      	it	ge
 800ca4c:	4692      	movge	sl, r2
 800ca4e:	f1ba 0f00 	cmp.w	sl, #0
 800ca52:	dc0e      	bgt.n	800ca72 <_printf_float+0x376>
 800ca54:	f04f 0800 	mov.w	r8, #0
 800ca58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca5c:	f104 091a 	add.w	r9, r4, #26
 800ca60:	e019      	b.n	800ca96 <_printf_float+0x39a>
 800ca62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca66:	4631      	mov	r1, r6
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b8      	blx	r7
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d1e5      	bne.n	800ca3c <_printf_float+0x340>
 800ca70:	e6a1      	b.n	800c7b6 <_printf_float+0xba>
 800ca72:	4653      	mov	r3, sl
 800ca74:	4642      	mov	r2, r8
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d1e9      	bne.n	800ca54 <_printf_float+0x358>
 800ca80:	e699      	b.n	800c7b6 <_printf_float+0xba>
 800ca82:	2301      	movs	r3, #1
 800ca84:	464a      	mov	r2, r9
 800ca86:	4631      	mov	r1, r6
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b8      	blx	r7
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	f43f ae92 	beq.w	800c7b6 <_printf_float+0xba>
 800ca92:	f108 0801 	add.w	r8, r8, #1
 800ca96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca9a:	1a9b      	subs	r3, r3, r2
 800ca9c:	eba3 030a 	sub.w	r3, r3, sl
 800caa0:	4543      	cmp	r3, r8
 800caa2:	dcee      	bgt.n	800ca82 <_printf_float+0x386>
 800caa4:	e74a      	b.n	800c93c <_printf_float+0x240>
 800caa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caa8:	2a01      	cmp	r2, #1
 800caaa:	dc01      	bgt.n	800cab0 <_printf_float+0x3b4>
 800caac:	07db      	lsls	r3, r3, #31
 800caae:	d53a      	bpl.n	800cb26 <_printf_float+0x42a>
 800cab0:	2301      	movs	r3, #1
 800cab2:	4642      	mov	r2, r8
 800cab4:	4631      	mov	r1, r6
 800cab6:	4628      	mov	r0, r5
 800cab8:	47b8      	blx	r7
 800caba:	3001      	adds	r0, #1
 800cabc:	f43f ae7b 	beq.w	800c7b6 <_printf_float+0xba>
 800cac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cac4:	4631      	mov	r1, r6
 800cac6:	4628      	mov	r0, r5
 800cac8:	47b8      	blx	r7
 800caca:	3001      	adds	r0, #1
 800cacc:	f108 0801 	add.w	r8, r8, #1
 800cad0:	f43f ae71 	beq.w	800c7b6 <_printf_float+0xba>
 800cad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad6:	2200      	movs	r2, #0
 800cad8:	f103 3aff 	add.w	sl, r3, #4294967295
 800cadc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cae0:	2300      	movs	r3, #0
 800cae2:	f7f3 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cae6:	b9c8      	cbnz	r0, 800cb1c <_printf_float+0x420>
 800cae8:	4653      	mov	r3, sl
 800caea:	4642      	mov	r2, r8
 800caec:	4631      	mov	r1, r6
 800caee:	4628      	mov	r0, r5
 800caf0:	47b8      	blx	r7
 800caf2:	3001      	adds	r0, #1
 800caf4:	d10e      	bne.n	800cb14 <_printf_float+0x418>
 800caf6:	e65e      	b.n	800c7b6 <_printf_float+0xba>
 800caf8:	2301      	movs	r3, #1
 800cafa:	4652      	mov	r2, sl
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f ae57 	beq.w	800c7b6 <_printf_float+0xba>
 800cb08:	f108 0801 	add.w	r8, r8, #1
 800cb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	4543      	cmp	r3, r8
 800cb12:	dcf1      	bgt.n	800caf8 <_printf_float+0x3fc>
 800cb14:	464b      	mov	r3, r9
 800cb16:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb1a:	e6de      	b.n	800c8da <_printf_float+0x1de>
 800cb1c:	f04f 0800 	mov.w	r8, #0
 800cb20:	f104 0a1a 	add.w	sl, r4, #26
 800cb24:	e7f2      	b.n	800cb0c <_printf_float+0x410>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e7df      	b.n	800caea <_printf_float+0x3ee>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	464a      	mov	r2, r9
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b8      	blx	r7
 800cb34:	3001      	adds	r0, #1
 800cb36:	f43f ae3e 	beq.w	800c7b6 <_printf_float+0xba>
 800cb3a:	f108 0801 	add.w	r8, r8, #1
 800cb3e:	68e3      	ldr	r3, [r4, #12]
 800cb40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	4543      	cmp	r3, r8
 800cb46:	dcf0      	bgt.n	800cb2a <_printf_float+0x42e>
 800cb48:	e6fc      	b.n	800c944 <_printf_float+0x248>
 800cb4a:	f04f 0800 	mov.w	r8, #0
 800cb4e:	f104 0919 	add.w	r9, r4, #25
 800cb52:	e7f4      	b.n	800cb3e <_printf_float+0x442>
 800cb54:	2900      	cmp	r1, #0
 800cb56:	f43f ae8b 	beq.w	800c870 <_printf_float+0x174>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cb60:	ab09      	add	r3, sp, #36	; 0x24
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	ec49 8b10 	vmov	d0, r8, r9
 800cb68:	6022      	str	r2, [r4, #0]
 800cb6a:	f8cd a004 	str.w	sl, [sp, #4]
 800cb6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb72:	4628      	mov	r0, r5
 800cb74:	f7ff fd2e 	bl	800c5d4 <__cvt>
 800cb78:	4680      	mov	r8, r0
 800cb7a:	e648      	b.n	800c80e <_printf_float+0x112>

0800cb7c <_printf_common>:
 800cb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb80:	4691      	mov	r9, r2
 800cb82:	461f      	mov	r7, r3
 800cb84:	688a      	ldr	r2, [r1, #8]
 800cb86:	690b      	ldr	r3, [r1, #16]
 800cb88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	bfb8      	it	lt
 800cb90:	4613      	movlt	r3, r2
 800cb92:	f8c9 3000 	str.w	r3, [r9]
 800cb96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	b112      	cbz	r2, 800cba6 <_printf_common+0x2a>
 800cba0:	3301      	adds	r3, #1
 800cba2:	f8c9 3000 	str.w	r3, [r9]
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	0699      	lsls	r1, r3, #26
 800cbaa:	bf42      	ittt	mi
 800cbac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cbb0:	3302      	addmi	r3, #2
 800cbb2:	f8c9 3000 	strmi.w	r3, [r9]
 800cbb6:	6825      	ldr	r5, [r4, #0]
 800cbb8:	f015 0506 	ands.w	r5, r5, #6
 800cbbc:	d107      	bne.n	800cbce <_printf_common+0x52>
 800cbbe:	f104 0a19 	add.w	sl, r4, #25
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	f8d9 2000 	ldr.w	r2, [r9]
 800cbc8:	1a9b      	subs	r3, r3, r2
 800cbca:	42ab      	cmp	r3, r5
 800cbcc:	dc28      	bgt.n	800cc20 <_printf_common+0xa4>
 800cbce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	3300      	adds	r3, #0
 800cbd6:	bf18      	it	ne
 800cbd8:	2301      	movne	r3, #1
 800cbda:	0692      	lsls	r2, r2, #26
 800cbdc:	d42d      	bmi.n	800cc3a <_printf_common+0xbe>
 800cbde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	47c0      	blx	r8
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d020      	beq.n	800cc2e <_printf_common+0xb2>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	68e5      	ldr	r5, [r4, #12]
 800cbf0:	f8d9 2000 	ldr.w	r2, [r9]
 800cbf4:	f003 0306 	and.w	r3, r3, #6
 800cbf8:	2b04      	cmp	r3, #4
 800cbfa:	bf08      	it	eq
 800cbfc:	1aad      	subeq	r5, r5, r2
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	6922      	ldr	r2, [r4, #16]
 800cc02:	bf0c      	ite	eq
 800cc04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc08:	2500      	movne	r5, #0
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	bfc4      	itt	gt
 800cc0e:	1a9b      	subgt	r3, r3, r2
 800cc10:	18ed      	addgt	r5, r5, r3
 800cc12:	f04f 0900 	mov.w	r9, #0
 800cc16:	341a      	adds	r4, #26
 800cc18:	454d      	cmp	r5, r9
 800cc1a:	d11a      	bne.n	800cc52 <_printf_common+0xd6>
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	e008      	b.n	800cc32 <_printf_common+0xb6>
 800cc20:	2301      	movs	r3, #1
 800cc22:	4652      	mov	r2, sl
 800cc24:	4639      	mov	r1, r7
 800cc26:	4630      	mov	r0, r6
 800cc28:	47c0      	blx	r8
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d103      	bne.n	800cc36 <_printf_common+0xba>
 800cc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc36:	3501      	adds	r5, #1
 800cc38:	e7c3      	b.n	800cbc2 <_printf_common+0x46>
 800cc3a:	18e1      	adds	r1, r4, r3
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	2030      	movs	r0, #48	; 0x30
 800cc40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc44:	4422      	add	r2, r4
 800cc46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc4e:	3302      	adds	r3, #2
 800cc50:	e7c5      	b.n	800cbde <_printf_common+0x62>
 800cc52:	2301      	movs	r3, #1
 800cc54:	4622      	mov	r2, r4
 800cc56:	4639      	mov	r1, r7
 800cc58:	4630      	mov	r0, r6
 800cc5a:	47c0      	blx	r8
 800cc5c:	3001      	adds	r0, #1
 800cc5e:	d0e6      	beq.n	800cc2e <_printf_common+0xb2>
 800cc60:	f109 0901 	add.w	r9, r9, #1
 800cc64:	e7d8      	b.n	800cc18 <_printf_common+0x9c>
	...

0800cc68 <_printf_i>:
 800cc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc70:	460c      	mov	r4, r1
 800cc72:	7e09      	ldrb	r1, [r1, #24]
 800cc74:	b085      	sub	sp, #20
 800cc76:	296e      	cmp	r1, #110	; 0x6e
 800cc78:	4617      	mov	r7, r2
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	4698      	mov	r8, r3
 800cc7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc80:	f000 80b3 	beq.w	800cdea <_printf_i+0x182>
 800cc84:	d822      	bhi.n	800cccc <_printf_i+0x64>
 800cc86:	2963      	cmp	r1, #99	; 0x63
 800cc88:	d036      	beq.n	800ccf8 <_printf_i+0x90>
 800cc8a:	d80a      	bhi.n	800cca2 <_printf_i+0x3a>
 800cc8c:	2900      	cmp	r1, #0
 800cc8e:	f000 80b9 	beq.w	800ce04 <_printf_i+0x19c>
 800cc92:	2958      	cmp	r1, #88	; 0x58
 800cc94:	f000 8083 	beq.w	800cd9e <_printf_i+0x136>
 800cc98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cca0:	e032      	b.n	800cd08 <_printf_i+0xa0>
 800cca2:	2964      	cmp	r1, #100	; 0x64
 800cca4:	d001      	beq.n	800ccaa <_printf_i+0x42>
 800cca6:	2969      	cmp	r1, #105	; 0x69
 800cca8:	d1f6      	bne.n	800cc98 <_printf_i+0x30>
 800ccaa:	6820      	ldr	r0, [r4, #0]
 800ccac:	6813      	ldr	r3, [r2, #0]
 800ccae:	0605      	lsls	r5, r0, #24
 800ccb0:	f103 0104 	add.w	r1, r3, #4
 800ccb4:	d52a      	bpl.n	800cd0c <_printf_i+0xa4>
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6011      	str	r1, [r2, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	da03      	bge.n	800ccc6 <_printf_i+0x5e>
 800ccbe:	222d      	movs	r2, #45	; 0x2d
 800ccc0:	425b      	negs	r3, r3
 800ccc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ccc6:	486f      	ldr	r0, [pc, #444]	; (800ce84 <_printf_i+0x21c>)
 800ccc8:	220a      	movs	r2, #10
 800ccca:	e039      	b.n	800cd40 <_printf_i+0xd8>
 800cccc:	2973      	cmp	r1, #115	; 0x73
 800ccce:	f000 809d 	beq.w	800ce0c <_printf_i+0x1a4>
 800ccd2:	d808      	bhi.n	800cce6 <_printf_i+0x7e>
 800ccd4:	296f      	cmp	r1, #111	; 0x6f
 800ccd6:	d020      	beq.n	800cd1a <_printf_i+0xb2>
 800ccd8:	2970      	cmp	r1, #112	; 0x70
 800ccda:	d1dd      	bne.n	800cc98 <_printf_i+0x30>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	f043 0320 	orr.w	r3, r3, #32
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	e003      	b.n	800ccee <_printf_i+0x86>
 800cce6:	2975      	cmp	r1, #117	; 0x75
 800cce8:	d017      	beq.n	800cd1a <_printf_i+0xb2>
 800ccea:	2978      	cmp	r1, #120	; 0x78
 800ccec:	d1d4      	bne.n	800cc98 <_printf_i+0x30>
 800ccee:	2378      	movs	r3, #120	; 0x78
 800ccf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccf4:	4864      	ldr	r0, [pc, #400]	; (800ce88 <_printf_i+0x220>)
 800ccf6:	e055      	b.n	800cda4 <_printf_i+0x13c>
 800ccf8:	6813      	ldr	r3, [r2, #0]
 800ccfa:	1d19      	adds	r1, r3, #4
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6011      	str	r1, [r2, #0]
 800cd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e08c      	b.n	800ce26 <_printf_i+0x1be>
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6011      	str	r1, [r2, #0]
 800cd10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd14:	bf18      	it	ne
 800cd16:	b21b      	sxthne	r3, r3
 800cd18:	e7cf      	b.n	800ccba <_printf_i+0x52>
 800cd1a:	6813      	ldr	r3, [r2, #0]
 800cd1c:	6825      	ldr	r5, [r4, #0]
 800cd1e:	1d18      	adds	r0, r3, #4
 800cd20:	6010      	str	r0, [r2, #0]
 800cd22:	0628      	lsls	r0, r5, #24
 800cd24:	d501      	bpl.n	800cd2a <_printf_i+0xc2>
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	e002      	b.n	800cd30 <_printf_i+0xc8>
 800cd2a:	0668      	lsls	r0, r5, #25
 800cd2c:	d5fb      	bpl.n	800cd26 <_printf_i+0xbe>
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	4854      	ldr	r0, [pc, #336]	; (800ce84 <_printf_i+0x21c>)
 800cd32:	296f      	cmp	r1, #111	; 0x6f
 800cd34:	bf14      	ite	ne
 800cd36:	220a      	movne	r2, #10
 800cd38:	2208      	moveq	r2, #8
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd40:	6865      	ldr	r5, [r4, #4]
 800cd42:	60a5      	str	r5, [r4, #8]
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	f2c0 8095 	blt.w	800ce74 <_printf_i+0x20c>
 800cd4a:	6821      	ldr	r1, [r4, #0]
 800cd4c:	f021 0104 	bic.w	r1, r1, #4
 800cd50:	6021      	str	r1, [r4, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d13d      	bne.n	800cdd2 <_printf_i+0x16a>
 800cd56:	2d00      	cmp	r5, #0
 800cd58:	f040 808e 	bne.w	800ce78 <_printf_i+0x210>
 800cd5c:	4665      	mov	r5, ip
 800cd5e:	2a08      	cmp	r2, #8
 800cd60:	d10b      	bne.n	800cd7a <_printf_i+0x112>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	07db      	lsls	r3, r3, #31
 800cd66:	d508      	bpl.n	800cd7a <_printf_i+0x112>
 800cd68:	6923      	ldr	r3, [r4, #16]
 800cd6a:	6862      	ldr	r2, [r4, #4]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	bfde      	ittt	le
 800cd70:	2330      	movle	r3, #48	; 0x30
 800cd72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd7a:	ebac 0305 	sub.w	r3, ip, r5
 800cd7e:	6123      	str	r3, [r4, #16]
 800cd80:	f8cd 8000 	str.w	r8, [sp]
 800cd84:	463b      	mov	r3, r7
 800cd86:	aa03      	add	r2, sp, #12
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f7ff fef6 	bl	800cb7c <_printf_common>
 800cd90:	3001      	adds	r0, #1
 800cd92:	d14d      	bne.n	800ce30 <_printf_i+0x1c8>
 800cd94:	f04f 30ff 	mov.w	r0, #4294967295
 800cd98:	b005      	add	sp, #20
 800cd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd9e:	4839      	ldr	r0, [pc, #228]	; (800ce84 <_printf_i+0x21c>)
 800cda0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cda4:	6813      	ldr	r3, [r2, #0]
 800cda6:	6821      	ldr	r1, [r4, #0]
 800cda8:	1d1d      	adds	r5, r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6015      	str	r5, [r2, #0]
 800cdae:	060a      	lsls	r2, r1, #24
 800cdb0:	d50b      	bpl.n	800cdca <_printf_i+0x162>
 800cdb2:	07ca      	lsls	r2, r1, #31
 800cdb4:	bf44      	itt	mi
 800cdb6:	f041 0120 	orrmi.w	r1, r1, #32
 800cdba:	6021      	strmi	r1, [r4, #0]
 800cdbc:	b91b      	cbnz	r3, 800cdc6 <_printf_i+0x15e>
 800cdbe:	6822      	ldr	r2, [r4, #0]
 800cdc0:	f022 0220 	bic.w	r2, r2, #32
 800cdc4:	6022      	str	r2, [r4, #0]
 800cdc6:	2210      	movs	r2, #16
 800cdc8:	e7b7      	b.n	800cd3a <_printf_i+0xd2>
 800cdca:	064d      	lsls	r5, r1, #25
 800cdcc:	bf48      	it	mi
 800cdce:	b29b      	uxthmi	r3, r3
 800cdd0:	e7ef      	b.n	800cdb2 <_printf_i+0x14a>
 800cdd2:	4665      	mov	r5, ip
 800cdd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdd8:	fb02 3311 	mls	r3, r2, r1, r3
 800cddc:	5cc3      	ldrb	r3, [r0, r3]
 800cdde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cde2:	460b      	mov	r3, r1
 800cde4:	2900      	cmp	r1, #0
 800cde6:	d1f5      	bne.n	800cdd4 <_printf_i+0x16c>
 800cde8:	e7b9      	b.n	800cd5e <_printf_i+0xf6>
 800cdea:	6813      	ldr	r3, [r2, #0]
 800cdec:	6825      	ldr	r5, [r4, #0]
 800cdee:	6961      	ldr	r1, [r4, #20]
 800cdf0:	1d18      	adds	r0, r3, #4
 800cdf2:	6010      	str	r0, [r2, #0]
 800cdf4:	0628      	lsls	r0, r5, #24
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	d501      	bpl.n	800cdfe <_printf_i+0x196>
 800cdfa:	6019      	str	r1, [r3, #0]
 800cdfc:	e002      	b.n	800ce04 <_printf_i+0x19c>
 800cdfe:	066a      	lsls	r2, r5, #25
 800ce00:	d5fb      	bpl.n	800cdfa <_printf_i+0x192>
 800ce02:	8019      	strh	r1, [r3, #0]
 800ce04:	2300      	movs	r3, #0
 800ce06:	6123      	str	r3, [r4, #16]
 800ce08:	4665      	mov	r5, ip
 800ce0a:	e7b9      	b.n	800cd80 <_printf_i+0x118>
 800ce0c:	6813      	ldr	r3, [r2, #0]
 800ce0e:	1d19      	adds	r1, r3, #4
 800ce10:	6011      	str	r1, [r2, #0]
 800ce12:	681d      	ldr	r5, [r3, #0]
 800ce14:	6862      	ldr	r2, [r4, #4]
 800ce16:	2100      	movs	r1, #0
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f7f3 f9e1 	bl	80001e0 <memchr>
 800ce1e:	b108      	cbz	r0, 800ce24 <_printf_i+0x1bc>
 800ce20:	1b40      	subs	r0, r0, r5
 800ce22:	6060      	str	r0, [r4, #4]
 800ce24:	6863      	ldr	r3, [r4, #4]
 800ce26:	6123      	str	r3, [r4, #16]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce2e:	e7a7      	b.n	800cd80 <_printf_i+0x118>
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	462a      	mov	r2, r5
 800ce34:	4639      	mov	r1, r7
 800ce36:	4630      	mov	r0, r6
 800ce38:	47c0      	blx	r8
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d0aa      	beq.n	800cd94 <_printf_i+0x12c>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	079b      	lsls	r3, r3, #30
 800ce42:	d413      	bmi.n	800ce6c <_printf_i+0x204>
 800ce44:	68e0      	ldr	r0, [r4, #12]
 800ce46:	9b03      	ldr	r3, [sp, #12]
 800ce48:	4298      	cmp	r0, r3
 800ce4a:	bfb8      	it	lt
 800ce4c:	4618      	movlt	r0, r3
 800ce4e:	e7a3      	b.n	800cd98 <_printf_i+0x130>
 800ce50:	2301      	movs	r3, #1
 800ce52:	464a      	mov	r2, r9
 800ce54:	4639      	mov	r1, r7
 800ce56:	4630      	mov	r0, r6
 800ce58:	47c0      	blx	r8
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	d09a      	beq.n	800cd94 <_printf_i+0x12c>
 800ce5e:	3501      	adds	r5, #1
 800ce60:	68e3      	ldr	r3, [r4, #12]
 800ce62:	9a03      	ldr	r2, [sp, #12]
 800ce64:	1a9b      	subs	r3, r3, r2
 800ce66:	42ab      	cmp	r3, r5
 800ce68:	dcf2      	bgt.n	800ce50 <_printf_i+0x1e8>
 800ce6a:	e7eb      	b.n	800ce44 <_printf_i+0x1dc>
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	f104 0919 	add.w	r9, r4, #25
 800ce72:	e7f5      	b.n	800ce60 <_printf_i+0x1f8>
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1ac      	bne.n	800cdd2 <_printf_i+0x16a>
 800ce78:	7803      	ldrb	r3, [r0, #0]
 800ce7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce82:	e76c      	b.n	800cd5e <_printf_i+0xf6>
 800ce84:	0800f432 	.word	0x0800f432
 800ce88:	0800f443 	.word	0x0800f443

0800ce8c <iprintf>:
 800ce8c:	b40f      	push	{r0, r1, r2, r3}
 800ce8e:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <iprintf+0x2c>)
 800ce90:	b513      	push	{r0, r1, r4, lr}
 800ce92:	681c      	ldr	r4, [r3, #0]
 800ce94:	b124      	cbz	r4, 800cea0 <iprintf+0x14>
 800ce96:	69a3      	ldr	r3, [r4, #24]
 800ce98:	b913      	cbnz	r3, 800cea0 <iprintf+0x14>
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f7ff f9fe 	bl	800c29c <__sinit>
 800cea0:	ab05      	add	r3, sp, #20
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	68a1      	ldr	r1, [r4, #8]
 800cea6:	9301      	str	r3, [sp, #4]
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f001 fc65 	bl	800e778 <_vfiprintf_r>
 800ceae:	b002      	add	sp, #8
 800ceb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb4:	b004      	add	sp, #16
 800ceb6:	4770      	bx	lr
 800ceb8:	2000017c 	.word	0x2000017c

0800cebc <_puts_r>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	460e      	mov	r6, r1
 800cec0:	4605      	mov	r5, r0
 800cec2:	b118      	cbz	r0, 800cecc <_puts_r+0x10>
 800cec4:	6983      	ldr	r3, [r0, #24]
 800cec6:	b90b      	cbnz	r3, 800cecc <_puts_r+0x10>
 800cec8:	f7ff f9e8 	bl	800c29c <__sinit>
 800cecc:	69ab      	ldr	r3, [r5, #24]
 800cece:	68ac      	ldr	r4, [r5, #8]
 800ced0:	b913      	cbnz	r3, 800ced8 <_puts_r+0x1c>
 800ced2:	4628      	mov	r0, r5
 800ced4:	f7ff f9e2 	bl	800c29c <__sinit>
 800ced8:	4b23      	ldr	r3, [pc, #140]	; (800cf68 <_puts_r+0xac>)
 800ceda:	429c      	cmp	r4, r3
 800cedc:	d117      	bne.n	800cf0e <_puts_r+0x52>
 800cede:	686c      	ldr	r4, [r5, #4]
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	071b      	lsls	r3, r3, #28
 800cee4:	d51d      	bpl.n	800cf22 <_puts_r+0x66>
 800cee6:	6923      	ldr	r3, [r4, #16]
 800cee8:	b1db      	cbz	r3, 800cf22 <_puts_r+0x66>
 800ceea:	3e01      	subs	r6, #1
 800ceec:	68a3      	ldr	r3, [r4, #8]
 800ceee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cef2:	3b01      	subs	r3, #1
 800cef4:	60a3      	str	r3, [r4, #8]
 800cef6:	b9e9      	cbnz	r1, 800cf34 <_puts_r+0x78>
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	da2e      	bge.n	800cf5a <_puts_r+0x9e>
 800cefc:	4622      	mov	r2, r4
 800cefe:	210a      	movs	r1, #10
 800cf00:	4628      	mov	r0, r5
 800cf02:	f000 f941 	bl	800d188 <__swbuf_r>
 800cf06:	3001      	adds	r0, #1
 800cf08:	d011      	beq.n	800cf2e <_puts_r+0x72>
 800cf0a:	200a      	movs	r0, #10
 800cf0c:	e011      	b.n	800cf32 <_puts_r+0x76>
 800cf0e:	4b17      	ldr	r3, [pc, #92]	; (800cf6c <_puts_r+0xb0>)
 800cf10:	429c      	cmp	r4, r3
 800cf12:	d101      	bne.n	800cf18 <_puts_r+0x5c>
 800cf14:	68ac      	ldr	r4, [r5, #8]
 800cf16:	e7e3      	b.n	800cee0 <_puts_r+0x24>
 800cf18:	4b15      	ldr	r3, [pc, #84]	; (800cf70 <_puts_r+0xb4>)
 800cf1a:	429c      	cmp	r4, r3
 800cf1c:	bf08      	it	eq
 800cf1e:	68ec      	ldreq	r4, [r5, #12]
 800cf20:	e7de      	b.n	800cee0 <_puts_r+0x24>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f000 f993 	bl	800d250 <__swsetup_r>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d0dd      	beq.n	800ceea <_puts_r+0x2e>
 800cf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	da04      	bge.n	800cf42 <_puts_r+0x86>
 800cf38:	69a2      	ldr	r2, [r4, #24]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	dc06      	bgt.n	800cf4c <_puts_r+0x90>
 800cf3e:	290a      	cmp	r1, #10
 800cf40:	d004      	beq.n	800cf4c <_puts_r+0x90>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	6022      	str	r2, [r4, #0]
 800cf48:	7019      	strb	r1, [r3, #0]
 800cf4a:	e7cf      	b.n	800ceec <_puts_r+0x30>
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4628      	mov	r0, r5
 800cf50:	f000 f91a 	bl	800d188 <__swbuf_r>
 800cf54:	3001      	adds	r0, #1
 800cf56:	d1c9      	bne.n	800ceec <_puts_r+0x30>
 800cf58:	e7e9      	b.n	800cf2e <_puts_r+0x72>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	200a      	movs	r0, #10
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	6022      	str	r2, [r4, #0]
 800cf62:	7018      	strb	r0, [r3, #0]
 800cf64:	e7e5      	b.n	800cf32 <_puts_r+0x76>
 800cf66:	bf00      	nop
 800cf68:	0800f3dc 	.word	0x0800f3dc
 800cf6c:	0800f3fc 	.word	0x0800f3fc
 800cf70:	0800f3bc 	.word	0x0800f3bc

0800cf74 <puts>:
 800cf74:	4b02      	ldr	r3, [pc, #8]	; (800cf80 <puts+0xc>)
 800cf76:	4601      	mov	r1, r0
 800cf78:	6818      	ldr	r0, [r3, #0]
 800cf7a:	f7ff bf9f 	b.w	800cebc <_puts_r>
 800cf7e:	bf00      	nop
 800cf80:	2000017c 	.word	0x2000017c

0800cf84 <_sbrk_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4c06      	ldr	r4, [pc, #24]	; (800cfa0 <_sbrk_r+0x1c>)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	6023      	str	r3, [r4, #0]
 800cf90:	f7fe fb16 	bl	800b5c0 <_sbrk>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_sbrk_r+0x1a>
 800cf98:	6823      	ldr	r3, [r4, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_sbrk_r+0x1a>
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	20001fd8 	.word	0x20001fd8

0800cfa4 <setvbuf>:
 800cfa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfa8:	461d      	mov	r5, r3
 800cfaa:	4b51      	ldr	r3, [pc, #324]	; (800d0f0 <setvbuf+0x14c>)
 800cfac:	681e      	ldr	r6, [r3, #0]
 800cfae:	4604      	mov	r4, r0
 800cfb0:	460f      	mov	r7, r1
 800cfb2:	4690      	mov	r8, r2
 800cfb4:	b126      	cbz	r6, 800cfc0 <setvbuf+0x1c>
 800cfb6:	69b3      	ldr	r3, [r6, #24]
 800cfb8:	b913      	cbnz	r3, 800cfc0 <setvbuf+0x1c>
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff f96e 	bl	800c29c <__sinit>
 800cfc0:	4b4c      	ldr	r3, [pc, #304]	; (800d0f4 <setvbuf+0x150>)
 800cfc2:	429c      	cmp	r4, r3
 800cfc4:	d152      	bne.n	800d06c <setvbuf+0xc8>
 800cfc6:	6874      	ldr	r4, [r6, #4]
 800cfc8:	f1b8 0f02 	cmp.w	r8, #2
 800cfcc:	d006      	beq.n	800cfdc <setvbuf+0x38>
 800cfce:	f1b8 0f01 	cmp.w	r8, #1
 800cfd2:	f200 8089 	bhi.w	800d0e8 <setvbuf+0x144>
 800cfd6:	2d00      	cmp	r5, #0
 800cfd8:	f2c0 8086 	blt.w	800d0e8 <setvbuf+0x144>
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7ff f8e0 	bl	800c1a4 <_fflush_r>
 800cfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfe6:	b141      	cbz	r1, 800cffa <setvbuf+0x56>
 800cfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfec:	4299      	cmp	r1, r3
 800cfee:	d002      	beq.n	800cff6 <setvbuf+0x52>
 800cff0:	4630      	mov	r0, r6
 800cff2:	f7ff fa47 	bl	800c484 <_free_r>
 800cff6:	2300      	movs	r3, #0
 800cff8:	6363      	str	r3, [r4, #52]	; 0x34
 800cffa:	2300      	movs	r3, #0
 800cffc:	61a3      	str	r3, [r4, #24]
 800cffe:	6063      	str	r3, [r4, #4]
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	061b      	lsls	r3, r3, #24
 800d004:	d503      	bpl.n	800d00e <setvbuf+0x6a>
 800d006:	6921      	ldr	r1, [r4, #16]
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff fa3b 	bl	800c484 <_free_r>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d014:	f023 0303 	bic.w	r3, r3, #3
 800d018:	f1b8 0f02 	cmp.w	r8, #2
 800d01c:	81a3      	strh	r3, [r4, #12]
 800d01e:	d05d      	beq.n	800d0dc <setvbuf+0x138>
 800d020:	ab01      	add	r3, sp, #4
 800d022:	466a      	mov	r2, sp
 800d024:	4621      	mov	r1, r4
 800d026:	4630      	mov	r0, r6
 800d028:	f001 f822 	bl	800e070 <__swhatbuf_r>
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	4318      	orrs	r0, r3
 800d030:	81a0      	strh	r0, [r4, #12]
 800d032:	bb2d      	cbnz	r5, 800d080 <setvbuf+0xdc>
 800d034:	9d00      	ldr	r5, [sp, #0]
 800d036:	4628      	mov	r0, r5
 800d038:	f7ff fa0c 	bl	800c454 <malloc>
 800d03c:	4607      	mov	r7, r0
 800d03e:	2800      	cmp	r0, #0
 800d040:	d14e      	bne.n	800d0e0 <setvbuf+0x13c>
 800d042:	f8dd 9000 	ldr.w	r9, [sp]
 800d046:	45a9      	cmp	r9, r5
 800d048:	d13c      	bne.n	800d0c4 <setvbuf+0x120>
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295
 800d04e:	89a3      	ldrh	r3, [r4, #12]
 800d050:	f043 0302 	orr.w	r3, r3, #2
 800d054:	81a3      	strh	r3, [r4, #12]
 800d056:	2300      	movs	r3, #0
 800d058:	60a3      	str	r3, [r4, #8]
 800d05a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d05e:	6023      	str	r3, [r4, #0]
 800d060:	6123      	str	r3, [r4, #16]
 800d062:	2301      	movs	r3, #1
 800d064:	6163      	str	r3, [r4, #20]
 800d066:	b003      	add	sp, #12
 800d068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d06c:	4b22      	ldr	r3, [pc, #136]	; (800d0f8 <setvbuf+0x154>)
 800d06e:	429c      	cmp	r4, r3
 800d070:	d101      	bne.n	800d076 <setvbuf+0xd2>
 800d072:	68b4      	ldr	r4, [r6, #8]
 800d074:	e7a8      	b.n	800cfc8 <setvbuf+0x24>
 800d076:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <setvbuf+0x158>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	bf08      	it	eq
 800d07c:	68f4      	ldreq	r4, [r6, #12]
 800d07e:	e7a3      	b.n	800cfc8 <setvbuf+0x24>
 800d080:	2f00      	cmp	r7, #0
 800d082:	d0d8      	beq.n	800d036 <setvbuf+0x92>
 800d084:	69b3      	ldr	r3, [r6, #24]
 800d086:	b913      	cbnz	r3, 800d08e <setvbuf+0xea>
 800d088:	4630      	mov	r0, r6
 800d08a:	f7ff f907 	bl	800c29c <__sinit>
 800d08e:	f1b8 0f01 	cmp.w	r8, #1
 800d092:	bf08      	it	eq
 800d094:	89a3      	ldrheq	r3, [r4, #12]
 800d096:	6027      	str	r7, [r4, #0]
 800d098:	bf04      	itt	eq
 800d09a:	f043 0301 	orreq.w	r3, r3, #1
 800d09e:	81a3      	strheq	r3, [r4, #12]
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	f013 0008 	ands.w	r0, r3, #8
 800d0a6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800d0aa:	d01b      	beq.n	800d0e4 <setvbuf+0x140>
 800d0ac:	f013 0001 	ands.w	r0, r3, #1
 800d0b0:	bf18      	it	ne
 800d0b2:	426d      	negne	r5, r5
 800d0b4:	f04f 0300 	mov.w	r3, #0
 800d0b8:	bf1d      	ittte	ne
 800d0ba:	60a3      	strne	r3, [r4, #8]
 800d0bc:	61a5      	strne	r5, [r4, #24]
 800d0be:	4618      	movne	r0, r3
 800d0c0:	60a5      	streq	r5, [r4, #8]
 800d0c2:	e7d0      	b.n	800d066 <setvbuf+0xc2>
 800d0c4:	4648      	mov	r0, r9
 800d0c6:	f7ff f9c5 	bl	800c454 <malloc>
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d0bc      	beq.n	800d04a <setvbuf+0xa6>
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	464d      	mov	r5, r9
 800d0da:	e7d3      	b.n	800d084 <setvbuf+0xe0>
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e7b6      	b.n	800d04e <setvbuf+0xaa>
 800d0e0:	46a9      	mov	r9, r5
 800d0e2:	e7f5      	b.n	800d0d0 <setvbuf+0x12c>
 800d0e4:	60a0      	str	r0, [r4, #8]
 800d0e6:	e7be      	b.n	800d066 <setvbuf+0xc2>
 800d0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ec:	e7bb      	b.n	800d066 <setvbuf+0xc2>
 800d0ee:	bf00      	nop
 800d0f0:	2000017c 	.word	0x2000017c
 800d0f4:	0800f3dc 	.word	0x0800f3dc
 800d0f8:	0800f3fc 	.word	0x0800f3fc
 800d0fc:	0800f3bc 	.word	0x0800f3bc

0800d100 <__sread>:
 800d100:	b510      	push	{r4, lr}
 800d102:	460c      	mov	r4, r1
 800d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d108:	f001 fc4c 	bl	800e9a4 <_read_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	bfab      	itete	ge
 800d110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d112:	89a3      	ldrhlt	r3, [r4, #12]
 800d114:	181b      	addge	r3, r3, r0
 800d116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d11a:	bfac      	ite	ge
 800d11c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d11e:	81a3      	strhlt	r3, [r4, #12]
 800d120:	bd10      	pop	{r4, pc}

0800d122 <__swrite>:
 800d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	461f      	mov	r7, r3
 800d128:	898b      	ldrh	r3, [r1, #12]
 800d12a:	05db      	lsls	r3, r3, #23
 800d12c:	4605      	mov	r5, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	4616      	mov	r6, r2
 800d132:	d505      	bpl.n	800d140 <__swrite+0x1e>
 800d134:	2302      	movs	r3, #2
 800d136:	2200      	movs	r2, #0
 800d138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13c:	f000 ff86 	bl	800e04c <_lseek_r>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d14a:	81a3      	strh	r3, [r4, #12]
 800d14c:	4632      	mov	r2, r6
 800d14e:	463b      	mov	r3, r7
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	f000 b869 	b.w	800d22c <_write_r>

0800d15a <__sseek>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d162:	f000 ff73 	bl	800e04c <_lseek_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	bf15      	itete	ne
 800d16c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d16e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d176:	81a3      	strheq	r3, [r4, #12]
 800d178:	bf18      	it	ne
 800d17a:	81a3      	strhne	r3, [r4, #12]
 800d17c:	bd10      	pop	{r4, pc}

0800d17e <__sclose>:
 800d17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d182:	f000 b8d3 	b.w	800d32c <_close_r>
	...

0800d188 <__swbuf_r>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	460e      	mov	r6, r1
 800d18c:	4614      	mov	r4, r2
 800d18e:	4605      	mov	r5, r0
 800d190:	b118      	cbz	r0, 800d19a <__swbuf_r+0x12>
 800d192:	6983      	ldr	r3, [r0, #24]
 800d194:	b90b      	cbnz	r3, 800d19a <__swbuf_r+0x12>
 800d196:	f7ff f881 	bl	800c29c <__sinit>
 800d19a:	4b21      	ldr	r3, [pc, #132]	; (800d220 <__swbuf_r+0x98>)
 800d19c:	429c      	cmp	r4, r3
 800d19e:	d12a      	bne.n	800d1f6 <__swbuf_r+0x6e>
 800d1a0:	686c      	ldr	r4, [r5, #4]
 800d1a2:	69a3      	ldr	r3, [r4, #24]
 800d1a4:	60a3      	str	r3, [r4, #8]
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	071a      	lsls	r2, r3, #28
 800d1aa:	d52e      	bpl.n	800d20a <__swbuf_r+0x82>
 800d1ac:	6923      	ldr	r3, [r4, #16]
 800d1ae:	b363      	cbz	r3, 800d20a <__swbuf_r+0x82>
 800d1b0:	6923      	ldr	r3, [r4, #16]
 800d1b2:	6820      	ldr	r0, [r4, #0]
 800d1b4:	1ac0      	subs	r0, r0, r3
 800d1b6:	6963      	ldr	r3, [r4, #20]
 800d1b8:	b2f6      	uxtb	r6, r6
 800d1ba:	4283      	cmp	r3, r0
 800d1bc:	4637      	mov	r7, r6
 800d1be:	dc04      	bgt.n	800d1ca <__swbuf_r+0x42>
 800d1c0:	4621      	mov	r1, r4
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f7fe ffee 	bl	800c1a4 <_fflush_r>
 800d1c8:	bb28      	cbnz	r0, 800d216 <__swbuf_r+0x8e>
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	60a3      	str	r3, [r4, #8]
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	1c5a      	adds	r2, r3, #1
 800d1d4:	6022      	str	r2, [r4, #0]
 800d1d6:	701e      	strb	r6, [r3, #0]
 800d1d8:	6963      	ldr	r3, [r4, #20]
 800d1da:	3001      	adds	r0, #1
 800d1dc:	4283      	cmp	r3, r0
 800d1de:	d004      	beq.n	800d1ea <__swbuf_r+0x62>
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	07db      	lsls	r3, r3, #31
 800d1e4:	d519      	bpl.n	800d21a <__swbuf_r+0x92>
 800d1e6:	2e0a      	cmp	r6, #10
 800d1e8:	d117      	bne.n	800d21a <__swbuf_r+0x92>
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f7fe ffd9 	bl	800c1a4 <_fflush_r>
 800d1f2:	b190      	cbz	r0, 800d21a <__swbuf_r+0x92>
 800d1f4:	e00f      	b.n	800d216 <__swbuf_r+0x8e>
 800d1f6:	4b0b      	ldr	r3, [pc, #44]	; (800d224 <__swbuf_r+0x9c>)
 800d1f8:	429c      	cmp	r4, r3
 800d1fa:	d101      	bne.n	800d200 <__swbuf_r+0x78>
 800d1fc:	68ac      	ldr	r4, [r5, #8]
 800d1fe:	e7d0      	b.n	800d1a2 <__swbuf_r+0x1a>
 800d200:	4b09      	ldr	r3, [pc, #36]	; (800d228 <__swbuf_r+0xa0>)
 800d202:	429c      	cmp	r4, r3
 800d204:	bf08      	it	eq
 800d206:	68ec      	ldreq	r4, [r5, #12]
 800d208:	e7cb      	b.n	800d1a2 <__swbuf_r+0x1a>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4628      	mov	r0, r5
 800d20e:	f000 f81f 	bl	800d250 <__swsetup_r>
 800d212:	2800      	cmp	r0, #0
 800d214:	d0cc      	beq.n	800d1b0 <__swbuf_r+0x28>
 800d216:	f04f 37ff 	mov.w	r7, #4294967295
 800d21a:	4638      	mov	r0, r7
 800d21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d21e:	bf00      	nop
 800d220:	0800f3dc 	.word	0x0800f3dc
 800d224:	0800f3fc 	.word	0x0800f3fc
 800d228:	0800f3bc 	.word	0x0800f3bc

0800d22c <_write_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4c07      	ldr	r4, [pc, #28]	; (800d24c <_write_r+0x20>)
 800d230:	4605      	mov	r5, r0
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	2200      	movs	r2, #0
 800d238:	6022      	str	r2, [r4, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f7fe f96f 	bl	800b51e <_write>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_write_r+0x1e>
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	b103      	cbz	r3, 800d24a <_write_r+0x1e>
 800d248:	602b      	str	r3, [r5, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	20001fd8 	.word	0x20001fd8

0800d250 <__swsetup_r>:
 800d250:	4b32      	ldr	r3, [pc, #200]	; (800d31c <__swsetup_r+0xcc>)
 800d252:	b570      	push	{r4, r5, r6, lr}
 800d254:	681d      	ldr	r5, [r3, #0]
 800d256:	4606      	mov	r6, r0
 800d258:	460c      	mov	r4, r1
 800d25a:	b125      	cbz	r5, 800d266 <__swsetup_r+0x16>
 800d25c:	69ab      	ldr	r3, [r5, #24]
 800d25e:	b913      	cbnz	r3, 800d266 <__swsetup_r+0x16>
 800d260:	4628      	mov	r0, r5
 800d262:	f7ff f81b 	bl	800c29c <__sinit>
 800d266:	4b2e      	ldr	r3, [pc, #184]	; (800d320 <__swsetup_r+0xd0>)
 800d268:	429c      	cmp	r4, r3
 800d26a:	d10f      	bne.n	800d28c <__swsetup_r+0x3c>
 800d26c:	686c      	ldr	r4, [r5, #4]
 800d26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d272:	b29a      	uxth	r2, r3
 800d274:	0715      	lsls	r5, r2, #28
 800d276:	d42c      	bmi.n	800d2d2 <__swsetup_r+0x82>
 800d278:	06d0      	lsls	r0, r2, #27
 800d27a:	d411      	bmi.n	800d2a0 <__swsetup_r+0x50>
 800d27c:	2209      	movs	r2, #9
 800d27e:	6032      	str	r2, [r6, #0]
 800d280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	f04f 30ff 	mov.w	r0, #4294967295
 800d28a:	e03e      	b.n	800d30a <__swsetup_r+0xba>
 800d28c:	4b25      	ldr	r3, [pc, #148]	; (800d324 <__swsetup_r+0xd4>)
 800d28e:	429c      	cmp	r4, r3
 800d290:	d101      	bne.n	800d296 <__swsetup_r+0x46>
 800d292:	68ac      	ldr	r4, [r5, #8]
 800d294:	e7eb      	b.n	800d26e <__swsetup_r+0x1e>
 800d296:	4b24      	ldr	r3, [pc, #144]	; (800d328 <__swsetup_r+0xd8>)
 800d298:	429c      	cmp	r4, r3
 800d29a:	bf08      	it	eq
 800d29c:	68ec      	ldreq	r4, [r5, #12]
 800d29e:	e7e6      	b.n	800d26e <__swsetup_r+0x1e>
 800d2a0:	0751      	lsls	r1, r2, #29
 800d2a2:	d512      	bpl.n	800d2ca <__swsetup_r+0x7a>
 800d2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2a6:	b141      	cbz	r1, 800d2ba <__swsetup_r+0x6a>
 800d2a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2ac:	4299      	cmp	r1, r3
 800d2ae:	d002      	beq.n	800d2b6 <__swsetup_r+0x66>
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f7ff f8e7 	bl	800c484 <_free_r>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	6063      	str	r3, [r4, #4]
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	89a3      	ldrh	r3, [r4, #12]
 800d2cc:	f043 0308 	orr.w	r3, r3, #8
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	6923      	ldr	r3, [r4, #16]
 800d2d4:	b94b      	cbnz	r3, 800d2ea <__swsetup_r+0x9a>
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2e0:	d003      	beq.n	800d2ea <__swsetup_r+0x9a>
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f000 fee7 	bl	800e0b8 <__smakebuf_r>
 800d2ea:	89a2      	ldrh	r2, [r4, #12]
 800d2ec:	f012 0301 	ands.w	r3, r2, #1
 800d2f0:	d00c      	beq.n	800d30c <__swsetup_r+0xbc>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60a3      	str	r3, [r4, #8]
 800d2f6:	6963      	ldr	r3, [r4, #20]
 800d2f8:	425b      	negs	r3, r3
 800d2fa:	61a3      	str	r3, [r4, #24]
 800d2fc:	6923      	ldr	r3, [r4, #16]
 800d2fe:	b953      	cbnz	r3, 800d316 <__swsetup_r+0xc6>
 800d300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d304:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d308:	d1ba      	bne.n	800d280 <__swsetup_r+0x30>
 800d30a:	bd70      	pop	{r4, r5, r6, pc}
 800d30c:	0792      	lsls	r2, r2, #30
 800d30e:	bf58      	it	pl
 800d310:	6963      	ldrpl	r3, [r4, #20]
 800d312:	60a3      	str	r3, [r4, #8]
 800d314:	e7f2      	b.n	800d2fc <__swsetup_r+0xac>
 800d316:	2000      	movs	r0, #0
 800d318:	e7f7      	b.n	800d30a <__swsetup_r+0xba>
 800d31a:	bf00      	nop
 800d31c:	2000017c 	.word	0x2000017c
 800d320:	0800f3dc 	.word	0x0800f3dc
 800d324:	0800f3fc 	.word	0x0800f3fc
 800d328:	0800f3bc 	.word	0x0800f3bc

0800d32c <_close_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4c06      	ldr	r4, [pc, #24]	; (800d348 <_close_r+0x1c>)
 800d330:	2300      	movs	r3, #0
 800d332:	4605      	mov	r5, r0
 800d334:	4608      	mov	r0, r1
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	f7fe f90d 	bl	800b556 <_close>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_close_r+0x1a>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	b103      	cbz	r3, 800d346 <_close_r+0x1a>
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20001fd8 	.word	0x20001fd8

0800d34c <quorem>:
 800d34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	6903      	ldr	r3, [r0, #16]
 800d352:	690c      	ldr	r4, [r1, #16]
 800d354:	42a3      	cmp	r3, r4
 800d356:	4680      	mov	r8, r0
 800d358:	f2c0 8082 	blt.w	800d460 <quorem+0x114>
 800d35c:	3c01      	subs	r4, #1
 800d35e:	f101 0714 	add.w	r7, r1, #20
 800d362:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d366:	f100 0614 	add.w	r6, r0, #20
 800d36a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d36e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d372:	eb06 030c 	add.w	r3, r6, ip
 800d376:	3501      	adds	r5, #1
 800d378:	eb07 090c 	add.w	r9, r7, ip
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	fbb0 f5f5 	udiv	r5, r0, r5
 800d382:	b395      	cbz	r5, 800d3ea <quorem+0x9e>
 800d384:	f04f 0a00 	mov.w	sl, #0
 800d388:	4638      	mov	r0, r7
 800d38a:	46b6      	mov	lr, r6
 800d38c:	46d3      	mov	fp, sl
 800d38e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d392:	b293      	uxth	r3, r2
 800d394:	fb05 a303 	mla	r3, r5, r3, sl
 800d398:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	ebab 0303 	sub.w	r3, fp, r3
 800d3a2:	0c12      	lsrs	r2, r2, #16
 800d3a4:	f8de b000 	ldr.w	fp, [lr]
 800d3a8:	fb05 a202 	mla	r2, r5, r2, sl
 800d3ac:	fa13 f38b 	uxtah	r3, r3, fp
 800d3b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d3b4:	fa1f fb82 	uxth.w	fp, r2
 800d3b8:	f8de 2000 	ldr.w	r2, [lr]
 800d3bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d3c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3ca:	4581      	cmp	r9, r0
 800d3cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d3d0:	f84e 3b04 	str.w	r3, [lr], #4
 800d3d4:	d2db      	bcs.n	800d38e <quorem+0x42>
 800d3d6:	f856 300c 	ldr.w	r3, [r6, ip]
 800d3da:	b933      	cbnz	r3, 800d3ea <quorem+0x9e>
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	3b04      	subs	r3, #4
 800d3e0:	429e      	cmp	r6, r3
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	d330      	bcc.n	800d448 <quorem+0xfc>
 800d3e6:	f8c8 4010 	str.w	r4, [r8, #16]
 800d3ea:	4640      	mov	r0, r8
 800d3ec:	f001 f8c6 	bl	800e57c <__mcmp>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	db25      	blt.n	800d440 <quorem+0xf4>
 800d3f4:	3501      	adds	r5, #1
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f04f 0c00 	mov.w	ip, #0
 800d3fc:	f857 2b04 	ldr.w	r2, [r7], #4
 800d400:	f8d0 e000 	ldr.w	lr, [r0]
 800d404:	b293      	uxth	r3, r2
 800d406:	ebac 0303 	sub.w	r3, ip, r3
 800d40a:	0c12      	lsrs	r2, r2, #16
 800d40c:	fa13 f38e 	uxtah	r3, r3, lr
 800d410:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d418:	b29b      	uxth	r3, r3
 800d41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d41e:	45b9      	cmp	r9, r7
 800d420:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d424:	f840 3b04 	str.w	r3, [r0], #4
 800d428:	d2e8      	bcs.n	800d3fc <quorem+0xb0>
 800d42a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d42e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d432:	b92a      	cbnz	r2, 800d440 <quorem+0xf4>
 800d434:	3b04      	subs	r3, #4
 800d436:	429e      	cmp	r6, r3
 800d438:	461a      	mov	r2, r3
 800d43a:	d30b      	bcc.n	800d454 <quorem+0x108>
 800d43c:	f8c8 4010 	str.w	r4, [r8, #16]
 800d440:	4628      	mov	r0, r5
 800d442:	b003      	add	sp, #12
 800d444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d448:	6812      	ldr	r2, [r2, #0]
 800d44a:	3b04      	subs	r3, #4
 800d44c:	2a00      	cmp	r2, #0
 800d44e:	d1ca      	bne.n	800d3e6 <quorem+0x9a>
 800d450:	3c01      	subs	r4, #1
 800d452:	e7c5      	b.n	800d3e0 <quorem+0x94>
 800d454:	6812      	ldr	r2, [r2, #0]
 800d456:	3b04      	subs	r3, #4
 800d458:	2a00      	cmp	r2, #0
 800d45a:	d1ef      	bne.n	800d43c <quorem+0xf0>
 800d45c:	3c01      	subs	r4, #1
 800d45e:	e7ea      	b.n	800d436 <quorem+0xea>
 800d460:	2000      	movs	r0, #0
 800d462:	e7ee      	b.n	800d442 <quorem+0xf6>
 800d464:	0000      	movs	r0, r0
	...

0800d468 <_dtoa_r>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	ec57 6b10 	vmov	r6, r7, d0
 800d470:	b097      	sub	sp, #92	; 0x5c
 800d472:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d474:	9106      	str	r1, [sp, #24]
 800d476:	4604      	mov	r4, r0
 800d478:	920b      	str	r2, [sp, #44]	; 0x2c
 800d47a:	9312      	str	r3, [sp, #72]	; 0x48
 800d47c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d480:	e9cd 6700 	strd	r6, r7, [sp]
 800d484:	b93d      	cbnz	r5, 800d496 <_dtoa_r+0x2e>
 800d486:	2010      	movs	r0, #16
 800d488:	f7fe ffe4 	bl	800c454 <malloc>
 800d48c:	6260      	str	r0, [r4, #36]	; 0x24
 800d48e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d492:	6005      	str	r5, [r0, #0]
 800d494:	60c5      	str	r5, [r0, #12]
 800d496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d498:	6819      	ldr	r1, [r3, #0]
 800d49a:	b151      	cbz	r1, 800d4b2 <_dtoa_r+0x4a>
 800d49c:	685a      	ldr	r2, [r3, #4]
 800d49e:	604a      	str	r2, [r1, #4]
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	4093      	lsls	r3, r2
 800d4a4:	608b      	str	r3, [r1, #8]
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 fe87 	bl	800e1ba <_Bfree>
 800d4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	1e3b      	subs	r3, r7, #0
 800d4b4:	bfbb      	ittet	lt
 800d4b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d4ba:	9301      	strlt	r3, [sp, #4]
 800d4bc:	2300      	movge	r3, #0
 800d4be:	2201      	movlt	r2, #1
 800d4c0:	bfac      	ite	ge
 800d4c2:	f8c8 3000 	strge.w	r3, [r8]
 800d4c6:	f8c8 2000 	strlt.w	r2, [r8]
 800d4ca:	4baf      	ldr	r3, [pc, #700]	; (800d788 <_dtoa_r+0x320>)
 800d4cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d4d0:	ea33 0308 	bics.w	r3, r3, r8
 800d4d4:	d114      	bne.n	800d500 <_dtoa_r+0x98>
 800d4d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800d4dc:	6013      	str	r3, [r2, #0]
 800d4de:	9b00      	ldr	r3, [sp, #0]
 800d4e0:	b923      	cbnz	r3, 800d4ec <_dtoa_r+0x84>
 800d4e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f000 8542 	beq.w	800df70 <_dtoa_r+0xb08>
 800d4ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d79c <_dtoa_r+0x334>
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 8544 	beq.w	800df80 <_dtoa_r+0xb18>
 800d4f8:	f10b 0303 	add.w	r3, fp, #3
 800d4fc:	f000 bd3e 	b.w	800df7c <_dtoa_r+0xb14>
 800d500:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f3 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d510:	4681      	mov	r9, r0
 800d512:	b168      	cbz	r0, 800d530 <_dtoa_r+0xc8>
 800d514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d516:	2301      	movs	r3, #1
 800d518:	6013      	str	r3, [r2, #0]
 800d51a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 8524 	beq.w	800df6a <_dtoa_r+0xb02>
 800d522:	4b9a      	ldr	r3, [pc, #616]	; (800d78c <_dtoa_r+0x324>)
 800d524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d526:	f103 3bff 	add.w	fp, r3, #4294967295
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	f000 bd28 	b.w	800df80 <_dtoa_r+0xb18>
 800d530:	aa14      	add	r2, sp, #80	; 0x50
 800d532:	a915      	add	r1, sp, #84	; 0x54
 800d534:	ec47 6b10 	vmov	d0, r6, r7
 800d538:	4620      	mov	r0, r4
 800d53a:	f001 f896 	bl	800e66a <__d2b>
 800d53e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d542:	9004      	str	r0, [sp, #16]
 800d544:	2d00      	cmp	r5, #0
 800d546:	d07c      	beq.n	800d642 <_dtoa_r+0x1da>
 800d548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d54c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d550:	46b2      	mov	sl, r6
 800d552:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d55a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d55e:	2200      	movs	r2, #0
 800d560:	4b8b      	ldr	r3, [pc, #556]	; (800d790 <_dtoa_r+0x328>)
 800d562:	4650      	mov	r0, sl
 800d564:	4659      	mov	r1, fp
 800d566:	f7f2 fe8f 	bl	8000288 <__aeabi_dsub>
 800d56a:	a381      	add	r3, pc, #516	; (adr r3, 800d770 <_dtoa_r+0x308>)
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	a380      	add	r3, pc, #512	; (adr r3, 800d778 <_dtoa_r+0x310>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 fe87 	bl	800028c <__adddf3>
 800d57e:	4606      	mov	r6, r0
 800d580:	4628      	mov	r0, r5
 800d582:	460f      	mov	r7, r1
 800d584:	f7f2 ffce 	bl	8000524 <__aeabi_i2d>
 800d588:	a37d      	add	r3, pc, #500	; (adr r3, 800d780 <_dtoa_r+0x318>)
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	4630      	mov	r0, r6
 800d598:	4639      	mov	r1, r7
 800d59a:	f7f2 fe77 	bl	800028c <__adddf3>
 800d59e:	4606      	mov	r6, r0
 800d5a0:	460f      	mov	r7, r1
 800d5a2:	f7f3 fad9 	bl	8000b58 <__aeabi_d2iz>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	4682      	mov	sl, r0
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	f7f3 fa94 	bl	8000adc <__aeabi_dcmplt>
 800d5b4:	b148      	cbz	r0, 800d5ca <_dtoa_r+0x162>
 800d5b6:	4650      	mov	r0, sl
 800d5b8:	f7f2 ffb4 	bl	8000524 <__aeabi_i2d>
 800d5bc:	4632      	mov	r2, r6
 800d5be:	463b      	mov	r3, r7
 800d5c0:	f7f3 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5c4:	b908      	cbnz	r0, 800d5ca <_dtoa_r+0x162>
 800d5c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5ca:	f1ba 0f16 	cmp.w	sl, #22
 800d5ce:	d859      	bhi.n	800d684 <_dtoa_r+0x21c>
 800d5d0:	4970      	ldr	r1, [pc, #448]	; (800d794 <_dtoa_r+0x32c>)
 800d5d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5de:	f7f3 fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d050      	beq.n	800d688 <_dtoa_r+0x220>
 800d5e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5f0:	1b5d      	subs	r5, r3, r5
 800d5f2:	f1b5 0801 	subs.w	r8, r5, #1
 800d5f6:	bf49      	itett	mi
 800d5f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800d5fc:	2300      	movpl	r3, #0
 800d5fe:	9305      	strmi	r3, [sp, #20]
 800d600:	f04f 0800 	movmi.w	r8, #0
 800d604:	bf58      	it	pl
 800d606:	9305      	strpl	r3, [sp, #20]
 800d608:	f1ba 0f00 	cmp.w	sl, #0
 800d60c:	db3e      	blt.n	800d68c <_dtoa_r+0x224>
 800d60e:	2300      	movs	r3, #0
 800d610:	44d0      	add	r8, sl
 800d612:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d616:	9307      	str	r3, [sp, #28]
 800d618:	9b06      	ldr	r3, [sp, #24]
 800d61a:	2b09      	cmp	r3, #9
 800d61c:	f200 8090 	bhi.w	800d740 <_dtoa_r+0x2d8>
 800d620:	2b05      	cmp	r3, #5
 800d622:	bfc4      	itt	gt
 800d624:	3b04      	subgt	r3, #4
 800d626:	9306      	strgt	r3, [sp, #24]
 800d628:	9b06      	ldr	r3, [sp, #24]
 800d62a:	f1a3 0302 	sub.w	r3, r3, #2
 800d62e:	bfcc      	ite	gt
 800d630:	2500      	movgt	r5, #0
 800d632:	2501      	movle	r5, #1
 800d634:	2b03      	cmp	r3, #3
 800d636:	f200 808f 	bhi.w	800d758 <_dtoa_r+0x2f0>
 800d63a:	e8df f003 	tbb	[pc, r3]
 800d63e:	7f7d      	.short	0x7f7d
 800d640:	7131      	.short	0x7131
 800d642:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d646:	441d      	add	r5, r3
 800d648:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d64c:	2820      	cmp	r0, #32
 800d64e:	dd13      	ble.n	800d678 <_dtoa_r+0x210>
 800d650:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d654:	9b00      	ldr	r3, [sp, #0]
 800d656:	fa08 f800 	lsl.w	r8, r8, r0
 800d65a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d65e:	fa23 f000 	lsr.w	r0, r3, r0
 800d662:	ea48 0000 	orr.w	r0, r8, r0
 800d666:	f7f2 ff4d 	bl	8000504 <__aeabi_ui2d>
 800d66a:	2301      	movs	r3, #1
 800d66c:	4682      	mov	sl, r0
 800d66e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d672:	3d01      	subs	r5, #1
 800d674:	9313      	str	r3, [sp, #76]	; 0x4c
 800d676:	e772      	b.n	800d55e <_dtoa_r+0xf6>
 800d678:	9b00      	ldr	r3, [sp, #0]
 800d67a:	f1c0 0020 	rsb	r0, r0, #32
 800d67e:	fa03 f000 	lsl.w	r0, r3, r0
 800d682:	e7f0      	b.n	800d666 <_dtoa_r+0x1fe>
 800d684:	2301      	movs	r3, #1
 800d686:	e7b1      	b.n	800d5ec <_dtoa_r+0x184>
 800d688:	900f      	str	r0, [sp, #60]	; 0x3c
 800d68a:	e7b0      	b.n	800d5ee <_dtoa_r+0x186>
 800d68c:	9b05      	ldr	r3, [sp, #20]
 800d68e:	eba3 030a 	sub.w	r3, r3, sl
 800d692:	9305      	str	r3, [sp, #20]
 800d694:	f1ca 0300 	rsb	r3, sl, #0
 800d698:	9307      	str	r3, [sp, #28]
 800d69a:	2300      	movs	r3, #0
 800d69c:	930e      	str	r3, [sp, #56]	; 0x38
 800d69e:	e7bb      	b.n	800d618 <_dtoa_r+0x1b0>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	dd59      	ble.n	800d75e <_dtoa_r+0x2f6>
 800d6aa:	9302      	str	r3, [sp, #8]
 800d6ac:	4699      	mov	r9, r3
 800d6ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	6072      	str	r2, [r6, #4]
 800d6b4:	2204      	movs	r2, #4
 800d6b6:	f102 0014 	add.w	r0, r2, #20
 800d6ba:	4298      	cmp	r0, r3
 800d6bc:	6871      	ldr	r1, [r6, #4]
 800d6be:	d953      	bls.n	800d768 <_dtoa_r+0x300>
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 fd46 	bl	800e152 <_Balloc>
 800d6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c8:	6030      	str	r0, [r6, #0]
 800d6ca:	f1b9 0f0e 	cmp.w	r9, #14
 800d6ce:	f8d3 b000 	ldr.w	fp, [r3]
 800d6d2:	f200 80e6 	bhi.w	800d8a2 <_dtoa_r+0x43a>
 800d6d6:	2d00      	cmp	r5, #0
 800d6d8:	f000 80e3 	beq.w	800d8a2 <_dtoa_r+0x43a>
 800d6dc:	ed9d 7b00 	vldr	d7, [sp]
 800d6e0:	f1ba 0f00 	cmp.w	sl, #0
 800d6e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d6e8:	dd74      	ble.n	800d7d4 <_dtoa_r+0x36c>
 800d6ea:	4a2a      	ldr	r2, [pc, #168]	; (800d794 <_dtoa_r+0x32c>)
 800d6ec:	f00a 030f 	and.w	r3, sl, #15
 800d6f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6f4:	ed93 7b00 	vldr	d7, [r3]
 800d6f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d6fc:	06f0      	lsls	r0, r6, #27
 800d6fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d702:	d565      	bpl.n	800d7d0 <_dtoa_r+0x368>
 800d704:	4b24      	ldr	r3, [pc, #144]	; (800d798 <_dtoa_r+0x330>)
 800d706:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d70a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d70e:	f7f3 f89d 	bl	800084c <__aeabi_ddiv>
 800d712:	e9cd 0100 	strd	r0, r1, [sp]
 800d716:	f006 060f 	and.w	r6, r6, #15
 800d71a:	2503      	movs	r5, #3
 800d71c:	4f1e      	ldr	r7, [pc, #120]	; (800d798 <_dtoa_r+0x330>)
 800d71e:	e04c      	b.n	800d7ba <_dtoa_r+0x352>
 800d720:	2301      	movs	r3, #1
 800d722:	930a      	str	r3, [sp, #40]	; 0x28
 800d724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d726:	4453      	add	r3, sl
 800d728:	f103 0901 	add.w	r9, r3, #1
 800d72c:	9302      	str	r3, [sp, #8]
 800d72e:	464b      	mov	r3, r9
 800d730:	2b01      	cmp	r3, #1
 800d732:	bfb8      	it	lt
 800d734:	2301      	movlt	r3, #1
 800d736:	e7ba      	b.n	800d6ae <_dtoa_r+0x246>
 800d738:	2300      	movs	r3, #0
 800d73a:	e7b2      	b.n	800d6a2 <_dtoa_r+0x23a>
 800d73c:	2300      	movs	r3, #0
 800d73e:	e7f0      	b.n	800d722 <_dtoa_r+0x2ba>
 800d740:	2501      	movs	r5, #1
 800d742:	2300      	movs	r3, #0
 800d744:	9306      	str	r3, [sp, #24]
 800d746:	950a      	str	r5, [sp, #40]	; 0x28
 800d748:	f04f 33ff 	mov.w	r3, #4294967295
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	4699      	mov	r9, r3
 800d750:	2200      	movs	r2, #0
 800d752:	2312      	movs	r3, #18
 800d754:	920b      	str	r2, [sp, #44]	; 0x2c
 800d756:	e7aa      	b.n	800d6ae <_dtoa_r+0x246>
 800d758:	2301      	movs	r3, #1
 800d75a:	930a      	str	r3, [sp, #40]	; 0x28
 800d75c:	e7f4      	b.n	800d748 <_dtoa_r+0x2e0>
 800d75e:	2301      	movs	r3, #1
 800d760:	9302      	str	r3, [sp, #8]
 800d762:	4699      	mov	r9, r3
 800d764:	461a      	mov	r2, r3
 800d766:	e7f5      	b.n	800d754 <_dtoa_r+0x2ec>
 800d768:	3101      	adds	r1, #1
 800d76a:	6071      	str	r1, [r6, #4]
 800d76c:	0052      	lsls	r2, r2, #1
 800d76e:	e7a2      	b.n	800d6b6 <_dtoa_r+0x24e>
 800d770:	636f4361 	.word	0x636f4361
 800d774:	3fd287a7 	.word	0x3fd287a7
 800d778:	8b60c8b3 	.word	0x8b60c8b3
 800d77c:	3fc68a28 	.word	0x3fc68a28
 800d780:	509f79fb 	.word	0x509f79fb
 800d784:	3fd34413 	.word	0x3fd34413
 800d788:	7ff00000 	.word	0x7ff00000
 800d78c:	0800f431 	.word	0x0800f431
 800d790:	3ff80000 	.word	0x3ff80000
 800d794:	0800f490 	.word	0x0800f490
 800d798:	0800f468 	.word	0x0800f468
 800d79c:	0800f45d 	.word	0x0800f45d
 800d7a0:	07f1      	lsls	r1, r6, #31
 800d7a2:	d508      	bpl.n	800d7b6 <_dtoa_r+0x34e>
 800d7a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7b4:	3501      	adds	r5, #1
 800d7b6:	1076      	asrs	r6, r6, #1
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	d1f0      	bne.n	800d7a0 <_dtoa_r+0x338>
 800d7be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d7c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7c6:	f7f3 f841 	bl	800084c <__aeabi_ddiv>
 800d7ca:	e9cd 0100 	strd	r0, r1, [sp]
 800d7ce:	e01a      	b.n	800d806 <_dtoa_r+0x39e>
 800d7d0:	2502      	movs	r5, #2
 800d7d2:	e7a3      	b.n	800d71c <_dtoa_r+0x2b4>
 800d7d4:	f000 80a0 	beq.w	800d918 <_dtoa_r+0x4b0>
 800d7d8:	f1ca 0600 	rsb	r6, sl, #0
 800d7dc:	4b9f      	ldr	r3, [pc, #636]	; (800da5c <_dtoa_r+0x5f4>)
 800d7de:	4fa0      	ldr	r7, [pc, #640]	; (800da60 <_dtoa_r+0x5f8>)
 800d7e0:	f006 020f 	and.w	r2, r6, #15
 800d7e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d7f0:	f7f2 ff02 	bl	80005f8 <__aeabi_dmul>
 800d7f4:	e9cd 0100 	strd	r0, r1, [sp]
 800d7f8:	1136      	asrs	r6, r6, #4
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	2502      	movs	r5, #2
 800d7fe:	2e00      	cmp	r6, #0
 800d800:	d17f      	bne.n	800d902 <_dtoa_r+0x49a>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e1      	bne.n	800d7ca <_dtoa_r+0x362>
 800d806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 8087 	beq.w	800d91c <_dtoa_r+0x4b4>
 800d80e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d812:	2200      	movs	r2, #0
 800d814:	4b93      	ldr	r3, [pc, #588]	; (800da64 <_dtoa_r+0x5fc>)
 800d816:	4630      	mov	r0, r6
 800d818:	4639      	mov	r1, r7
 800d81a:	f7f3 f95f 	bl	8000adc <__aeabi_dcmplt>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d07c      	beq.n	800d91c <_dtoa_r+0x4b4>
 800d822:	f1b9 0f00 	cmp.w	r9, #0
 800d826:	d079      	beq.n	800d91c <_dtoa_r+0x4b4>
 800d828:	9b02      	ldr	r3, [sp, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dd35      	ble.n	800d89a <_dtoa_r+0x432>
 800d82e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d832:	9308      	str	r3, [sp, #32]
 800d834:	4639      	mov	r1, r7
 800d836:	2200      	movs	r2, #0
 800d838:	4b8b      	ldr	r3, [pc, #556]	; (800da68 <_dtoa_r+0x600>)
 800d83a:	4630      	mov	r0, r6
 800d83c:	f7f2 fedc 	bl	80005f8 <__aeabi_dmul>
 800d840:	e9cd 0100 	strd	r0, r1, [sp]
 800d844:	9f02      	ldr	r7, [sp, #8]
 800d846:	3501      	adds	r5, #1
 800d848:	4628      	mov	r0, r5
 800d84a:	f7f2 fe6b 	bl	8000524 <__aeabi_i2d>
 800d84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d852:	f7f2 fed1 	bl	80005f8 <__aeabi_dmul>
 800d856:	2200      	movs	r2, #0
 800d858:	4b84      	ldr	r3, [pc, #528]	; (800da6c <_dtoa_r+0x604>)
 800d85a:	f7f2 fd17 	bl	800028c <__adddf3>
 800d85e:	4605      	mov	r5, r0
 800d860:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d864:	2f00      	cmp	r7, #0
 800d866:	d15d      	bne.n	800d924 <_dtoa_r+0x4bc>
 800d868:	2200      	movs	r2, #0
 800d86a:	4b81      	ldr	r3, [pc, #516]	; (800da70 <_dtoa_r+0x608>)
 800d86c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d870:	f7f2 fd0a 	bl	8000288 <__aeabi_dsub>
 800d874:	462a      	mov	r2, r5
 800d876:	4633      	mov	r3, r6
 800d878:	e9cd 0100 	strd	r0, r1, [sp]
 800d87c:	f7f3 f94c 	bl	8000b18 <__aeabi_dcmpgt>
 800d880:	2800      	cmp	r0, #0
 800d882:	f040 8288 	bne.w	800dd96 <_dtoa_r+0x92e>
 800d886:	462a      	mov	r2, r5
 800d888:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d88c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d890:	f7f3 f924 	bl	8000adc <__aeabi_dcmplt>
 800d894:	2800      	cmp	r0, #0
 800d896:	f040 827c 	bne.w	800dd92 <_dtoa_r+0x92a>
 800d89a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d89e:	e9cd 2300 	strd	r2, r3, [sp]
 800d8a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f2c0 8150 	blt.w	800db4a <_dtoa_r+0x6e2>
 800d8aa:	f1ba 0f0e 	cmp.w	sl, #14
 800d8ae:	f300 814c 	bgt.w	800db4a <_dtoa_r+0x6e2>
 800d8b2:	4b6a      	ldr	r3, [pc, #424]	; (800da5c <_dtoa_r+0x5f4>)
 800d8b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d8b8:	ed93 7b00 	vldr	d7, [r3]
 800d8bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8c4:	f280 80d8 	bge.w	800da78 <_dtoa_r+0x610>
 800d8c8:	f1b9 0f00 	cmp.w	r9, #0
 800d8cc:	f300 80d4 	bgt.w	800da78 <_dtoa_r+0x610>
 800d8d0:	f040 825e 	bne.w	800dd90 <_dtoa_r+0x928>
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4b66      	ldr	r3, [pc, #408]	; (800da70 <_dtoa_r+0x608>)
 800d8d8:	ec51 0b17 	vmov	r0, r1, d7
 800d8dc:	f7f2 fe8c 	bl	80005f8 <__aeabi_dmul>
 800d8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8e4:	f7f3 f90e 	bl	8000b04 <__aeabi_dcmpge>
 800d8e8:	464f      	mov	r7, r9
 800d8ea:	464e      	mov	r6, r9
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f040 8234 	bne.w	800dd5a <_dtoa_r+0x8f2>
 800d8f2:	2331      	movs	r3, #49	; 0x31
 800d8f4:	f10b 0501 	add.w	r5, fp, #1
 800d8f8:	f88b 3000 	strb.w	r3, [fp]
 800d8fc:	f10a 0a01 	add.w	sl, sl, #1
 800d900:	e22f      	b.n	800dd62 <_dtoa_r+0x8fa>
 800d902:	07f2      	lsls	r2, r6, #31
 800d904:	d505      	bpl.n	800d912 <_dtoa_r+0x4aa>
 800d906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d90a:	f7f2 fe75 	bl	80005f8 <__aeabi_dmul>
 800d90e:	3501      	adds	r5, #1
 800d910:	2301      	movs	r3, #1
 800d912:	1076      	asrs	r6, r6, #1
 800d914:	3708      	adds	r7, #8
 800d916:	e772      	b.n	800d7fe <_dtoa_r+0x396>
 800d918:	2502      	movs	r5, #2
 800d91a:	e774      	b.n	800d806 <_dtoa_r+0x39e>
 800d91c:	f8cd a020 	str.w	sl, [sp, #32]
 800d920:	464f      	mov	r7, r9
 800d922:	e791      	b.n	800d848 <_dtoa_r+0x3e0>
 800d924:	4b4d      	ldr	r3, [pc, #308]	; (800da5c <_dtoa_r+0x5f4>)
 800d926:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d92a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d930:	2b00      	cmp	r3, #0
 800d932:	d047      	beq.n	800d9c4 <_dtoa_r+0x55c>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	2000      	movs	r0, #0
 800d93a:	494e      	ldr	r1, [pc, #312]	; (800da74 <_dtoa_r+0x60c>)
 800d93c:	f7f2 ff86 	bl	800084c <__aeabi_ddiv>
 800d940:	462a      	mov	r2, r5
 800d942:	4633      	mov	r3, r6
 800d944:	f7f2 fca0 	bl	8000288 <__aeabi_dsub>
 800d948:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d94c:	465d      	mov	r5, fp
 800d94e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d952:	f7f3 f901 	bl	8000b58 <__aeabi_d2iz>
 800d956:	4606      	mov	r6, r0
 800d958:	f7f2 fde4 	bl	8000524 <__aeabi_i2d>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d964:	f7f2 fc90 	bl	8000288 <__aeabi_dsub>
 800d968:	3630      	adds	r6, #48	; 0x30
 800d96a:	f805 6b01 	strb.w	r6, [r5], #1
 800d96e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d972:	e9cd 0100 	strd	r0, r1, [sp]
 800d976:	f7f3 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d163      	bne.n	800da46 <_dtoa_r+0x5de>
 800d97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d982:	2000      	movs	r0, #0
 800d984:	4937      	ldr	r1, [pc, #220]	; (800da64 <_dtoa_r+0x5fc>)
 800d986:	f7f2 fc7f 	bl	8000288 <__aeabi_dsub>
 800d98a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d98e:	f7f3 f8a5 	bl	8000adc <__aeabi_dcmplt>
 800d992:	2800      	cmp	r0, #0
 800d994:	f040 80b7 	bne.w	800db06 <_dtoa_r+0x69e>
 800d998:	eba5 030b 	sub.w	r3, r5, fp
 800d99c:	429f      	cmp	r7, r3
 800d99e:	f77f af7c 	ble.w	800d89a <_dtoa_r+0x432>
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	4b30      	ldr	r3, [pc, #192]	; (800da68 <_dtoa_r+0x600>)
 800d9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d9aa:	f7f2 fe25 	bl	80005f8 <__aeabi_dmul>
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d9b4:	4b2c      	ldr	r3, [pc, #176]	; (800da68 <_dtoa_r+0x600>)
 800d9b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9ba:	f7f2 fe1d 	bl	80005f8 <__aeabi_dmul>
 800d9be:	e9cd 0100 	strd	r0, r1, [sp]
 800d9c2:	e7c4      	b.n	800d94e <_dtoa_r+0x4e6>
 800d9c4:	462a      	mov	r2, r5
 800d9c6:	4633      	mov	r3, r6
 800d9c8:	f7f2 fe16 	bl	80005f8 <__aeabi_dmul>
 800d9cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d9d0:	eb0b 0507 	add.w	r5, fp, r7
 800d9d4:	465e      	mov	r6, fp
 800d9d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9da:	f7f3 f8bd 	bl	8000b58 <__aeabi_d2iz>
 800d9de:	4607      	mov	r7, r0
 800d9e0:	f7f2 fda0 	bl	8000524 <__aeabi_i2d>
 800d9e4:	3730      	adds	r7, #48	; 0x30
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9ee:	f7f2 fc4b 	bl	8000288 <__aeabi_dsub>
 800d9f2:	f806 7b01 	strb.w	r7, [r6], #1
 800d9f6:	42ae      	cmp	r6, r5
 800d9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800d9fc:	f04f 0200 	mov.w	r2, #0
 800da00:	d126      	bne.n	800da50 <_dtoa_r+0x5e8>
 800da02:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <_dtoa_r+0x60c>)
 800da04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da08:	f7f2 fc40 	bl	800028c <__adddf3>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da14:	f7f3 f880 	bl	8000b18 <__aeabi_dcmpgt>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d174      	bne.n	800db06 <_dtoa_r+0x69e>
 800da1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800da20:	2000      	movs	r0, #0
 800da22:	4914      	ldr	r1, [pc, #80]	; (800da74 <_dtoa_r+0x60c>)
 800da24:	f7f2 fc30 	bl	8000288 <__aeabi_dsub>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da30:	f7f3 f854 	bl	8000adc <__aeabi_dcmplt>
 800da34:	2800      	cmp	r0, #0
 800da36:	f43f af30 	beq.w	800d89a <_dtoa_r+0x432>
 800da3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da3e:	2b30      	cmp	r3, #48	; 0x30
 800da40:	f105 32ff 	add.w	r2, r5, #4294967295
 800da44:	d002      	beq.n	800da4c <_dtoa_r+0x5e4>
 800da46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800da4a:	e04a      	b.n	800dae2 <_dtoa_r+0x67a>
 800da4c:	4615      	mov	r5, r2
 800da4e:	e7f4      	b.n	800da3a <_dtoa_r+0x5d2>
 800da50:	4b05      	ldr	r3, [pc, #20]	; (800da68 <_dtoa_r+0x600>)
 800da52:	f7f2 fdd1 	bl	80005f8 <__aeabi_dmul>
 800da56:	e9cd 0100 	strd	r0, r1, [sp]
 800da5a:	e7bc      	b.n	800d9d6 <_dtoa_r+0x56e>
 800da5c:	0800f490 	.word	0x0800f490
 800da60:	0800f468 	.word	0x0800f468
 800da64:	3ff00000 	.word	0x3ff00000
 800da68:	40240000 	.word	0x40240000
 800da6c:	401c0000 	.word	0x401c0000
 800da70:	40140000 	.word	0x40140000
 800da74:	3fe00000 	.word	0x3fe00000
 800da78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da7c:	465d      	mov	r5, fp
 800da7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	f7f2 fee1 	bl	800084c <__aeabi_ddiv>
 800da8a:	f7f3 f865 	bl	8000b58 <__aeabi_d2iz>
 800da8e:	4680      	mov	r8, r0
 800da90:	f7f2 fd48 	bl	8000524 <__aeabi_i2d>
 800da94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da98:	f7f2 fdae 	bl	80005f8 <__aeabi_dmul>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	4630      	mov	r0, r6
 800daa2:	4639      	mov	r1, r7
 800daa4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800daa8:	f7f2 fbee 	bl	8000288 <__aeabi_dsub>
 800daac:	f805 6b01 	strb.w	r6, [r5], #1
 800dab0:	eba5 060b 	sub.w	r6, r5, fp
 800dab4:	45b1      	cmp	r9, r6
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	d139      	bne.n	800db30 <_dtoa_r+0x6c8>
 800dabc:	f7f2 fbe6 	bl	800028c <__adddf3>
 800dac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dac4:	4606      	mov	r6, r0
 800dac6:	460f      	mov	r7, r1
 800dac8:	f7f3 f826 	bl	8000b18 <__aeabi_dcmpgt>
 800dacc:	b9c8      	cbnz	r0, 800db02 <_dtoa_r+0x69a>
 800dace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dad2:	4630      	mov	r0, r6
 800dad4:	4639      	mov	r1, r7
 800dad6:	f7f2 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 800dada:	b110      	cbz	r0, 800dae2 <_dtoa_r+0x67a>
 800dadc:	f018 0f01 	tst.w	r8, #1
 800dae0:	d10f      	bne.n	800db02 <_dtoa_r+0x69a>
 800dae2:	9904      	ldr	r1, [sp, #16]
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 fb68 	bl	800e1ba <_Bfree>
 800daea:	2300      	movs	r3, #0
 800daec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800daee:	702b      	strb	r3, [r5, #0]
 800daf0:	f10a 0301 	add.w	r3, sl, #1
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 8241 	beq.w	800df80 <_dtoa_r+0xb18>
 800dafe:	601d      	str	r5, [r3, #0]
 800db00:	e23e      	b.n	800df80 <_dtoa_r+0xb18>
 800db02:	f8cd a020 	str.w	sl, [sp, #32]
 800db06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800db0a:	2a39      	cmp	r2, #57	; 0x39
 800db0c:	f105 33ff 	add.w	r3, r5, #4294967295
 800db10:	d108      	bne.n	800db24 <_dtoa_r+0x6bc>
 800db12:	459b      	cmp	fp, r3
 800db14:	d10a      	bne.n	800db2c <_dtoa_r+0x6c4>
 800db16:	9b08      	ldr	r3, [sp, #32]
 800db18:	3301      	adds	r3, #1
 800db1a:	9308      	str	r3, [sp, #32]
 800db1c:	2330      	movs	r3, #48	; 0x30
 800db1e:	f88b 3000 	strb.w	r3, [fp]
 800db22:	465b      	mov	r3, fp
 800db24:	781a      	ldrb	r2, [r3, #0]
 800db26:	3201      	adds	r2, #1
 800db28:	701a      	strb	r2, [r3, #0]
 800db2a:	e78c      	b.n	800da46 <_dtoa_r+0x5de>
 800db2c:	461d      	mov	r5, r3
 800db2e:	e7ea      	b.n	800db06 <_dtoa_r+0x69e>
 800db30:	2200      	movs	r2, #0
 800db32:	4b9b      	ldr	r3, [pc, #620]	; (800dda0 <_dtoa_r+0x938>)
 800db34:	f7f2 fd60 	bl	80005f8 <__aeabi_dmul>
 800db38:	2200      	movs	r2, #0
 800db3a:	2300      	movs	r3, #0
 800db3c:	4606      	mov	r6, r0
 800db3e:	460f      	mov	r7, r1
 800db40:	f7f2 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800db44:	2800      	cmp	r0, #0
 800db46:	d09a      	beq.n	800da7e <_dtoa_r+0x616>
 800db48:	e7cb      	b.n	800dae2 <_dtoa_r+0x67a>
 800db4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db4c:	2a00      	cmp	r2, #0
 800db4e:	f000 808b 	beq.w	800dc68 <_dtoa_r+0x800>
 800db52:	9a06      	ldr	r2, [sp, #24]
 800db54:	2a01      	cmp	r2, #1
 800db56:	dc6e      	bgt.n	800dc36 <_dtoa_r+0x7ce>
 800db58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db5a:	2a00      	cmp	r2, #0
 800db5c:	d067      	beq.n	800dc2e <_dtoa_r+0x7c6>
 800db5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db62:	9f07      	ldr	r7, [sp, #28]
 800db64:	9d05      	ldr	r5, [sp, #20]
 800db66:	9a05      	ldr	r2, [sp, #20]
 800db68:	2101      	movs	r1, #1
 800db6a:	441a      	add	r2, r3
 800db6c:	4620      	mov	r0, r4
 800db6e:	9205      	str	r2, [sp, #20]
 800db70:	4498      	add	r8, r3
 800db72:	f000 fbc2 	bl	800e2fa <__i2b>
 800db76:	4606      	mov	r6, r0
 800db78:	2d00      	cmp	r5, #0
 800db7a:	dd0c      	ble.n	800db96 <_dtoa_r+0x72e>
 800db7c:	f1b8 0f00 	cmp.w	r8, #0
 800db80:	dd09      	ble.n	800db96 <_dtoa_r+0x72e>
 800db82:	4545      	cmp	r5, r8
 800db84:	9a05      	ldr	r2, [sp, #20]
 800db86:	462b      	mov	r3, r5
 800db88:	bfa8      	it	ge
 800db8a:	4643      	movge	r3, r8
 800db8c:	1ad2      	subs	r2, r2, r3
 800db8e:	9205      	str	r2, [sp, #20]
 800db90:	1aed      	subs	r5, r5, r3
 800db92:	eba8 0803 	sub.w	r8, r8, r3
 800db96:	9b07      	ldr	r3, [sp, #28]
 800db98:	b1eb      	cbz	r3, 800dbd6 <_dtoa_r+0x76e>
 800db9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d067      	beq.n	800dc70 <_dtoa_r+0x808>
 800dba0:	b18f      	cbz	r7, 800dbc6 <_dtoa_r+0x75e>
 800dba2:	4631      	mov	r1, r6
 800dba4:	463a      	mov	r2, r7
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 fc46 	bl	800e438 <__pow5mult>
 800dbac:	9a04      	ldr	r2, [sp, #16]
 800dbae:	4601      	mov	r1, r0
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f000 fbaa 	bl	800e30c <__multiply>
 800dbb8:	9904      	ldr	r1, [sp, #16]
 800dbba:	9008      	str	r0, [sp, #32]
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f000 fafc 	bl	800e1ba <_Bfree>
 800dbc2:	9b08      	ldr	r3, [sp, #32]
 800dbc4:	9304      	str	r3, [sp, #16]
 800dbc6:	9b07      	ldr	r3, [sp, #28]
 800dbc8:	1bda      	subs	r2, r3, r7
 800dbca:	d004      	beq.n	800dbd6 <_dtoa_r+0x76e>
 800dbcc:	9904      	ldr	r1, [sp, #16]
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f000 fc32 	bl	800e438 <__pow5mult>
 800dbd4:	9004      	str	r0, [sp, #16]
 800dbd6:	2101      	movs	r1, #1
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f000 fb8e 	bl	800e2fa <__i2b>
 800dbde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbe0:	4607      	mov	r7, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f000 81d0 	beq.w	800df88 <_dtoa_r+0xb20>
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4601      	mov	r1, r0
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 fc23 	bl	800e438 <__pow5mult>
 800dbf2:	9b06      	ldr	r3, [sp, #24]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	4607      	mov	r7, r0
 800dbf8:	dc40      	bgt.n	800dc7c <_dtoa_r+0x814>
 800dbfa:	9b00      	ldr	r3, [sp, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d139      	bne.n	800dc74 <_dtoa_r+0x80c>
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d136      	bne.n	800dc78 <_dtoa_r+0x810>
 800dc0a:	9b01      	ldr	r3, [sp, #4]
 800dc0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc10:	0d1b      	lsrs	r3, r3, #20
 800dc12:	051b      	lsls	r3, r3, #20
 800dc14:	b12b      	cbz	r3, 800dc22 <_dtoa_r+0x7ba>
 800dc16:	9b05      	ldr	r3, [sp, #20]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	9305      	str	r3, [sp, #20]
 800dc1c:	f108 0801 	add.w	r8, r8, #1
 800dc20:	2301      	movs	r3, #1
 800dc22:	9307      	str	r3, [sp, #28]
 800dc24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d12a      	bne.n	800dc80 <_dtoa_r+0x818>
 800dc2a:	2001      	movs	r0, #1
 800dc2c:	e030      	b.n	800dc90 <_dtoa_r+0x828>
 800dc2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc34:	e795      	b.n	800db62 <_dtoa_r+0x6fa>
 800dc36:	9b07      	ldr	r3, [sp, #28]
 800dc38:	f109 37ff 	add.w	r7, r9, #4294967295
 800dc3c:	42bb      	cmp	r3, r7
 800dc3e:	bfbf      	itttt	lt
 800dc40:	9b07      	ldrlt	r3, [sp, #28]
 800dc42:	9707      	strlt	r7, [sp, #28]
 800dc44:	1afa      	sublt	r2, r7, r3
 800dc46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dc48:	bfbb      	ittet	lt
 800dc4a:	189b      	addlt	r3, r3, r2
 800dc4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dc4e:	1bdf      	subge	r7, r3, r7
 800dc50:	2700      	movlt	r7, #0
 800dc52:	f1b9 0f00 	cmp.w	r9, #0
 800dc56:	bfb5      	itete	lt
 800dc58:	9b05      	ldrlt	r3, [sp, #20]
 800dc5a:	9d05      	ldrge	r5, [sp, #20]
 800dc5c:	eba3 0509 	sublt.w	r5, r3, r9
 800dc60:	464b      	movge	r3, r9
 800dc62:	bfb8      	it	lt
 800dc64:	2300      	movlt	r3, #0
 800dc66:	e77e      	b.n	800db66 <_dtoa_r+0x6fe>
 800dc68:	9f07      	ldr	r7, [sp, #28]
 800dc6a:	9d05      	ldr	r5, [sp, #20]
 800dc6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dc6e:	e783      	b.n	800db78 <_dtoa_r+0x710>
 800dc70:	9a07      	ldr	r2, [sp, #28]
 800dc72:	e7ab      	b.n	800dbcc <_dtoa_r+0x764>
 800dc74:	2300      	movs	r3, #0
 800dc76:	e7d4      	b.n	800dc22 <_dtoa_r+0x7ba>
 800dc78:	9b00      	ldr	r3, [sp, #0]
 800dc7a:	e7d2      	b.n	800dc22 <_dtoa_r+0x7ba>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9307      	str	r3, [sp, #28]
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800dc86:	6918      	ldr	r0, [r3, #16]
 800dc88:	f000 fae9 	bl	800e25e <__hi0bits>
 800dc8c:	f1c0 0020 	rsb	r0, r0, #32
 800dc90:	4440      	add	r0, r8
 800dc92:	f010 001f 	ands.w	r0, r0, #31
 800dc96:	d047      	beq.n	800dd28 <_dtoa_r+0x8c0>
 800dc98:	f1c0 0320 	rsb	r3, r0, #32
 800dc9c:	2b04      	cmp	r3, #4
 800dc9e:	dd3b      	ble.n	800dd18 <_dtoa_r+0x8b0>
 800dca0:	9b05      	ldr	r3, [sp, #20]
 800dca2:	f1c0 001c 	rsb	r0, r0, #28
 800dca6:	4403      	add	r3, r0
 800dca8:	9305      	str	r3, [sp, #20]
 800dcaa:	4405      	add	r5, r0
 800dcac:	4480      	add	r8, r0
 800dcae:	9b05      	ldr	r3, [sp, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dd05      	ble.n	800dcc0 <_dtoa_r+0x858>
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	9904      	ldr	r1, [sp, #16]
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f000 fc0b 	bl	800e4d4 <__lshift>
 800dcbe:	9004      	str	r0, [sp, #16]
 800dcc0:	f1b8 0f00 	cmp.w	r8, #0
 800dcc4:	dd05      	ble.n	800dcd2 <_dtoa_r+0x86a>
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	4642      	mov	r2, r8
 800dcca:	4620      	mov	r0, r4
 800dccc:	f000 fc02 	bl	800e4d4 <__lshift>
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcd4:	b353      	cbz	r3, 800dd2c <_dtoa_r+0x8c4>
 800dcd6:	4639      	mov	r1, r7
 800dcd8:	9804      	ldr	r0, [sp, #16]
 800dcda:	f000 fc4f 	bl	800e57c <__mcmp>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	da24      	bge.n	800dd2c <_dtoa_r+0x8c4>
 800dce2:	2300      	movs	r3, #0
 800dce4:	220a      	movs	r2, #10
 800dce6:	9904      	ldr	r1, [sp, #16]
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 fa7d 	bl	800e1e8 <__multadd>
 800dcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf0:	9004      	str	r0, [sp, #16]
 800dcf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f000 814d 	beq.w	800df96 <_dtoa_r+0xb2e>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4631      	mov	r1, r6
 800dd00:	220a      	movs	r2, #10
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 fa70 	bl	800e1e8 <__multadd>
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	dc4f      	bgt.n	800ddb0 <_dtoa_r+0x948>
 800dd10:	9b06      	ldr	r3, [sp, #24]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	dd4c      	ble.n	800ddb0 <_dtoa_r+0x948>
 800dd16:	e011      	b.n	800dd3c <_dtoa_r+0x8d4>
 800dd18:	d0c9      	beq.n	800dcae <_dtoa_r+0x846>
 800dd1a:	9a05      	ldr	r2, [sp, #20]
 800dd1c:	331c      	adds	r3, #28
 800dd1e:	441a      	add	r2, r3
 800dd20:	9205      	str	r2, [sp, #20]
 800dd22:	441d      	add	r5, r3
 800dd24:	4498      	add	r8, r3
 800dd26:	e7c2      	b.n	800dcae <_dtoa_r+0x846>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	e7f6      	b.n	800dd1a <_dtoa_r+0x8b2>
 800dd2c:	f1b9 0f00 	cmp.w	r9, #0
 800dd30:	dc38      	bgt.n	800dda4 <_dtoa_r+0x93c>
 800dd32:	9b06      	ldr	r3, [sp, #24]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	dd35      	ble.n	800dda4 <_dtoa_r+0x93c>
 800dd38:	f8cd 9008 	str.w	r9, [sp, #8]
 800dd3c:	9b02      	ldr	r3, [sp, #8]
 800dd3e:	b963      	cbnz	r3, 800dd5a <_dtoa_r+0x8f2>
 800dd40:	4639      	mov	r1, r7
 800dd42:	2205      	movs	r2, #5
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 fa4f 	bl	800e1e8 <__multadd>
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	4607      	mov	r7, r0
 800dd4e:	9804      	ldr	r0, [sp, #16]
 800dd50:	f000 fc14 	bl	800e57c <__mcmp>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	f73f adcc 	bgt.w	800d8f2 <_dtoa_r+0x48a>
 800dd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd5c:	465d      	mov	r5, fp
 800dd5e:	ea6f 0a03 	mvn.w	sl, r3
 800dd62:	f04f 0900 	mov.w	r9, #0
 800dd66:	4639      	mov	r1, r7
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 fa26 	bl	800e1ba <_Bfree>
 800dd6e:	2e00      	cmp	r6, #0
 800dd70:	f43f aeb7 	beq.w	800dae2 <_dtoa_r+0x67a>
 800dd74:	f1b9 0f00 	cmp.w	r9, #0
 800dd78:	d005      	beq.n	800dd86 <_dtoa_r+0x91e>
 800dd7a:	45b1      	cmp	r9, r6
 800dd7c:	d003      	beq.n	800dd86 <_dtoa_r+0x91e>
 800dd7e:	4649      	mov	r1, r9
 800dd80:	4620      	mov	r0, r4
 800dd82:	f000 fa1a 	bl	800e1ba <_Bfree>
 800dd86:	4631      	mov	r1, r6
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f000 fa16 	bl	800e1ba <_Bfree>
 800dd8e:	e6a8      	b.n	800dae2 <_dtoa_r+0x67a>
 800dd90:	2700      	movs	r7, #0
 800dd92:	463e      	mov	r6, r7
 800dd94:	e7e1      	b.n	800dd5a <_dtoa_r+0x8f2>
 800dd96:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dd9a:	463e      	mov	r6, r7
 800dd9c:	e5a9      	b.n	800d8f2 <_dtoa_r+0x48a>
 800dd9e:	bf00      	nop
 800dda0:	40240000 	.word	0x40240000
 800dda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 80fa 	beq.w	800dfa4 <_dtoa_r+0xb3c>
 800ddb0:	2d00      	cmp	r5, #0
 800ddb2:	dd05      	ble.n	800ddc0 <_dtoa_r+0x958>
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	462a      	mov	r2, r5
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fb8b 	bl	800e4d4 <__lshift>
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	9b07      	ldr	r3, [sp, #28]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d04c      	beq.n	800de60 <_dtoa_r+0x9f8>
 800ddc6:	6871      	ldr	r1, [r6, #4]
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f000 f9c2 	bl	800e152 <_Balloc>
 800ddce:	6932      	ldr	r2, [r6, #16]
 800ddd0:	3202      	adds	r2, #2
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	0092      	lsls	r2, r2, #2
 800ddd6:	f106 010c 	add.w	r1, r6, #12
 800ddda:	300c      	adds	r0, #12
 800dddc:	f000 f9ac 	bl	800e138 <memcpy>
 800dde0:	2201      	movs	r2, #1
 800dde2:	4629      	mov	r1, r5
 800dde4:	4620      	mov	r0, r4
 800dde6:	f000 fb75 	bl	800e4d4 <__lshift>
 800ddea:	9b00      	ldr	r3, [sp, #0]
 800ddec:	f8cd b014 	str.w	fp, [sp, #20]
 800ddf0:	f003 0301 	and.w	r3, r3, #1
 800ddf4:	46b1      	mov	r9, r6
 800ddf6:	9307      	str	r3, [sp, #28]
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	9804      	ldr	r0, [sp, #16]
 800ddfe:	f7ff faa5 	bl	800d34c <quorem>
 800de02:	4649      	mov	r1, r9
 800de04:	4605      	mov	r5, r0
 800de06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800de0a:	9804      	ldr	r0, [sp, #16]
 800de0c:	f000 fbb6 	bl	800e57c <__mcmp>
 800de10:	4632      	mov	r2, r6
 800de12:	9000      	str	r0, [sp, #0]
 800de14:	4639      	mov	r1, r7
 800de16:	4620      	mov	r0, r4
 800de18:	f000 fbca 	bl	800e5b0 <__mdiff>
 800de1c:	68c3      	ldr	r3, [r0, #12]
 800de1e:	4602      	mov	r2, r0
 800de20:	bb03      	cbnz	r3, 800de64 <_dtoa_r+0x9fc>
 800de22:	4601      	mov	r1, r0
 800de24:	9008      	str	r0, [sp, #32]
 800de26:	9804      	ldr	r0, [sp, #16]
 800de28:	f000 fba8 	bl	800e57c <__mcmp>
 800de2c:	9a08      	ldr	r2, [sp, #32]
 800de2e:	4603      	mov	r3, r0
 800de30:	4611      	mov	r1, r2
 800de32:	4620      	mov	r0, r4
 800de34:	9308      	str	r3, [sp, #32]
 800de36:	f000 f9c0 	bl	800e1ba <_Bfree>
 800de3a:	9b08      	ldr	r3, [sp, #32]
 800de3c:	b9a3      	cbnz	r3, 800de68 <_dtoa_r+0xa00>
 800de3e:	9a06      	ldr	r2, [sp, #24]
 800de40:	b992      	cbnz	r2, 800de68 <_dtoa_r+0xa00>
 800de42:	9a07      	ldr	r2, [sp, #28]
 800de44:	b982      	cbnz	r2, 800de68 <_dtoa_r+0xa00>
 800de46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de4a:	d029      	beq.n	800dea0 <_dtoa_r+0xa38>
 800de4c:	9b00      	ldr	r3, [sp, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dd01      	ble.n	800de56 <_dtoa_r+0x9ee>
 800de52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800de56:	9b05      	ldr	r3, [sp, #20]
 800de58:	1c5d      	adds	r5, r3, #1
 800de5a:	f883 8000 	strb.w	r8, [r3]
 800de5e:	e782      	b.n	800dd66 <_dtoa_r+0x8fe>
 800de60:	4630      	mov	r0, r6
 800de62:	e7c2      	b.n	800ddea <_dtoa_r+0x982>
 800de64:	2301      	movs	r3, #1
 800de66:	e7e3      	b.n	800de30 <_dtoa_r+0x9c8>
 800de68:	9a00      	ldr	r2, [sp, #0]
 800de6a:	2a00      	cmp	r2, #0
 800de6c:	db04      	blt.n	800de78 <_dtoa_r+0xa10>
 800de6e:	d125      	bne.n	800debc <_dtoa_r+0xa54>
 800de70:	9a06      	ldr	r2, [sp, #24]
 800de72:	bb1a      	cbnz	r2, 800debc <_dtoa_r+0xa54>
 800de74:	9a07      	ldr	r2, [sp, #28]
 800de76:	bb0a      	cbnz	r2, 800debc <_dtoa_r+0xa54>
 800de78:	2b00      	cmp	r3, #0
 800de7a:	ddec      	ble.n	800de56 <_dtoa_r+0x9ee>
 800de7c:	2201      	movs	r2, #1
 800de7e:	9904      	ldr	r1, [sp, #16]
 800de80:	4620      	mov	r0, r4
 800de82:	f000 fb27 	bl	800e4d4 <__lshift>
 800de86:	4639      	mov	r1, r7
 800de88:	9004      	str	r0, [sp, #16]
 800de8a:	f000 fb77 	bl	800e57c <__mcmp>
 800de8e:	2800      	cmp	r0, #0
 800de90:	dc03      	bgt.n	800de9a <_dtoa_r+0xa32>
 800de92:	d1e0      	bne.n	800de56 <_dtoa_r+0x9ee>
 800de94:	f018 0f01 	tst.w	r8, #1
 800de98:	d0dd      	beq.n	800de56 <_dtoa_r+0x9ee>
 800de9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de9e:	d1d8      	bne.n	800de52 <_dtoa_r+0x9ea>
 800dea0:	9b05      	ldr	r3, [sp, #20]
 800dea2:	9a05      	ldr	r2, [sp, #20]
 800dea4:	1c5d      	adds	r5, r3, #1
 800dea6:	2339      	movs	r3, #57	; 0x39
 800dea8:	7013      	strb	r3, [r2, #0]
 800deaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800deae:	2b39      	cmp	r3, #57	; 0x39
 800deb0:	f105 32ff 	add.w	r2, r5, #4294967295
 800deb4:	d04f      	beq.n	800df56 <_dtoa_r+0xaee>
 800deb6:	3301      	adds	r3, #1
 800deb8:	7013      	strb	r3, [r2, #0]
 800deba:	e754      	b.n	800dd66 <_dtoa_r+0x8fe>
 800debc:	9a05      	ldr	r2, [sp, #20]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f102 0501 	add.w	r5, r2, #1
 800dec4:	dd06      	ble.n	800ded4 <_dtoa_r+0xa6c>
 800dec6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800deca:	d0e9      	beq.n	800dea0 <_dtoa_r+0xa38>
 800decc:	f108 0801 	add.w	r8, r8, #1
 800ded0:	9b05      	ldr	r3, [sp, #20]
 800ded2:	e7c2      	b.n	800de5a <_dtoa_r+0x9f2>
 800ded4:	9a02      	ldr	r2, [sp, #8]
 800ded6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800deda:	eba5 030b 	sub.w	r3, r5, fp
 800dede:	4293      	cmp	r3, r2
 800dee0:	d021      	beq.n	800df26 <_dtoa_r+0xabe>
 800dee2:	2300      	movs	r3, #0
 800dee4:	220a      	movs	r2, #10
 800dee6:	9904      	ldr	r1, [sp, #16]
 800dee8:	4620      	mov	r0, r4
 800deea:	f000 f97d 	bl	800e1e8 <__multadd>
 800deee:	45b1      	cmp	r9, r6
 800def0:	9004      	str	r0, [sp, #16]
 800def2:	f04f 0300 	mov.w	r3, #0
 800def6:	f04f 020a 	mov.w	r2, #10
 800defa:	4649      	mov	r1, r9
 800defc:	4620      	mov	r0, r4
 800defe:	d105      	bne.n	800df0c <_dtoa_r+0xaa4>
 800df00:	f000 f972 	bl	800e1e8 <__multadd>
 800df04:	4681      	mov	r9, r0
 800df06:	4606      	mov	r6, r0
 800df08:	9505      	str	r5, [sp, #20]
 800df0a:	e776      	b.n	800ddfa <_dtoa_r+0x992>
 800df0c:	f000 f96c 	bl	800e1e8 <__multadd>
 800df10:	4631      	mov	r1, r6
 800df12:	4681      	mov	r9, r0
 800df14:	2300      	movs	r3, #0
 800df16:	220a      	movs	r2, #10
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 f965 	bl	800e1e8 <__multadd>
 800df1e:	4606      	mov	r6, r0
 800df20:	e7f2      	b.n	800df08 <_dtoa_r+0xaa0>
 800df22:	f04f 0900 	mov.w	r9, #0
 800df26:	2201      	movs	r2, #1
 800df28:	9904      	ldr	r1, [sp, #16]
 800df2a:	4620      	mov	r0, r4
 800df2c:	f000 fad2 	bl	800e4d4 <__lshift>
 800df30:	4639      	mov	r1, r7
 800df32:	9004      	str	r0, [sp, #16]
 800df34:	f000 fb22 	bl	800e57c <__mcmp>
 800df38:	2800      	cmp	r0, #0
 800df3a:	dcb6      	bgt.n	800deaa <_dtoa_r+0xa42>
 800df3c:	d102      	bne.n	800df44 <_dtoa_r+0xadc>
 800df3e:	f018 0f01 	tst.w	r8, #1
 800df42:	d1b2      	bne.n	800deaa <_dtoa_r+0xa42>
 800df44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df48:	2b30      	cmp	r3, #48	; 0x30
 800df4a:	f105 32ff 	add.w	r2, r5, #4294967295
 800df4e:	f47f af0a 	bne.w	800dd66 <_dtoa_r+0x8fe>
 800df52:	4615      	mov	r5, r2
 800df54:	e7f6      	b.n	800df44 <_dtoa_r+0xadc>
 800df56:	4593      	cmp	fp, r2
 800df58:	d105      	bne.n	800df66 <_dtoa_r+0xafe>
 800df5a:	2331      	movs	r3, #49	; 0x31
 800df5c:	f10a 0a01 	add.w	sl, sl, #1
 800df60:	f88b 3000 	strb.w	r3, [fp]
 800df64:	e6ff      	b.n	800dd66 <_dtoa_r+0x8fe>
 800df66:	4615      	mov	r5, r2
 800df68:	e79f      	b.n	800deaa <_dtoa_r+0xa42>
 800df6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dfd0 <_dtoa_r+0xb68>
 800df6e:	e007      	b.n	800df80 <_dtoa_r+0xb18>
 800df70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df72:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dfd4 <_dtoa_r+0xb6c>
 800df76:	b11b      	cbz	r3, 800df80 <_dtoa_r+0xb18>
 800df78:	f10b 0308 	add.w	r3, fp, #8
 800df7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df7e:	6013      	str	r3, [r2, #0]
 800df80:	4658      	mov	r0, fp
 800df82:	b017      	add	sp, #92	; 0x5c
 800df84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df88:	9b06      	ldr	r3, [sp, #24]
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	f77f ae35 	ble.w	800dbfa <_dtoa_r+0x792>
 800df90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df92:	9307      	str	r3, [sp, #28]
 800df94:	e649      	b.n	800dc2a <_dtoa_r+0x7c2>
 800df96:	9b02      	ldr	r3, [sp, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dc03      	bgt.n	800dfa4 <_dtoa_r+0xb3c>
 800df9c:	9b06      	ldr	r3, [sp, #24]
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	f73f aecc 	bgt.w	800dd3c <_dtoa_r+0x8d4>
 800dfa4:	465d      	mov	r5, fp
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	9804      	ldr	r0, [sp, #16]
 800dfaa:	f7ff f9cf 	bl	800d34c <quorem>
 800dfae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dfb2:	f805 8b01 	strb.w	r8, [r5], #1
 800dfb6:	9a02      	ldr	r2, [sp, #8]
 800dfb8:	eba5 030b 	sub.w	r3, r5, fp
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	ddb0      	ble.n	800df22 <_dtoa_r+0xaba>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	220a      	movs	r2, #10
 800dfc4:	9904      	ldr	r1, [sp, #16]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 f90e 	bl	800e1e8 <__multadd>
 800dfcc:	9004      	str	r0, [sp, #16]
 800dfce:	e7ea      	b.n	800dfa6 <_dtoa_r+0xb3e>
 800dfd0:	0800f430 	.word	0x0800f430
 800dfd4:	0800f454 	.word	0x0800f454

0800dfd8 <_getc_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	460c      	mov	r4, r1
 800dfdc:	4605      	mov	r5, r0
 800dfde:	b118      	cbz	r0, 800dfe8 <_getc_r+0x10>
 800dfe0:	6983      	ldr	r3, [r0, #24]
 800dfe2:	b90b      	cbnz	r3, 800dfe8 <_getc_r+0x10>
 800dfe4:	f7fe f95a 	bl	800c29c <__sinit>
 800dfe8:	4b0e      	ldr	r3, [pc, #56]	; (800e024 <_getc_r+0x4c>)
 800dfea:	429c      	cmp	r4, r3
 800dfec:	d10b      	bne.n	800e006 <_getc_r+0x2e>
 800dfee:	686c      	ldr	r4, [r5, #4]
 800dff0:	6863      	ldr	r3, [r4, #4]
 800dff2:	3b01      	subs	r3, #1
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	6063      	str	r3, [r4, #4]
 800dff8:	da0f      	bge.n	800e01a <_getc_r+0x42>
 800dffa:	4621      	mov	r1, r4
 800dffc:	4628      	mov	r0, r5
 800dffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e002:	f000 bce1 	b.w	800e9c8 <__srget_r>
 800e006:	4b08      	ldr	r3, [pc, #32]	; (800e028 <_getc_r+0x50>)
 800e008:	429c      	cmp	r4, r3
 800e00a:	d101      	bne.n	800e010 <_getc_r+0x38>
 800e00c:	68ac      	ldr	r4, [r5, #8]
 800e00e:	e7ef      	b.n	800dff0 <_getc_r+0x18>
 800e010:	4b06      	ldr	r3, [pc, #24]	; (800e02c <_getc_r+0x54>)
 800e012:	429c      	cmp	r4, r3
 800e014:	bf08      	it	eq
 800e016:	68ec      	ldreq	r4, [r5, #12]
 800e018:	e7ea      	b.n	800dff0 <_getc_r+0x18>
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	1c5a      	adds	r2, r3, #1
 800e01e:	6022      	str	r2, [r4, #0]
 800e020:	7818      	ldrb	r0, [r3, #0]
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	0800f3dc 	.word	0x0800f3dc
 800e028:	0800f3fc 	.word	0x0800f3fc
 800e02c:	0800f3bc 	.word	0x0800f3bc

0800e030 <_localeconv_r>:
 800e030:	4b04      	ldr	r3, [pc, #16]	; (800e044 <_localeconv_r+0x14>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	6a18      	ldr	r0, [r3, #32]
 800e036:	4b04      	ldr	r3, [pc, #16]	; (800e048 <_localeconv_r+0x18>)
 800e038:	2800      	cmp	r0, #0
 800e03a:	bf08      	it	eq
 800e03c:	4618      	moveq	r0, r3
 800e03e:	30f0      	adds	r0, #240	; 0xf0
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	2000017c 	.word	0x2000017c
 800e048:	200001e0 	.word	0x200001e0

0800e04c <_lseek_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4c07      	ldr	r4, [pc, #28]	; (800e06c <_lseek_r+0x20>)
 800e050:	4605      	mov	r5, r0
 800e052:	4608      	mov	r0, r1
 800e054:	4611      	mov	r1, r2
 800e056:	2200      	movs	r2, #0
 800e058:	6022      	str	r2, [r4, #0]
 800e05a:	461a      	mov	r2, r3
 800e05c:	f7fd faa2 	bl	800b5a4 <_lseek>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d102      	bne.n	800e06a <_lseek_r+0x1e>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	b103      	cbz	r3, 800e06a <_lseek_r+0x1e>
 800e068:	602b      	str	r3, [r5, #0]
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	20001fd8 	.word	0x20001fd8

0800e070 <__swhatbuf_r>:
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	460e      	mov	r6, r1
 800e074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e078:	2900      	cmp	r1, #0
 800e07a:	b096      	sub	sp, #88	; 0x58
 800e07c:	4614      	mov	r4, r2
 800e07e:	461d      	mov	r5, r3
 800e080:	da07      	bge.n	800e092 <__swhatbuf_r+0x22>
 800e082:	2300      	movs	r3, #0
 800e084:	602b      	str	r3, [r5, #0]
 800e086:	89b3      	ldrh	r3, [r6, #12]
 800e088:	061a      	lsls	r2, r3, #24
 800e08a:	d410      	bmi.n	800e0ae <__swhatbuf_r+0x3e>
 800e08c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e090:	e00e      	b.n	800e0b0 <__swhatbuf_r+0x40>
 800e092:	466a      	mov	r2, sp
 800e094:	f000 fcc4 	bl	800ea20 <_fstat_r>
 800e098:	2800      	cmp	r0, #0
 800e09a:	dbf2      	blt.n	800e082 <__swhatbuf_r+0x12>
 800e09c:	9a01      	ldr	r2, [sp, #4]
 800e09e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0a6:	425a      	negs	r2, r3
 800e0a8:	415a      	adcs	r2, r3
 800e0aa:	602a      	str	r2, [r5, #0]
 800e0ac:	e7ee      	b.n	800e08c <__swhatbuf_r+0x1c>
 800e0ae:	2340      	movs	r3, #64	; 0x40
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	6023      	str	r3, [r4, #0]
 800e0b4:	b016      	add	sp, #88	; 0x58
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}

0800e0b8 <__smakebuf_r>:
 800e0b8:	898b      	ldrh	r3, [r1, #12]
 800e0ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0bc:	079d      	lsls	r5, r3, #30
 800e0be:	4606      	mov	r6, r0
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	d507      	bpl.n	800e0d4 <__smakebuf_r+0x1c>
 800e0c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	6123      	str	r3, [r4, #16]
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	6163      	str	r3, [r4, #20]
 800e0d0:	b002      	add	sp, #8
 800e0d2:	bd70      	pop	{r4, r5, r6, pc}
 800e0d4:	ab01      	add	r3, sp, #4
 800e0d6:	466a      	mov	r2, sp
 800e0d8:	f7ff ffca 	bl	800e070 <__swhatbuf_r>
 800e0dc:	9900      	ldr	r1, [sp, #0]
 800e0de:	4605      	mov	r5, r0
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f7fe fa1d 	bl	800c520 <_malloc_r>
 800e0e6:	b948      	cbnz	r0, 800e0fc <__smakebuf_r+0x44>
 800e0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ec:	059a      	lsls	r2, r3, #22
 800e0ee:	d4ef      	bmi.n	800e0d0 <__smakebuf_r+0x18>
 800e0f0:	f023 0303 	bic.w	r3, r3, #3
 800e0f4:	f043 0302 	orr.w	r3, r3, #2
 800e0f8:	81a3      	strh	r3, [r4, #12]
 800e0fa:	e7e3      	b.n	800e0c4 <__smakebuf_r+0xc>
 800e0fc:	4b0d      	ldr	r3, [pc, #52]	; (800e134 <__smakebuf_r+0x7c>)
 800e0fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	6020      	str	r0, [r4, #0]
 800e104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e108:	81a3      	strh	r3, [r4, #12]
 800e10a:	9b00      	ldr	r3, [sp, #0]
 800e10c:	6163      	str	r3, [r4, #20]
 800e10e:	9b01      	ldr	r3, [sp, #4]
 800e110:	6120      	str	r0, [r4, #16]
 800e112:	b15b      	cbz	r3, 800e12c <__smakebuf_r+0x74>
 800e114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e118:	4630      	mov	r0, r6
 800e11a:	f000 fc93 	bl	800ea44 <_isatty_r>
 800e11e:	b128      	cbz	r0, 800e12c <__smakebuf_r+0x74>
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f023 0303 	bic.w	r3, r3, #3
 800e126:	f043 0301 	orr.w	r3, r3, #1
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	431d      	orrs	r5, r3
 800e130:	81a5      	strh	r5, [r4, #12]
 800e132:	e7cd      	b.n	800e0d0 <__smakebuf_r+0x18>
 800e134:	0800c265 	.word	0x0800c265

0800e138 <memcpy>:
 800e138:	b510      	push	{r4, lr}
 800e13a:	1e43      	subs	r3, r0, #1
 800e13c:	440a      	add	r2, r1
 800e13e:	4291      	cmp	r1, r2
 800e140:	d100      	bne.n	800e144 <memcpy+0xc>
 800e142:	bd10      	pop	{r4, pc}
 800e144:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e14c:	e7f7      	b.n	800e13e <memcpy+0x6>

0800e14e <__malloc_lock>:
 800e14e:	4770      	bx	lr

0800e150 <__malloc_unlock>:
 800e150:	4770      	bx	lr

0800e152 <_Balloc>:
 800e152:	b570      	push	{r4, r5, r6, lr}
 800e154:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e156:	4604      	mov	r4, r0
 800e158:	460e      	mov	r6, r1
 800e15a:	b93d      	cbnz	r5, 800e16c <_Balloc+0x1a>
 800e15c:	2010      	movs	r0, #16
 800e15e:	f7fe f979 	bl	800c454 <malloc>
 800e162:	6260      	str	r0, [r4, #36]	; 0x24
 800e164:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e168:	6005      	str	r5, [r0, #0]
 800e16a:	60c5      	str	r5, [r0, #12]
 800e16c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e16e:	68eb      	ldr	r3, [r5, #12]
 800e170:	b183      	cbz	r3, 800e194 <_Balloc+0x42>
 800e172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e17a:	b9b8      	cbnz	r0, 800e1ac <_Balloc+0x5a>
 800e17c:	2101      	movs	r1, #1
 800e17e:	fa01 f506 	lsl.w	r5, r1, r6
 800e182:	1d6a      	adds	r2, r5, #5
 800e184:	0092      	lsls	r2, r2, #2
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fabe 	bl	800e708 <_calloc_r>
 800e18c:	b160      	cbz	r0, 800e1a8 <_Balloc+0x56>
 800e18e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e192:	e00e      	b.n	800e1b2 <_Balloc+0x60>
 800e194:	2221      	movs	r2, #33	; 0x21
 800e196:	2104      	movs	r1, #4
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 fab5 	bl	800e708 <_calloc_r>
 800e19e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1a0:	60e8      	str	r0, [r5, #12]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1e4      	bne.n	800e172 <_Balloc+0x20>
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	6802      	ldr	r2, [r0, #0]
 800e1ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1b8:	e7f7      	b.n	800e1aa <_Balloc+0x58>

0800e1ba <_Bfree>:
 800e1ba:	b570      	push	{r4, r5, r6, lr}
 800e1bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e1be:	4606      	mov	r6, r0
 800e1c0:	460d      	mov	r5, r1
 800e1c2:	b93c      	cbnz	r4, 800e1d4 <_Bfree+0x1a>
 800e1c4:	2010      	movs	r0, #16
 800e1c6:	f7fe f945 	bl	800c454 <malloc>
 800e1ca:	6270      	str	r0, [r6, #36]	; 0x24
 800e1cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1d0:	6004      	str	r4, [r0, #0]
 800e1d2:	60c4      	str	r4, [r0, #12]
 800e1d4:	b13d      	cbz	r5, 800e1e6 <_Bfree+0x2c>
 800e1d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e1d8:	686a      	ldr	r2, [r5, #4]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1e0:	6029      	str	r1, [r5, #0]
 800e1e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}

0800e1e8 <__multadd>:
 800e1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ec:	690d      	ldr	r5, [r1, #16]
 800e1ee:	461f      	mov	r7, r3
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	f101 0c14 	add.w	ip, r1, #20
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f8dc 0000 	ldr.w	r0, [ip]
 800e1fe:	b281      	uxth	r1, r0
 800e200:	fb02 7101 	mla	r1, r2, r1, r7
 800e204:	0c0f      	lsrs	r7, r1, #16
 800e206:	0c00      	lsrs	r0, r0, #16
 800e208:	fb02 7000 	mla	r0, r2, r0, r7
 800e20c:	b289      	uxth	r1, r1
 800e20e:	3301      	adds	r3, #1
 800e210:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e214:	429d      	cmp	r5, r3
 800e216:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e21a:	f84c 1b04 	str.w	r1, [ip], #4
 800e21e:	dcec      	bgt.n	800e1fa <__multadd+0x12>
 800e220:	b1d7      	cbz	r7, 800e258 <__multadd+0x70>
 800e222:	68a3      	ldr	r3, [r4, #8]
 800e224:	42ab      	cmp	r3, r5
 800e226:	dc12      	bgt.n	800e24e <__multadd+0x66>
 800e228:	6861      	ldr	r1, [r4, #4]
 800e22a:	4630      	mov	r0, r6
 800e22c:	3101      	adds	r1, #1
 800e22e:	f7ff ff90 	bl	800e152 <_Balloc>
 800e232:	6922      	ldr	r2, [r4, #16]
 800e234:	3202      	adds	r2, #2
 800e236:	f104 010c 	add.w	r1, r4, #12
 800e23a:	4680      	mov	r8, r0
 800e23c:	0092      	lsls	r2, r2, #2
 800e23e:	300c      	adds	r0, #12
 800e240:	f7ff ff7a 	bl	800e138 <memcpy>
 800e244:	4621      	mov	r1, r4
 800e246:	4630      	mov	r0, r6
 800e248:	f7ff ffb7 	bl	800e1ba <_Bfree>
 800e24c:	4644      	mov	r4, r8
 800e24e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e252:	3501      	adds	r5, #1
 800e254:	615f      	str	r7, [r3, #20]
 800e256:	6125      	str	r5, [r4, #16]
 800e258:	4620      	mov	r0, r4
 800e25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e25e <__hi0bits>:
 800e25e:	0c02      	lsrs	r2, r0, #16
 800e260:	0412      	lsls	r2, r2, #16
 800e262:	4603      	mov	r3, r0
 800e264:	b9b2      	cbnz	r2, 800e294 <__hi0bits+0x36>
 800e266:	0403      	lsls	r3, r0, #16
 800e268:	2010      	movs	r0, #16
 800e26a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e26e:	bf04      	itt	eq
 800e270:	021b      	lsleq	r3, r3, #8
 800e272:	3008      	addeq	r0, #8
 800e274:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e278:	bf04      	itt	eq
 800e27a:	011b      	lsleq	r3, r3, #4
 800e27c:	3004      	addeq	r0, #4
 800e27e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e282:	bf04      	itt	eq
 800e284:	009b      	lsleq	r3, r3, #2
 800e286:	3002      	addeq	r0, #2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	db06      	blt.n	800e29a <__hi0bits+0x3c>
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	d503      	bpl.n	800e298 <__hi0bits+0x3a>
 800e290:	3001      	adds	r0, #1
 800e292:	4770      	bx	lr
 800e294:	2000      	movs	r0, #0
 800e296:	e7e8      	b.n	800e26a <__hi0bits+0xc>
 800e298:	2020      	movs	r0, #32
 800e29a:	4770      	bx	lr

0800e29c <__lo0bits>:
 800e29c:	6803      	ldr	r3, [r0, #0]
 800e29e:	f013 0207 	ands.w	r2, r3, #7
 800e2a2:	4601      	mov	r1, r0
 800e2a4:	d00b      	beq.n	800e2be <__lo0bits+0x22>
 800e2a6:	07da      	lsls	r2, r3, #31
 800e2a8:	d423      	bmi.n	800e2f2 <__lo0bits+0x56>
 800e2aa:	0798      	lsls	r0, r3, #30
 800e2ac:	bf49      	itett	mi
 800e2ae:	085b      	lsrmi	r3, r3, #1
 800e2b0:	089b      	lsrpl	r3, r3, #2
 800e2b2:	2001      	movmi	r0, #1
 800e2b4:	600b      	strmi	r3, [r1, #0]
 800e2b6:	bf5c      	itt	pl
 800e2b8:	600b      	strpl	r3, [r1, #0]
 800e2ba:	2002      	movpl	r0, #2
 800e2bc:	4770      	bx	lr
 800e2be:	b298      	uxth	r0, r3
 800e2c0:	b9a8      	cbnz	r0, 800e2ee <__lo0bits+0x52>
 800e2c2:	0c1b      	lsrs	r3, r3, #16
 800e2c4:	2010      	movs	r0, #16
 800e2c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e2ca:	bf04      	itt	eq
 800e2cc:	0a1b      	lsreq	r3, r3, #8
 800e2ce:	3008      	addeq	r0, #8
 800e2d0:	071a      	lsls	r2, r3, #28
 800e2d2:	bf04      	itt	eq
 800e2d4:	091b      	lsreq	r3, r3, #4
 800e2d6:	3004      	addeq	r0, #4
 800e2d8:	079a      	lsls	r2, r3, #30
 800e2da:	bf04      	itt	eq
 800e2dc:	089b      	lsreq	r3, r3, #2
 800e2de:	3002      	addeq	r0, #2
 800e2e0:	07da      	lsls	r2, r3, #31
 800e2e2:	d402      	bmi.n	800e2ea <__lo0bits+0x4e>
 800e2e4:	085b      	lsrs	r3, r3, #1
 800e2e6:	d006      	beq.n	800e2f6 <__lo0bits+0x5a>
 800e2e8:	3001      	adds	r0, #1
 800e2ea:	600b      	str	r3, [r1, #0]
 800e2ec:	4770      	bx	lr
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	e7e9      	b.n	800e2c6 <__lo0bits+0x2a>
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	4770      	bx	lr
 800e2f6:	2020      	movs	r0, #32
 800e2f8:	4770      	bx	lr

0800e2fa <__i2b>:
 800e2fa:	b510      	push	{r4, lr}
 800e2fc:	460c      	mov	r4, r1
 800e2fe:	2101      	movs	r1, #1
 800e300:	f7ff ff27 	bl	800e152 <_Balloc>
 800e304:	2201      	movs	r2, #1
 800e306:	6144      	str	r4, [r0, #20]
 800e308:	6102      	str	r2, [r0, #16]
 800e30a:	bd10      	pop	{r4, pc}

0800e30c <__multiply>:
 800e30c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e310:	4614      	mov	r4, r2
 800e312:	690a      	ldr	r2, [r1, #16]
 800e314:	6923      	ldr	r3, [r4, #16]
 800e316:	429a      	cmp	r2, r3
 800e318:	bfb8      	it	lt
 800e31a:	460b      	movlt	r3, r1
 800e31c:	4688      	mov	r8, r1
 800e31e:	bfbc      	itt	lt
 800e320:	46a0      	movlt	r8, r4
 800e322:	461c      	movlt	r4, r3
 800e324:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e328:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e32c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e330:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e334:	eb07 0609 	add.w	r6, r7, r9
 800e338:	42b3      	cmp	r3, r6
 800e33a:	bfb8      	it	lt
 800e33c:	3101      	addlt	r1, #1
 800e33e:	f7ff ff08 	bl	800e152 <_Balloc>
 800e342:	f100 0514 	add.w	r5, r0, #20
 800e346:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e34a:	462b      	mov	r3, r5
 800e34c:	2200      	movs	r2, #0
 800e34e:	4573      	cmp	r3, lr
 800e350:	d316      	bcc.n	800e380 <__multiply+0x74>
 800e352:	f104 0214 	add.w	r2, r4, #20
 800e356:	f108 0114 	add.w	r1, r8, #20
 800e35a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e35e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	9b00      	ldr	r3, [sp, #0]
 800e366:	9201      	str	r2, [sp, #4]
 800e368:	4293      	cmp	r3, r2
 800e36a:	d80c      	bhi.n	800e386 <__multiply+0x7a>
 800e36c:	2e00      	cmp	r6, #0
 800e36e:	dd03      	ble.n	800e378 <__multiply+0x6c>
 800e370:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e374:	2b00      	cmp	r3, #0
 800e376:	d05d      	beq.n	800e434 <__multiply+0x128>
 800e378:	6106      	str	r6, [r0, #16]
 800e37a:	b003      	add	sp, #12
 800e37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e380:	f843 2b04 	str.w	r2, [r3], #4
 800e384:	e7e3      	b.n	800e34e <__multiply+0x42>
 800e386:	f8b2 b000 	ldrh.w	fp, [r2]
 800e38a:	f1bb 0f00 	cmp.w	fp, #0
 800e38e:	d023      	beq.n	800e3d8 <__multiply+0xcc>
 800e390:	4689      	mov	r9, r1
 800e392:	46ac      	mov	ip, r5
 800e394:	f04f 0800 	mov.w	r8, #0
 800e398:	f859 4b04 	ldr.w	r4, [r9], #4
 800e39c:	f8dc a000 	ldr.w	sl, [ip]
 800e3a0:	b2a3      	uxth	r3, r4
 800e3a2:	fa1f fa8a 	uxth.w	sl, sl
 800e3a6:	fb0b a303 	mla	r3, fp, r3, sl
 800e3aa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e3ae:	f8dc 4000 	ldr.w	r4, [ip]
 800e3b2:	4443      	add	r3, r8
 800e3b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3b8:	fb0b 840a 	mla	r4, fp, sl, r8
 800e3bc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e3c0:	46e2      	mov	sl, ip
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e3c8:	454f      	cmp	r7, r9
 800e3ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3ce:	f84a 3b04 	str.w	r3, [sl], #4
 800e3d2:	d82b      	bhi.n	800e42c <__multiply+0x120>
 800e3d4:	f8cc 8004 	str.w	r8, [ip, #4]
 800e3d8:	9b01      	ldr	r3, [sp, #4]
 800e3da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e3de:	3204      	adds	r2, #4
 800e3e0:	f1ba 0f00 	cmp.w	sl, #0
 800e3e4:	d020      	beq.n	800e428 <__multiply+0x11c>
 800e3e6:	682b      	ldr	r3, [r5, #0]
 800e3e8:	4689      	mov	r9, r1
 800e3ea:	46a8      	mov	r8, r5
 800e3ec:	f04f 0b00 	mov.w	fp, #0
 800e3f0:	f8b9 c000 	ldrh.w	ip, [r9]
 800e3f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e3f8:	fb0a 440c 	mla	r4, sl, ip, r4
 800e3fc:	445c      	add	r4, fp
 800e3fe:	46c4      	mov	ip, r8
 800e400:	b29b      	uxth	r3, r3
 800e402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e406:	f84c 3b04 	str.w	r3, [ip], #4
 800e40a:	f859 3b04 	ldr.w	r3, [r9], #4
 800e40e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e412:	0c1b      	lsrs	r3, r3, #16
 800e414:	fb0a b303 	mla	r3, sl, r3, fp
 800e418:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e41c:	454f      	cmp	r7, r9
 800e41e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e422:	d805      	bhi.n	800e430 <__multiply+0x124>
 800e424:	f8c8 3004 	str.w	r3, [r8, #4]
 800e428:	3504      	adds	r5, #4
 800e42a:	e79b      	b.n	800e364 <__multiply+0x58>
 800e42c:	46d4      	mov	ip, sl
 800e42e:	e7b3      	b.n	800e398 <__multiply+0x8c>
 800e430:	46e0      	mov	r8, ip
 800e432:	e7dd      	b.n	800e3f0 <__multiply+0xe4>
 800e434:	3e01      	subs	r6, #1
 800e436:	e799      	b.n	800e36c <__multiply+0x60>

0800e438 <__pow5mult>:
 800e438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e43c:	4615      	mov	r5, r2
 800e43e:	f012 0203 	ands.w	r2, r2, #3
 800e442:	4606      	mov	r6, r0
 800e444:	460f      	mov	r7, r1
 800e446:	d007      	beq.n	800e458 <__pow5mult+0x20>
 800e448:	3a01      	subs	r2, #1
 800e44a:	4c21      	ldr	r4, [pc, #132]	; (800e4d0 <__pow5mult+0x98>)
 800e44c:	2300      	movs	r3, #0
 800e44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e452:	f7ff fec9 	bl	800e1e8 <__multadd>
 800e456:	4607      	mov	r7, r0
 800e458:	10ad      	asrs	r5, r5, #2
 800e45a:	d035      	beq.n	800e4c8 <__pow5mult+0x90>
 800e45c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e45e:	b93c      	cbnz	r4, 800e470 <__pow5mult+0x38>
 800e460:	2010      	movs	r0, #16
 800e462:	f7fd fff7 	bl	800c454 <malloc>
 800e466:	6270      	str	r0, [r6, #36]	; 0x24
 800e468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e46c:	6004      	str	r4, [r0, #0]
 800e46e:	60c4      	str	r4, [r0, #12]
 800e470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e478:	b94c      	cbnz	r4, 800e48e <__pow5mult+0x56>
 800e47a:	f240 2171 	movw	r1, #625	; 0x271
 800e47e:	4630      	mov	r0, r6
 800e480:	f7ff ff3b 	bl	800e2fa <__i2b>
 800e484:	2300      	movs	r3, #0
 800e486:	f8c8 0008 	str.w	r0, [r8, #8]
 800e48a:	4604      	mov	r4, r0
 800e48c:	6003      	str	r3, [r0, #0]
 800e48e:	f04f 0800 	mov.w	r8, #0
 800e492:	07eb      	lsls	r3, r5, #31
 800e494:	d50a      	bpl.n	800e4ac <__pow5mult+0x74>
 800e496:	4639      	mov	r1, r7
 800e498:	4622      	mov	r2, r4
 800e49a:	4630      	mov	r0, r6
 800e49c:	f7ff ff36 	bl	800e30c <__multiply>
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	4681      	mov	r9, r0
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7ff fe88 	bl	800e1ba <_Bfree>
 800e4aa:	464f      	mov	r7, r9
 800e4ac:	106d      	asrs	r5, r5, #1
 800e4ae:	d00b      	beq.n	800e4c8 <__pow5mult+0x90>
 800e4b0:	6820      	ldr	r0, [r4, #0]
 800e4b2:	b938      	cbnz	r0, 800e4c4 <__pow5mult+0x8c>
 800e4b4:	4622      	mov	r2, r4
 800e4b6:	4621      	mov	r1, r4
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff ff27 	bl	800e30c <__multiply>
 800e4be:	6020      	str	r0, [r4, #0]
 800e4c0:	f8c0 8000 	str.w	r8, [r0]
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	e7e4      	b.n	800e492 <__pow5mult+0x5a>
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ce:	bf00      	nop
 800e4d0:	0800f558 	.word	0x0800f558

0800e4d4 <__lshift>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	460c      	mov	r4, r1
 800e4da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4de:	6923      	ldr	r3, [r4, #16]
 800e4e0:	6849      	ldr	r1, [r1, #4]
 800e4e2:	eb0a 0903 	add.w	r9, sl, r3
 800e4e6:	68a3      	ldr	r3, [r4, #8]
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	4616      	mov	r6, r2
 800e4ec:	f109 0501 	add.w	r5, r9, #1
 800e4f0:	42ab      	cmp	r3, r5
 800e4f2:	db32      	blt.n	800e55a <__lshift+0x86>
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7ff fe2c 	bl	800e152 <_Balloc>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	4680      	mov	r8, r0
 800e4fe:	f100 0114 	add.w	r1, r0, #20
 800e502:	461a      	mov	r2, r3
 800e504:	4553      	cmp	r3, sl
 800e506:	db2b      	blt.n	800e560 <__lshift+0x8c>
 800e508:	6920      	ldr	r0, [r4, #16]
 800e50a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e50e:	f104 0314 	add.w	r3, r4, #20
 800e512:	f016 021f 	ands.w	r2, r6, #31
 800e516:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e51a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e51e:	d025      	beq.n	800e56c <__lshift+0x98>
 800e520:	f1c2 0e20 	rsb	lr, r2, #32
 800e524:	2000      	movs	r0, #0
 800e526:	681e      	ldr	r6, [r3, #0]
 800e528:	468a      	mov	sl, r1
 800e52a:	4096      	lsls	r6, r2
 800e52c:	4330      	orrs	r0, r6
 800e52e:	f84a 0b04 	str.w	r0, [sl], #4
 800e532:	f853 0b04 	ldr.w	r0, [r3], #4
 800e536:	459c      	cmp	ip, r3
 800e538:	fa20 f00e 	lsr.w	r0, r0, lr
 800e53c:	d814      	bhi.n	800e568 <__lshift+0x94>
 800e53e:	6048      	str	r0, [r1, #4]
 800e540:	b108      	cbz	r0, 800e546 <__lshift+0x72>
 800e542:	f109 0502 	add.w	r5, r9, #2
 800e546:	3d01      	subs	r5, #1
 800e548:	4638      	mov	r0, r7
 800e54a:	f8c8 5010 	str.w	r5, [r8, #16]
 800e54e:	4621      	mov	r1, r4
 800e550:	f7ff fe33 	bl	800e1ba <_Bfree>
 800e554:	4640      	mov	r0, r8
 800e556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e55a:	3101      	adds	r1, #1
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	e7c7      	b.n	800e4f0 <__lshift+0x1c>
 800e560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e564:	3301      	adds	r3, #1
 800e566:	e7cd      	b.n	800e504 <__lshift+0x30>
 800e568:	4651      	mov	r1, sl
 800e56a:	e7dc      	b.n	800e526 <__lshift+0x52>
 800e56c:	3904      	subs	r1, #4
 800e56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e572:	f841 2f04 	str.w	r2, [r1, #4]!
 800e576:	459c      	cmp	ip, r3
 800e578:	d8f9      	bhi.n	800e56e <__lshift+0x9a>
 800e57a:	e7e4      	b.n	800e546 <__lshift+0x72>

0800e57c <__mcmp>:
 800e57c:	6903      	ldr	r3, [r0, #16]
 800e57e:	690a      	ldr	r2, [r1, #16]
 800e580:	1a9b      	subs	r3, r3, r2
 800e582:	b530      	push	{r4, r5, lr}
 800e584:	d10c      	bne.n	800e5a0 <__mcmp+0x24>
 800e586:	0092      	lsls	r2, r2, #2
 800e588:	3014      	adds	r0, #20
 800e58a:	3114      	adds	r1, #20
 800e58c:	1884      	adds	r4, r0, r2
 800e58e:	4411      	add	r1, r2
 800e590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e598:	4295      	cmp	r5, r2
 800e59a:	d003      	beq.n	800e5a4 <__mcmp+0x28>
 800e59c:	d305      	bcc.n	800e5aa <__mcmp+0x2e>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	bd30      	pop	{r4, r5, pc}
 800e5a4:	42a0      	cmp	r0, r4
 800e5a6:	d3f3      	bcc.n	800e590 <__mcmp+0x14>
 800e5a8:	e7fa      	b.n	800e5a0 <__mcmp+0x24>
 800e5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ae:	e7f7      	b.n	800e5a0 <__mcmp+0x24>

0800e5b0 <__mdiff>:
 800e5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	4607      	mov	r7, r0
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	4614      	mov	r4, r2
 800e5be:	f7ff ffdd 	bl	800e57c <__mcmp>
 800e5c2:	1e06      	subs	r6, r0, #0
 800e5c4:	d108      	bne.n	800e5d8 <__mdiff+0x28>
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	f7ff fdc2 	bl	800e152 <_Balloc>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d8:	bfa4      	itt	ge
 800e5da:	4623      	movge	r3, r4
 800e5dc:	462c      	movge	r4, r5
 800e5de:	4638      	mov	r0, r7
 800e5e0:	6861      	ldr	r1, [r4, #4]
 800e5e2:	bfa6      	itte	ge
 800e5e4:	461d      	movge	r5, r3
 800e5e6:	2600      	movge	r6, #0
 800e5e8:	2601      	movlt	r6, #1
 800e5ea:	f7ff fdb2 	bl	800e152 <_Balloc>
 800e5ee:	692b      	ldr	r3, [r5, #16]
 800e5f0:	60c6      	str	r6, [r0, #12]
 800e5f2:	6926      	ldr	r6, [r4, #16]
 800e5f4:	f105 0914 	add.w	r9, r5, #20
 800e5f8:	f104 0214 	add.w	r2, r4, #20
 800e5fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e600:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e604:	f100 0514 	add.w	r5, r0, #20
 800e608:	f04f 0e00 	mov.w	lr, #0
 800e60c:	f852 ab04 	ldr.w	sl, [r2], #4
 800e610:	f859 4b04 	ldr.w	r4, [r9], #4
 800e614:	fa1e f18a 	uxtah	r1, lr, sl
 800e618:	b2a3      	uxth	r3, r4
 800e61a:	1ac9      	subs	r1, r1, r3
 800e61c:	0c23      	lsrs	r3, r4, #16
 800e61e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e622:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e626:	b289      	uxth	r1, r1
 800e628:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e62c:	45c8      	cmp	r8, r9
 800e62e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e632:	4694      	mov	ip, r2
 800e634:	f845 3b04 	str.w	r3, [r5], #4
 800e638:	d8e8      	bhi.n	800e60c <__mdiff+0x5c>
 800e63a:	45bc      	cmp	ip, r7
 800e63c:	d304      	bcc.n	800e648 <__mdiff+0x98>
 800e63e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e642:	b183      	cbz	r3, 800e666 <__mdiff+0xb6>
 800e644:	6106      	str	r6, [r0, #16]
 800e646:	e7c5      	b.n	800e5d4 <__mdiff+0x24>
 800e648:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e64c:	fa1e f381 	uxtah	r3, lr, r1
 800e650:	141a      	asrs	r2, r3, #16
 800e652:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e656:	b29b      	uxth	r3, r3
 800e658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e65c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e660:	f845 3b04 	str.w	r3, [r5], #4
 800e664:	e7e9      	b.n	800e63a <__mdiff+0x8a>
 800e666:	3e01      	subs	r6, #1
 800e668:	e7e9      	b.n	800e63e <__mdiff+0x8e>

0800e66a <__d2b>:
 800e66a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e66e:	460e      	mov	r6, r1
 800e670:	2101      	movs	r1, #1
 800e672:	ec59 8b10 	vmov	r8, r9, d0
 800e676:	4615      	mov	r5, r2
 800e678:	f7ff fd6b 	bl	800e152 <_Balloc>
 800e67c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e680:	4607      	mov	r7, r0
 800e682:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e686:	bb34      	cbnz	r4, 800e6d6 <__d2b+0x6c>
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	f1b8 0300 	subs.w	r3, r8, #0
 800e68e:	d027      	beq.n	800e6e0 <__d2b+0x76>
 800e690:	a802      	add	r0, sp, #8
 800e692:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e696:	f7ff fe01 	bl	800e29c <__lo0bits>
 800e69a:	9900      	ldr	r1, [sp, #0]
 800e69c:	b1f0      	cbz	r0, 800e6dc <__d2b+0x72>
 800e69e:	9a01      	ldr	r2, [sp, #4]
 800e6a0:	f1c0 0320 	rsb	r3, r0, #32
 800e6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a8:	430b      	orrs	r3, r1
 800e6aa:	40c2      	lsrs	r2, r0
 800e6ac:	617b      	str	r3, [r7, #20]
 800e6ae:	9201      	str	r2, [sp, #4]
 800e6b0:	9b01      	ldr	r3, [sp, #4]
 800e6b2:	61bb      	str	r3, [r7, #24]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	bf14      	ite	ne
 800e6b8:	2102      	movne	r1, #2
 800e6ba:	2101      	moveq	r1, #1
 800e6bc:	6139      	str	r1, [r7, #16]
 800e6be:	b1c4      	cbz	r4, 800e6f2 <__d2b+0x88>
 800e6c0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e6c4:	4404      	add	r4, r0
 800e6c6:	6034      	str	r4, [r6, #0]
 800e6c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6cc:	6028      	str	r0, [r5, #0]
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	b003      	add	sp, #12
 800e6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6da:	e7d5      	b.n	800e688 <__d2b+0x1e>
 800e6dc:	6179      	str	r1, [r7, #20]
 800e6de:	e7e7      	b.n	800e6b0 <__d2b+0x46>
 800e6e0:	a801      	add	r0, sp, #4
 800e6e2:	f7ff fddb 	bl	800e29c <__lo0bits>
 800e6e6:	9b01      	ldr	r3, [sp, #4]
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	6139      	str	r1, [r7, #16]
 800e6ee:	3020      	adds	r0, #32
 800e6f0:	e7e5      	b.n	800e6be <__d2b+0x54>
 800e6f2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e6f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6fa:	6030      	str	r0, [r6, #0]
 800e6fc:	6918      	ldr	r0, [r3, #16]
 800e6fe:	f7ff fdae 	bl	800e25e <__hi0bits>
 800e702:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e706:	e7e1      	b.n	800e6cc <__d2b+0x62>

0800e708 <_calloc_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	fb02 f401 	mul.w	r4, r2, r1
 800e70e:	4621      	mov	r1, r4
 800e710:	f7fd ff06 	bl	800c520 <_malloc_r>
 800e714:	4605      	mov	r5, r0
 800e716:	b118      	cbz	r0, 800e720 <_calloc_r+0x18>
 800e718:	4622      	mov	r2, r4
 800e71a:	2100      	movs	r1, #0
 800e71c:	f7fd feaa 	bl	800c474 <memset>
 800e720:	4628      	mov	r0, r5
 800e722:	bd38      	pop	{r3, r4, r5, pc}

0800e724 <__sfputc_r>:
 800e724:	6893      	ldr	r3, [r2, #8]
 800e726:	3b01      	subs	r3, #1
 800e728:	2b00      	cmp	r3, #0
 800e72a:	b410      	push	{r4}
 800e72c:	6093      	str	r3, [r2, #8]
 800e72e:	da08      	bge.n	800e742 <__sfputc_r+0x1e>
 800e730:	6994      	ldr	r4, [r2, #24]
 800e732:	42a3      	cmp	r3, r4
 800e734:	db01      	blt.n	800e73a <__sfputc_r+0x16>
 800e736:	290a      	cmp	r1, #10
 800e738:	d103      	bne.n	800e742 <__sfputc_r+0x1e>
 800e73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e73e:	f7fe bd23 	b.w	800d188 <__swbuf_r>
 800e742:	6813      	ldr	r3, [r2, #0]
 800e744:	1c58      	adds	r0, r3, #1
 800e746:	6010      	str	r0, [r2, #0]
 800e748:	7019      	strb	r1, [r3, #0]
 800e74a:	4608      	mov	r0, r1
 800e74c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <__sfputs_r>:
 800e752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e754:	4606      	mov	r6, r0
 800e756:	460f      	mov	r7, r1
 800e758:	4614      	mov	r4, r2
 800e75a:	18d5      	adds	r5, r2, r3
 800e75c:	42ac      	cmp	r4, r5
 800e75e:	d101      	bne.n	800e764 <__sfputs_r+0x12>
 800e760:	2000      	movs	r0, #0
 800e762:	e007      	b.n	800e774 <__sfputs_r+0x22>
 800e764:	463a      	mov	r2, r7
 800e766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76a:	4630      	mov	r0, r6
 800e76c:	f7ff ffda 	bl	800e724 <__sfputc_r>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	d1f3      	bne.n	800e75c <__sfputs_r+0xa>
 800e774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e778 <_vfiprintf_r>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	460c      	mov	r4, r1
 800e77e:	b09d      	sub	sp, #116	; 0x74
 800e780:	4617      	mov	r7, r2
 800e782:	461d      	mov	r5, r3
 800e784:	4606      	mov	r6, r0
 800e786:	b118      	cbz	r0, 800e790 <_vfiprintf_r+0x18>
 800e788:	6983      	ldr	r3, [r0, #24]
 800e78a:	b90b      	cbnz	r3, 800e790 <_vfiprintf_r+0x18>
 800e78c:	f7fd fd86 	bl	800c29c <__sinit>
 800e790:	4b7c      	ldr	r3, [pc, #496]	; (800e984 <_vfiprintf_r+0x20c>)
 800e792:	429c      	cmp	r4, r3
 800e794:	d158      	bne.n	800e848 <_vfiprintf_r+0xd0>
 800e796:	6874      	ldr	r4, [r6, #4]
 800e798:	89a3      	ldrh	r3, [r4, #12]
 800e79a:	0718      	lsls	r0, r3, #28
 800e79c:	d55e      	bpl.n	800e85c <_vfiprintf_r+0xe4>
 800e79e:	6923      	ldr	r3, [r4, #16]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d05b      	beq.n	800e85c <_vfiprintf_r+0xe4>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a8:	2320      	movs	r3, #32
 800e7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7ae:	2330      	movs	r3, #48	; 0x30
 800e7b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7b4:	9503      	str	r5, [sp, #12]
 800e7b6:	f04f 0b01 	mov.w	fp, #1
 800e7ba:	46b8      	mov	r8, r7
 800e7bc:	4645      	mov	r5, r8
 800e7be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e7c2:	b10b      	cbz	r3, 800e7c8 <_vfiprintf_r+0x50>
 800e7c4:	2b25      	cmp	r3, #37	; 0x25
 800e7c6:	d154      	bne.n	800e872 <_vfiprintf_r+0xfa>
 800e7c8:	ebb8 0a07 	subs.w	sl, r8, r7
 800e7cc:	d00b      	beq.n	800e7e6 <_vfiprintf_r+0x6e>
 800e7ce:	4653      	mov	r3, sl
 800e7d0:	463a      	mov	r2, r7
 800e7d2:	4621      	mov	r1, r4
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7ff ffbc 	bl	800e752 <__sfputs_r>
 800e7da:	3001      	adds	r0, #1
 800e7dc:	f000 80c2 	beq.w	800e964 <_vfiprintf_r+0x1ec>
 800e7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e2:	4453      	add	r3, sl
 800e7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e6:	f898 3000 	ldrb.w	r3, [r8]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 80ba 	beq.w	800e964 <_vfiprintf_r+0x1ec>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	9307      	str	r3, [sp, #28]
 800e7fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e802:	931a      	str	r3, [sp, #104]	; 0x68
 800e804:	46a8      	mov	r8, r5
 800e806:	2205      	movs	r2, #5
 800e808:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e80c:	485e      	ldr	r0, [pc, #376]	; (800e988 <_vfiprintf_r+0x210>)
 800e80e:	f7f1 fce7 	bl	80001e0 <memchr>
 800e812:	9b04      	ldr	r3, [sp, #16]
 800e814:	bb78      	cbnz	r0, 800e876 <_vfiprintf_r+0xfe>
 800e816:	06d9      	lsls	r1, r3, #27
 800e818:	bf44      	itt	mi
 800e81a:	2220      	movmi	r2, #32
 800e81c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e820:	071a      	lsls	r2, r3, #28
 800e822:	bf44      	itt	mi
 800e824:	222b      	movmi	r2, #43	; 0x2b
 800e826:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e82a:	782a      	ldrb	r2, [r5, #0]
 800e82c:	2a2a      	cmp	r2, #42	; 0x2a
 800e82e:	d02a      	beq.n	800e886 <_vfiprintf_r+0x10e>
 800e830:	9a07      	ldr	r2, [sp, #28]
 800e832:	46a8      	mov	r8, r5
 800e834:	2000      	movs	r0, #0
 800e836:	250a      	movs	r5, #10
 800e838:	4641      	mov	r1, r8
 800e83a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e83e:	3b30      	subs	r3, #48	; 0x30
 800e840:	2b09      	cmp	r3, #9
 800e842:	d969      	bls.n	800e918 <_vfiprintf_r+0x1a0>
 800e844:	b360      	cbz	r0, 800e8a0 <_vfiprintf_r+0x128>
 800e846:	e024      	b.n	800e892 <_vfiprintf_r+0x11a>
 800e848:	4b50      	ldr	r3, [pc, #320]	; (800e98c <_vfiprintf_r+0x214>)
 800e84a:	429c      	cmp	r4, r3
 800e84c:	d101      	bne.n	800e852 <_vfiprintf_r+0xda>
 800e84e:	68b4      	ldr	r4, [r6, #8]
 800e850:	e7a2      	b.n	800e798 <_vfiprintf_r+0x20>
 800e852:	4b4f      	ldr	r3, [pc, #316]	; (800e990 <_vfiprintf_r+0x218>)
 800e854:	429c      	cmp	r4, r3
 800e856:	bf08      	it	eq
 800e858:	68f4      	ldreq	r4, [r6, #12]
 800e85a:	e79d      	b.n	800e798 <_vfiprintf_r+0x20>
 800e85c:	4621      	mov	r1, r4
 800e85e:	4630      	mov	r0, r6
 800e860:	f7fe fcf6 	bl	800d250 <__swsetup_r>
 800e864:	2800      	cmp	r0, #0
 800e866:	d09d      	beq.n	800e7a4 <_vfiprintf_r+0x2c>
 800e868:	f04f 30ff 	mov.w	r0, #4294967295
 800e86c:	b01d      	add	sp, #116	; 0x74
 800e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e872:	46a8      	mov	r8, r5
 800e874:	e7a2      	b.n	800e7bc <_vfiprintf_r+0x44>
 800e876:	4a44      	ldr	r2, [pc, #272]	; (800e988 <_vfiprintf_r+0x210>)
 800e878:	1a80      	subs	r0, r0, r2
 800e87a:	fa0b f000 	lsl.w	r0, fp, r0
 800e87e:	4318      	orrs	r0, r3
 800e880:	9004      	str	r0, [sp, #16]
 800e882:	4645      	mov	r5, r8
 800e884:	e7be      	b.n	800e804 <_vfiprintf_r+0x8c>
 800e886:	9a03      	ldr	r2, [sp, #12]
 800e888:	1d11      	adds	r1, r2, #4
 800e88a:	6812      	ldr	r2, [r2, #0]
 800e88c:	9103      	str	r1, [sp, #12]
 800e88e:	2a00      	cmp	r2, #0
 800e890:	db01      	blt.n	800e896 <_vfiprintf_r+0x11e>
 800e892:	9207      	str	r2, [sp, #28]
 800e894:	e004      	b.n	800e8a0 <_vfiprintf_r+0x128>
 800e896:	4252      	negs	r2, r2
 800e898:	f043 0302 	orr.w	r3, r3, #2
 800e89c:	9207      	str	r2, [sp, #28]
 800e89e:	9304      	str	r3, [sp, #16]
 800e8a0:	f898 3000 	ldrb.w	r3, [r8]
 800e8a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e8a6:	d10e      	bne.n	800e8c6 <_vfiprintf_r+0x14e>
 800e8a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ae:	d138      	bne.n	800e922 <_vfiprintf_r+0x1aa>
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	1d1a      	adds	r2, r3, #4
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	9203      	str	r2, [sp, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	bfb8      	it	lt
 800e8bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8c0:	f108 0802 	add.w	r8, r8, #2
 800e8c4:	9305      	str	r3, [sp, #20]
 800e8c6:	4d33      	ldr	r5, [pc, #204]	; (800e994 <_vfiprintf_r+0x21c>)
 800e8c8:	f898 1000 	ldrb.w	r1, [r8]
 800e8cc:	2203      	movs	r2, #3
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f7f1 fc86 	bl	80001e0 <memchr>
 800e8d4:	b140      	cbz	r0, 800e8e8 <_vfiprintf_r+0x170>
 800e8d6:	2340      	movs	r3, #64	; 0x40
 800e8d8:	1b40      	subs	r0, r0, r5
 800e8da:	fa03 f000 	lsl.w	r0, r3, r0
 800e8de:	9b04      	ldr	r3, [sp, #16]
 800e8e0:	4303      	orrs	r3, r0
 800e8e2:	f108 0801 	add.w	r8, r8, #1
 800e8e6:	9304      	str	r3, [sp, #16]
 800e8e8:	f898 1000 	ldrb.w	r1, [r8]
 800e8ec:	482a      	ldr	r0, [pc, #168]	; (800e998 <_vfiprintf_r+0x220>)
 800e8ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8f2:	2206      	movs	r2, #6
 800e8f4:	f108 0701 	add.w	r7, r8, #1
 800e8f8:	f7f1 fc72 	bl	80001e0 <memchr>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d037      	beq.n	800e970 <_vfiprintf_r+0x1f8>
 800e900:	4b26      	ldr	r3, [pc, #152]	; (800e99c <_vfiprintf_r+0x224>)
 800e902:	bb1b      	cbnz	r3, 800e94c <_vfiprintf_r+0x1d4>
 800e904:	9b03      	ldr	r3, [sp, #12]
 800e906:	3307      	adds	r3, #7
 800e908:	f023 0307 	bic.w	r3, r3, #7
 800e90c:	3308      	adds	r3, #8
 800e90e:	9303      	str	r3, [sp, #12]
 800e910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e912:	444b      	add	r3, r9
 800e914:	9309      	str	r3, [sp, #36]	; 0x24
 800e916:	e750      	b.n	800e7ba <_vfiprintf_r+0x42>
 800e918:	fb05 3202 	mla	r2, r5, r2, r3
 800e91c:	2001      	movs	r0, #1
 800e91e:	4688      	mov	r8, r1
 800e920:	e78a      	b.n	800e838 <_vfiprintf_r+0xc0>
 800e922:	2300      	movs	r3, #0
 800e924:	f108 0801 	add.w	r8, r8, #1
 800e928:	9305      	str	r3, [sp, #20]
 800e92a:	4619      	mov	r1, r3
 800e92c:	250a      	movs	r5, #10
 800e92e:	4640      	mov	r0, r8
 800e930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e934:	3a30      	subs	r2, #48	; 0x30
 800e936:	2a09      	cmp	r2, #9
 800e938:	d903      	bls.n	800e942 <_vfiprintf_r+0x1ca>
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d0c3      	beq.n	800e8c6 <_vfiprintf_r+0x14e>
 800e93e:	9105      	str	r1, [sp, #20]
 800e940:	e7c1      	b.n	800e8c6 <_vfiprintf_r+0x14e>
 800e942:	fb05 2101 	mla	r1, r5, r1, r2
 800e946:	2301      	movs	r3, #1
 800e948:	4680      	mov	r8, r0
 800e94a:	e7f0      	b.n	800e92e <_vfiprintf_r+0x1b6>
 800e94c:	ab03      	add	r3, sp, #12
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	4622      	mov	r2, r4
 800e952:	4b13      	ldr	r3, [pc, #76]	; (800e9a0 <_vfiprintf_r+0x228>)
 800e954:	a904      	add	r1, sp, #16
 800e956:	4630      	mov	r0, r6
 800e958:	f7fd fed0 	bl	800c6fc <_printf_float>
 800e95c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e960:	4681      	mov	r9, r0
 800e962:	d1d5      	bne.n	800e910 <_vfiprintf_r+0x198>
 800e964:	89a3      	ldrh	r3, [r4, #12]
 800e966:	065b      	lsls	r3, r3, #25
 800e968:	f53f af7e 	bmi.w	800e868 <_vfiprintf_r+0xf0>
 800e96c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e96e:	e77d      	b.n	800e86c <_vfiprintf_r+0xf4>
 800e970:	ab03      	add	r3, sp, #12
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	4622      	mov	r2, r4
 800e976:	4b0a      	ldr	r3, [pc, #40]	; (800e9a0 <_vfiprintf_r+0x228>)
 800e978:	a904      	add	r1, sp, #16
 800e97a:	4630      	mov	r0, r6
 800e97c:	f7fe f974 	bl	800cc68 <_printf_i>
 800e980:	e7ec      	b.n	800e95c <_vfiprintf_r+0x1e4>
 800e982:	bf00      	nop
 800e984:	0800f3dc 	.word	0x0800f3dc
 800e988:	0800f564 	.word	0x0800f564
 800e98c:	0800f3fc 	.word	0x0800f3fc
 800e990:	0800f3bc 	.word	0x0800f3bc
 800e994:	0800f56a 	.word	0x0800f56a
 800e998:	0800f56e 	.word	0x0800f56e
 800e99c:	0800c6fd 	.word	0x0800c6fd
 800e9a0:	0800e753 	.word	0x0800e753

0800e9a4 <_read_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4c07      	ldr	r4, [pc, #28]	; (800e9c4 <_read_r+0x20>)
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	4608      	mov	r0, r1
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	6022      	str	r2, [r4, #0]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	f7fc fd96 	bl	800b4e4 <_read>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_read_r+0x1e>
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_read_r+0x1e>
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	20001fd8 	.word	0x20001fd8

0800e9c8 <__srget_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	b118      	cbz	r0, 800e9d8 <__srget_r+0x10>
 800e9d0:	6983      	ldr	r3, [r0, #24]
 800e9d2:	b90b      	cbnz	r3, 800e9d8 <__srget_r+0x10>
 800e9d4:	f7fd fc62 	bl	800c29c <__sinit>
 800e9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ea14 <__srget_r+0x4c>)
 800e9da:	429c      	cmp	r4, r3
 800e9dc:	d10d      	bne.n	800e9fa <__srget_r+0x32>
 800e9de:	686c      	ldr	r4, [r5, #4]
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	f000 f85a 	bl	800ea9c <__srefill_r>
 800e9e8:	b988      	cbnz	r0, 800ea0e <__srget_r+0x46>
 800e9ea:	6863      	ldr	r3, [r4, #4]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	6063      	str	r3, [r4, #4]
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	6022      	str	r2, [r4, #0]
 800e9f6:	7818      	ldrb	r0, [r3, #0]
 800e9f8:	bd38      	pop	{r3, r4, r5, pc}
 800e9fa:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <__srget_r+0x50>)
 800e9fc:	429c      	cmp	r4, r3
 800e9fe:	d101      	bne.n	800ea04 <__srget_r+0x3c>
 800ea00:	68ac      	ldr	r4, [r5, #8]
 800ea02:	e7ed      	b.n	800e9e0 <__srget_r+0x18>
 800ea04:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <__srget_r+0x54>)
 800ea06:	429c      	cmp	r4, r3
 800ea08:	bf08      	it	eq
 800ea0a:	68ec      	ldreq	r4, [r5, #12]
 800ea0c:	e7e8      	b.n	800e9e0 <__srget_r+0x18>
 800ea0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea12:	e7f1      	b.n	800e9f8 <__srget_r+0x30>
 800ea14:	0800f3dc 	.word	0x0800f3dc
 800ea18:	0800f3fc 	.word	0x0800f3fc
 800ea1c:	0800f3bc 	.word	0x0800f3bc

0800ea20 <_fstat_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4c07      	ldr	r4, [pc, #28]	; (800ea40 <_fstat_r+0x20>)
 800ea24:	2300      	movs	r3, #0
 800ea26:	4605      	mov	r5, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	f7fc fd9e 	bl	800b56e <_fstat>
 800ea32:	1c43      	adds	r3, r0, #1
 800ea34:	d102      	bne.n	800ea3c <_fstat_r+0x1c>
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	b103      	cbz	r3, 800ea3c <_fstat_r+0x1c>
 800ea3a:	602b      	str	r3, [r5, #0]
 800ea3c:	bd38      	pop	{r3, r4, r5, pc}
 800ea3e:	bf00      	nop
 800ea40:	20001fd8 	.word	0x20001fd8

0800ea44 <_isatty_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4c06      	ldr	r4, [pc, #24]	; (800ea60 <_isatty_r+0x1c>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	6023      	str	r3, [r4, #0]
 800ea50:	f7fc fd9d 	bl	800b58e <_isatty>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_isatty_r+0x1a>
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_isatty_r+0x1a>
 800ea5c:	602b      	str	r3, [r5, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	20001fd8 	.word	0x20001fd8

0800ea64 <__ascii_mbtowc>:
 800ea64:	b082      	sub	sp, #8
 800ea66:	b901      	cbnz	r1, 800ea6a <__ascii_mbtowc+0x6>
 800ea68:	a901      	add	r1, sp, #4
 800ea6a:	b142      	cbz	r2, 800ea7e <__ascii_mbtowc+0x1a>
 800ea6c:	b14b      	cbz	r3, 800ea82 <__ascii_mbtowc+0x1e>
 800ea6e:	7813      	ldrb	r3, [r2, #0]
 800ea70:	600b      	str	r3, [r1, #0]
 800ea72:	7812      	ldrb	r2, [r2, #0]
 800ea74:	1c10      	adds	r0, r2, #0
 800ea76:	bf18      	it	ne
 800ea78:	2001      	movne	r0, #1
 800ea7a:	b002      	add	sp, #8
 800ea7c:	4770      	bx	lr
 800ea7e:	4610      	mov	r0, r2
 800ea80:	e7fb      	b.n	800ea7a <__ascii_mbtowc+0x16>
 800ea82:	f06f 0001 	mvn.w	r0, #1
 800ea86:	e7f8      	b.n	800ea7a <__ascii_mbtowc+0x16>

0800ea88 <lflush>:
 800ea88:	8983      	ldrh	r3, [r0, #12]
 800ea8a:	f003 0309 	and.w	r3, r3, #9
 800ea8e:	2b09      	cmp	r3, #9
 800ea90:	d101      	bne.n	800ea96 <lflush+0xe>
 800ea92:	f7fd bbb1 	b.w	800c1f8 <fflush>
 800ea96:	2000      	movs	r0, #0
 800ea98:	4770      	bx	lr
	...

0800ea9c <__srefill_r>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	b118      	cbz	r0, 800eaac <__srefill_r+0x10>
 800eaa4:	6983      	ldr	r3, [r0, #24]
 800eaa6:	b90b      	cbnz	r3, 800eaac <__srefill_r+0x10>
 800eaa8:	f7fd fbf8 	bl	800c29c <__sinit>
 800eaac:	4b3c      	ldr	r3, [pc, #240]	; (800eba0 <__srefill_r+0x104>)
 800eaae:	429c      	cmp	r4, r3
 800eab0:	d10a      	bne.n	800eac8 <__srefill_r+0x2c>
 800eab2:	686c      	ldr	r4, [r5, #4]
 800eab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eab8:	2300      	movs	r3, #0
 800eaba:	6063      	str	r3, [r4, #4]
 800eabc:	b293      	uxth	r3, r2
 800eabe:	069e      	lsls	r6, r3, #26
 800eac0:	d50c      	bpl.n	800eadc <__srefill_r+0x40>
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295
 800eac6:	e067      	b.n	800eb98 <__srefill_r+0xfc>
 800eac8:	4b36      	ldr	r3, [pc, #216]	; (800eba4 <__srefill_r+0x108>)
 800eaca:	429c      	cmp	r4, r3
 800eacc:	d101      	bne.n	800ead2 <__srefill_r+0x36>
 800eace:	68ac      	ldr	r4, [r5, #8]
 800ead0:	e7f0      	b.n	800eab4 <__srefill_r+0x18>
 800ead2:	4b35      	ldr	r3, [pc, #212]	; (800eba8 <__srefill_r+0x10c>)
 800ead4:	429c      	cmp	r4, r3
 800ead6:	bf08      	it	eq
 800ead8:	68ec      	ldreq	r4, [r5, #12]
 800eada:	e7eb      	b.n	800eab4 <__srefill_r+0x18>
 800eadc:	0758      	lsls	r0, r3, #29
 800eade:	d449      	bmi.n	800eb74 <__srefill_r+0xd8>
 800eae0:	06d9      	lsls	r1, r3, #27
 800eae2:	d405      	bmi.n	800eaf0 <__srefill_r+0x54>
 800eae4:	2309      	movs	r3, #9
 800eae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eaea:	602b      	str	r3, [r5, #0]
 800eaec:	81a2      	strh	r2, [r4, #12]
 800eaee:	e7e8      	b.n	800eac2 <__srefill_r+0x26>
 800eaf0:	071a      	lsls	r2, r3, #28
 800eaf2:	d50b      	bpl.n	800eb0c <__srefill_r+0x70>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7fd fb54 	bl	800c1a4 <_fflush_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d1e0      	bne.n	800eac2 <__srefill_r+0x26>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	60a0      	str	r0, [r4, #8]
 800eb04:	f023 0308 	bic.w	r3, r3, #8
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	61a0      	str	r0, [r4, #24]
 800eb0c:	89a3      	ldrh	r3, [r4, #12]
 800eb0e:	f043 0304 	orr.w	r3, r3, #4
 800eb12:	81a3      	strh	r3, [r4, #12]
 800eb14:	6923      	ldr	r3, [r4, #16]
 800eb16:	b91b      	cbnz	r3, 800eb20 <__srefill_r+0x84>
 800eb18:	4621      	mov	r1, r4
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f7ff facc 	bl	800e0b8 <__smakebuf_r>
 800eb20:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800eb24:	b2be      	uxth	r6, r7
 800eb26:	07b3      	lsls	r3, r6, #30
 800eb28:	d00f      	beq.n	800eb4a <__srefill_r+0xae>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	81a3      	strh	r3, [r4, #12]
 800eb2e:	4b1f      	ldr	r3, [pc, #124]	; (800ebac <__srefill_r+0x110>)
 800eb30:	491f      	ldr	r1, [pc, #124]	; (800ebb0 <__srefill_r+0x114>)
 800eb32:	6818      	ldr	r0, [r3, #0]
 800eb34:	f006 0609 	and.w	r6, r6, #9
 800eb38:	f7fd fc1c 	bl	800c374 <_fwalk>
 800eb3c:	2e09      	cmp	r6, #9
 800eb3e:	81a7      	strh	r7, [r4, #12]
 800eb40:	d103      	bne.n	800eb4a <__srefill_r+0xae>
 800eb42:	4621      	mov	r1, r4
 800eb44:	4628      	mov	r0, r5
 800eb46:	f7fd faa7 	bl	800c098 <__sflush_r>
 800eb4a:	6922      	ldr	r2, [r4, #16]
 800eb4c:	6022      	str	r2, [r4, #0]
 800eb4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eb50:	6963      	ldr	r3, [r4, #20]
 800eb52:	6a21      	ldr	r1, [r4, #32]
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b0      	blx	r6
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	6060      	str	r0, [r4, #4]
 800eb5c:	dc1d      	bgt.n	800eb9a <__srefill_r+0xfe>
 800eb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb62:	bf17      	itett	ne
 800eb64:	2200      	movne	r2, #0
 800eb66:	f043 0320 	orreq.w	r3, r3, #32
 800eb6a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800eb6e:	6062      	strne	r2, [r4, #4]
 800eb70:	81a3      	strh	r3, [r4, #12]
 800eb72:	e7a6      	b.n	800eac2 <__srefill_r+0x26>
 800eb74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb76:	2900      	cmp	r1, #0
 800eb78:	d0cc      	beq.n	800eb14 <__srefill_r+0x78>
 800eb7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb7e:	4299      	cmp	r1, r3
 800eb80:	d002      	beq.n	800eb88 <__srefill_r+0xec>
 800eb82:	4628      	mov	r0, r5
 800eb84:	f7fd fc7e 	bl	800c484 <_free_r>
 800eb88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb8a:	6063      	str	r3, [r4, #4]
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	6360      	str	r0, [r4, #52]	; 0x34
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0bf      	beq.n	800eb14 <__srefill_r+0x78>
 800eb94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb96:	6023      	str	r3, [r4, #0]
 800eb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	e7fc      	b.n	800eb98 <__srefill_r+0xfc>
 800eb9e:	bf00      	nop
 800eba0:	0800f3dc 	.word	0x0800f3dc
 800eba4:	0800f3fc 	.word	0x0800f3fc
 800eba8:	0800f3bc 	.word	0x0800f3bc
 800ebac:	0800f41c 	.word	0x0800f41c
 800ebb0:	0800ea89 	.word	0x0800ea89

0800ebb4 <__ascii_wctomb>:
 800ebb4:	b149      	cbz	r1, 800ebca <__ascii_wctomb+0x16>
 800ebb6:	2aff      	cmp	r2, #255	; 0xff
 800ebb8:	bf85      	ittet	hi
 800ebba:	238a      	movhi	r3, #138	; 0x8a
 800ebbc:	6003      	strhi	r3, [r0, #0]
 800ebbe:	700a      	strbls	r2, [r1, #0]
 800ebc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ebc4:	bf98      	it	ls
 800ebc6:	2001      	movls	r0, #1
 800ebc8:	4770      	bx	lr
 800ebca:	4608      	mov	r0, r1
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <fmod>:
 800ebd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebd4:	ed2d 8b02 	vpush	{d8}
 800ebd8:	b08b      	sub	sp, #44	; 0x2c
 800ebda:	ec55 4b10 	vmov	r4, r5, d0
 800ebde:	ec57 6b11 	vmov	r6, r7, d1
 800ebe2:	f000 f85b 	bl	800ec9c <__ieee754_fmod>
 800ebe6:	4b2a      	ldr	r3, [pc, #168]	; (800ec90 <fmod+0xc0>)
 800ebe8:	eeb0 8a40 	vmov.f32	s16, s0
 800ebec:	eef0 8a60 	vmov.f32	s17, s1
 800ebf0:	f993 8000 	ldrsb.w	r8, [r3]
 800ebf4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ebf8:	d030      	beq.n	800ec5c <fmod+0x8c>
 800ebfa:	4632      	mov	r2, r6
 800ebfc:	463b      	mov	r3, r7
 800ebfe:	4630      	mov	r0, r6
 800ec00:	4639      	mov	r1, r7
 800ec02:	f7f1 ff93 	bl	8000b2c <__aeabi_dcmpun>
 800ec06:	bb48      	cbnz	r0, 800ec5c <fmod+0x8c>
 800ec08:	4622      	mov	r2, r4
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f7f1 ff8c 	bl	8000b2c <__aeabi_dcmpun>
 800ec14:	4681      	mov	r9, r0
 800ec16:	bb08      	cbnz	r0, 800ec5c <fmod+0x8c>
 800ec18:	2200      	movs	r2, #0
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	4639      	mov	r1, r7
 800ec20:	f7f1 ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 800ec24:	b1d0      	cbz	r0, 800ec5c <fmod+0x8c>
 800ec26:	2301      	movs	r3, #1
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	4b1a      	ldr	r3, [pc, #104]	; (800ec94 <fmod+0xc4>)
 800ec2c:	9301      	str	r3, [sp, #4]
 800ec2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ec32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ec36:	f8cd 9020 	str.w	r9, [sp, #32]
 800ec3a:	f1b8 0f00 	cmp.w	r8, #0
 800ec3e:	d116      	bne.n	800ec6e <fmod+0x9e>
 800ec40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ec44:	4668      	mov	r0, sp
 800ec46:	f000 f9e9 	bl	800f01c <matherr>
 800ec4a:	b1d8      	cbz	r0, 800ec84 <fmod+0xb4>
 800ec4c:	9b08      	ldr	r3, [sp, #32]
 800ec4e:	b11b      	cbz	r3, 800ec58 <fmod+0x88>
 800ec50:	f7fd fa1c 	bl	800c08c <__errno>
 800ec54:	9b08      	ldr	r3, [sp, #32]
 800ec56:	6003      	str	r3, [r0, #0]
 800ec58:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ec5c:	eeb0 0a48 	vmov.f32	s0, s16
 800ec60:	eef0 0a68 	vmov.f32	s1, s17
 800ec64:	b00b      	add	sp, #44	; 0x2c
 800ec66:	ecbd 8b02 	vpop	{d8}
 800ec6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2300      	movs	r3, #0
 800ec72:	4610      	mov	r0, r2
 800ec74:	4619      	mov	r1, r3
 800ec76:	f7f1 fde9 	bl	800084c <__aeabi_ddiv>
 800ec7a:	f1b8 0f02 	cmp.w	r8, #2
 800ec7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec82:	d1df      	bne.n	800ec44 <fmod+0x74>
 800ec84:	f7fd fa02 	bl	800c08c <__errno>
 800ec88:	2321      	movs	r3, #33	; 0x21
 800ec8a:	6003      	str	r3, [r0, #0]
 800ec8c:	e7de      	b.n	800ec4c <fmod+0x7c>
 800ec8e:	bf00      	nop
 800ec90:	2000034c 	.word	0x2000034c
 800ec94:	0800f680 	.word	0x0800f680

0800ec98 <atan2f>:
 800ec98:	f000 b912 	b.w	800eec0 <__ieee754_atan2f>

0800ec9c <__ieee754_fmod>:
 800ec9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca0:	ec53 2b11 	vmov	r2, r3, d1
 800eca4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800eca8:	ea5e 0402 	orrs.w	r4, lr, r2
 800ecac:	ec51 0b10 	vmov	r0, r1, d0
 800ecb0:	461e      	mov	r6, r3
 800ecb2:	ee11 5a10 	vmov	r5, s2
 800ecb6:	4694      	mov	ip, r2
 800ecb8:	d00c      	beq.n	800ecd4 <__ieee754_fmod+0x38>
 800ecba:	4c7a      	ldr	r4, [pc, #488]	; (800eea4 <__ieee754_fmod+0x208>)
 800ecbc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ecc0:	45a0      	cmp	r8, r4
 800ecc2:	4689      	mov	r9, r1
 800ecc4:	dc06      	bgt.n	800ecd4 <__ieee754_fmod+0x38>
 800ecc6:	4254      	negs	r4, r2
 800ecc8:	4314      	orrs	r4, r2
 800ecca:	4f77      	ldr	r7, [pc, #476]	; (800eea8 <__ieee754_fmod+0x20c>)
 800eccc:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800ecd0:	42bc      	cmp	r4, r7
 800ecd2:	d909      	bls.n	800ece8 <__ieee754_fmod+0x4c>
 800ecd4:	f7f1 fc90 	bl	80005f8 <__aeabi_dmul>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	f7f1 fdb6 	bl	800084c <__aeabi_ddiv>
 800ece0:	ec41 0b10 	vmov	d0, r0, r1
 800ece4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece8:	45f0      	cmp	r8, lr
 800ecea:	ee10 2a10 	vmov	r2, s0
 800ecee:	4607      	mov	r7, r0
 800ecf0:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800ecf4:	dc0a      	bgt.n	800ed0c <__ieee754_fmod+0x70>
 800ecf6:	dbf3      	blt.n	800ece0 <__ieee754_fmod+0x44>
 800ecf8:	42a8      	cmp	r0, r5
 800ecfa:	d3f1      	bcc.n	800ece0 <__ieee754_fmod+0x44>
 800ecfc:	d106      	bne.n	800ed0c <__ieee754_fmod+0x70>
 800ecfe:	496b      	ldr	r1, [pc, #428]	; (800eeac <__ieee754_fmod+0x210>)
 800ed00:	0fe4      	lsrs	r4, r4, #31
 800ed02:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ed06:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ed0a:	e7e9      	b.n	800ece0 <__ieee754_fmod+0x44>
 800ed0c:	4b68      	ldr	r3, [pc, #416]	; (800eeb0 <__ieee754_fmod+0x214>)
 800ed0e:	4598      	cmp	r8, r3
 800ed10:	dc49      	bgt.n	800eda6 <__ieee754_fmod+0x10a>
 800ed12:	f1b8 0f00 	cmp.w	r8, #0
 800ed16:	d13d      	bne.n	800ed94 <__ieee754_fmod+0xf8>
 800ed18:	4866      	ldr	r0, [pc, #408]	; (800eeb4 <__ieee754_fmod+0x218>)
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	2900      	cmp	r1, #0
 800ed1e:	dc36      	bgt.n	800ed8e <__ieee754_fmod+0xf2>
 800ed20:	459e      	cmp	lr, r3
 800ed22:	dc51      	bgt.n	800edc8 <__ieee754_fmod+0x12c>
 800ed24:	f1be 0f00 	cmp.w	lr, #0
 800ed28:	d145      	bne.n	800edb6 <__ieee754_fmod+0x11a>
 800ed2a:	4b62      	ldr	r3, [pc, #392]	; (800eeb4 <__ieee754_fmod+0x218>)
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	2900      	cmp	r1, #0
 800ed30:	dc3e      	bgt.n	800edb0 <__ieee754_fmod+0x114>
 800ed32:	4961      	ldr	r1, [pc, #388]	; (800eeb8 <__ieee754_fmod+0x21c>)
 800ed34:	4288      	cmp	r0, r1
 800ed36:	db4c      	blt.n	800edd2 <__ieee754_fmod+0x136>
 800ed38:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800ed3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ed40:	4a5d      	ldr	r2, [pc, #372]	; (800eeb8 <__ieee754_fmod+0x21c>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	db59      	blt.n	800edfa <__ieee754_fmod+0x15e>
 800ed46:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ed4a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ed4e:	1ac0      	subs	r0, r0, r3
 800ed50:	1b8a      	subs	r2, r1, r6
 800ed52:	eba7 050c 	sub.w	r5, r7, ip
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d166      	bne.n	800ee28 <__ieee754_fmod+0x18c>
 800ed5a:	4567      	cmp	r7, ip
 800ed5c:	bf38      	it	cc
 800ed5e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ed62:	2a00      	cmp	r2, #0
 800ed64:	bfbc      	itt	lt
 800ed66:	463d      	movlt	r5, r7
 800ed68:	460a      	movlt	r2, r1
 800ed6a:	ea52 0105 	orrs.w	r1, r2, r5
 800ed6e:	d0c6      	beq.n	800ecfe <__ieee754_fmod+0x62>
 800ed70:	494f      	ldr	r1, [pc, #316]	; (800eeb0 <__ieee754_fmod+0x214>)
 800ed72:	428a      	cmp	r2, r1
 800ed74:	dd6d      	ble.n	800ee52 <__ieee754_fmod+0x1b6>
 800ed76:	4950      	ldr	r1, [pc, #320]	; (800eeb8 <__ieee754_fmod+0x21c>)
 800ed78:	428b      	cmp	r3, r1
 800ed7a:	db70      	blt.n	800ee5e <__ieee754_fmod+0x1c2>
 800ed7c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800ed80:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800ed84:	4314      	orrs	r4, r2
 800ed86:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	e7a8      	b.n	800ece0 <__ieee754_fmod+0x44>
 800ed8e:	3801      	subs	r0, #1
 800ed90:	0049      	lsls	r1, r1, #1
 800ed92:	e7c3      	b.n	800ed1c <__ieee754_fmod+0x80>
 800ed94:	4848      	ldr	r0, [pc, #288]	; (800eeb8 <__ieee754_fmod+0x21c>)
 800ed96:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800ed9a:	0049      	lsls	r1, r1, #1
 800ed9c:	2900      	cmp	r1, #0
 800ed9e:	f100 30ff 	add.w	r0, r0, #4294967295
 800eda2:	dcfa      	bgt.n	800ed9a <__ieee754_fmod+0xfe>
 800eda4:	e7bc      	b.n	800ed20 <__ieee754_fmod+0x84>
 800eda6:	ea4f 5028 	mov.w	r0, r8, asr #20
 800edaa:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800edae:	e7b7      	b.n	800ed20 <__ieee754_fmod+0x84>
 800edb0:	3b01      	subs	r3, #1
 800edb2:	0049      	lsls	r1, r1, #1
 800edb4:	e7bb      	b.n	800ed2e <__ieee754_fmod+0x92>
 800edb6:	4b40      	ldr	r3, [pc, #256]	; (800eeb8 <__ieee754_fmod+0x21c>)
 800edb8:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 800edbc:	0049      	lsls	r1, r1, #1
 800edbe:	2900      	cmp	r1, #0
 800edc0:	f103 33ff 	add.w	r3, r3, #4294967295
 800edc4:	dcfa      	bgt.n	800edbc <__ieee754_fmod+0x120>
 800edc6:	e7b4      	b.n	800ed32 <__ieee754_fmod+0x96>
 800edc8:	ea4f 532e 	mov.w	r3, lr, asr #20
 800edcc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800edd0:	e7af      	b.n	800ed32 <__ieee754_fmod+0x96>
 800edd2:	1a0f      	subs	r7, r1, r0
 800edd4:	2f1f      	cmp	r7, #31
 800edd6:	dc0a      	bgt.n	800edee <__ieee754_fmod+0x152>
 800edd8:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800eddc:	fa08 f807 	lsl.w	r8, r8, r7
 800ede0:	fa22 f101 	lsr.w	r1, r2, r1
 800ede4:	ea41 0108 	orr.w	r1, r1, r8
 800ede8:	fa02 f707 	lsl.w	r7, r2, r7
 800edec:	e7a8      	b.n	800ed40 <__ieee754_fmod+0xa4>
 800edee:	4933      	ldr	r1, [pc, #204]	; (800eebc <__ieee754_fmod+0x220>)
 800edf0:	1a09      	subs	r1, r1, r0
 800edf2:	fa02 f101 	lsl.w	r1, r2, r1
 800edf6:	2700      	movs	r7, #0
 800edf8:	e7a2      	b.n	800ed40 <__ieee754_fmod+0xa4>
 800edfa:	eba2 0c03 	sub.w	ip, r2, r3
 800edfe:	f1bc 0f1f 	cmp.w	ip, #31
 800ee02:	dc0a      	bgt.n	800ee1a <__ieee754_fmod+0x17e>
 800ee04:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800ee08:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ee0c:	fa25 f606 	lsr.w	r6, r5, r6
 800ee10:	ea46 060e 	orr.w	r6, r6, lr
 800ee14:	fa05 fc0c 	lsl.w	ip, r5, ip
 800ee18:	e799      	b.n	800ed4e <__ieee754_fmod+0xb2>
 800ee1a:	4e28      	ldr	r6, [pc, #160]	; (800eebc <__ieee754_fmod+0x220>)
 800ee1c:	1af6      	subs	r6, r6, r3
 800ee1e:	fa05 f606 	lsl.w	r6, r5, r6
 800ee22:	f04f 0c00 	mov.w	ip, #0
 800ee26:	e792      	b.n	800ed4e <__ieee754_fmod+0xb2>
 800ee28:	4567      	cmp	r7, ip
 800ee2a:	bf38      	it	cc
 800ee2c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ee30:	2a00      	cmp	r2, #0
 800ee32:	da05      	bge.n	800ee40 <__ieee754_fmod+0x1a4>
 800ee34:	0ffa      	lsrs	r2, r7, #31
 800ee36:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ee3a:	007f      	lsls	r7, r7, #1
 800ee3c:	3801      	subs	r0, #1
 800ee3e:	e787      	b.n	800ed50 <__ieee754_fmod+0xb4>
 800ee40:	ea52 0105 	orrs.w	r1, r2, r5
 800ee44:	f43f af5b 	beq.w	800ecfe <__ieee754_fmod+0x62>
 800ee48:	0fe9      	lsrs	r1, r5, #31
 800ee4a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ee4e:	006f      	lsls	r7, r5, #1
 800ee50:	e7f4      	b.n	800ee3c <__ieee754_fmod+0x1a0>
 800ee52:	0fe8      	lsrs	r0, r5, #31
 800ee54:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ee58:	006d      	lsls	r5, r5, #1
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	e789      	b.n	800ed72 <__ieee754_fmod+0xd6>
 800ee5e:	1ac9      	subs	r1, r1, r3
 800ee60:	2914      	cmp	r1, #20
 800ee62:	dc0a      	bgt.n	800ee7a <__ieee754_fmod+0x1de>
 800ee64:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ee68:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6c:	40cd      	lsrs	r5, r1
 800ee6e:	432b      	orrs	r3, r5
 800ee70:	410a      	asrs	r2, r1
 800ee72:	ea42 0104 	orr.w	r1, r2, r4
 800ee76:	4618      	mov	r0, r3
 800ee78:	e732      	b.n	800ece0 <__ieee754_fmod+0x44>
 800ee7a:	291f      	cmp	r1, #31
 800ee7c:	dc07      	bgt.n	800ee8e <__ieee754_fmod+0x1f2>
 800ee7e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ee82:	40cd      	lsrs	r5, r1
 800ee84:	fa02 f303 	lsl.w	r3, r2, r3
 800ee88:	432b      	orrs	r3, r5
 800ee8a:	4622      	mov	r2, r4
 800ee8c:	e7f1      	b.n	800ee72 <__ieee754_fmod+0x1d6>
 800ee8e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ee92:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ee96:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ee9a:	33e2      	adds	r3, #226	; 0xe2
 800ee9c:	fa42 f303 	asr.w	r3, r2, r3
 800eea0:	e7f3      	b.n	800ee8a <__ieee754_fmod+0x1ee>
 800eea2:	bf00      	nop
 800eea4:	7fefffff 	.word	0x7fefffff
 800eea8:	7ff00000 	.word	0x7ff00000
 800eeac:	0800f688 	.word	0x0800f688
 800eeb0:	000fffff 	.word	0x000fffff
 800eeb4:	fffffbed 	.word	0xfffffbed
 800eeb8:	fffffc02 	.word	0xfffffc02
 800eebc:	fffffbe2 	.word	0xfffffbe2

0800eec0 <__ieee754_atan2f>:
 800eec0:	ee10 2a90 	vmov	r2, s1
 800eec4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800eec8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eecc:	b510      	push	{r4, lr}
 800eece:	eef0 7a40 	vmov.f32	s15, s0
 800eed2:	dc06      	bgt.n	800eee2 <__ieee754_atan2f+0x22>
 800eed4:	ee10 0a10 	vmov	r0, s0
 800eed8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800eedc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eee0:	dd04      	ble.n	800eeec <__ieee754_atan2f+0x2c>
 800eee2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800eee6:	eeb0 0a67 	vmov.f32	s0, s15
 800eeea:	bd10      	pop	{r4, pc}
 800eeec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800eef0:	d103      	bne.n	800eefa <__ieee754_atan2f+0x3a>
 800eef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eef6:	f000 b893 	b.w	800f020 <atanf>
 800eefa:	1794      	asrs	r4, r2, #30
 800eefc:	f004 0402 	and.w	r4, r4, #2
 800ef00:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ef04:	b943      	cbnz	r3, 800ef18 <__ieee754_atan2f+0x58>
 800ef06:	2c02      	cmp	r4, #2
 800ef08:	d06e      	beq.n	800efe8 <__ieee754_atan2f+0x128>
 800ef0a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800eff0 <__ieee754_atan2f+0x130>
 800ef0e:	2c03      	cmp	r4, #3
 800ef10:	bf08      	it	eq
 800ef12:	eef0 7a47 	vmoveq.f32	s15, s14
 800ef16:	e7e6      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800ef18:	b941      	cbnz	r1, 800ef2c <__ieee754_atan2f+0x6c>
 800ef1a:	eddf 7a36 	vldr	s15, [pc, #216]	; 800eff4 <__ieee754_atan2f+0x134>
 800ef1e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800eff8 <__ieee754_atan2f+0x138>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	bfb8      	it	lt
 800ef26:	eef0 7a47 	vmovlt.f32	s15, s14
 800ef2a:	e7dc      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800ef2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ef30:	d122      	bne.n	800ef78 <__ieee754_atan2f+0xb8>
 800ef32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ef36:	d112      	bne.n	800ef5e <__ieee754_atan2f+0x9e>
 800ef38:	2c02      	cmp	r4, #2
 800ef3a:	d00a      	beq.n	800ef52 <__ieee754_atan2f+0x92>
 800ef3c:	2c03      	cmp	r4, #3
 800ef3e:	d00b      	beq.n	800ef58 <__ieee754_atan2f+0x98>
 800ef40:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800effc <__ieee754_atan2f+0x13c>
 800ef44:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800f000 <__ieee754_atan2f+0x140>
 800ef48:	2c01      	cmp	r4, #1
 800ef4a:	bf18      	it	ne
 800ef4c:	eef0 7a47 	vmovne.f32	s15, s14
 800ef50:	e7c9      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800ef52:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f004 <__ieee754_atan2f+0x144>
 800ef56:	e7c6      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800ef58:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f008 <__ieee754_atan2f+0x148>
 800ef5c:	e7c3      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800ef5e:	2c02      	cmp	r4, #2
 800ef60:	d042      	beq.n	800efe8 <__ieee754_atan2f+0x128>
 800ef62:	2c03      	cmp	r4, #3
 800ef64:	d005      	beq.n	800ef72 <__ieee754_atan2f+0xb2>
 800ef66:	2c01      	cmp	r4, #1
 800ef68:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f00c <__ieee754_atan2f+0x14c>
 800ef6c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f010 <__ieee754_atan2f+0x150>
 800ef70:	e7eb      	b.n	800ef4a <__ieee754_atan2f+0x8a>
 800ef72:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800eff0 <__ieee754_atan2f+0x130>
 800ef76:	e7b6      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800ef78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ef7c:	d0cd      	beq.n	800ef1a <__ieee754_atan2f+0x5a>
 800ef7e:	1a5b      	subs	r3, r3, r1
 800ef80:	15db      	asrs	r3, r3, #23
 800ef82:	2b3c      	cmp	r3, #60	; 0x3c
 800ef84:	dc1a      	bgt.n	800efbc <__ieee754_atan2f+0xfc>
 800ef86:	2a00      	cmp	r2, #0
 800ef88:	da01      	bge.n	800ef8e <__ieee754_atan2f+0xce>
 800ef8a:	333c      	adds	r3, #60	; 0x3c
 800ef8c:	db19      	blt.n	800efc2 <__ieee754_atan2f+0x102>
 800ef8e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ef92:	f000 f919 	bl	800f1c8 <fabsf>
 800ef96:	f000 f843 	bl	800f020 <atanf>
 800ef9a:	eef0 7a40 	vmov.f32	s15, s0
 800ef9e:	2c01      	cmp	r4, #1
 800efa0:	d012      	beq.n	800efc8 <__ieee754_atan2f+0x108>
 800efa2:	2c02      	cmp	r4, #2
 800efa4:	d017      	beq.n	800efd6 <__ieee754_atan2f+0x116>
 800efa6:	2c00      	cmp	r4, #0
 800efa8:	d09d      	beq.n	800eee6 <__ieee754_atan2f+0x26>
 800efaa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f014 <__ieee754_atan2f+0x154>
 800efae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800efb2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f018 <__ieee754_atan2f+0x158>
 800efb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800efba:	e794      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800efbc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800eff4 <__ieee754_atan2f+0x134>
 800efc0:	e7ed      	b.n	800ef9e <__ieee754_atan2f+0xde>
 800efc2:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f010 <__ieee754_atan2f+0x150>
 800efc6:	e7ea      	b.n	800ef9e <__ieee754_atan2f+0xde>
 800efc8:	ee17 3a90 	vmov	r3, s15
 800efcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efd0:	ee07 3a90 	vmov	s15, r3
 800efd4:	e787      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800efd6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800f014 <__ieee754_atan2f+0x154>
 800efda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800efde:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f018 <__ieee754_atan2f+0x158>
 800efe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efe6:	e77e      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800efe8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f018 <__ieee754_atan2f+0x158>
 800efec:	e77b      	b.n	800eee6 <__ieee754_atan2f+0x26>
 800efee:	bf00      	nop
 800eff0:	c0490fdb 	.word	0xc0490fdb
 800eff4:	3fc90fdb 	.word	0x3fc90fdb
 800eff8:	bfc90fdb 	.word	0xbfc90fdb
 800effc:	bf490fdb 	.word	0xbf490fdb
 800f000:	3f490fdb 	.word	0x3f490fdb
 800f004:	4016cbe4 	.word	0x4016cbe4
 800f008:	c016cbe4 	.word	0xc016cbe4
 800f00c:	80000000 	.word	0x80000000
 800f010:	00000000 	.word	0x00000000
 800f014:	33bbbd2e 	.word	0x33bbbd2e
 800f018:	40490fdb 	.word	0x40490fdb

0800f01c <matherr>:
 800f01c:	2000      	movs	r0, #0
 800f01e:	4770      	bx	lr

0800f020 <atanf>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	ee10 5a10 	vmov	r5, s0
 800f026:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f02a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f02e:	eef0 7a40 	vmov.f32	s15, s0
 800f032:	db10      	blt.n	800f056 <atanf+0x36>
 800f034:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f038:	dd04      	ble.n	800f044 <atanf+0x24>
 800f03a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f03e:	eeb0 0a67 	vmov.f32	s0, s15
 800f042:	bd38      	pop	{r3, r4, r5, pc}
 800f044:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f17c <atanf+0x15c>
 800f048:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f180 <atanf+0x160>
 800f04c:	2d00      	cmp	r5, #0
 800f04e:	bfd8      	it	le
 800f050:	eef0 7a47 	vmovle.f32	s15, s14
 800f054:	e7f3      	b.n	800f03e <atanf+0x1e>
 800f056:	4b4b      	ldr	r3, [pc, #300]	; (800f184 <atanf+0x164>)
 800f058:	429c      	cmp	r4, r3
 800f05a:	dc10      	bgt.n	800f07e <atanf+0x5e>
 800f05c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f060:	da0a      	bge.n	800f078 <atanf+0x58>
 800f062:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f188 <atanf+0x168>
 800f066:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f06e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	dce2      	bgt.n	800f03e <atanf+0x1e>
 800f078:	f04f 33ff 	mov.w	r3, #4294967295
 800f07c:	e013      	b.n	800f0a6 <atanf+0x86>
 800f07e:	f000 f8a3 	bl	800f1c8 <fabsf>
 800f082:	4b42      	ldr	r3, [pc, #264]	; (800f18c <atanf+0x16c>)
 800f084:	429c      	cmp	r4, r3
 800f086:	dc4f      	bgt.n	800f128 <atanf+0x108>
 800f088:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f08c:	429c      	cmp	r4, r3
 800f08e:	dc41      	bgt.n	800f114 <atanf+0xf4>
 800f090:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f094:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f098:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f09c:	2300      	movs	r3, #0
 800f09e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f0a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f0ac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f190 <atanf+0x170>
 800f0b0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f194 <atanf+0x174>
 800f0b4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f198 <atanf+0x178>
 800f0b8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f0bc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f0c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f19c <atanf+0x17c>
 800f0c4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f0c8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f1a0 <atanf+0x180>
 800f0cc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f0d0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f1a4 <atanf+0x184>
 800f0d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f0d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f1a8 <atanf+0x188>
 800f0dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f0e0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f1ac <atanf+0x18c>
 800f0e4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f0e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f1b0 <atanf+0x190>
 800f0ec:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f0f0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f1b4 <atanf+0x194>
 800f0f4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f0f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f1b8 <atanf+0x198>
 800f0fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f100:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f104:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f10c:	d121      	bne.n	800f152 <atanf+0x132>
 800f10e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f112:	e794      	b.n	800f03e <atanf+0x1e>
 800f114:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f118:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f11c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f120:	2301      	movs	r3, #1
 800f122:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f126:	e7be      	b.n	800f0a6 <atanf+0x86>
 800f128:	4b24      	ldr	r3, [pc, #144]	; (800f1bc <atanf+0x19c>)
 800f12a:	429c      	cmp	r4, r3
 800f12c:	dc0b      	bgt.n	800f146 <atanf+0x126>
 800f12e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f136:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f13a:	2302      	movs	r3, #2
 800f13c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f144:	e7af      	b.n	800f0a6 <atanf+0x86>
 800f146:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f14a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f14e:	2303      	movs	r3, #3
 800f150:	e7a9      	b.n	800f0a6 <atanf+0x86>
 800f152:	4a1b      	ldr	r2, [pc, #108]	; (800f1c0 <atanf+0x1a0>)
 800f154:	491b      	ldr	r1, [pc, #108]	; (800f1c4 <atanf+0x1a4>)
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	441a      	add	r2, r3
 800f15a:	440b      	add	r3, r1
 800f15c:	edd3 6a00 	vldr	s13, [r3]
 800f160:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f164:	2d00      	cmp	r5, #0
 800f166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f16a:	ed92 7a00 	vldr	s14, [r2]
 800f16e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f172:	bfb8      	it	lt
 800f174:	eef1 7a67 	vneglt.f32	s15, s15
 800f178:	e761      	b.n	800f03e <atanf+0x1e>
 800f17a:	bf00      	nop
 800f17c:	bfc90fdb 	.word	0xbfc90fdb
 800f180:	3fc90fdb 	.word	0x3fc90fdb
 800f184:	3edfffff 	.word	0x3edfffff
 800f188:	7149f2ca 	.word	0x7149f2ca
 800f18c:	3f97ffff 	.word	0x3f97ffff
 800f190:	3c8569d7 	.word	0x3c8569d7
 800f194:	3d4bda59 	.word	0x3d4bda59
 800f198:	bd6ef16b 	.word	0xbd6ef16b
 800f19c:	3d886b35 	.word	0x3d886b35
 800f1a0:	3dba2e6e 	.word	0x3dba2e6e
 800f1a4:	3e124925 	.word	0x3e124925
 800f1a8:	3eaaaaab 	.word	0x3eaaaaab
 800f1ac:	bd15a221 	.word	0xbd15a221
 800f1b0:	bd9d8795 	.word	0xbd9d8795
 800f1b4:	bde38e38 	.word	0xbde38e38
 800f1b8:	be4ccccd 	.word	0xbe4ccccd
 800f1bc:	401bffff 	.word	0x401bffff
 800f1c0:	0800f698 	.word	0x0800f698
 800f1c4:	0800f6a8 	.word	0x0800f6a8

0800f1c8 <fabsf>:
 800f1c8:	ee10 3a10 	vmov	r3, s0
 800f1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f1d0:	ee00 3a10 	vmov	s0, r3
 800f1d4:	4770      	bx	lr
	...

0800f1d8 <_init>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	bf00      	nop
 800f1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1de:	bc08      	pop	{r3}
 800f1e0:	469e      	mov	lr, r3
 800f1e2:	4770      	bx	lr

0800f1e4 <_fini>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	bf00      	nop
 800f1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ea:	bc08      	pop	{r3}
 800f1ec:	469e      	mov	lr, r3
 800f1ee:	4770      	bx	lr
