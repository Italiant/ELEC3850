
ELEC3850 Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d81c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800d9b0  0800d9b0  0001d9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de00  0800de00  00020354  2**0
                  CONTENTS
  4 .ARM          00000008  0800de00  0800de00  0001de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de08  0800de08  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de08  0800de08  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800de10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000238c  20000354  0800e164  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026e0  0800e164  000226e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020002  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004389  00000000  00000000  00040386  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  00044710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001820  00000000  00000000  00046108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270bf  00000000  00000000  00047928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001778c  00000000  00000000  0006e9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6af9  00000000  00000000  00086173  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cc6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf8  00000000  00000000  0015cce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d994 	.word	0x0800d994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	0800d994 	.word	0x0800d994

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fe8b 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f008 fed0 	bl	8009d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fea3 	bl	8001cf6 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 fe6b 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000118 	.word	0x20000118
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004
 8001010:	20000398 	.word	0x20000398

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000398 	.word	0x20000398

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f008 fe6e 	bl	8009d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	f043 0202 	orr.w	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb8a 	bl	80017dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	e001      	b.n	80010e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b02      	cmp	r3, #2
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	2b20      	cmp	r3, #32
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d049      	beq.n	80011cc <HAL_ADC_IRQHandler+0xd6>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d046      	beq.n	80011cc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b00      	cmp	r3, #0
 8001148:	d105      	bne.n	8001156 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d12b      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001168:	2b00      	cmp	r3, #0
 800116a:	d127      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001184:	2b00      	cmp	r3, #0
 8001186:	d119      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0220 	bic.w	r2, r2, #32
 8001196:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f007 fd45 	bl	8008c4c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f06f 0212 	mvn.w	r2, #18
 80011ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	2b80      	cmp	r3, #128	; 0x80
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d057      	beq.n	80012ae <HAL_ADC_IRQHandler+0x1b8>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d054      	beq.n	80012ae <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d139      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001242:	2b00      	cmp	r3, #0
 8001244:	d12b      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d124      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11d      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001278:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fc1a 	bl	8001ad8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f06f 020c 	mvn.w	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ce:	2b40      	cmp	r3, #64	; 0x40
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d017      	beq.n	8001310 <HAL_ADC_IRQHandler+0x21a>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d014      	beq.n	8001310 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10d      	bne.n	8001310 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f935 	bl	8001570 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0201 	mvn.w	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b20      	cmp	r3, #32
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d015      	beq.n	8001370 <HAL_ADC_IRQHandler+0x27a>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d012      	beq.n	8001370 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0202 	orr.w	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f06f 0220 	mvn.w	r2, #32
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f90f 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0220 	mvn.w	r2, #32
 800136e:	601a      	str	r2, [r3, #0]
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Start_DMA+0x1e>
 8001392:	2302      	movs	r3, #2
 8001394:	e0cc      	b.n	8001530 <HAL_ADC_Start_DMA+0x1b8>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d018      	beq.n	80013de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_ADC_Start_DMA+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_ADC_Start_DMA+0x1c4>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9a      	lsrs	r2, r3, #18
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013d0:	e002      	b.n	80013d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f040 80a0 	bne.w	800152e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001418:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142c:	d106      	bne.n	800143c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f023 0206 	bic.w	r2, r3, #6
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
 800143a:	e002      	b.n	8001442 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 800144c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <HAL_ADC_Start_DMA+0x1cc>)
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_ADC_Start_DMA+0x1d0>)
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a3a      	ldr	r2, [pc, #232]	; (800154c <HAL_ADC_Start_DMA+0x1d4>)
 8001464:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800146e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800147e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	334c      	adds	r3, #76	; 0x4c
 800149a:	4619      	mov	r1, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f000 fce4 	bl	8001e6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d12a      	bne.n	8001506 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_ADC_Start_DMA+0x1d8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d015      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x16e>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_ADC_Start_DMA+0x1dc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_Start_DMA+0x158>
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_ADC_Start_DMA+0x1e0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d129      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d823      	bhi.n	800152e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11c      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e013      	b.n	800152e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_ADC_Start_DMA+0x1d8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10e      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800152c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000118 	.word	0x20000118
 800153c:	431bde83 	.word	0x431bde83
 8001540:	40012300 	.word	0x40012300
 8001544:	080019d5 	.word	0x080019d5
 8001548:	08001a8f 	.word	0x08001a8f
 800154c:	08001aab 	.word	0x08001aab
 8001550:	40012000 	.word	0x40012000
 8001554:	40012100 	.word	0x40012100
 8001558:	40012200 	.word	0x40012200

0800155c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e105      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x228>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d925      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68d9      	ldr	r1, [r3, #12]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	3b1e      	subs	r3, #30
 80015da:	2207      	movs	r2, #7
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4403      	add	r3, r0
 8001602:	3b1e      	subs	r3, #30
 8001604:	409a      	lsls	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e022      	b.n	8001656 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	2207      	movs	r2, #7
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6919      	ldr	r1, [r3, #16]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	4603      	mov	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4403      	add	r3, r0
 800164c:	409a      	lsls	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d824      	bhi.n	80016a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b05      	subs	r3, #5
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b05      	subs	r3, #5
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34
 80016a6:	e04c      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b0c      	cmp	r3, #12
 80016ae:	d824      	bhi.n	80016fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43da      	mvns	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	400a      	ands	r2, r1
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b23      	subs	r3, #35	; 0x23
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
 80016f8:	e023      	b.n	8001742 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b41      	subs	r3, #65	; 0x41
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_ADC_ConfigChannel+0x234>)
 8001744:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d109      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d105      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_ADC_ConfigChannel+0x238>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d123      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x1e6>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d11b      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b10      	cmp	r3, #16
 8001790:	d111      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_ADC_ConfigChannel+0x240>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	0c9a      	lsrs	r2, r3, #18
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	40012000 	.word	0x40012000
 80017d4:	20000118 	.word	0x20000118
 80017d8:	431bde83 	.word	0x431bde83

080017dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <ADC_Init+0x1f0>)
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	021a      	lsls	r2, r3, #8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <ADC_Init+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d022      	beq.n	80018ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e00f      	b.n	80018da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0202 	bic.w	r2, r2, #2
 80018e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7e1b      	ldrb	r3, [r3, #24]
 80018f4:	005a      	lsls	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01b      	beq.n	8001940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	035a      	lsls	r2, r3, #13
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	e007      	b.n	8001950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	3b01      	subs	r3, #1
 800196c:	051a      	lsls	r2, r3, #20
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001992:	025a      	lsls	r2, r3, #9
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	029a      	lsls	r2, r3, #10
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40012300 	.word	0x40012300
 80019d0:	0f000001 	.word	0x0f000001

080019d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d13c      	bne.n	8001a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d12b      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d127      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d119      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0220 	bic.w	r2, r2, #32
 8001a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f007 f8f3 	bl	8008c4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a66:	e00e      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd85 	bl	8001584 <HAL_ADC_ErrorCallback>
}
 8001a7a:	e004      	b.n	8001a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff fd5d 	bl	800155c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fd5a 	bl	8001584 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff f97a 	bl	8001014 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e099      	b.n	8001e60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4c:	e00f      	b.n	8001d6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4e:	f7ff f961 	bl	8001014 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d908      	bls.n	8001d6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e078      	b.n	8001e60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e8      	bne.n	8001d4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_DMA_Init+0x158>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d107      	bne.n	8001dd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d117      	bne.n	8001e32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fa77 	bl	8002308 <DMA_CheckFifoParam>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e016      	b.n	8001e60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fa2e 	bl	800229c <DMA_CalcBaseAndBitshift>
 8001e40:	4603      	mov	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	223f      	movs	r2, #63	; 0x3f
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	f010803f 	.word	0xf010803f

08001e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_DMA_Start_IT+0x26>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e048      	b.n	8001f24 <HAL_DMA_Start_IT+0xb8>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d137      	bne.n	8001f16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f9c0 	bl	8002240 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	223f      	movs	r2, #63	; 0x3f
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0216 	orr.w	r2, r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e005      	b.n	8001f22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f38:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_DMA_IRQHandler+0x258>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a92      	ldr	r2, [pc, #584]	; (8002188 <HAL_DMA_IRQHandler+0x25c>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0a9b      	lsrs	r3, r3, #10
 8001f44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2208      	movs	r2, #8
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01a      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	2208      	movs	r2, #8
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d012      	beq.n	8001fce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	2201      	movs	r2, #1
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f043 0202 	orr.w	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2210      	movs	r2, #16
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d043      	beq.n	800209c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03c      	beq.n	800209c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2210      	movs	r2, #16
 8002028:	409a      	lsls	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d018      	beq.n	800206e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d108      	bne.n	800205c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d024      	beq.n	800209c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
 800205a:	e01f      	b.n	800209c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01b      	beq.n	800209c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e016      	b.n	800209c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0208 	bic.w	r2, r2, #8
 800208a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2220      	movs	r2, #32
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 808e 	beq.w	80021ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 8086 	beq.w	80021ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	2220      	movs	r2, #32
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d136      	bne.n	8002144 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0216 	bic.w	r2, r2, #22
 80020e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <HAL_DMA_IRQHandler+0x1da>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002102:	2b00      	cmp	r3, #0
 8002104:	d007      	beq.n	8002116 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0208 	bic.w	r2, r2, #8
 8002114:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	223f      	movs	r2, #63	; 0x3f
 800211c:	409a      	lsls	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	2b00      	cmp	r3, #0
 8002138:	d07d      	beq.n	8002236 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
        }
        return;
 8002142:	e078      	b.n	8002236 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01c      	beq.n	800218c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	2b00      	cmp	r3, #0
 8002166:	d030      	beq.n	80021ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
 8002170:	e02b      	b.n	80021ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d027      	beq.n	80021ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
 8002182:	e022      	b.n	80021ca <HAL_DMA_IRQHandler+0x29e>
 8002184:	20000118 	.word	0x20000118
 8002188:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10f      	bne.n	80021ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0210 	bic.w	r2, r2, #16
 80021a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d032      	beq.n	8002238 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d022      	beq.n	8002224 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2205      	movs	r2, #5
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3301      	adds	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d307      	bcc.n	8002212 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f2      	bne.n	80021f6 <HAL_DMA_IRQHandler+0x2ca>
 8002210:	e000      	b.n	8002214 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002212:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
 8002234:	e000      	b.n	8002238 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002236:	bf00      	nop
    }
  }
}
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800225c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d108      	bne.n	8002280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800227e:	e007      	b.n	8002290 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3b10      	subs	r3, #16
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <DMA_CalcBaseAndBitshift+0x64>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022b6:	4a13      	ldr	r2, [pc, #76]	; (8002304 <DMA_CalcBaseAndBitshift+0x68>)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d909      	bls.n	80022de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	659a      	str	r2, [r3, #88]	; 0x58
 80022dc:	e007      	b.n	80022ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	aaaaaaab 	.word	0xaaaaaaab
 8002304:	0800db1c 	.word	0x0800db1c

08002308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11f      	bne.n	8002362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d855      	bhi.n	80023d4 <DMA_CheckFifoParam+0xcc>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <DMA_CheckFifoParam+0x28>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002341 	.word	0x08002341
 8002334:	08002353 	.word	0x08002353
 8002338:	08002341 	.word	0x08002341
 800233c:	080023d5 	.word	0x080023d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d045      	beq.n	80023d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002350:	e042      	b.n	80023d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800235a:	d13f      	bne.n	80023dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002360:	e03c      	b.n	80023dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236a:	d121      	bne.n	80023b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d836      	bhi.n	80023e0 <DMA_CheckFifoParam+0xd8>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <DMA_CheckFifoParam+0x70>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	08002389 	.word	0x08002389
 800237c:	0800238f 	.word	0x0800238f
 8002380:	08002389 	.word	0x08002389
 8002384:	080023a1 	.word	0x080023a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e02f      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d024      	beq.n	80023e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239e:	e021      	b.n	80023e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a8:	d11e      	bne.n	80023e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ae:	e01b      	b.n	80023e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d902      	bls.n	80023bc <DMA_CheckFifoParam+0xb4>
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d003      	beq.n	80023c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ba:	e018      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      break;
 80023c0:	e015      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00e      	beq.n	80023ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      break;
 80023d2:	e00b      	b.n	80023ec <DMA_CheckFifoParam+0xe4>
      break;
 80023d4:	bf00      	nop
 80023d6:	e00a      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;
 80023d8:	bf00      	nop
 80023da:	e008      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;
 80023dc:	bf00      	nop
 80023de:	e006      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;
 80023e0:	bf00      	nop
 80023e2:	e004      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;
 80023e4:	bf00      	nop
 80023e6:	e002      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;   
 80023e8:	bf00      	nop
 80023ea:	e000      	b.n	80023ee <DMA_CheckFifoParam+0xe6>
      break;
 80023ec:	bf00      	nop
    }
  } 
  
  return status; 
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e16b      	b.n	80026f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 815a 	bne.w	80026ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x4a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b12      	cmp	r3, #18
 8002444:	d123      	bne.n	800248e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	69b9      	ldr	r1, [r7, #24]
 800248a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d00b      	beq.n	80024e2 <HAL_GPIO_Init+0xe6>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d6:	2b11      	cmp	r3, #17
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80b4 	beq.w	80026ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_GPIO_Init+0x308>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a5e      	ldr	r2, [pc, #376]	; (8002704 <HAL_GPIO_Init+0x308>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <HAL_GPIO_Init+0x308>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259e:	4a5a      	ldr	r2, [pc, #360]	; (8002708 <HAL_GPIO_Init+0x30c>)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_GPIO_Init+0x310>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x314>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x318>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x31c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_GPIO_Init+0x320>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x324>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_GPIO_Init+0x328>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_GPIO_Init+0x32c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x20a>
 8002602:	2307      	movs	r3, #7
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002606:	2308      	movs	r3, #8
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002634:	4934      	ldr	r1, [pc, #208]	; (8002708 <HAL_GPIO_Init+0x30c>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002642:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_GPIO_Init+0x330>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002666:	4a31      	ldr	r2, [pc, #196]	; (800272c <HAL_GPIO_Init+0x330>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_GPIO_Init+0x330>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002690:	4a26      	ldr	r2, [pc, #152]	; (800272c <HAL_GPIO_Init+0x330>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_GPIO_Init+0x330>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_GPIO_Init+0x330>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_GPIO_Init+0x330>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_GPIO_Init+0x330>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae90 	bls.w	8002418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	3724      	adds	r7, #36	; 0x24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40021800 	.word	0x40021800
 8002728:	40021c00 	.word	0x40021c00
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f806 	bl	8002794 <HAL_GPIO_EXTI_Callback>
  }
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e10f      	b.n	80029de <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f007 fb4c 	bl	8009e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027f0:	f002 fb36 	bl	8004e60 <HAL_RCC_GetPCLK1Freq>
 80027f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a7b      	ldr	r2, [pc, #492]	; (80029e8 <HAL_I2C_Init+0x23c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d807      	bhi.n	8002810 <HAL_I2C_Init+0x64>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a7a      	ldr	r2, [pc, #488]	; (80029ec <HAL_I2C_Init+0x240>)
 8002804:	4293      	cmp	r3, r2
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e006      	b.n	800281e <HAL_I2C_Init+0x72>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_I2C_Init+0x244>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0db      	b.n	80029de <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a72      	ldr	r2, [pc, #456]	; (80029f4 <HAL_I2C_Init+0x248>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9b      	lsrs	r3, r3, #18
 8002830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a64      	ldr	r2, [pc, #400]	; (80029e8 <HAL_I2C_Init+0x23c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d802      	bhi.n	8002860 <HAL_I2C_Init+0xb4>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3301      	adds	r3, #1
 800285e:	e009      	b.n	8002874 <HAL_I2C_Init+0xc8>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	4a63      	ldr	r2, [pc, #396]	; (80029f8 <HAL_I2C_Init+0x24c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	430b      	orrs	r3, r1
 800287a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4956      	ldr	r1, [pc, #344]	; (80029e8 <HAL_I2C_Init+0x23c>)
 8002890:	428b      	cmp	r3, r1
 8002892:	d80d      	bhi.n	80028b0 <HAL_I2C_Init+0x104>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e59      	subs	r1, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	bf38      	it	cc
 80028ac:	2304      	movcc	r3, #4
 80028ae:	e04f      	b.n	8002950 <HAL_I2C_Init+0x1a4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_I2C_Init+0x130>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_I2C_Init+0x156>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x15e>
 8002906:	2301      	movs	r3, #1
 8002908:	e022      	b.n	8002950 <HAL_I2C_Init+0x1a4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <HAL_I2C_Init+0x184>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e58      	subs	r0, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	440b      	add	r3, r1
 8002920:	fbb0 f3f3 	udiv	r3, r0, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292e:	e00f      	b.n	8002950 <HAL_I2C_Init+0x1a4>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	0099      	lsls	r1, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6911      	ldr	r1, [r2, #16]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	4311      	orrs	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	000186a0 	.word	0x000186a0
 80029ec:	001e847f 	.word	0x001e847f
 80029f0:	003d08ff 	.word	0x003d08ff
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	10624dd3 	.word	0x10624dd3

080029fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e128      	b.n	8002c60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a90      	ldr	r2, [pc, #576]	; (8002c68 <HAL_I2S_Init+0x26c>)
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f007 fa69 	bl	8009f00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a44:	f023 030f 	bic.w	r3, r3, #15
 8002a48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d060      	beq.n	8002b1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a62:	2310      	movs	r3, #16
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e001      	b.n	8002a6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d802      	bhi.n	8002a7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f002 fae6 	bl	800504c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a80:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8a:	d125      	bne.n	8002ad8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	3305      	adds	r3, #5
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e01f      	b.n	8002af6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	461a      	mov	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	3305      	adds	r3, #5
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e00e      	b.n	8002af6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	461a      	mov	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	3305      	adds	r3, #5
 8002af4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a5c      	ldr	r2, [pc, #368]	; (8002c6c <HAL_I2S_Init+0x270>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e003      	b.n	8002b24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d902      	bls.n	8002b30 <HAL_I2S_Init+0x134>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2bff      	cmp	r3, #255	; 0xff
 8002b2e:	d907      	bls.n	8002b40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e08f      	b.n	8002c60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	ea42 0103 	orr.w	r1, r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b5e:	f023 030f 	bic.w	r3, r3, #15
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6851      	ldr	r1, [r2, #4]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6892      	ldr	r2, [r2, #8]
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68d2      	ldr	r2, [r2, #12]
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6992      	ldr	r2, [r2, #24]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d161      	bne.n	8002c50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_I2S_Init+0x274>)
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <HAL_I2S_Init+0x278>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2S_Init+0x1a4>
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_I2S_Init+0x27c>)
 8002b9e:	e001      	b.n	8002ba4 <HAL_I2S_Init+0x1a8>
 8002ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4932      	ldr	r1, [pc, #200]	; (8002c74 <HAL_I2S_Init+0x278>)
 8002bac:	428a      	cmp	r2, r1
 8002bae:	d101      	bne.n	8002bb4 <HAL_I2S_Init+0x1b8>
 8002bb0:	4a31      	ldr	r2, [pc, #196]	; (8002c78 <HAL_I2S_Init+0x27c>)
 8002bb2:	e001      	b.n	8002bb8 <HAL_I2S_Init+0x1bc>
 8002bb4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002bb8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bbc:	f023 030f 	bic.w	r3, r3, #15
 8002bc0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <HAL_I2S_Init+0x278>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2S_Init+0x1d4>
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_I2S_Init+0x27c>)
 8002bce:	e001      	b.n	8002bd4 <HAL_I2S_Init+0x1d8>
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <HAL_I2S_Init+0x278>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_I2S_Init+0x1ea>
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_I2S_Init+0x27c>)
 8002be4:	e001      	b.n	8002bea <HAL_I2S_Init+0x1ee>
 8002be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf6:	d003      	beq.n	8002c00 <HAL_I2S_Init+0x204>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	e001      	b.n	8002c0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	b299      	uxth	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002c22:	4303      	orrs	r3, r0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	430b      	orrs	r3, r1
 8002c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_I2S_Init+0x278>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_I2S_Init+0x24c>
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_I2S_Init+0x27c>)
 8002c46:	e001      	b.n	8002c4c <HAL_I2S_Init+0x250>
 8002c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c4c:	897a      	ldrh	r2, [r7, #10]
 8002c4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	08002d73 	.word	0x08002d73
 8002c6c:	cccccccd 	.word	0xcccccccd
 8002c70:	08002e89 	.word	0x08002e89
 8002c74:	40003800 	.word	0x40003800
 8002c78:	40003400 	.word	0x40003400

08002c7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	881a      	ldrh	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c9a      	adds	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10e      	bne.n	8002d0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cfc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffb8 	bl	8002c7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	b292      	uxth	r2, r2
 8002d28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10e      	bne.n	8002d6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff93 	bl	8002c90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d13a      	bne.n	8002e04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d109      	bne.n	8002dac <I2S_IRQHandler+0x3a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d102      	bne.n	8002dac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffb4 	bl	8002d14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d126      	bne.n	8002e04 <I2S_IRQHandler+0x92>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d11f      	bne.n	8002e04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f043 0202 	orr.w	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff50 	bl	8002ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d136      	bne.n	8002e7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d109      	bne.n	8002e2e <I2S_IRQHandler+0xbc>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d102      	bne.n	8002e2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff45 	bl	8002cb8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d122      	bne.n	8002e7e <I2S_IRQHandler+0x10c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d11b      	bne.n	8002e7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff13 	bl	8002ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4aa2      	ldr	r2, [pc, #648]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002ea2:	4ba2      	ldr	r3, [pc, #648]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ea4:	e001      	b.n	8002eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a9b      	ldr	r2, [pc, #620]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ec0:	4b9a      	ldr	r3, [pc, #616]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ec2:	e001      	b.n	8002ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d004      	beq.n	8002ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8099 	bne.w	8003012 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d107      	bne.n	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f925 	bl	8003144 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f9c8 	bl	80032a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d13a      	bne.n	8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d035      	beq.n	8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7e      	ldr	r2, [pc, #504]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f32:	4b7e      	ldr	r3, [pc, #504]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f34:	e001      	b.n	8002f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4979      	ldr	r1, [pc, #484]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f42:	428b      	cmp	r3, r1
 8002f44:	d101      	bne.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f48:	e001      	b.n	8002f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f043 0202 	orr.w	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fe88 	bl	8002ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	f040 80be 	bne.w	800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80b8 	beq.w	800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fc6:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fc8:	e001      	b.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4954      	ldr	r1, [pc, #336]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fd6:	428b      	cmp	r3, r1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fdc:	e001      	b.n	8002fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fe6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f043 0204 	orr.w	r2, r3, #4
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fe4a 	bl	8002ca4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003010:	e084      	b.n	800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d107      	bne.n	800302c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8be 	bl	80031a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8fd 	bl	8003240 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d12f      	bne.n	80030b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02a      	beq.n	80030b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003068:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003076:	e001      	b.n	800307c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4929      	ldr	r1, [pc, #164]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003084:	428b      	cmp	r3, r1
 8003086:	d101      	bne.n	800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800308a:	e001      	b.n	8003090 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800308c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003090:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003094:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fdfa 	bl	8002ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d131      	bne.n	800311e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02c      	beq.n	800311e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030d0:	e001      	b.n	80030d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4912      	ldr	r1, [pc, #72]	; (8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030de:	428b      	cmp	r3, r1
 80030e0:	d101      	bne.n	80030e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030e4:	e001      	b.n	80030ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80030e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fdc5 	bl	8002ca4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800311a:	e000      	b.n	800311e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800311c:	bf00      	nop
}
 800311e:	bf00      	nop
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40003800 	.word	0x40003800
 800312c:	40003400 	.word	0x40003400

08003130 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	1c99      	adds	r1, r3, #2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6251      	str	r1, [r2, #36]	; 0x24
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d113      	bne.n	800319e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003184:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ffc9 	bl	8003130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c99      	adds	r1, r3, #2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6251      	str	r1, [r2, #36]	; 0x24
 80031ba:	8819      	ldrh	r1, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <I2SEx_TxISR_I2SExt+0x90>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <I2SEx_TxISR_I2SExt+0x22>
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <I2SEx_TxISR_I2SExt+0x94>)
 80031c8:	e001      	b.n	80031ce <I2SEx_TxISR_I2SExt+0x26>
 80031ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031ce:	460a      	mov	r2, r1
 80031d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d121      	bne.n	800322e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <I2SEx_TxISR_I2SExt+0x90>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <I2SEx_TxISR_I2SExt+0x50>
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <I2SEx_TxISR_I2SExt+0x94>)
 80031f6:	e001      	b.n	80031fc <I2SEx_TxISR_I2SExt+0x54>
 80031f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	490d      	ldr	r1, [pc, #52]	; (8003238 <I2SEx_TxISR_I2SExt+0x90>)
 8003204:	428b      	cmp	r3, r1
 8003206:	d101      	bne.n	800320c <I2SEx_TxISR_I2SExt+0x64>
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <I2SEx_TxISR_I2SExt+0x94>)
 800320a:	e001      	b.n	8003210 <I2SEx_TxISR_I2SExt+0x68>
 800320c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff81 	bl	8003130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40003800 	.word	0x40003800
 800323c:	40003400 	.word	0x40003400

08003240 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68d8      	ldr	r0, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	1c99      	adds	r1, r3, #2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003258:	b282      	uxth	r2, r0
 800325a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003282:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff4a 	bl	8003130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <I2SEx_RxISR_I2SExt+0x90>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <I2SEx_RxISR_I2SExt+0x16>
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <I2SEx_RxISR_I2SExt+0x94>)
 80032b8:	e001      	b.n	80032be <I2SEx_RxISR_I2SExt+0x1a>
 80032ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032be:	68d8      	ldr	r0, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	1c99      	adds	r1, r3, #2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032ca:	b282      	uxth	r2, r0
 80032cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <I2SEx_RxISR_I2SExt+0x90>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <I2SEx_RxISR_I2SExt+0x50>
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <I2SEx_RxISR_I2SExt+0x94>)
 80032f2:	e001      	b.n	80032f8 <I2SEx_RxISR_I2SExt+0x54>
 80032f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	490d      	ldr	r1, [pc, #52]	; (8003334 <I2SEx_RxISR_I2SExt+0x90>)
 8003300:	428b      	cmp	r3, r1
 8003302:	d101      	bne.n	8003308 <I2SEx_RxISR_I2SExt+0x64>
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <I2SEx_RxISR_I2SExt+0x94>)
 8003306:	e001      	b.n	800330c <I2SEx_RxISR_I2SExt+0x68>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800330c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003310:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff03 	bl	8003130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40003800 	.word	0x40003800
 8003338:	40003400 	.word	0x40003400

0800333c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	b08f      	sub	sp, #60	; 0x3c
 8003340:	af0a      	add	r7, sp, #40	; 0x28
 8003342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e10f      	b.n	800356e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f007 f9b1 	bl	800a6d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2203      	movs	r2, #3
 8003372:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f002 ff66 	bl	800625e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	687e      	ldr	r6, [r7, #4]
 800339a:	466d      	mov	r5, sp
 800339c:	f106 0410 	add.w	r4, r6, #16
 80033a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80033b0:	1d33      	adds	r3, r6, #4
 80033b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b4:	6838      	ldr	r0, [r7, #0]
 80033b6:	f002 fe3d 	bl	8006034 <USB_CoreInit>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0d0      	b.n	800356e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 ff54 	bl	8006280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e04a      	b.n	8003474 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	333d      	adds	r3, #61	; 0x3d
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	333c      	adds	r3, #60	; 0x3c
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	b298      	uxth	r0, r3
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3342      	adds	r3, #66	; 0x42
 800341a:	4602      	mov	r2, r0
 800341c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	333f      	adds	r3, #63	; 0x3f
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3344      	adds	r3, #68	; 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3348      	adds	r3, #72	; 0x48
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3350      	adds	r3, #80	; 0x50
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3af      	bcc.n	80033de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	e044      	b.n	800350e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	3301      	adds	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d3b5      	bcc.n	8003484 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	687e      	ldr	r6, [r7, #4]
 8003520:	466d      	mov	r5, sp
 8003522:	f106 0410 	add.w	r4, r6, #16
 8003526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003532:	e885 0003 	stmia.w	r5, {r0, r1}
 8003536:	1d33      	adds	r3, r6, #4
 8003538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353a:	6838      	ldr	r0, [r7, #0]
 800353c:	f002 feca 	bl	80062d4 <USB_DevInit>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e00d      	b.n	800356e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 febf 	bl	80072ea <USB_DevDisconnect>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003576 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_PCD_Start+0x1c>
 800358e:	2302      	movs	r3, #2
 8003590:	e020      	b.n	80035d4 <HAL_PCD_Start+0x5e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d109      	bne.n	80035b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d005      	beq.n	80035b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fe7d 	bl	80072ba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fe39 	bl	800623c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b08d      	sub	sp, #52	; 0x34
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 ff24 	bl	8007440 <USB_GetMode>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 838e 	bne.w	8003d1c <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 fe88 	bl	800731a <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8384 	beq.w	8003d1a <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 fe7f 	bl	800731a <USB_ReadInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 0202 	and.w	r2, r2, #2
 8003634:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fe6d 	bl	800731a <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003646:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800364a:	d17b      	bne.n	8003744 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fe73 	bl	8007340 <USB_ReadDevAllOutEpInterrupt>
 800365a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800365c:	e06f      	b.n	800373e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d064      	beq.n	8003732 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f003 fe98 	bl	80073a8 <USB_ReadDevOutEPInterrupt>
 8003678:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003690:	461a      	mov	r2, r3
 8003692:	2301      	movs	r3, #1
 8003694:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fe0d 	bl	80042b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00c      	beq.n	80036c2 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 ff0c 	bl	80044c8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	461a      	mov	r2, r3
 80036be:	2308      	movs	r3, #8
 80036c0:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d8:	461a      	mov	r2, r3
 80036da:	2310      	movs	r3, #16
 80036dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d108      	bne.n	8003702 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036fa:	461a      	mov	r2, r3
 80036fc:	2101      	movs	r1, #1
 80036fe:	f003 fee3 	bl	80074c8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	461a      	mov	r2, r3
 8003710:	2320      	movs	r3, #32
 8003712:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003730:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	3301      	adds	r3, #1
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	085b      	lsrs	r3, r3, #1
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d18c      	bne.n	800365e <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fde6 	bl	800731a <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003758:	f040 80c4 	bne.w	80038e4 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f003 fe07 	bl	8007374 <USB_ReadDevAllInEpInterrupt>
 8003766:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800376c:	e0b6      	b.n	80038dc <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80ab 	beq.w	80038d0 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f003 fe2d 	bl	80073e4 <USB_ReadDevInEPInterrupt>
 800378a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d05b      	beq.n	800384e <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	2201      	movs	r2, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b6:	4013      	ands	r3, r2
 80037b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	461a      	mov	r2, r3
 80037c8:	2301      	movs	r3, #1
 80037ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d11b      	bne.n	800380c <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3348      	adds	r3, #72	; 0x48
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4403      	add	r3, r0
 80037f4:	3344      	adds	r3, #68	; 0x44
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4419      	add	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4403      	add	r3, r0
 8003808:	3348      	adds	r3, #72	; 0x48
 800380a:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f006 ffeb 	bl	800a7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d116      	bne.n	800384e <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d113      	bne.n	800384e <HAL_PCD_IRQHandler+0x272>
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3350      	adds	r3, #80	; 0x50
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003846:	461a      	mov	r2, r3
 8003848:	2101      	movs	r1, #1
 800384a:	f003 fe3d 	bl	80074c8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	461a      	mov	r2, r3
 8003866:	2308      	movs	r3, #8
 8003868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	461a      	mov	r2, r3
 8003882:	2310      	movs	r3, #16
 8003884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	461a      	mov	r2, r3
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b8:	461a      	mov	r2, r3
 80038ba:	2302      	movs	r3, #2
 80038bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fc67 	bl	800419e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3301      	adds	r3, #1
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f47f af45 	bne.w	800376e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 fd16 	bl	800731a <USB_ReadInterrupts>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038f8:	d122      	bne.n	8003940 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003920:	2100      	movs	r1, #0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fe88 	bl	8004638 <HAL_PCDEx_LPM_Callback>
 8003928:	e002      	b.n	8003930 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f006 ffd6 	bl	800a8dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800393e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f003 fce8 	bl	800731a <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003954:	d112      	bne.n	800397c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f006 ff92 	bl	800a890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800397a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fcca 	bl	800731a <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	f040 80a7 	bne.w	8003ae2 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2110      	movs	r1, #16
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 fe02 	bl	80065b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b8:	e036      	b.n	8003a28 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	461a      	mov	r2, r3
 80039fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	3301      	adds	r3, #1
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d3c3      	bcc.n	80039ba <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	f043 030b 	orr.w	r3, r3, #11
 8003a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a74:	f043 030b 	orr.w	r3, r3, #11
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	e015      	b.n	8003aa8 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa2:	f043 030b 	orr.w	r3, r3, #11
 8003aa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003aba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003acc:	461a      	mov	r2, r3
 8003ace:	f003 fcfb 	bl	80074c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 fc17 	bl	800731a <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	d124      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 fcad 	bl	800745c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fdb7 	bl	800667a <USB_GetDevSpeed>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681c      	ldr	r4, [r3, #0]
 8003b18:	f001 f996 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	4620      	mov	r0, r4
 8003b28:	f002 fae6 	bl	80060f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f006 fe86 	bl	800a83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 fbe7 	bl	800731a <USB_ReadInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d161      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0210 	bic.w	r2, r2, #16
 8003b64:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	0c5b      	lsrs	r3, r3, #17
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d124      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d035      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6a38      	ldr	r0, [r7, #32]
 8003bb2:	f003 fa5f 	bl	8007074 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd4:	441a      	add	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]
 8003bda:	e016      	b.n	8003c0a <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	0c5b      	lsrs	r3, r3, #17
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	2b06      	cmp	r3, #6
 8003be6:	d110      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bee:	2208      	movs	r2, #8
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6a38      	ldr	r0, [r7, #32]
 8003bf4:	f003 fa3e 	bl	8007074 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c04:	441a      	add	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0210 	orr.w	r2, r2, #16
 8003c18:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 fb7b 	bl	800731a <USB_ReadInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d10a      	bne.n	8003c44 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f006 fdf7 	bl	800a822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f002 0208 	and.w	r2, r2, #8
 8003c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f003 fb66 	bl	800731a <USB_ReadInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c58:	d10f      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f006 fe59 	bl	800a91c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f003 fb4b 	bl	800731a <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f006 fe2c 	bl	800a8f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 fb30 	bl	800731a <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d10a      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f006 fe3a 	bl	800a940 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fb1a 	bl	800731a <USB_ReadInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d115      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f006 fe2a 	bl	800a95c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	e000      	b.n	8003d1c <HAL_PCD_IRQHandler+0x740>
      return;
 8003d1a:	bf00      	nop
    }
  }
}
 8003d1c:	3734      	adds	r7, #52	; 0x34
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}

08003d22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_PCD_SetAddress+0x1a>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e013      	b.n	8003d64 <HAL_PCD_SetAddress+0x42>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 fa8a 	bl	800726e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	70fb      	strb	r3, [r7, #3]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	803b      	strh	r3, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da0f      	bge.n	8003db2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	3338      	adds	r3, #56	; 0x38
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	705a      	strb	r2, [r3, #1]
 8003db0:	e00f      	b.n	8003dd2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dde:	883a      	ldrh	r2, [r7, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	78ba      	ldrb	r2, [r7, #2]
 8003de8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dfc:	78bb      	ldrb	r3, [r7, #2]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d102      	bne.n	8003e08 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_PCD_EP_Open+0xaa>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e00e      	b.n	8003e34 <HAL_PCD_EP_Open+0xc8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f002 fc4d 	bl	80066c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003e32:	7afb      	ldrb	r3, [r7, #11]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	da0f      	bge.n	8003e70 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	3338      	adds	r3, #56	; 0x38
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	705a      	strb	r2, [r3, #1]
 8003e6e:	e00f      	b.n	8003e90 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	3304      	adds	r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_PCD_EP_Close+0x6e>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e00e      	b.n	8003ec8 <HAL_PCD_EP_Close+0x8c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fc8b 	bl	80067d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	460b      	mov	r3, r1
 8003ede:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	7afb      	ldrb	r3, [r7, #11]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f2c:	7afb      	ldrb	r3, [r7, #11]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	f002 ff0e 	bl	8006d64 <USB_EP0StartXfer>
 8003f48:	e008      	b.n	8003f5c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6979      	ldr	r1, [r7, #20]
 8003f58:	f002 fcc0 	bl	80068dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	f003 020f 	and.w	r2, r3, #15
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f88:	681b      	ldr	r3, [r3, #0]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	3338      	adds	r3, #56	; 0x38
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3304      	adds	r3, #4
 8003fbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	6979      	ldr	r1, [r7, #20]
 8004008:	f002 feac 	bl	8006d64 <USB_EP0StartXfer>
 800400c:	e008      	b.n	8004020 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	6979      	ldr	r1, [r7, #20]
 800401c:	f002 fc5e 	bl	80068dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d901      	bls.n	8004048 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e050      	b.n	80040ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da0f      	bge.n	8004070 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 020f 	and.w	r2, r3, #15
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3338      	adds	r3, #56	; 0x38
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	3304      	adds	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	705a      	strb	r2, [r3, #1]
 800406e:	e00d      	b.n	800408c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_PCD_EP_SetStall+0x82>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e01e      	b.n	80040ea <HAL_PCD_EP_SetStall+0xc0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68f9      	ldr	r1, [r7, #12]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 f803 	bl	80070c6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	b2d9      	uxtb	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040da:	461a      	mov	r2, r3
 80040dc:	f003 f9f4 	bl	80074c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d901      	bls.n	8004110 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e042      	b.n	8004196 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004114:	2b00      	cmp	r3, #0
 8004116:	da0f      	bge.n	8004138 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3338      	adds	r3, #56	; 0x38
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	705a      	strb	r2, [r3, #1]
 8004136:	e00f      	b.n	8004158 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	3304      	adds	r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_PCD_EP_ClrStall+0x86>
 8004174:	2302      	movs	r3, #2
 8004176:	e00e      	b.n	8004196 <HAL_PCD_EP_ClrStall+0xa4>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 f80b 	bl	80071a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b08a      	sub	sp, #40	; 0x28
 80041a2:	af02      	add	r7, sp, #8
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	3338      	adds	r3, #56	; 0x38
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d901      	bls.n	80041d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06c      	b.n	80042b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d902      	bls.n	80041f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3303      	adds	r3, #3
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041fa:	e02b      	b.n	8004254 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d902      	bls.n	8004218 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3303      	adds	r3, #3
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68d9      	ldr	r1, [r3, #12]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004230:	b2db      	uxtb	r3, r3
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	4603      	mov	r3, r0
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f002 fee7 	bl	800700a <USB_WritePacket>

    ep->xfer_buff  += len;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	441a      	add	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	b29b      	uxth	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	429a      	cmp	r2, r3
 8004268:	d809      	bhi.n	800427e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004272:	429a      	cmp	r2, r3
 8004274:	d203      	bcs.n	800427e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1be      	bne.n	80041fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	429a      	cmp	r2, r3
 8004288:	d811      	bhi.n	80042ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	2201      	movs	r2, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	6939      	ldr	r1, [r7, #16]
 80042a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042aa:	4013      	ands	r3, r2
 80042ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	333c      	adds	r3, #60	; 0x3c
 80042d0:	3304      	adds	r3, #4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	f040 80b3 	bne.w	8004456 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d028      	beq.n	800434c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a70      	ldr	r2, [pc, #448]	; (80044c0 <PCD_EP_OutXfrComplete_int+0x208>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d90e      	bls.n	8004320 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004308:	2b00      	cmp	r3, #0
 800430a:	d009      	beq.n	8004320 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004318:	461a      	mov	r2, r3
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f006 fa37 	bl	800a794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004330:	461a      	mov	r2, r3
 8004332:	2101      	movs	r1, #1
 8004334:	f003 f8c8 	bl	80074c8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	2308      	movs	r3, #8
 8004348:	6093      	str	r3, [r2, #8]
 800434a:	e0b3      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	461a      	mov	r2, r3
 8004364:	2320      	movs	r3, #32
 8004366:	6093      	str	r3, [r2, #8]
 8004368:	e0a4      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 809f 	bne.w	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a51      	ldr	r2, [pc, #324]	; (80044c0 <PCD_EP_OutXfrComplete_int+0x208>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d90f      	bls.n	800439e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	6093      	str	r3, [r2, #8]
 800439c:	e08a      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043b0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	0159      	lsls	r1, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80043c4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4403      	add	r3, r0
 80043d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043d8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4403      	add	r3, r0
 80043fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4419      	add	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4403      	add	r3, r0
 8004412:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004416:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f006 f9ca 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d144      	bne.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d138      	bne.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800444c:	461a      	mov	r2, r3
 800444e:	2101      	movs	r1, #1
 8004450:	f003 f83a 	bl	80074c8 <USB_EP0_OutStart>
 8004454:	e02e      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <PCD_EP_OutXfrComplete_int+0x20c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d124      	bne.n	80044a8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	461a      	mov	r2, r3
 8004476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	e01a      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	461a      	mov	r2, r3
 8004496:	2320      	movs	r3, #32
 8004498:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f006 f989 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
 80044a6:	e005      	b.n	80044b4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f006 f982 	bl	800a7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	4f54300a 	.word	0x4f54300a
 80044c4:	4f54310a 	.word	0x4f54310a

080044c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	333c      	adds	r3, #60	; 0x3c
 80044e0:	3304      	adds	r3, #4
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d113      	bne.n	8004526 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d922      	bls.n	800454c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01d      	beq.n	800454c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	6093      	str	r3, [r2, #8]
 8004524:	e012      	b.n	800454c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a16      	ldr	r2, [pc, #88]	; (8004584 <PCD_EP_OutSetupPacket_int+0xbc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10e      	bne.n	800454c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f006 f921 	bl	800a794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d90c      	bls.n	8004574 <PCD_EP_OutSetupPacket_int+0xac>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d108      	bne.n	8004574 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800456c:	461a      	mov	r2, r3
 800456e:	2101      	movs	r1, #1
 8004570:	f002 ffaa 	bl	80074c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	4f54300a 	.word	0x4f54300a
 8004584:	4f54310a 	.word	0x4f54310a

08004588 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
 8004594:	4613      	mov	r3, r2
 8004596:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045a6:	883b      	ldrh	r3, [r7, #0]
 80045a8:	0419      	lsls	r1, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
 80045b4:	e028      	b.n	8004608 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4413      	add	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e00d      	b.n	80045e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	3340      	adds	r3, #64	; 0x40
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	3301      	adds	r3, #1
 80045e4:	73fb      	strb	r3, [r7, #15]
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3ec      	bcc.n	80045ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045f0:	883b      	ldrh	r3, [r7, #0]
 80045f2:	0418      	lsls	r0, r3, #16
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	4302      	orrs	r2, r0
 8004600:	3340      	adds	r3, #64	; 0x40
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e22d      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d075      	beq.n	800475a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466e:	4ba3      	ldr	r3, [pc, #652]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b04      	cmp	r3, #4
 8004678:	d00c      	beq.n	8004694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4ba0      	ldr	r3, [pc, #640]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d112      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004686:	4b9d      	ldr	r3, [pc, #628]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004692:	d10b      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	4b99      	ldr	r3, [pc, #612]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05b      	beq.n	8004758 <HAL_RCC_OscConfig+0x108>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d157      	bne.n	8004758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e208      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d106      	bne.n	80046c4 <HAL_RCC_OscConfig+0x74>
 80046b6:	4b91      	ldr	r3, [pc, #580]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a90      	ldr	r2, [pc, #576]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x98>
 80046ce:	4b8b      	ldr	r3, [pc, #556]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a8a      	ldr	r2, [pc, #552]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b88      	ldr	r3, [pc, #544]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a87      	ldr	r2, [pc, #540]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046e8:	4b84      	ldr	r3, [pc, #528]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a83      	ldr	r2, [pc, #524]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b81      	ldr	r3, [pc, #516]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a80      	ldr	r2, [pc, #512]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fc fc84 	bl	8001014 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004710:	f7fc fc80 	bl	8001014 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1cd      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b76      	ldr	r3, [pc, #472]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xc0>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fc fc70 	bl	8001014 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7fc fc6c 	bl	8001014 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1b9      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	4b6c      	ldr	r3, [pc, #432]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0xe8>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d063      	beq.n	800482e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004766:	4b65      	ldr	r3, [pc, #404]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800477a:	2b08      	cmp	r3, #8
 800477c:	d11c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477e:	4b5f      	ldr	r3, [pc, #380]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	4b5c      	ldr	r3, [pc, #368]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_RCC_OscConfig+0x152>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e18d      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	4b56      	ldr	r3, [pc, #344]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4952      	ldr	r1, [pc, #328]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b6:	e03a      	b.n	800482e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c0:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <HAL_RCC_OscConfig+0x2b0>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fc fc25 	bl	8001014 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fc fc21 	bl	8001014 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e16e      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	4b46      	ldr	r3, [pc, #280]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ec:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4940      	ldr	r1, [pc, #256]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
 8004800:	e015      	b.n	800482e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004802:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <HAL_RCC_OscConfig+0x2b0>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fc fc04 	bl	8001014 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004810:	f7fc fc00 	bl	8001014 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e14d      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d030      	beq.n	800489c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004842:	4b30      	ldr	r3, [pc, #192]	; (8004904 <HAL_RCC_OscConfig+0x2b4>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fc fbe4 	bl	8001014 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004850:	f7fc fbe0 	bl	8001014 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e12d      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	4b26      	ldr	r3, [pc, #152]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x200>
 800486e:	e015      	b.n	800489c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x2b4>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004876:	f7fc fbcd 	bl	8001014 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487e:	f7fc fbc9 	bl	8001014 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e116      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a0 	beq.w	80049ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x2b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d121      	bne.n	800492a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <HAL_RCC_OscConfig+0x2b8>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fb8f 	bl	8001014 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	e011      	b.n	800491e <HAL_RCC_OscConfig+0x2ce>
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	42470000 	.word	0x42470000
 8004904:	42470e80 	.word	0x42470e80
 8004908:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490c:	f7fc fb82 	bl	8001014 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e0cf      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491e:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCC_OscConfig+0x478>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x2f0>
 8004932:	4b66      	ldr	r3, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a65      	ldr	r2, [pc, #404]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	e01c      	b.n	800497a <HAL_RCC_OscConfig+0x32a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d10c      	bne.n	8004962 <HAL_RCC_OscConfig+0x312>
 8004948:	4b60      	ldr	r3, [pc, #384]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a5f      	ldr	r2, [pc, #380]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	4b5d      	ldr	r3, [pc, #372]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a5c      	ldr	r2, [pc, #368]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e00b      	b.n	800497a <HAL_RCC_OscConfig+0x32a>
 8004962:	4b5a      	ldr	r3, [pc, #360]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a59      	ldr	r2, [pc, #356]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	4b57      	ldr	r3, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a56      	ldr	r2, [pc, #344]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d015      	beq.n	80049ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fc fb47 	bl	8001014 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	f7fc fb43 	bl	8001014 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f241 3288 	movw	r2, #5000	; 0x1388
 8004998:	4293      	cmp	r3, r2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e08e      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ee      	beq.n	800498a <HAL_RCC_OscConfig+0x33a>
 80049ac:	e014      	b.n	80049d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7fc fb31 	bl	8001014 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fc fb2d 	bl	8001014 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e078      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ee      	bne.n	80049b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049de:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 80049e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d064      	beq.n	8004abc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d05c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d141      	bne.n	8004a8a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <HAL_RCC_OscConfig+0x480>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fc fb02 	bl	8001014 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fc fafe 	bl	8001014 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e04b      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	019b      	lsls	r3, r3, #6
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	491d      	ldr	r1, [pc, #116]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_RCC_OscConfig+0x480>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fc fad7 	bl	8001014 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fc fad3 	bl	8001014 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e020      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x41a>
 8004a88:	e018      	b.n	8004abc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_RCC_OscConfig+0x480>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fc fac0 	bl	8001014 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fc fabc 	bl	8001014 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e009      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <HAL_RCC_OscConfig+0x47c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x448>
 8004ab6:	e001      	b.n	8004abc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	42470060 	.word	0x42470060

08004ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0ca      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b67      	ldr	r3, [pc, #412]	; (8004c88 <HAL_RCC_ClockConfig+0x1b4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d90c      	bls.n	8004b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b64      	ldr	r3, [pc, #400]	; (8004c88 <HAL_RCC_ClockConfig+0x1b4>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b62      	ldr	r3, [pc, #392]	; (8004c88 <HAL_RCC_ClockConfig+0x1b4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0b6      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b28:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b40:	4b52      	ldr	r3, [pc, #328]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a51      	ldr	r2, [pc, #324]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4c:	4b4f      	ldr	r3, [pc, #316]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	494c      	ldr	r1, [pc, #304]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d044      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d119      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e07d      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b92:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06d      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba2:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e065      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4933      	ldr	r1, [pc, #204]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc4:	f7fc fa26 	bl	8001014 <HAL_GetTick>
 8004bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bcc:	f7fc fa22 	bl	8001014 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e04d      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 020c 	and.w	r2, r3, #12
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d1eb      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d20c      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <HAL_RCC_ClockConfig+0x1b4>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e030      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c28:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4915      	ldr	r1, [pc, #84]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	490d      	ldr	r1, [pc, #52]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c5a:	f000 f81d 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4601      	mov	r1, r0
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	5cd3      	ldrb	r3, [r2, r3]
 8004c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7fc f988 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023c00 	.word	0x40023c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	0800db24 	.word	0x0800db24
 8004c94:	20000118 	.word	0x20000118

08004c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d007      	beq.n	8004cca <HAL_RCC_GetSysClockFreq+0x32>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x38>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 80b4 	bne.w	8004e2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b5e      	ldr	r3, [pc, #376]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cc6:	60bb      	str	r3, [r7, #8]
       break;
 8004cc8:	e0b3      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cca:	4b5e      	ldr	r3, [pc, #376]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ccc:	60bb      	str	r3, [r7, #8]
      break;
 8004cce:	e0b0      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cda:	4b58      	ldr	r3, [pc, #352]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04a      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce6:	4b55      	ldr	r3, [pc, #340]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	f04f 0400 	mov.w	r4, #0
 8004cf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	ea03 0501 	and.w	r5, r3, r1
 8004cfc:	ea04 0602 	and.w	r6, r4, r2
 8004d00:	4629      	mov	r1, r5
 8004d02:	4632      	mov	r2, r6
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	f04f 0400 	mov.w	r4, #0
 8004d0c:	0154      	lsls	r4, r2, #5
 8004d0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d12:	014b      	lsls	r3, r1, #5
 8004d14:	4619      	mov	r1, r3
 8004d16:	4622      	mov	r2, r4
 8004d18:	1b49      	subs	r1, r1, r5
 8004d1a:	eb62 0206 	sbc.w	r2, r2, r6
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	f04f 0400 	mov.w	r4, #0
 8004d26:	0194      	lsls	r4, r2, #6
 8004d28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d2c:	018b      	lsls	r3, r1, #6
 8004d2e:	1a5b      	subs	r3, r3, r1
 8004d30:	eb64 0402 	sbc.w	r4, r4, r2
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	00e2      	lsls	r2, r4, #3
 8004d3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d42:	00d9      	lsls	r1, r3, #3
 8004d44:	460b      	mov	r3, r1
 8004d46:	4614      	mov	r4, r2
 8004d48:	195b      	adds	r3, r3, r5
 8004d4a:	eb44 0406 	adc.w	r4, r4, r6
 8004d4e:	f04f 0100 	mov.w	r1, #0
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	0262      	lsls	r2, r4, #9
 8004d58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d5c:	0259      	lsls	r1, r3, #9
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	4621      	mov	r1, r4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f04f 0400 	mov.w	r4, #0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	f7fb ff6a 	bl	8000c48 <__aeabi_uldivmod>
 8004d74:	4603      	mov	r3, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e049      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	ea03 0501 	and.w	r5, r3, r1
 8004d92:	ea04 0602 	and.w	r6, r4, r2
 8004d96:	4629      	mov	r1, r5
 8004d98:	4632      	mov	r2, r6
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	f04f 0400 	mov.w	r4, #0
 8004da2:	0154      	lsls	r4, r2, #5
 8004da4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004da8:	014b      	lsls	r3, r1, #5
 8004daa:	4619      	mov	r1, r3
 8004dac:	4622      	mov	r2, r4
 8004dae:	1b49      	subs	r1, r1, r5
 8004db0:	eb62 0206 	sbc.w	r2, r2, r6
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	f04f 0400 	mov.w	r4, #0
 8004dbc:	0194      	lsls	r4, r2, #6
 8004dbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004dc2:	018b      	lsls	r3, r1, #6
 8004dc4:	1a5b      	subs	r3, r3, r1
 8004dc6:	eb64 0402 	sbc.w	r4, r4, r2
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dd8:	00d9      	lsls	r1, r3, #3
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4614      	mov	r4, r2
 8004dde:	195b      	adds	r3, r3, r5
 8004de0:	eb44 0406 	adc.w	r4, r4, r6
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	02a2      	lsls	r2, r4, #10
 8004dee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004df2:	0299      	lsls	r1, r3, #10
 8004df4:	460b      	mov	r3, r1
 8004df6:	4614      	mov	r4, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f04f 0400 	mov.w	r4, #0
 8004e02:	461a      	mov	r2, r3
 8004e04:	4623      	mov	r3, r4
 8004e06:	f7fb ff1f 	bl	8000c48 <__aeabi_uldivmod>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	60bb      	str	r3, [r7, #8]
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e2e:	60bb      	str	r3, [r7, #8]
      break;
 8004e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e32:	68bb      	ldr	r3, [r7, #8]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000118 	.word	0x20000118

08004e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e64:	f7ff fff0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4a03      	ldr	r2, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	0800db34 	.word	0x0800db34

08004e88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d035      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eb0:	4b62      	ldr	r3, [pc, #392]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb6:	f7fc f8ad 	bl	8001014 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ebe:	f7fc f8a9 	bl	8001014 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0b0      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ed0:	4b5b      	ldr	r3, [pc, #364]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	019a      	lsls	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	071b      	lsls	r3, r3, #28
 8004ee8:	4955      	ldr	r1, [pc, #340]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ef0:	4b52      	ldr	r3, [pc, #328]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef6:	f7fc f88d 	bl	8001014 <HAL_GetTick>
 8004efa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004efe:	f7fc f889 	bl	8001014 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e090      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f10:	4b4b      	ldr	r3, [pc, #300]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8083 	beq.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b44      	ldr	r3, [pc, #272]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a43      	ldr	r2, [pc, #268]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3a:	4b41      	ldr	r3, [pc, #260]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f46:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3e      	ldr	r2, [pc, #248]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f52:	f7fc f85f 	bl	8001014 <HAL_GetTick>
 8004f56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fc f85b 	bl	8001014 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e062      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f6c:	4b35      	ldr	r3, [pc, #212]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f78:	4b31      	ldr	r3, [pc, #196]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02f      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d028      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f96:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fa0:	4b29      	ldr	r3, [pc, #164]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa6:	4b28      	ldr	r3, [pc, #160]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d114      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7fc f829 	bl	8001014 <HAL_GetTick>
 8004fc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc6:	f7fc f825 	bl	8001014 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e02a      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	4b18      	ldr	r3, [pc, #96]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ff4:	d10d      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	490d      	ldr	r1, [pc, #52]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]
 8005010:	e005      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4a0a      	ldr	r2, [pc, #40]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005018:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800501c:	6093      	str	r3, [r2, #8]
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502a:	4905      	ldr	r1, [pc, #20]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	42470068 	.word	0x42470068
 8005040:	40023800 	.word	0x40023800
 8005044:	40007000 	.word	0x40007000
 8005048:	42470e40 	.word	0x42470e40

0800504c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d13d      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005072:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800507a:	2b01      	cmp	r3, #1
 800507c:	d12f      	bne.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005080:	617b      	str	r3, [r7, #20]
          break;
 8005082:	e02f      	b.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005084:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005090:	d108      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e007      	b.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050a4:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ba:	099b      	lsrs	r3, r3, #6
 80050bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80050ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ce:	0f1b      	lsrs	r3, r3, #28
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
          break;
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
          break;
 80050e2:	bf00      	nop
        }
      }
      break;
 80050e4:	bf00      	nop
    }
  }
  return frequency;
 80050e6:	697b      	ldr	r3, [r7, #20]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40023800 	.word	0x40023800
 80050f8:	00bb8000 	.word	0x00bb8000
 80050fc:	007a1200 	.word	0x007a1200
 8005100:	00f42400 	.word	0x00f42400

08005104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e056      	b.n	80051c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f004 ff4d 	bl	8009fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	ea42 0103 	orr.w	r1, r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	0c1b      	lsrs	r3, r3, #16
 8005194:	f003 0104 	and.w	r1, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69da      	ldr	r2, [r3, #28]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e01d      	b.n	800521a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f004 ff34 	bl	800a060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f000 fb58 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b06      	cmp	r3, #6
 800524a:	d007      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e01d      	b.n	80052b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f815 	bl	80052c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f000 fb09 	bl	80058c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fdd4 	bl	8005e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <HAL_TIM_PWM_Start+0x74>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_TIM_PWM_Start+0x2c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a14      	ldr	r2, [pc, #80]	; (800534c <HAL_TIM_PWM_Start+0x78>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <HAL_TIM_PWM_Start+0x30>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <HAL_TIM_PWM_Start+0x32>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b06      	cmp	r3, #6
 800532a:	d007      	beq.n	800533c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40010000 	.word	0x40010000
 800534c:	40010400 	.word	0x40010400

08005350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0202 	mvn.w	r2, #2
 800537c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa75 	bl	8005882 <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa67 	bl	800586e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fa78 	bl	8005896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0204 	mvn.w	r2, #4
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa4b 	bl	8005882 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa3d 	bl	800586e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa4e 	bl	8005896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b08      	cmp	r3, #8
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0208 	mvn.w	r2, #8
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa21 	bl	8005882 <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa13 	bl	800586e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa24 	bl	8005896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0210 	mvn.w	r2, #16
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9f7 	bl	8005882 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9e9 	bl	800586e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f9fa 	bl	8005896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0201 	mvn.w	r2, #1
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f9c3 	bl	800585a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fd90 	bl	8006020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9bf 	bl	80058aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0220 	mvn.w	r2, #32
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fd5a 	bl	800600c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005576:	2302      	movs	r3, #2
 8005578:	e0b4      	b.n	80056e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	f200 809f 	bhi.w	80056d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005592:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055cd 	.word	0x080055cd
 800559c:	080056d1 	.word	0x080056d1
 80055a0:	080056d1 	.word	0x080056d1
 80055a4:	080056d1 	.word	0x080056d1
 80055a8:	0800560d 	.word	0x0800560d
 80055ac:	080056d1 	.word	0x080056d1
 80055b0:	080056d1 	.word	0x080056d1
 80055b4:	080056d1 	.word	0x080056d1
 80055b8:	0800564f 	.word	0x0800564f
 80055bc:	080056d1 	.word	0x080056d1
 80055c0:	080056d1 	.word	0x080056d1
 80055c4:	080056d1 	.word	0x080056d1
 80055c8:	0800568f 	.word	0x0800568f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fa14 	bl	8005a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0208 	orr.w	r2, r2, #8
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	619a      	str	r2, [r3, #24]
      break;
 800560a:	e062      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fa64 	bl	8005ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	619a      	str	r2, [r3, #24]
      break;
 800564c:	e041      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fab9 	bl	8005bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0208 	orr.w	r2, r2, #8
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0204 	bic.w	r2, r2, #4
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	61da      	str	r2, [r3, #28]
      break;
 800568c:	e021      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fb0d 	bl	8005cb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	61da      	str	r2, [r3, #28]
      break;
 80056ce:	e000      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80056d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIM_ConfigClockSource+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e0a6      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x166>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d067      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x120>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d80b      	bhi.n	8005758 <HAL_TIM_ConfigClockSource+0x6c>
 8005740:	2b10      	cmp	r3, #16
 8005742:	d073      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x140>
 8005744:	2b10      	cmp	r3, #16
 8005746:	d802      	bhi.n	800574e <HAL_TIM_ConfigClockSource+0x62>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d06f      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800574c:	e078      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800574e:	2b20      	cmp	r3, #32
 8005750:	d06c      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x140>
 8005752:	2b30      	cmp	r3, #48	; 0x30
 8005754:	d06a      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005756:	e073      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d00d      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0x8c>
 800575c:	2b70      	cmp	r3, #112	; 0x70
 800575e:	d804      	bhi.n	800576a <HAL_TIM_ConfigClockSource+0x7e>
 8005760:	2b50      	cmp	r3, #80	; 0x50
 8005762:	d033      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0xe0>
 8005764:	2b60      	cmp	r3, #96	; 0x60
 8005766:	d041      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005768:	e06a      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	d066      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x152>
 8005770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005774:	d017      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005776:	e063      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f000 fb64 	bl	8005e54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800579a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e04c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f000 fb4d 	bl	8005e54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c8:	609a      	str	r2, [r3, #8]
      break;
 80057ca:	e039      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 fac1 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2150      	movs	r1, #80	; 0x50
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fb1a 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 80057ea:	e029      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f000 fae0 	bl	8005dbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2160      	movs	r1, #96	; 0x60
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fb0a 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 800580a:	e019      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6859      	ldr	r1, [r3, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	461a      	mov	r2, r3
 800581a:	f000 faa1 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2140      	movs	r1, #64	; 0x40
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fafa 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 800582a:	e009      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 faf1 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 800583c:	e000      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800583e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a40      	ldr	r2, [pc, #256]	; (80059d4 <TIM_Base_SetConfig+0x114>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d00f      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3d      	ldr	r2, [pc, #244]	; (80059d8 <TIM_Base_SetConfig+0x118>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00b      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3c      	ldr	r2, [pc, #240]	; (80059dc <TIM_Base_SetConfig+0x11c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d007      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3b      	ldr	r2, [pc, #236]	; (80059e0 <TIM_Base_SetConfig+0x120>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a3a      	ldr	r2, [pc, #232]	; (80059e4 <TIM_Base_SetConfig+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d108      	bne.n	8005912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <TIM_Base_SetConfig+0x114>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d02b      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005920:	d027      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <TIM_Base_SetConfig+0x118>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d023      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2b      	ldr	r2, [pc, #172]	; (80059dc <TIM_Base_SetConfig+0x11c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01f      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2a      	ldr	r2, [pc, #168]	; (80059e0 <TIM_Base_SetConfig+0x120>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01b      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <TIM_Base_SetConfig+0x124>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d017      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a28      	ldr	r2, [pc, #160]	; (80059e8 <TIM_Base_SetConfig+0x128>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a27      	ldr	r2, [pc, #156]	; (80059ec <TIM_Base_SetConfig+0x12c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00f      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a26      	ldr	r2, [pc, #152]	; (80059f0 <TIM_Base_SetConfig+0x130>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00b      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a25      	ldr	r2, [pc, #148]	; (80059f4 <TIM_Base_SetConfig+0x134>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d007      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a24      	ldr	r2, [pc, #144]	; (80059f8 <TIM_Base_SetConfig+0x138>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a23      	ldr	r2, [pc, #140]	; (80059fc <TIM_Base_SetConfig+0x13c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d108      	bne.n	8005984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <TIM_Base_SetConfig+0x114>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0xf8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <TIM_Base_SetConfig+0x124>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d103      	bne.n	80059c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	615a      	str	r2, [r3, #20]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40010400 	.word	0x40010400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800
 80059f4:	40001800 	.word	0x40001800
 80059f8:	40001c00 	.word	0x40001c00
 80059fc:	40002000 	.word	0x40002000

08005a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 0302 	bic.w	r3, r3, #2
 8005a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <TIM_OC1_SetConfig+0xd8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_OC1_SetConfig+0x64>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <TIM_OC1_SetConfig+0xdc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10c      	bne.n	8005a7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0308 	bic.w	r3, r3, #8
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <TIM_OC1_SetConfig+0xd8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC1_SetConfig+0x8e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a14      	ldr	r2, [pc, #80]	; (8005adc <TIM_OC1_SetConfig+0xdc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d111      	bne.n	8005ab2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	621a      	str	r2, [r3, #32]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40010400 	.word	0x40010400

08005ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0210 	bic.w	r2, r3, #16
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0320 	bic.w	r3, r3, #32
 8005b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <TIM_OC2_SetConfig+0xe4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC2_SetConfig+0x68>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <TIM_OC2_SetConfig+0xe8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10d      	bne.n	8005b64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <TIM_OC2_SetConfig+0xe4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC2_SetConfig+0x94>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <TIM_OC2_SetConfig+0xe8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d113      	bne.n	8005b9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010400 	.word	0x40010400

08005bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <TIM_OC3_SetConfig+0xe0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_OC3_SetConfig+0x66>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <TIM_OC3_SetConfig+0xe4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d10d      	bne.n	8005c4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC3_SetConfig+0xe0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC3_SetConfig+0x92>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <TIM_OC3_SetConfig+0xe4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d113      	bne.n	8005c86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40010000 	.word	0x40010000
 8005cb0:	40010400 	.word	0x40010400

08005cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a12      	ldr	r2, [pc, #72]	; (8005d58 <TIM_OC4_SetConfig+0xa4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC4_SetConfig+0x68>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <TIM_OC4_SetConfig+0xa8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d109      	bne.n	8005d30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	019b      	lsls	r3, r3, #6
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40010400 	.word	0x40010400

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 030a 	bic.w	r3, r3, #10
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f023 0210 	bic.w	r2, r3, #16
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f043 0307 	orr.w	r3, r3, #7
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1a      	ldr	r2, [r3, #32]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e032      	b.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e03d      	b.n	8006000 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006034:	b084      	sub	sp, #16
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	f107 001c 	add.w	r0, r7, #28
 8006042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2b01      	cmp	r3, #1
 800604a:	d122      	bne.n	8006092 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006076:	2b01      	cmp	r3, #1
 8006078:	d105      	bne.n	8006086 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fa7c 	bl	8007584 <USB_CoreReset>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	e01a      	b.n	80060c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fa70 	bl	8007584 <USB_CoreReset>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
 80060ba:	e005      	b.n	80060c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10b      	bne.n	80060e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f043 0206 	orr.w	r2, r3, #6
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f2:	b004      	add	sp, #16
 80060f4:	4770      	bx	lr
	...

080060f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d165      	bne.n	80061d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4a41      	ldr	r2, [pc, #260]	; (8006214 <USB_SetTurnaroundTime+0x11c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d906      	bls.n	8006122 <USB_SetTurnaroundTime+0x2a>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4a40      	ldr	r2, [pc, #256]	; (8006218 <USB_SetTurnaroundTime+0x120>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d802      	bhi.n	8006122 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800611c:	230f      	movs	r3, #15
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e062      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4a3c      	ldr	r2, [pc, #240]	; (8006218 <USB_SetTurnaroundTime+0x120>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d906      	bls.n	8006138 <USB_SetTurnaroundTime+0x40>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4a3b      	ldr	r2, [pc, #236]	; (800621c <USB_SetTurnaroundTime+0x124>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d802      	bhi.n	8006138 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006132:	230e      	movs	r3, #14
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e057      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a38      	ldr	r2, [pc, #224]	; (800621c <USB_SetTurnaroundTime+0x124>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d906      	bls.n	800614e <USB_SetTurnaroundTime+0x56>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4a37      	ldr	r2, [pc, #220]	; (8006220 <USB_SetTurnaroundTime+0x128>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d802      	bhi.n	800614e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006148:	230d      	movs	r3, #13
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e04c      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4a33      	ldr	r2, [pc, #204]	; (8006220 <USB_SetTurnaroundTime+0x128>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d906      	bls.n	8006164 <USB_SetTurnaroundTime+0x6c>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4a32      	ldr	r2, [pc, #200]	; (8006224 <USB_SetTurnaroundTime+0x12c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d802      	bhi.n	8006164 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800615e:	230c      	movs	r3, #12
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e041      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <USB_SetTurnaroundTime+0x12c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d906      	bls.n	800617a <USB_SetTurnaroundTime+0x82>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <USB_SetTurnaroundTime+0x130>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d802      	bhi.n	800617a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006174:	230b      	movs	r3, #11
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e036      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <USB_SetTurnaroundTime+0x130>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d906      	bls.n	8006190 <USB_SetTurnaroundTime+0x98>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4a29      	ldr	r2, [pc, #164]	; (800622c <USB_SetTurnaroundTime+0x134>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d802      	bhi.n	8006190 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800618a:	230a      	movs	r3, #10
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e02b      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4a26      	ldr	r2, [pc, #152]	; (800622c <USB_SetTurnaroundTime+0x134>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d906      	bls.n	80061a6 <USB_SetTurnaroundTime+0xae>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4a25      	ldr	r2, [pc, #148]	; (8006230 <USB_SetTurnaroundTime+0x138>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d802      	bhi.n	80061a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80061a0:	2309      	movs	r3, #9
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e020      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4a21      	ldr	r2, [pc, #132]	; (8006230 <USB_SetTurnaroundTime+0x138>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d906      	bls.n	80061bc <USB_SetTurnaroundTime+0xc4>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4a20      	ldr	r2, [pc, #128]	; (8006234 <USB_SetTurnaroundTime+0x13c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d802      	bhi.n	80061bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80061b6:	2308      	movs	r3, #8
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e015      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <USB_SetTurnaroundTime+0x13c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d906      	bls.n	80061d2 <USB_SetTurnaroundTime+0xda>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	; (8006238 <USB_SetTurnaroundTime+0x140>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d802      	bhi.n	80061d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80061cc:	2307      	movs	r3, #7
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e00a      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80061d2:	2306      	movs	r3, #6
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	e007      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80061de:	2309      	movs	r3, #9
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e001      	b.n	80061e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80061e4:	2309      	movs	r3, #9
 80061e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	029b      	lsls	r3, r3, #10
 80061fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	00d8acbf 	.word	0x00d8acbf
 8006218:	00e4e1bf 	.word	0x00e4e1bf
 800621c:	00f423ff 	.word	0x00f423ff
 8006220:	0106737f 	.word	0x0106737f
 8006224:	011a499f 	.word	0x011a499f
 8006228:	01312cff 	.word	0x01312cff
 800622c:	014ca43f 	.word	0x014ca43f
 8006230:	016e35ff 	.word	0x016e35ff
 8006234:	01a6ab1f 	.word	0x01a6ab1f
 8006238:	01e847ff 	.word	0x01e847ff

0800623c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f043 0201 	orr.w	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 0201 	bic.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d106      	bne.n	80062ac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60da      	str	r2, [r3, #12]
 80062aa:	e00b      	b.n	80062c4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e001      	b.n	80062c4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e003      	b.n	80062cc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80062c4:	2032      	movs	r0, #50	; 0x32
 80062c6:	f7fa feb1 	bl	800102c <HAL_Delay>

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062d4:	b084      	sub	sp, #16
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b086      	sub	sp, #24
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	e009      	b.n	8006308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3340      	adds	r3, #64	; 0x40
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	3301      	adds	r3, #1
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b0e      	cmp	r3, #14
 800630c:	d9f2      	bls.n	80062f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800630e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d112      	bne.n	800633a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	639a      	str	r2, [r3, #56]	; 0x38
 8006338:	e00b      	b.n	8006352 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006358:	461a      	mov	r2, r3
 800635a:	2300      	movs	r3, #0
 800635c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	4619      	mov	r1, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636c:	461a      	mov	r2, r3
 800636e:	680b      	ldr	r3, [r1, #0]
 8006370:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	2b01      	cmp	r3, #1
 8006376:	d10c      	bne.n	8006392 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800637e:	2100      	movs	r1, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f961 	bl	8006648 <USB_SetDevSpeed>
 8006386:	e008      	b.n	800639a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006388:	2101      	movs	r1, #1
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f95c 	bl	8006648 <USB_SetDevSpeed>
 8006390:	e003      	b.n	800639a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006392:	2103      	movs	r1, #3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f957 	bl	8006648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800639a:	2110      	movs	r1, #16
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f90b 	bl	80065b8 <USB_FlushTxFifo>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f929 	bl	8006604 <USB_FlushRxFifo>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c2:	461a      	mov	r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	461a      	mov	r2, r3
 80063d0:	2300      	movs	r3, #0
 80063d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	461a      	mov	r2, r3
 80063dc:	2300      	movs	r3, #0
 80063de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e043      	b.n	800646e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fc:	d118      	bne.n	8006430 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e013      	b.n	8006442 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006426:	461a      	mov	r2, r3
 8006428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e008      	b.n	8006442 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	2300      	movs	r3, #0
 8006440:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	461a      	mov	r2, r3
 8006450:	2300      	movs	r3, #0
 8006452:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	461a      	mov	r2, r3
 8006462:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006466:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3301      	adds	r3, #1
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d3b7      	bcc.n	80063e6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	e043      	b.n	8006504 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800648e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006492:	d118      	bne.n	80064c6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e013      	b.n	80064d8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	461a      	mov	r2, r3
 80064be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e008      	b.n	80064d8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e4:	461a      	mov	r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	461a      	mov	r2, r3
 80064f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d3b7      	bcc.n	800647c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800651e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2b01      	cmp	r3, #1
 8006524:	d111      	bne.n	800654a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652c:	461a      	mov	r2, r3
 800652e:	4b20      	ldr	r3, [pc, #128]	; (80065b0 <USB_DevInit+0x2dc>)
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	f043 0303 	orr.w	r3, r3, #3
 8006548:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006556:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f043 0210 	orr.w	r2, r3, #16
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <USB_DevInit+0x2e0>)
 8006570:	4313      	orrs	r3, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f043 0208 	orr.w	r2, r3, #8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d107      	bne.n	800659e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006596:	f043 0304 	orr.w	r3, r3, #4
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065aa:	b004      	add	sp, #16
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	00800100 	.word	0x00800100
 80065b4:	803c3800 	.word	0x803c3800

080065b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	019b      	lsls	r3, r3, #6
 80065ca:	f043 0220 	orr.w	r2, r3, #32
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4a09      	ldr	r2, [pc, #36]	; (8006600 <USB_FlushTxFifo+0x48>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e006      	b.n	80065f2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d0f0      	beq.n	80065d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	00030d40 	.word	0x00030d40

08006604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2210      	movs	r2, #16
 8006614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <USB_FlushRxFifo+0x40>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d901      	bls.n	8006628 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e006      	b.n	8006636 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d0f0      	beq.n	8006616 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	00030d40 	.word	0x00030d40

08006648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0306 	and.w	r3, r3, #6
 8006692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
 800669e:	e00a      	b.n	80066b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d002      	beq.n	80066ac <USB_GetDevSpeed+0x32>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	d102      	bne.n	80066b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066ac:	2302      	movs	r3, #2
 80066ae:	75fb      	strb	r3, [r7, #23]
 80066b0:	e001      	b.n	80066b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066b2:	230f      	movs	r3, #15
 80066b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d13a      	bne.n	8006756 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	2101      	movs	r1, #1
 80066f2:	fa01 f303 	lsl.w	r3, r1, r3
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066fe:	4313      	orrs	r3, r2
 8006700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d155      	bne.n	80067c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	78db      	ldrb	r3, [r3, #3]
 8006732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	059b      	lsls	r3, r3, #22
 800673a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800673c:	4313      	orrs	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	440a      	add	r2, r1
 8006746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	e036      	b.n	80067c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	69da      	ldr	r2, [r3, #28]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	2101      	movs	r1, #1
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11a      	bne.n	80067c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	78db      	ldrb	r3, [r3, #3]
 80067a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067aa:	430b      	orrs	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
	...

080067d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d135      	bne.n	800685c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f303 	lsl.w	r3, r1, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006810:	4013      	ands	r3, r2
 8006812:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	2101      	movs	r1, #1
 8006826:	fa01 f303 	lsl.w	r3, r1, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	43db      	mvns	r3, r3
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006834:	4013      	ands	r3, r2
 8006836:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	0159      	lsls	r1, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	440b      	add	r3, r1
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	4619      	mov	r1, r3
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <USB_DeactivateEndpoint+0x100>)
 8006856:	4013      	ands	r3, r2
 8006858:	600b      	str	r3, [r1, #0]
 800685a:	e034      	b.n	80068c6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	2101      	movs	r1, #1
 800686e:	fa01 f303 	lsl.w	r3, r1, r3
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	43db      	mvns	r3, r3
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800687c:	4013      	ands	r3, r2
 800687e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	041b      	lsls	r3, r3, #16
 8006898:	43db      	mvns	r3, r3
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a0:	4013      	ands	r3, r2
 80068a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	0159      	lsls	r1, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	440b      	add	r3, r1
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	4619      	mov	r1, r3
 80068c0:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <USB_DeactivateEndpoint+0x104>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	ec337800 	.word	0xec337800
 80068d8:	eff37800 	.word	0xeff37800

080068dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	f040 815c 	bne.w	8006bb6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d132      	bne.n	800696c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	69fa      	ldr	r2, [r7, #28]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006964:	0cdb      	lsrs	r3, r3, #19
 8006966:	04db      	lsls	r3, r3, #19
 8006968:	6113      	str	r3, [r2, #16]
 800696a:	e074      	b.n	8006a56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006986:	0cdb      	lsrs	r3, r3, #19
 8006988:	04db      	lsls	r3, r3, #19
 800698a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6959      	ldr	r1, [r3, #20]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	440b      	add	r3, r1
 80069c8:	1e59      	subs	r1, r3, #1
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80069d2:	04d9      	lsls	r1, r3, #19
 80069d4:	4b9d      	ldr	r3, [pc, #628]	; (8006c4c <USB_EPStartXfer+0x370>)
 80069d6:	400b      	ands	r3, r1
 80069d8:	69b9      	ldr	r1, [r7, #24]
 80069da:	0148      	lsls	r0, r1, #5
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	4401      	add	r1, r0
 80069e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069e4:	4313      	orrs	r3, r2
 80069e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069fe:	69b9      	ldr	r1, [r7, #24]
 8006a00:	0148      	lsls	r0, r1, #5
 8006a02:	69f9      	ldr	r1, [r7, #28]
 8006a04:	4401      	add	r1, r0
 8006a06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	78db      	ldrb	r3, [r3, #3]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d11f      	bne.n	8006a56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d14b      	bne.n	8006af4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a70:	461a      	mov	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d128      	bne.n	8006ad2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d110      	bne.n	8006ab2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e00f      	b.n	8006ad2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e12f      	b.n	8006d54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	78db      	ldrb	r3, [r3, #3]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d015      	beq.n	8006b48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8117 	beq.w	8006d54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	2101      	movs	r1, #1
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	69f9      	ldr	r1, [r7, #28]
 8006b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b42:	4313      	orrs	r3, r2
 8006b44:	634b      	str	r3, [r1, #52]	; 0x34
 8006b46:	e105      	b.n	8006d54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d110      	bne.n	8006b7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e00f      	b.n	8006b9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	68d9      	ldr	r1, [r3, #12]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781a      	ldrb	r2, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	b298      	uxth	r0, r3
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4603      	mov	r3, r0
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fa2b 	bl	800700a <USB_WritePacket>
 8006bb4:	e0ce      	b.n	8006d54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd0:	0cdb      	lsrs	r3, r3, #19
 8006bd2:	04db      	lsls	r3, r3, #19
 8006bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bf8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d126      	bne.n	8006c50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c18:	69b9      	ldr	r1, [r7, #24]
 8006c1a:	0148      	lsls	r0, r1, #5
 8006c1c:	69f9      	ldr	r1, [r7, #28]
 8006c1e:	4401      	add	r1, r0
 8006c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c24:	4313      	orrs	r3, r2
 8006c26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c46:	6113      	str	r3, [r2, #16]
 8006c48:	e036      	b.n	8006cb8 <USB_EPStartXfer+0x3dc>
 8006c4a:	bf00      	nop
 8006c4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4413      	add	r3, r2
 8006c5a:	1e5a      	subs	r2, r3, #1
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	8afb      	ldrh	r3, [r7, #22]
 8006c76:	04d9      	lsls	r1, r3, #19
 8006c78:	4b39      	ldr	r3, [pc, #228]	; (8006d60 <USB_EPStartXfer+0x484>)
 8006c7a:	400b      	ands	r3, r1
 8006c7c:	69b9      	ldr	r1, [r7, #24]
 8006c7e:	0148      	lsls	r0, r1, #5
 8006c80:	69f9      	ldr	r1, [r7, #28]
 8006c82:	4401      	add	r1, r0
 8006c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	8af9      	ldrh	r1, [r7, #22]
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca8:	69b9      	ldr	r1, [r7, #24]
 8006caa:	0148      	lsls	r0, r1, #5
 8006cac:	69f9      	ldr	r1, [r7, #28]
 8006cae:	4401      	add	r1, r0
 8006cb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d10d      	bne.n	8006cda <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	68d9      	ldr	r1, [r3, #12]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	78db      	ldrb	r3, [r3, #3]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d128      	bne.n	8006d34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d110      	bne.n	8006d14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e00f      	b.n	8006d34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	1ff80000 	.word	0x1ff80000

08006d64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	f040 80cd 	bne.w	8006f20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d132      	bne.n	8006df4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dec:	0cdb      	lsrs	r3, r3, #19
 8006dee:	04db      	lsls	r3, r3, #19
 8006df0:	6113      	str	r3, [r2, #16]
 8006df2:	e04e      	b.n	8006e92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	0cdb      	lsrs	r3, r3, #19
 8006e10:	04db      	lsls	r3, r3, #19
 8006e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d903      	bls.n	8006e4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e82:	6939      	ldr	r1, [r7, #16]
 8006e84:	0148      	lsls	r0, r1, #5
 8006e86:	6979      	ldr	r1, [r7, #20]
 8006e88:	4401      	add	r1, r0
 8006e8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d11e      	bne.n	8006ed6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d009      	beq.n	8006eb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e092      	b.n	8006ffc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ef4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d07e      	beq.n	8006ffc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	2101      	movs	r1, #1
 8006f10:	fa01 f303 	lsl.w	r3, r1, r3
 8006f14:	6979      	ldr	r1, [r7, #20]
 8006f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	634b      	str	r3, [r1, #52]	; 0x34
 8006f1e:	e06d      	b.n	8006ffc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3a:	0cdb      	lsrs	r3, r3, #19
 8006f3c:	04db      	lsls	r3, r3, #19
 8006f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006faa:	6939      	ldr	r1, [r7, #16]
 8006fac:	0148      	lsls	r0, r1, #5
 8006fae:	6979      	ldr	r1, [r7, #20]
 8006fb0:	4401      	add	r1, r0
 8006fb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d10d      	bne.n	8006fdc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	68d9      	ldr	r1, [r3, #12]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd8:	460a      	mov	r2, r1
 8006fda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800700a:	b480      	push	{r7}
 800700c:	b089      	sub	sp, #36	; 0x24
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	4611      	mov	r1, r2
 8007016:	461a      	mov	r2, r3
 8007018:	460b      	mov	r3, r1
 800701a:	71fb      	strb	r3, [r7, #7]
 800701c:	4613      	mov	r3, r2
 800701e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11a      	bne.n	8007066 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007030:	88bb      	ldrh	r3, [r7, #4]
 8007032:	3303      	adds	r3, #3
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e00f      	b.n	800705e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	031a      	lsls	r2, r3, #12
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704a:	461a      	mov	r2, r3
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	3304      	adds	r3, #4
 8007056:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	3301      	adds	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	429a      	cmp	r2, r3
 8007064:	d3eb      	bcc.n	800703e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3724      	adds	r7, #36	; 0x24
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	3303      	adds	r3, #3
 800708e:	089b      	lsrs	r3, r3, #2
 8007090:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007092:	2300      	movs	r3, #0
 8007094:	61bb      	str	r3, [r7, #24]
 8007096:	e00b      	b.n	80070b0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3304      	adds	r3, #4
 80070a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	3301      	adds	r3, #1
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d3ef      	bcc.n	8007098 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80070b8:	69fb      	ldr	r3, [r7, #28]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3724      	adds	r7, #36	; 0x24
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d12c      	bne.n	800713c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	db12      	blt.n	800711a <USB_EPSetStall+0x54>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00f      	beq.n	800711a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007118:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	440a      	add	r2, r1
 8007130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	e02b      	b.n	8007194 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	db12      	blt.n	8007174 <USB_EPSetStall+0xae>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00f      	beq.n	8007174 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007172:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d128      	bne.n	8007210 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	78db      	ldrb	r3, [r3, #3]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d003      	beq.n	80071ee <USB_EPClearStall+0x4c>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d138      	bne.n	8007260 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e027      	b.n	8007260 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	440a      	add	r2, r1
 8007226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800722e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	78db      	ldrb	r3, [r3, #3]
 8007234:	2b03      	cmp	r3, #3
 8007236:	d003      	beq.n	8007240 <USB_EPClearStall+0x9e>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	78db      	ldrb	r3, [r3, #3]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d10f      	bne.n	8007260 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800728c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007290:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a8:	4313      	orrs	r3, r2
 80072aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d4:	f023 0302 	bic.w	r3, r3, #2
 80072d8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80072da:	2003      	movs	r0, #3
 80072dc:	f7f9 fea6 	bl	800102c <HAL_Delay>

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800730a:	2003      	movs	r0, #3
 800730c:	f7f9 fe8e 	bl	800102c <HAL_Delay>

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4013      	ands	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	4013      	ands	r3, r2
 8007362:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	0c1b      	lsrs	r3, r3, #16
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	4013      	ands	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	b29b      	uxth	r3, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	4013      	ands	r3, r2
 80073d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073d6:	68bb      	ldr	r3, [r7, #8]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	01db      	lsls	r3, r3, #7
 8007416:	b2db      	uxtb	r3, r3
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4013      	ands	r3, r2
 8007430:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007432:	68bb      	ldr	r3, [r7, #8]
}
 8007434:	4618      	mov	r0, r3
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f003 0301 	and.w	r3, r3, #1
}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007476:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 0306 	and.w	r3, r3, #6
 800748c:	2b04      	cmp	r3, #4
 800748e:	d109      	bne.n	80074a4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f043 0303 	orr.w	r3, r3, #3
 80074a2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	460b      	mov	r3, r1
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	333c      	adds	r3, #60	; 0x3c
 80074de:	3304      	adds	r3, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4a26      	ldr	r2, [pc, #152]	; (8007580 <USB_EP0_OutStart+0xb8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d90a      	bls.n	8007502 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074fc:	d101      	bne.n	8007502 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	e037      	b.n	8007572 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007508:	461a      	mov	r2, r3
 800750a:	2300      	movs	r3, #0
 800750c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007530:	f043 0318 	orr.w	r3, r3, #24
 8007534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007544:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007548:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10f      	bne.n	8007570 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007556:	461a      	mov	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800756e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	4f54300a 	.word	0x4f54300a

08007584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <USB_CoreReset+0x64>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d901      	bls.n	80075a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e01b      	b.n	80075da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	daf2      	bge.n	8007590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f043 0201 	orr.w	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <USB_CoreReset+0x64>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d901      	bls.n	80075cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e006      	b.n	80075da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d0f0      	beq.n	80075ba <USB_CoreReset+0x36>

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	00030d40 	.word	0x00030d40

080075ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7c1b      	ldrb	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d115      	bne.n	8007630 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007608:	2202      	movs	r2, #2
 800760a:	2181      	movs	r1, #129	; 0x81
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f003 fa1a 	bl	800aa46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761c:	2202      	movs	r2, #2
 800761e:	2101      	movs	r1, #1
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f003 fa10 	bl	800aa46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800762e:	e012      	b.n	8007656 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	2202      	movs	r2, #2
 8007634:	2181      	movs	r1, #129	; 0x81
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f003 fa05 	bl	800aa46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	2202      	movs	r2, #2
 8007646:	2101      	movs	r1, #1
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f003 f9fc 	bl	800aa46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007656:	2308      	movs	r3, #8
 8007658:	2203      	movs	r2, #3
 800765a:	2182      	movs	r1, #130	; 0x82
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f003 f9f2 	bl	800aa46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007668:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800766c:	f003 fca0 	bl	800afb0 <malloc>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007684:	2301      	movs	r3, #1
 8007686:	73fb      	strb	r3, [r7, #15]
 8007688:	e026      	b.n	80076d8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007690:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7c1b      	ldrb	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076be:	2101      	movs	r1, #1
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f003 fab1 	bl	800ac28 <USBD_LL_PrepareReceive>
 80076c6:	e007      	b.n	80076d8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ce:	2340      	movs	r3, #64	; 0x40
 80076d0:	2101      	movs	r1, #1
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f003 faa8 	bl	800ac28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80076f2:	2181      	movs	r1, #129	; 0x81
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f003 f9cc 	bl	800aa92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007700:	2101      	movs	r1, #1
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f003 f9c5 	bl	800aa92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007710:	2182      	movs	r1, #130	; 0x82
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f003 f9bd 	bl	800aa92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007738:	4618      	mov	r0, r3
 800773a:	f003 fc41 	bl	800afc0 <free>
    pdev->pClassData = NULL;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007760:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007776:	2b00      	cmp	r3, #0
 8007778:	d039      	beq.n	80077ee <USBD_CDC_Setup+0x9e>
 800777a:	2b20      	cmp	r3, #32
 800777c:	d17c      	bne.n	8007878 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d029      	beq.n	80077da <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b25b      	sxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	da11      	bge.n	80077b4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800779c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	88d2      	ldrh	r2, [r2, #6]
 80077a2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077a4:	6939      	ldr	r1, [r7, #16]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	88db      	ldrh	r3, [r3, #6]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 f9c9 	bl	8008b44 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80077b2:	e068      	b.n	8007886 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	785a      	ldrb	r2, [r3, #1]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88db      	ldrh	r3, [r3, #6]
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077ca:	6939      	ldr	r1, [r7, #16]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	88db      	ldrh	r3, [r3, #6]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f9e4 	bl	8008ba0 <USBD_CtlPrepareRx>
    break;
 80077d8:	e055      	b.n	8007886 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	7850      	ldrb	r0, [r2, #1]
 80077e6:	2200      	movs	r2, #0
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	4798      	blx	r3
    break;
 80077ec:	e04b      	b.n	8007886 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b0a      	cmp	r3, #10
 80077f4:	d017      	beq.n	8007826 <USBD_CDC_Setup+0xd6>
 80077f6:	2b0b      	cmp	r3, #11
 80077f8:	d029      	beq.n	800784e <USBD_CDC_Setup+0xfe>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d133      	bne.n	8007866 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007804:	2b03      	cmp	r3, #3
 8007806:	d107      	bne.n	8007818 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	2202      	movs	r2, #2
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f997 	bl	8008b44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007816:	e02e      	b.n	8007876 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 f927 	bl	8008a6e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007820:	2302      	movs	r3, #2
 8007822:	75fb      	strb	r3, [r7, #23]
      break;
 8007824:	e027      	b.n	8007876 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800782c:	2b03      	cmp	r3, #3
 800782e:	d107      	bne.n	8007840 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007830:	f107 030f 	add.w	r3, r7, #15
 8007834:	2201      	movs	r2, #1
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 f983 	bl	8008b44 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800783e:	e01a      	b.n	8007876 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f913 	bl	8008a6e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007848:	2302      	movs	r3, #2
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	e013      	b.n	8007876 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007854:	2b03      	cmp	r3, #3
 8007856:	d00d      	beq.n	8007874 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 f907 	bl	8008a6e <USBD_CtlError>
			  ret = USBD_FAIL;
 8007860:	2302      	movs	r3, #2
 8007862:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007864:	e006      	b.n	8007874 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f900 	bl	8008a6e <USBD_CtlError>
      ret = USBD_FAIL;
 800786e:	2302      	movs	r3, #2
 8007870:	75fb      	strb	r3, [r7, #23]
      break;
 8007872:	e000      	b.n	8007876 <USBD_CDC_Setup+0x126>
      break;
 8007874:	bf00      	nop
    }
    break;
 8007876:	e006      	b.n	8007886 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 f8f7 	bl	8008a6e <USBD_CtlError>
    ret = USBD_FAIL;
 8007880:	2302      	movs	r3, #2
 8007882:	75fb      	strb	r3, [r7, #23]
    break;
 8007884:	bf00      	nop
  }

  return ret;
 8007886:	7dfb      	ldrb	r3, [r7, #23]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80078aa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d03a      	beq.n	800792c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	331c      	adds	r3, #28
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d029      	beq.n	8007920 <USBD_CDC_DataIn+0x90>
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	331c      	adds	r3, #28
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	78f9      	ldrb	r1, [r7, #3]
 80078e0:	68b8      	ldr	r0, [r7, #8]
 80078e2:	460b      	mov	r3, r1
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	1a5b      	subs	r3, r3, r1
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4403      	add	r3, r0
 80078ec:	3344      	adds	r3, #68	; 0x44
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80078f4:	fb03 f301 	mul.w	r3, r3, r1
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80078fe:	78fa      	ldrb	r2, [r7, #3]
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	331c      	adds	r3, #28
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007912:	78f9      	ldrb	r1, [r7, #3]
 8007914:	2300      	movs	r3, #0
 8007916:	2200      	movs	r2, #0
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f003 f962 	bl	800abe2 <USBD_LL_Transmit>
 800791e:	e003      	b.n	8007928 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	e000      	b.n	800792e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007948:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800794a:	78fb      	ldrb	r3, [r7, #3]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f003 f98d 	bl	800ac6e <USBD_LL_GetRxDataSize>
 8007954:	4602      	mov	r2, r0
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800797a:	4611      	mov	r1, r2
 800797c:	4798      	blx	r3

    return USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	e000      	b.n	8007984 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007982:	2302      	movs	r3, #2
  }
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800799a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d015      	beq.n	80079d2 <USBD_CDC_EP0_RxReady+0x46>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079ac:	2bff      	cmp	r3, #255	; 0xff
 80079ae:	d010      	beq.n	80079d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80079be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80079c6:	b292      	uxth	r2, r2
 80079c8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	22ff      	movs	r2, #255	; 0xff
 80079ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2243      	movs	r2, #67	; 0x43
 80079e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80079ea:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	20000090 	.word	0x20000090

080079fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2243      	movs	r2, #67	; 0x43
 8007a08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a0a:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	2000004c 	.word	0x2000004c

08007a1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2243      	movs	r2, #67	; 0x43
 8007a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	200000d4 	.word	0x200000d4

08007a3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	220a      	movs	r2, #10
 8007a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007a4a:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	20000008 	.word	0x20000008

08007a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a66:	2302      	movs	r3, #2
 8007a68:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	4613      	mov	r3, r2
 8007a96:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a9e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ace:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007af4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01c      	beq.n	8007b3a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d115      	bne.n	8007b36 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2181      	movs	r1, #129	; 0x81
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f003 f858 	bl	800abe2 <USBD_LL_Transmit>

      return USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	e002      	b.n	8007b3c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b3a:	2302      	movs	r3, #2
  }
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7c1b      	ldrb	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b70:	2101      	movs	r1, #1
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f003 f858 	bl	800ac28 <USBD_LL_PrepareReceive>
 8007b78:	e007      	b.n	8007b8a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b80:	2340      	movs	r3, #64	; 0x40
 8007b82:	2101      	movs	r1, #1
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f003 f84f 	bl	800ac28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e000      	b.n	8007b90 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b8e:	2302      	movs	r3, #2
  }
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bac:	2302      	movs	r3, #2
 8007bae:	e01a      	b.n	8007be6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	79fa      	ldrb	r2, [r7, #7]
 8007bdc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f002 feca 	bl	800a978 <USBD_LL_Init>

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	e001      	b.n	8007c14 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c10:	2302      	movs	r3, #2
 8007c12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f002 fef0 	bl	800aa10 <USBD_LL_Start>

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00c      	beq.n	8007c84 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	4611      	mov	r1, r2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fe94 	bl	80089f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d00c      	beq.n	8007d0a <USBD_LL_SetupStage+0x56>
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d302      	bcc.n	8007cfa <USBD_LL_SetupStage+0x46>
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d010      	beq.n	8007d1a <USBD_LL_SetupStage+0x66>
 8007cf8:	e017      	b.n	8007d2a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa04 	bl	8008110 <USBD_StdDevReq>
    break;
 8007d08:	e01a      	b.n	8007d40 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa66 	bl	80081e4 <USBD_StdItfReq>
    break;
 8007d18:	e012      	b.n	8007d40 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 faa4 	bl	8008270 <USBD_StdEPReq>
    break;
 8007d28:	e00a      	b.n	8007d40 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007d30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f002 fec9 	bl	800aad0 <USBD_LL_StallEP>
    break;
 8007d3e:	bf00      	nop
  }

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b086      	sub	sp, #24
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	460b      	mov	r3, r1
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d14b      	bne.n	8007df6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d64:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d134      	bne.n	8007dda <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d919      	bls.n	8007db0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	1ad2      	subs	r2, r2, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d203      	bcs.n	8007d9e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	e002      	b.n	8007da4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	461a      	mov	r2, r3
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 ff17 	bl	8008bdc <USBD_CtlContinueRx>
 8007dae:	e038      	b.n	8007e22 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d105      	bne.n	8007dd2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 ff14 	bl	8008c00 <USBD_CtlSendStatus>
 8007dd8:	e023      	b.n	8007e22 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007de0:	2b05      	cmp	r3, #5
 8007de2:	d11e      	bne.n	8007e22 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f002 fe6e 	bl	800aad0 <USBD_LL_StallEP>
 8007df4:	e015      	b.n	8007e22 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00d      	beq.n	8007e1e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d108      	bne.n	8007e1e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	7afa      	ldrb	r2, [r7, #11]
 8007e16:	4611      	mov	r1, r2
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	4798      	blx	r3
 8007e1c:	e001      	b.n	8007e22 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e000      	b.n	8007e24 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	460b      	mov	r3, r1
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d17f      	bne.n	8007f40 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3314      	adds	r3, #20
 8007e44:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d15c      	bne.n	8007f0a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d915      	bls.n	8007e88 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	1ad2      	subs	r2, r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 fe81 	bl	8008b7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f002 fed1 	bl	800ac28 <USBD_LL_PrepareReceive>
 8007e86:	e04e      	b.n	8007f26 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	6912      	ldr	r2, [r2, #16]
 8007e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e94:	fb02 f201 	mul.w	r2, r2, r1
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d11c      	bne.n	8007ed8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d316      	bcc.n	8007ed8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d20f      	bcs.n	8007ed8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fe5d 	bl	8008b7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f002 fea9 	bl	800ac28 <USBD_LL_PrepareReceive>
 8007ed6:	e026      	b.n	8007f26 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d105      	bne.n	8007efa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007efa:	2180      	movs	r1, #128	; 0x80
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f002 fde7 	bl	800aad0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 fe8f 	bl	8008c26 <USBD_CtlReceiveStatus>
 8007f08:	e00d      	b.n	8007f26 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d004      	beq.n	8007f1e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d103      	bne.n	8007f26 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f1e:	2180      	movs	r1, #128	; 0x80
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f002 fdd5 	bl	800aad0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d11d      	bne.n	8007f6c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff fe82 	bl	8007c3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8007f3e:	e015      	b.n	8007f6c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00d      	beq.n	8007f68 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d108      	bne.n	8007f68 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	7afa      	ldrb	r2, [r7, #11]
 8007f60:	4611      	mov	r1, r2
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	4798      	blx	r3
 8007f66:	e001      	b.n	8007f6c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e000      	b.n	8007f6e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	2200      	movs	r2, #0
 8007f82:	2100      	movs	r1, #0
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f002 fd5e 	bl	800aa46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2240      	movs	r2, #64	; 0x40
 8007f96:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f9a:	2340      	movs	r3, #64	; 0x40
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2180      	movs	r1, #128	; 0x80
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f002 fd50 	bl	800aa46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2240      	movs	r2, #64	; 0x40
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d009      	beq.n	8007fee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6852      	ldr	r2, [r2, #4]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	4611      	mov	r1, r2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
  }

  return USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2204      	movs	r2, #4
 8008030:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008072:	2b03      	cmp	r3, #3
 8008074:	d10b      	bne.n	800808e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6852      	ldr	r2, [r2, #4]
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	4611      	mov	r1, r2
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3

  return USBD_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008126:	2b20      	cmp	r3, #32
 8008128:	d004      	beq.n	8008134 <USBD_StdDevReq+0x24>
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d002      	beq.n	8008134 <USBD_StdDevReq+0x24>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <USBD_StdDevReq+0x34>
 8008132:	e04c      	b.n	80081ce <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
    break;
 8008142:	e049      	b.n	80081d8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b09      	cmp	r3, #9
 800814a:	d83a      	bhi.n	80081c2 <USBD_StdDevReq+0xb2>
 800814c:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <USBD_StdDevReq+0x44>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	080081a5 	.word	0x080081a5
 8008158:	080081b9 	.word	0x080081b9
 800815c:	080081c3 	.word	0x080081c3
 8008160:	080081af 	.word	0x080081af
 8008164:	080081c3 	.word	0x080081c3
 8008168:	08008187 	.word	0x08008187
 800816c:	0800817d 	.word	0x0800817d
 8008170:	080081c3 	.word	0x080081c3
 8008174:	0800819b 	.word	0x0800819b
 8008178:	08008191 	.word	0x08008191
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9d2 	bl	8008528 <USBD_GetDescriptor>
      break;
 8008184:	e022      	b.n	80081cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fac7 	bl	800871c <USBD_SetAddress>
      break;
 800818e:	e01d      	b.n	80081cc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fb04 	bl	80087a0 <USBD_SetConfig>
      break;
 8008198:	e018      	b.n	80081cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fb8d 	bl	80088bc <USBD_GetConfig>
      break;
 80081a2:	e013      	b.n	80081cc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fbbc 	bl	8008924 <USBD_GetStatus>
      break;
 80081ac:	e00e      	b.n	80081cc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fbea 	bl	800898a <USBD_SetFeature>
      break;
 80081b6:	e009      	b.n	80081cc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fbf9 	bl	80089b2 <USBD_ClrFeature>
      break;
 80081c0:	e004      	b.n	80081cc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fc52 	bl	8008a6e <USBD_CtlError>
      break;
 80081ca:	bf00      	nop
    }
    break;
 80081cc:	e004      	b.n	80081d8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc4c 	bl	8008a6e <USBD_CtlError>
    break;
 80081d6:	bf00      	nop
  }

  return ret;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop

080081e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d003      	beq.n	8008206 <USBD_StdItfReq+0x22>
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d001      	beq.n	8008206 <USBD_StdItfReq+0x22>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d12a      	bne.n	800825c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800820c:	3b01      	subs	r3, #1
 800820e:	2b02      	cmp	r3, #2
 8008210:	d81d      	bhi.n	800824e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b01      	cmp	r3, #1
 800821a:	d813      	bhi.n	8008244 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d110      	bne.n	8008258 <USBD_StdItfReq+0x74>
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10d      	bne.n	8008258 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fcdf 	bl	8008c00 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008242:	e009      	b.n	8008258 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fc11 	bl	8008a6e <USBD_CtlError>
      break;
 800824c:	e004      	b.n	8008258 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fc0c 	bl	8008a6e <USBD_CtlError>
      break;
 8008256:	e000      	b.n	800825a <USBD_StdItfReq+0x76>
      break;
 8008258:	bf00      	nop
    }
    break;
 800825a:	e004      	b.n	8008266 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fc05 	bl	8008a6e <USBD_CtlError>
    break;
 8008264:	bf00      	nop
  }

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	889b      	ldrh	r3, [r3, #4]
 8008282:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800828c:	2b20      	cmp	r3, #32
 800828e:	d004      	beq.n	800829a <USBD_StdEPReq+0x2a>
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d002      	beq.n	800829a <USBD_StdEPReq+0x2a>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <USBD_StdEPReq+0x3a>
 8008298:	e13b      	b.n	8008512 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    break;
 80082a8:	e138      	b.n	800851c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d10a      	bne.n	80082cc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

      return ret;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	e128      	b.n	800851e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d03e      	beq.n	8008352 <USBD_StdEPReq+0xe2>
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d002      	beq.n	80082de <USBD_StdEPReq+0x6e>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d070      	beq.n	80083be <USBD_StdEPReq+0x14e>
 80082dc:	e113      	b.n	8008506 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d002      	beq.n	80082ee <USBD_StdEPReq+0x7e>
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d015      	beq.n	8008318 <USBD_StdEPReq+0xa8>
 80082ec:	e02b      	b.n	8008346 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00c      	beq.n	800830e <USBD_StdEPReq+0x9e>
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	2b80      	cmp	r3, #128	; 0x80
 80082f8:	d009      	beq.n	800830e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f002 fbe6 	bl	800aad0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008304:	2180      	movs	r1, #128	; 0x80
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f002 fbe2 	bl	800aad0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800830c:	e020      	b.n	8008350 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fbac 	bl	8008a6e <USBD_CtlError>
        break;
 8008316:	e01b      	b.n	8008350 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10e      	bne.n	800833e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <USBD_StdEPReq+0xce>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d008      	beq.n	800833e <USBD_StdEPReq+0xce>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	88db      	ldrh	r3, [r3, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d104      	bne.n	800833e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f002 fbc9 	bl	800aad0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fc5e 	bl	8008c00 <USBD_CtlSendStatus>

        break;
 8008344:	e004      	b.n	8008350 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fb90 	bl	8008a6e <USBD_CtlError>
        break;
 800834e:	bf00      	nop
      }
      break;
 8008350:	e0de      	b.n	8008510 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008358:	2b02      	cmp	r3, #2
 800835a:	d002      	beq.n	8008362 <USBD_StdEPReq+0xf2>
 800835c:	2b03      	cmp	r3, #3
 800835e:	d015      	beq.n	800838c <USBD_StdEPReq+0x11c>
 8008360:	e026      	b.n	80083b0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00c      	beq.n	8008382 <USBD_StdEPReq+0x112>
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d009      	beq.n	8008382 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f002 fbac 	bl	800aad0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008378:	2180      	movs	r1, #128	; 0x80
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f002 fba8 	bl	800aad0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008380:	e01c      	b.n	80083bc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fb72 	bl	8008a6e <USBD_CtlError>
        break;
 800838a:	e017      	b.n	80083bc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d112      	bne.n	80083ba <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	2b00      	cmp	r3, #0
 800839c:	d004      	beq.n	80083a8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f002 fbb3 	bl	800ab0e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc29 	bl	8008c00 <USBD_CtlSendStatus>
        }
        break;
 80083ae:	e004      	b.n	80083ba <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fb5b 	bl	8008a6e <USBD_CtlError>
        break;
 80083b8:	e000      	b.n	80083bc <USBD_StdEPReq+0x14c>
        break;
 80083ba:	bf00      	nop
      }
      break;
 80083bc:	e0a8      	b.n	8008510 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d002      	beq.n	80083ce <USBD_StdEPReq+0x15e>
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d031      	beq.n	8008430 <USBD_StdEPReq+0x1c0>
 80083cc:	e095      	b.n	80084fa <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <USBD_StdEPReq+0x174>
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b80      	cmp	r3, #128	; 0x80
 80083d8:	d004      	beq.n	80083e4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb46 	bl	8008a6e <USBD_CtlError>
          break;
 80083e2:	e08f      	b.n	8008504 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80083e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	da0b      	bge.n	8008404 <USBD_StdEPReq+0x194>
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	3310      	adds	r3, #16
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	4413      	add	r3, r2
 8008400:	3304      	adds	r3, #4
 8008402:	e00a      	b.n	800841a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800840a:	4613      	mov	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4413      	add	r3, r2
 800841a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2202      	movs	r2, #2
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fb8b 	bl	8008b44 <USBD_CtlSendData>
          break;
 800842e:	e069      	b.n	8008504 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008434:	2b00      	cmp	r3, #0
 8008436:	da11      	bge.n	800845c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	f003 020f 	and.w	r2, r3, #15
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	440b      	add	r3, r1
 800844a:	3318      	adds	r3, #24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d117      	bne.n	8008482 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fb0a 	bl	8008a6e <USBD_CtlError>
            break;
 800845a:	e053      	b.n	8008504 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	f003 020f 	and.w	r2, r3, #15
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 faf7 	bl	8008a6e <USBD_CtlError>
            break;
 8008480:	e040      	b.n	8008504 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008486:	2b00      	cmp	r3, #0
 8008488:	da0b      	bge.n	80084a2 <USBD_StdEPReq+0x232>
 800848a:	7bbb      	ldrb	r3, [r7, #14]
 800848c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	3310      	adds	r3, #16
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	3304      	adds	r3, #4
 80084a0:	e00a      	b.n	80084b8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4413      	add	r3, r2
 80084b8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <USBD_StdEPReq+0x256>
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	d103      	bne.n	80084ce <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	e00e      	b.n	80084ec <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f002 fb3a 	bl	800ab4c <USBD_LL_IsStallEP>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e002      	b.n	80084ec <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2202      	movs	r2, #2
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb26 	bl	8008b44 <USBD_CtlSendData>
          break;
 80084f8:	e004      	b.n	8008504 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fab6 	bl	8008a6e <USBD_CtlError>
        break;
 8008502:	bf00      	nop
      }
      break;
 8008504:	e004      	b.n	8008510 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fab0 	bl	8008a6e <USBD_CtlError>
      break;
 800850e:	bf00      	nop
    }
    break;
 8008510:	e004      	b.n	800851c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 faaa 	bl	8008a6e <USBD_CtlError>
    break;
 800851a:	bf00      	nop
  }

  return ret;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	2b06      	cmp	r3, #6
 800853e:	f200 80c9 	bhi.w	80086d4 <USBD_GetDescriptor+0x1ac>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <USBD_GetDescriptor+0x20>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008565 	.word	0x08008565
 800854c:	0800857d 	.word	0x0800857d
 8008550:	080085bd 	.word	0x080085bd
 8008554:	080086d5 	.word	0x080086d5
 8008558:	080086d5 	.word	0x080086d5
 800855c:	08008681 	.word	0x08008681
 8008560:	080086a7 	.word	0x080086a7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	7c12      	ldrb	r2, [r2, #16]
 8008570:	f107 010a 	add.w	r1, r7, #10
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
    break;
 800857a:	e0b0      	b.n	80086de <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7c1b      	ldrb	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10d      	bne.n	80085a0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	f107 020a 	add.w	r2, r7, #10
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800859e:	e09e      	b.n	80086de <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	f107 020a 	add.w	r2, r7, #10
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
    break;
 80085ba:	e090      	b.n	80086de <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	d856      	bhi.n	8008674 <USBD_GetDescriptor+0x14c>
 80085c6:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <USBD_GetDescriptor+0xa4>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	080085e5 	.word	0x080085e5
 80085d0:	080085fd 	.word	0x080085fd
 80085d4:	08008615 	.word	0x08008615
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	08008645 	.word	0x08008645
 80085e0:	0800865d 	.word	0x0800865d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 010a 	add.w	r1, r7, #10
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
      break;
 80085fa:	e040      	b.n	800867e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 010a 	add.w	r1, r7, #10
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
      break;
 8008612:	e034      	b.n	800867e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7c12      	ldrb	r2, [r2, #16]
 8008620:	f107 010a 	add.w	r1, r7, #10
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
      break;
 800862a:	e028      	b.n	800867e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 010a 	add.w	r1, r7, #10
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
      break;
 8008642:	e01c      	b.n	800867e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7c12      	ldrb	r2, [r2, #16]
 8008650:	f107 010a 	add.w	r1, r7, #10
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
      break;
 800865a:	e010      	b.n	800867e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 010a 	add.w	r1, r7, #10
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
      break;
 8008672:	e004      	b.n	800867e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f9f9 	bl	8008a6e <USBD_CtlError>
      return;
 800867c:	e04b      	b.n	8008716 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800867e:	e02e      	b.n	80086de <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7c1b      	ldrb	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	f107 020a 	add.w	r2, r7, #10
 8008694:	4610      	mov	r0, r2
 8008696:	4798      	blx	r3
 8008698:	60f8      	str	r0, [r7, #12]
      break;
 800869a:	e020      	b.n	80086de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9e5 	bl	8008a6e <USBD_CtlError>
      return;
 80086a4:	e037      	b.n	8008716 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7c1b      	ldrb	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10d      	bne.n	80086ca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	f107 020a 	add.w	r2, r7, #10
 80086ba:	4610      	mov	r0, r2
 80086bc:	4798      	blx	r3
 80086be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	2207      	movs	r2, #7
 80086c6:	701a      	strb	r2, [r3, #0]
      break;
 80086c8:	e009      	b.n	80086de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f9ce 	bl	8008a6e <USBD_CtlError>
      return;
 80086d2:	e020      	b.n	8008716 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f9c9 	bl	8008a6e <USBD_CtlError>
    return;
 80086dc:	e01b      	b.n	8008716 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80086de:	897b      	ldrh	r3, [r7, #10]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d011      	beq.n	8008708 <USBD_GetDescriptor+0x1e0>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00d      	beq.n	8008708 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	88da      	ldrh	r2, [r3, #6]
 80086f0:	897b      	ldrh	r3, [r7, #10]
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bf28      	it	cs
 80086f6:	4613      	movcs	r3, r2
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80086fc:	897b      	ldrh	r3, [r7, #10]
 80086fe:	461a      	mov	r2, r3
 8008700:	68f9      	ldr	r1, [r7, #12]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa1e 	bl	8008b44 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	88db      	ldrh	r3, [r3, #6]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa75 	bl	8008c00 <USBD_CtlSendStatus>
  }
}
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	889b      	ldrh	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d130      	bne.n	8008790 <USBD_SetAddress+0x74>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	88db      	ldrh	r3, [r3, #6]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d12c      	bne.n	8008790 <USBD_SetAddress+0x74>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b7f      	cmp	r3, #127	; 0x7f
 800873c:	d828      	bhi.n	8008790 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	885b      	ldrh	r3, [r3, #2]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008748:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008750:	2b03      	cmp	r3, #3
 8008752:	d104      	bne.n	800875e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f989 	bl	8008a6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875c:	e01c      	b.n	8008798 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7bfa      	ldrb	r2, [r7, #15]
 8008762:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 fa1a 	bl	800aba4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fa45 	bl	8008c00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008784:	e008      	b.n	8008798 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	e003      	b.n	8008798 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f96b 	bl	8008a6e <USBD_CtlError>
  }
}
 8008798:	bf00      	nop
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	4b41      	ldr	r3, [pc, #260]	; (80088b8 <USBD_SetConfig+0x118>)
 80087b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087b4:	4b40      	ldr	r3, [pc, #256]	; (80088b8 <USBD_SetConfig+0x118>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d904      	bls.n	80087c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f955 	bl	8008a6e <USBD_CtlError>
 80087c4:	e075      	b.n	80088b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d002      	beq.n	80087d6 <USBD_SetConfig+0x36>
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d023      	beq.n	800881c <USBD_SetConfig+0x7c>
 80087d4:	e062      	b.n	800889c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80087d6:	4b38      	ldr	r3, [pc, #224]	; (80088b8 <USBD_SetConfig+0x118>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01a      	beq.n	8008814 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80087de:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <USBD_SetConfig+0x118>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2203      	movs	r2, #3
 80087ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087f0:	4b31      	ldr	r3, [pc, #196]	; (80088b8 <USBD_SetConfig+0x118>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff fa2a 	bl	8007c50 <USBD_SetClassConfig>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d104      	bne.n	800880c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f932 	bl	8008a6e <USBD_CtlError>
          return;
 800880a:	e052      	b.n	80088b2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f9f7 	bl	8008c00 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008812:	e04e      	b.n	80088b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f9f3 	bl	8008c00 <USBD_CtlSendStatus>
      break;
 800881a:	e04a      	b.n	80088b2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800881c:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <USBD_SetConfig+0x118>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d112      	bne.n	800884a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800882c:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <USBD_SetConfig+0x118>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008836:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <USBD_SetConfig+0x118>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff fa26 	bl	8007c8e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f9dc 	bl	8008c00 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008848:	e033      	b.n	80088b2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800884a:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <USBD_SetConfig+0x118>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d01d      	beq.n	8008894 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff fa14 	bl	8007c8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008866:	4b14      	ldr	r3, [pc, #80]	; (80088b8 <USBD_SetConfig+0x118>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008870:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <USBD_SetConfig+0x118>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff f9ea 	bl	8007c50 <USBD_SetClassConfig>
 800887c:	4603      	mov	r3, r0
 800887e:	2b02      	cmp	r3, #2
 8008880:	d104      	bne.n	800888c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f8f2 	bl	8008a6e <USBD_CtlError>
          return;
 800888a:	e012      	b.n	80088b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f9b7 	bl	8008c00 <USBD_CtlSendStatus>
      break;
 8008892:	e00e      	b.n	80088b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f9b3 	bl	8008c00 <USBD_CtlSendStatus>
      break;
 800889a:	e00a      	b.n	80088b2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f8e5 	bl	8008a6e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <USBD_SetConfig+0x118>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff f9ef 	bl	8007c8e <USBD_ClrClassConfig>
      break;
 80088b0:	bf00      	nop
    }
  }
}
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20000370 	.word	0x20000370

080088bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d004      	beq.n	80088d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8cc 	bl	8008a6e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80088d6:	e021      	b.n	800891c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80088de:	2b01      	cmp	r3, #1
 80088e0:	db17      	blt.n	8008912 <USBD_GetConfig+0x56>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	dd02      	ble.n	80088ec <USBD_GetConfig+0x30>
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d00b      	beq.n	8008902 <USBD_GetConfig+0x46>
 80088ea:	e012      	b.n	8008912 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3308      	adds	r3, #8
 80088f6:	2201      	movs	r2, #1
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f922 	bl	8008b44 <USBD_CtlSendData>
      break;
 8008900:	e00c      	b.n	800891c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3304      	adds	r3, #4
 8008906:	2201      	movs	r2, #1
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f91a 	bl	8008b44 <USBD_CtlSendData>
      break;
 8008910:	e004      	b.n	800891c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f8aa 	bl	8008a6e <USBD_CtlError>
      break;
 800891a:	bf00      	nop
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008934:	3b01      	subs	r3, #1
 8008936:	2b02      	cmp	r3, #2
 8008938:	d81e      	bhi.n	8008978 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88db      	ldrh	r3, [r3, #6]
 800893e:	2b02      	cmp	r3, #2
 8008940:	d004      	beq.n	800894c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f892 	bl	8008a6e <USBD_CtlError>
      break;
 800894a:	e01a      	b.n	8008982 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d005      	beq.n	8008968 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f043 0202 	orr.w	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	330c      	adds	r3, #12
 800896c:	2202      	movs	r2, #2
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f8e7 	bl	8008b44 <USBD_CtlSendData>
    break;
 8008976:	e004      	b.n	8008982 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f877 	bl	8008a6e <USBD_CtlError>
    break;
 8008980:	bf00      	nop
  }
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	885b      	ldrh	r3, [r3, #2]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d106      	bne.n	80089aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f92b 	bl	8008c00 <USBD_CtlSendStatus>
  }

}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80089c2:	3b01      	subs	r3, #1
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d80b      	bhi.n	80089e0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	885b      	ldrh	r3, [r3, #2]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d10c      	bne.n	80089ea <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f911 	bl	8008c00 <USBD_CtlSendStatus>
    }
    break;
 80089de:	e004      	b.n	80089ea <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f843 	bl	8008a6e <USBD_CtlError>
    break;
 80089e8:	e000      	b.n	80089ec <USBD_ClrFeature+0x3a>
    break;
 80089ea:	bf00      	nop
  }
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781a      	ldrb	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	785a      	ldrb	r2, [r3, #1]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	3302      	adds	r3, #2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	3305      	adds	r3, #5
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	4413      	add	r3, r2
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	3306      	adds	r3, #6
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	3307      	adds	r3, #7
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	80da      	strh	r2, [r3, #6]

}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008a78:	2180      	movs	r1, #128	; 0x80
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 f828 	bl	800aad0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f002 f824 	bl	800aad0 <USBD_LL_StallEP>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d032      	beq.n	8008b0c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f834 	bl	8008b14 <USBD_GetLen>
 8008aac:	4603      	mov	r3, r0
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	75fa      	strb	r2, [r7, #23]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	7812      	ldrb	r2, [r2, #0]
 8008aca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	75fa      	strb	r2, [r7, #23]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	2203      	movs	r2, #3
 8008ada:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008adc:	e012      	b.n	8008b04 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	60fa      	str	r2, [r7, #12]
 8008ae4:	7dfa      	ldrb	r2, [r7, #23]
 8008ae6:	1c51      	adds	r1, r2, #1
 8008ae8:	75f9      	strb	r1, [r7, #23]
 8008aea:	4611      	mov	r1, r2
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	440a      	add	r2, r1
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	75fa      	strb	r2, [r7, #23]
 8008afa:	461a      	mov	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4413      	add	r3, r2
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e8      	bne.n	8008ade <USBD_GetString+0x4e>
    }
  }
}
 8008b0c:	bf00      	nop
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008b20:	e005      	b.n	8008b2e <USBD_GetLen+0x1a>
    {
        len++;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	3301      	adds	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1f5      	bne.n	8008b22 <USBD_GetLen+0xe>
    }

    return len;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2202      	movs	r2, #2
 8008b56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b66:	88fb      	ldrh	r3, [r7, #6]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f002 f838 	bl	800abe2 <USBD_LL_Transmit>

  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	2100      	movs	r1, #0
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f002 f826 	bl	800abe2 <USBD_LL_Transmit>

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008bb6:	88fa      	ldrh	r2, [r7, #6]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008bbe:	88fa      	ldrh	r2, [r7, #6]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f002 f82b 	bl	800ac28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	2100      	movs	r1, #0
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f002 f819 	bl	800ac28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2204      	movs	r2, #4
 8008c0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c10:	2300      	movs	r3, #0
 8008c12:	2200      	movs	r2, #0
 8008c14:	2100      	movs	r1, #0
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 ffe3 	bl	800abe2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2205      	movs	r2, #5
 8008c32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 fff3 	bl	800ac28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//ADC Callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	g_ADC1 = g_ADCBuffer[0];		//DMA copies ADC values into g_ADCBuffer without CPU
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <HAL_ADC_ConvCpltCallback+0x24>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a06      	ldr	r2, [pc, #24]	; (8008c74 <HAL_ADC_ConvCpltCallback+0x28>)
 8008c5a:	6013      	str	r3, [r2, #0]
	g_ADC2 = g_ADCBuffer[1];
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <HAL_ADC_ConvCpltCallback+0x24>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	4a05      	ldr	r2, [pc, #20]	; (8008c78 <HAL_ADC_ConvCpltCallback+0x2c>)
 8008c62:	6013      	str	r3, [r2, #0]
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	20000374 	.word	0x20000374
 8008c74:	20000dec 	.word	0x20000dec
 8008c78:	20000518 	.word	0x20000518

08008c7c <pwm_setvalue>:
 * 						"HIGH-SIDE of H-BRIDGE"
 * TIM_CHANNEL_2 : points to channel two of the timer
 * 						"LOW-SIDE of H-BRIDGE"
*/
void pwm_setvalue(int a, uint16_t high_a, uint16_t low_a, uint16_t high_b, uint16_t low_b)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b092      	sub	sp, #72	; 0x48
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	817b      	strh	r3, [r7, #10]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	813b      	strh	r3, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	80fb      	strh	r3, [r7, #6]
	//Timer configuration setup

	TIM_OC_InitTypeDef sConfigOC, sConfigOC1;

	//Timer one requirements
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c96:	2360      	movs	r3, #96	; 0x60
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Timer four requirements
	sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 8008ca2:	2360      	movs	r3, #96	; 0x60
 8008ca4:	613b      	str	r3, [r7, #16]
	sConfigOC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61bb      	str	r3, [r7, #24]
	sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	623b      	str	r3, [r7, #32]
	sConfigOC1.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC1.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC1.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]

	//Stop motors: turn on both low gates
	switch(a){
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d04f      	beq.n	8008d60 <pwm_setvalue+0xe4>
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f000 8094 	beq.w	8008dee <pwm_setvalue+0x172>
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d000      	beq.n	8008ccc <pwm_setvalue+0x50>
			}
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

		break;
	}
}
 8008cca:	e0d8      	b.n	8008e7e <pwm_setvalue+0x202>
			sConfigOC.Pulse = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	633b      	str	r3, [r7, #48]	; 0x30
			sConfigOC1.Pulse = 0;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4619      	mov	r1, r3
 8008cdc:	486a      	ldr	r0, [pc, #424]	; (8008e88 <pwm_setvalue+0x20c>)
 8008cde:	f7fc fc3f 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <pwm_setvalue+0x70>
				Error_Handler();
 8008ce8:	f001 f812 	bl	8009d10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8008cec:	f107 0310 	add.w	r3, r7, #16
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4865      	ldr	r0, [pc, #404]	; (8008e8c <pwm_setvalue+0x210>)
 8008cf6:	f7fc fc33 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <pwm_setvalue+0x88>
				Error_Handler();
 8008d00:	f001 f806 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008d04:	2100      	movs	r1, #0
 8008d06:	4860      	ldr	r0, [pc, #384]	; (8008e88 <pwm_setvalue+0x20c>)
 8008d08:	f7fc fae4 	bl	80052d4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	485f      	ldr	r0, [pc, #380]	; (8008e8c <pwm_setvalue+0x210>)
 8008d10:	f7fc fae0 	bl	80052d4 <HAL_TIM_PWM_Start>
			sConfigOC.Pulse = low_a;
 8008d14:	893b      	ldrh	r3, [r7, #8]
 8008d16:	633b      	str	r3, [r7, #48]	; 0x30
			sConfigOC1.Pulse = low_b;
 8008d18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008d1c:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d22:	2204      	movs	r2, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4858      	ldr	r0, [pc, #352]	; (8008e88 <pwm_setvalue+0x20c>)
 8008d28:	f7fc fc1a 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <pwm_setvalue+0xba>
				Error_Handler();
 8008d32:	f000 ffed 	bl	8009d10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 8008d36:	f107 0310 	add.w	r3, r7, #16
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4853      	ldr	r0, [pc, #332]	; (8008e8c <pwm_setvalue+0x210>)
 8008d40:	f7fc fc0e 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <pwm_setvalue+0xd2>
				Error_Handler();
 8008d4a:	f000 ffe1 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008d4e:	2104      	movs	r1, #4
 8008d50:	484d      	ldr	r0, [pc, #308]	; (8008e88 <pwm_setvalue+0x20c>)
 8008d52:	f7fc fabf 	bl	80052d4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008d56:	2104      	movs	r1, #4
 8008d58:	484c      	ldr	r0, [pc, #304]	; (8008e8c <pwm_setvalue+0x210>)
 8008d5a:	f7fc fabb 	bl	80052d4 <HAL_TIM_PWM_Start>
		break;
 8008d5e:	e08e      	b.n	8008e7e <pwm_setvalue+0x202>
			sConfigOC1.Pulse = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8008d64:	f107 0310 	add.w	r3, r7, #16
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4847      	ldr	r0, [pc, #284]	; (8008e8c <pwm_setvalue+0x210>)
 8008d6e:	f7fc fbf7 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <pwm_setvalue+0x100>
				Error_Handler();
 8008d78:	f000 ffca 	bl	8009d10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	2204      	movs	r2, #4
 8008d82:	4619      	mov	r1, r3
 8008d84:	4841      	ldr	r0, [pc, #260]	; (8008e8c <pwm_setvalue+0x210>)
 8008d86:	f7fc fbeb 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <pwm_setvalue+0x118>
				Error_Handler();
 8008d90:	f000 ffbe 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008d94:	2100      	movs	r1, #0
 8008d96:	483d      	ldr	r0, [pc, #244]	; (8008e8c <pwm_setvalue+0x210>)
 8008d98:	f7fc fa9c 	bl	80052d4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	483b      	ldr	r0, [pc, #236]	; (8008e8c <pwm_setvalue+0x210>)
 8008da0:	f7fc fa98 	bl	80052d4 <HAL_TIM_PWM_Start>
			sConfigOC.Pulse = low_a;
 8008da4:	893b      	ldrh	r3, [r7, #8]
 8008da6:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dac:	2204      	movs	r2, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4835      	ldr	r0, [pc, #212]	; (8008e88 <pwm_setvalue+0x20c>)
 8008db2:	f7fc fbd5 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <pwm_setvalue+0x144>
				Error_Handler();
 8008dbc:	f000 ffa8 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	4831      	ldr	r0, [pc, #196]	; (8008e88 <pwm_setvalue+0x20c>)
 8008dc4:	f7fc fa86 	bl	80052d4 <HAL_TIM_PWM_Start>
			sConfigOC.Pulse = high_a;
 8008dc8:	897b      	ldrh	r3, [r7, #10]
 8008dca:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	482c      	ldr	r0, [pc, #176]	; (8008e88 <pwm_setvalue+0x20c>)
 8008dd6:	f7fc fbc3 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <pwm_setvalue+0x168>
				Error_Handler();
 8008de0:	f000 ff96 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008de4:	2100      	movs	r1, #0
 8008de6:	4828      	ldr	r0, [pc, #160]	; (8008e88 <pwm_setvalue+0x20c>)
 8008de8:	f7fc fa74 	bl	80052d4 <HAL_TIM_PWM_Start>
		break;
 8008dec:	e047      	b.n	8008e7e <pwm_setvalue+0x202>
			sConfigOC.Pulse = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008df6:	2200      	movs	r2, #0
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4823      	ldr	r0, [pc, #140]	; (8008e88 <pwm_setvalue+0x20c>)
 8008dfc:	f7fc fbb0 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <pwm_setvalue+0x18e>
				Error_Handler();
 8008e06:	f000 ff83 	bl	8009d10 <Error_Handler>
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e0e:	2204      	movs	r2, #4
 8008e10:	4619      	mov	r1, r3
 8008e12:	481d      	ldr	r0, [pc, #116]	; (8008e88 <pwm_setvalue+0x20c>)
 8008e14:	f7fc fba4 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <pwm_setvalue+0x1a6>
				Error_Handler();
 8008e1e:	f000 ff77 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8008e22:	2100      	movs	r1, #0
 8008e24:	4818      	ldr	r0, [pc, #96]	; (8008e88 <pwm_setvalue+0x20c>)
 8008e26:	f7fc fa55 	bl	80052d4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	4816      	ldr	r0, [pc, #88]	; (8008e88 <pwm_setvalue+0x20c>)
 8008e2e:	f7fc fa51 	bl	80052d4 <HAL_TIM_PWM_Start>
			sConfigOC1.Pulse = low_b;
 8008e32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008e36:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_2) != HAL_OK)
 8008e38:	f107 0310 	add.w	r3, r7, #16
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4812      	ldr	r0, [pc, #72]	; (8008e8c <pwm_setvalue+0x210>)
 8008e42:	f7fc fb8d 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <pwm_setvalue+0x1d4>
				Error_Handler();
 8008e4c:	f000 ff60 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008e50:	2104      	movs	r1, #4
 8008e52:	480e      	ldr	r0, [pc, #56]	; (8008e8c <pwm_setvalue+0x210>)
 8008e54:	f7fc fa3e 	bl	80052d4 <HAL_TIM_PWM_Start>
			sConfigOC1.Pulse = high_b;
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	617b      	str	r3, [r7, #20]
			if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 8008e5c:	f107 0310 	add.w	r3, r7, #16
 8008e60:	2200      	movs	r2, #0
 8008e62:	4619      	mov	r1, r3
 8008e64:	4809      	ldr	r0, [pc, #36]	; (8008e8c <pwm_setvalue+0x210>)
 8008e66:	f7fc fb7b 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <pwm_setvalue+0x1f8>
				Error_Handler();
 8008e70:	f000 ff4e 	bl	8009d10 <Error_Handler>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008e74:	2100      	movs	r1, #0
 8008e76:	4805      	ldr	r0, [pc, #20]	; (8008e8c <pwm_setvalue+0x210>)
 8008e78:	f7fc fa2c 	bl	80052d4 <HAL_TIM_PWM_Start>
		break;
 8008e7c:	bf00      	nop
}
 8008e7e:	bf00      	nop
 8008e80:	3748      	adds	r7, #72	; 0x48
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2000039c 	.word	0x2000039c
 8008e8c:	2000051c 	.word	0x2000051c

08008e90 <steer_pwm_setvalue>:


void steer_pwm_setvalue(uint16_t value)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08a      	sub	sp, #40	; 0x28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e9a:	2360      	movs	r3, #96	; 0x60
 8008e9c:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008eaa:	f107 030c 	add.w	r3, r7, #12
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4808      	ldr	r0, [pc, #32]	; (8008ed4 <steer_pwm_setvalue+0x44>)
 8008eb4:	f7fc fb54 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <steer_pwm_setvalue+0x32>
	{
		Error_Handler();
 8008ebe:	f000 ff27 	bl	8009d10 <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	4803      	ldr	r0, [pc, #12]	; (8008ed4 <steer_pwm_setvalue+0x44>)
 8008ec6:	f7fc fa05 	bl	80052d4 <HAL_TIM_PWM_Start>
}
 8008eca:	bf00      	nop
 8008ecc:	3728      	adds	r7, #40	; 0x28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000dac 	.word	0x20000dac

08008ed8 <drive_forward>:

void steer_right_PWM(){
	steer_pwm_setvalue(133);
}

void drive_forward(uint16_t pwm){
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	4603      	mov	r3, r0
 8008ee0:	80fb      	strh	r3, [r7, #6]

	int i;

	for(i = 0; i<(int)pwm; i++){
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	e00b      	b.n	8008f00 <drive_forward+0x28>

		//pwm_setvalue(case, high_a, low_a, high_b, low_b);
		pwm_setvalue(1, i, 90, 0, 0);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	b299      	uxth	r1, r3
 8008eec:	2300      	movs	r3, #0
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	225a      	movs	r2, #90	; 0x5a
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	f7ff fec1 	bl	8008c7c <pwm_setvalue>
	for(i = 0; i<(int)pwm; i++){
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	dbef      	blt.n	8008ee8 <drive_forward+0x10>

	}

}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <Battery_Voltage>:
Function Battery_Voltage calculates actual battery voltage.
Input: Channel 1 ADC Input (PA1)
Output: Battery voltage in Volts (float)
*/

float Battery_Voltage(uint32_t g_ADC1){
 8008f10:	b590      	push	{r4, r7, lr}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	float BV = 2.44681*(g_ADC1*3.3/4095.0);		//Converts ADC input to Battery Voltage
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7f7 faf3 	bl	8000504 <__aeabi_ui2d>
 8008f1e:	a314      	add	r3, pc, #80	; (adr r3, 8008f70 <Battery_Voltage+0x60>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f7f7 fb68 	bl	80005f8 <__aeabi_dmul>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4621      	mov	r1, r4
 8008f30:	a311      	add	r3, pc, #68	; (adr r3, 8008f78 <Battery_Voltage+0x68>)
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f7f7 fc89 	bl	800084c <__aeabi_ddiv>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4618      	mov	r0, r3
 8008f40:	4621      	mov	r1, r4
 8008f42:	a30f      	add	r3, pc, #60	; (adr r3, 8008f80 <Battery_Voltage+0x70>)
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f7f7 fb56 	bl	80005f8 <__aeabi_dmul>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	4618      	mov	r0, r3
 8008f52:	4621      	mov	r1, r4
 8008f54:	f7f7 fe28 	bl	8000ba8 <__aeabi_d2f>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	60fb      	str	r3, [r7, #12]
	return BV;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	ee07 3a90 	vmov	s15, r3
}
 8008f62:	eeb0 0a67 	vmov.f32	s0, s15
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd90      	pop	{r4, r7, pc}
 8008f6c:	f3af 8000 	nop.w
 8008f70:	66666666 	.word	0x66666666
 8008f74:	400a6666 	.word	0x400a6666
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	40affe00 	.word	0x40affe00
 8008f80:	1f0c34c2 	.word	0x1f0c34c2
 8008f84:	40039311 	.word	0x40039311

08008f88 <Motor_Current>:
Function Motor_Current calculates the current through the motor, using a simple Moving Average Filter
Input: Channel 2 ADC input (PA2)
Output: Motor Current in Amps (float)
*/

float Motor_Current(uint32_t g_ADC2){
 8008f88:	b590      	push	{r4, r7, lr}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	buf[n] = g_ADC2;
 8008f90:	4b85      	ldr	r3, [pc, #532]	; (80091a8 <Motor_Current+0x220>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	ee07 2a90 	vmov	s15, r2
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	4a83      	ldr	r2, [pc, #524]	; (80091ac <Motor_Current+0x224>)
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	edc3 7a00 	vstr	s15, [r3]
	n ++;
 8008fa8:	4b7f      	ldr	r3, [pc, #508]	; (80091a8 <Motor_Current+0x220>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3301      	adds	r3, #1
 8008fae:	4a7e      	ldr	r2, [pc, #504]	; (80091a8 <Motor_Current+0x220>)
 8008fb0:	6013      	str	r3, [r2, #0]
	//MC = (((g_ADC2)*3.3/4095.0)-2.5)*(1/0.025);		//Calculate average

	//Collect enough samples to fill buffer before beginning filtering.
	if(m < (Window_Size - 1)){
 8008fb2:	4b7f      	ldr	r3, [pc, #508]	; (80091b0 <Motor_Current+0x228>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	dc19      	bgt.n	8008fee <Motor_Current+0x66>
		m++;
 8008fba:	4b7d      	ldr	r3, [pc, #500]	; (80091b0 <Motor_Current+0x228>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	4a7b      	ldr	r2, [pc, #492]	; (80091b0 <Motor_Current+0x228>)
 8008fc2:	6013      	str	r3, [r2, #0]
		MC = 0;
 8008fc4:	4b7b      	ldr	r3, [pc, #492]	; (80091b4 <Motor_Current+0x22c>)
 8008fc6:	f04f 0200 	mov.w	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
		sum = sum + buf[n-1];		//Rolling sum of buffered inputs
 8008fcc:	4b76      	ldr	r3, [pc, #472]	; (80091a8 <Motor_Current+0x220>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	4a76      	ldr	r2, [pc, #472]	; (80091ac <Motor_Current+0x224>)
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	ed93 7a00 	vldr	s14, [r3]
 8008fdc:	4b76      	ldr	r3, [pc, #472]	; (80091b8 <Motor_Current+0x230>)
 8008fde:	edd3 7a00 	vldr	s15, [r3]
 8008fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fe6:	4b74      	ldr	r3, [pc, #464]	; (80091b8 <Motor_Current+0x230>)
 8008fe8:	edc3 7a00 	vstr	s15, [r3]
 8008fec:	e0c5      	b.n	800917a <Motor_Current+0x1f2>
	}
	//When buffer is full, filter and output result
	else if(m == (Window_Size - 1)){
 8008fee:	4b70      	ldr	r3, [pc, #448]	; (80091b0 <Motor_Current+0x228>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b09      	cmp	r3, #9
 8008ff4:	d157      	bne.n	80090a6 <Motor_Current+0x11e>
		sum = sum + buf[n-1];
 8008ff6:	4b6c      	ldr	r3, [pc, #432]	; (80091a8 <Motor_Current+0x220>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	4a6b      	ldr	r2, [pc, #428]	; (80091ac <Motor_Current+0x224>)
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	ed93 7a00 	vldr	s14, [r3]
 8009006:	4b6c      	ldr	r3, [pc, #432]	; (80091b8 <Motor_Current+0x230>)
 8009008:	edd3 7a00 	vldr	s15, [r3]
 800900c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009010:	4b69      	ldr	r3, [pc, #420]	; (80091b8 <Motor_Current+0x230>)
 8009012:	edc3 7a00 	vstr	s15, [r3]
		MC = (((sum/Window_Size)*3.3/4095.0)-2.32)*(1/0.025);		//Calculate average
 8009016:	4b68      	ldr	r3, [pc, #416]	; (80091b8 <Motor_Current+0x230>)
 8009018:	edd3 7a00 	vldr	s15, [r3]
 800901c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009020:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009024:	ee16 0a90 	vmov	r0, s13
 8009028:	f7f7 fa8e 	bl	8000548 <__aeabi_f2d>
 800902c:	a358      	add	r3, pc, #352	; (adr r3, 8009190 <Motor_Current+0x208>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 fae1 	bl	80005f8 <__aeabi_dmul>
 8009036:	4603      	mov	r3, r0
 8009038:	460c      	mov	r4, r1
 800903a:	4618      	mov	r0, r3
 800903c:	4621      	mov	r1, r4
 800903e:	a356      	add	r3, pc, #344	; (adr r3, 8009198 <Motor_Current+0x210>)
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f7f7 fc02 	bl	800084c <__aeabi_ddiv>
 8009048:	4603      	mov	r3, r0
 800904a:	460c      	mov	r4, r1
 800904c:	4618      	mov	r0, r3
 800904e:	4621      	mov	r1, r4
 8009050:	a353      	add	r3, pc, #332	; (adr r3, 80091a0 <Motor_Current+0x218>)
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	f7f7 f917 	bl	8000288 <__aeabi_dsub>
 800905a:	4603      	mov	r3, r0
 800905c:	460c      	mov	r4, r1
 800905e:	4618      	mov	r0, r3
 8009060:	4621      	mov	r1, r4
 8009062:	f04f 0200 	mov.w	r2, #0
 8009066:	4b55      	ldr	r3, [pc, #340]	; (80091bc <Motor_Current+0x234>)
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	4603      	mov	r3, r0
 800906e:	460c      	mov	r4, r1
 8009070:	4618      	mov	r0, r3
 8009072:	4621      	mov	r1, r4
 8009074:	f7f7 fd98 	bl	8000ba8 <__aeabi_d2f>
 8009078:	4602      	mov	r2, r0
 800907a:	4b4e      	ldr	r3, [pc, #312]	; (80091b4 <Motor_Current+0x22c>)
 800907c:	601a      	str	r2, [r3, #0]
		sum = sum - buf[0];			//Subtract first input from sum (rolling sum)
 800907e:	4b4e      	ldr	r3, [pc, #312]	; (80091b8 <Motor_Current+0x230>)
 8009080:	ed93 7a00 	vldr	s14, [r3]
 8009084:	4b49      	ldr	r3, [pc, #292]	; (80091ac <Motor_Current+0x224>)
 8009086:	edd3 7a00 	vldr	s15, [r3]
 800908a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800908e:	4b4a      	ldr	r3, [pc, #296]	; (80091b8 <Motor_Current+0x230>)
 8009090:	edc3 7a00 	vstr	s15, [r3]
		n = 0; 		//Reset buffer counter (circular buffer)
 8009094:	4b44      	ldr	r3, [pc, #272]	; (80091a8 <Motor_Current+0x220>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
		m++;
 800909a:	4b45      	ldr	r3, [pc, #276]	; (80091b0 <Motor_Current+0x228>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	4a43      	ldr	r2, [pc, #268]	; (80091b0 <Motor_Current+0x228>)
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	e069      	b.n	800917a <Motor_Current+0x1f2>
	}
	//Filter all results from now on (Moving Average)
	else{
		sum = sum + buf[n-1];				//Rolling sum
 80090a6:	4b40      	ldr	r3, [pc, #256]	; (80091a8 <Motor_Current+0x220>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	4a3f      	ldr	r2, [pc, #252]	; (80091ac <Motor_Current+0x224>)
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	ed93 7a00 	vldr	s14, [r3]
 80090b6:	4b40      	ldr	r3, [pc, #256]	; (80091b8 <Motor_Current+0x230>)
 80090b8:	edd3 7a00 	vldr	s15, [r3]
 80090bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090c0:	4b3d      	ldr	r3, [pc, #244]	; (80091b8 <Motor_Current+0x230>)
 80090c2:	edc3 7a00 	vstr	s15, [r3]
		MC = (((sum/Window_Size)*3.3/4095.0)-2.32)*(1/0.025);	//Motor Current (A) = 2.5 +- 25mV/A;
 80090c6:	4b3c      	ldr	r3, [pc, #240]	; (80091b8 <Motor_Current+0x230>)
 80090c8:	edd3 7a00 	vldr	s15, [r3]
 80090cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80090d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090d4:	ee16 0a90 	vmov	r0, s13
 80090d8:	f7f7 fa36 	bl	8000548 <__aeabi_f2d>
 80090dc:	a32c      	add	r3, pc, #176	; (adr r3, 8009190 <Motor_Current+0x208>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	4603      	mov	r3, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	4618      	mov	r0, r3
 80090ec:	4621      	mov	r1, r4
 80090ee:	a32a      	add	r3, pc, #168	; (adr r3, 8009198 <Motor_Current+0x210>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 fbaa 	bl	800084c <__aeabi_ddiv>
 80090f8:	4603      	mov	r3, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	4618      	mov	r0, r3
 80090fe:	4621      	mov	r1, r4
 8009100:	a327      	add	r3, pc, #156	; (adr r3, 80091a0 <Motor_Current+0x218>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 f8bf 	bl	8000288 <__aeabi_dsub>
 800910a:	4603      	mov	r3, r0
 800910c:	460c      	mov	r4, r1
 800910e:	4618      	mov	r0, r3
 8009110:	4621      	mov	r1, r4
 8009112:	f04f 0200 	mov.w	r2, #0
 8009116:	4b29      	ldr	r3, [pc, #164]	; (80091bc <Motor_Current+0x234>)
 8009118:	f7f7 fa6e 	bl	80005f8 <__aeabi_dmul>
 800911c:	4603      	mov	r3, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4618      	mov	r0, r3
 8009122:	4621      	mov	r1, r4
 8009124:	f7f7 fd40 	bl	8000ba8 <__aeabi_d2f>
 8009128:	4602      	mov	r2, r0
 800912a:	4b22      	ldr	r3, [pc, #136]	; (80091b4 <Motor_Current+0x22c>)
 800912c:	601a      	str	r2, [r3, #0]
		if(n < (Window_Size)){
 800912e:	4b1e      	ldr	r3, [pc, #120]	; (80091a8 <Motor_Current+0x220>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b09      	cmp	r3, #9
 8009134:	dc0f      	bgt.n	8009156 <Motor_Current+0x1ce>
			sum = sum - buf[n];
 8009136:	4b20      	ldr	r3, [pc, #128]	; (80091b8 <Motor_Current+0x230>)
 8009138:	ed93 7a00 	vldr	s14, [r3]
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <Motor_Current+0x220>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1a      	ldr	r2, [pc, #104]	; (80091ac <Motor_Current+0x224>)
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	edd3 7a00 	vldr	s15, [r3]
 800914a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800914e:	4b1a      	ldr	r3, [pc, #104]	; (80091b8 <Motor_Current+0x230>)
 8009150:	edc3 7a00 	vstr	s15, [r3]
 8009154:	e011      	b.n	800917a <Motor_Current+0x1f2>
		}
		else{						//End of buffer
			n = 0;					//Reset counter (circular)
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <Motor_Current+0x220>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
			sum = sum - buf[n];
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <Motor_Current+0x230>)
 800915e:	ed93 7a00 	vldr	s14, [r3]
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <Motor_Current+0x220>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a11      	ldr	r2, [pc, #68]	; (80091ac <Motor_Current+0x224>)
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	edd3 7a00 	vldr	s15, [r3]
 8009170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009174:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <Motor_Current+0x230>)
 8009176:	edc3 7a00 	vstr	s15, [r3]
			}
	}

	return MC;
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <Motor_Current+0x22c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	ee07 3a90 	vmov	s15, r3
}
 8009182:	eeb0 0a67 	vmov.f32	s0, s15
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	bd90      	pop	{r4, r7, pc}
 800918c:	f3af 8000 	nop.w
 8009190:	66666666 	.word	0x66666666
 8009194:	400a6666 	.word	0x400a6666
 8009198:	00000000 	.word	0x00000000
 800919c:	40affe00 	.word	0x40affe00
 80091a0:	28f5c28f 	.word	0x28f5c28f
 80091a4:	40028f5c 	.word	0x40028f5c
 80091a8:	2000037c 	.word	0x2000037c
 80091ac:	20000d2c 	.word	0x20000d2c
 80091b0:	20000380 	.word	0x20000380
 80091b4:	20000384 	.word	0x20000384
 80091b8:	20000388 	.word	0x20000388
 80091bc:	40440000 	.word	0x40440000

080091c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80091c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091c2:	b09f      	sub	sp, #124	; 0x7c
 80091c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80091c6:	f7f7 febf 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80091ca:	f000 f8e9 	bl	80093a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80091ce:	f000 fc7f 	bl	8009ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 80091d2:	f000 fc5d 	bl	8009a90 <MX_DMA_Init>
  MX_I2C1_Init();
 80091d6:	f000 f9d5 	bl	8009584 <MX_I2C1_Init>
  MX_I2S3_Init();
 80091da:	f000 fa01 	bl	80095e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80091de:	f000 fa2f 	bl	8009640 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80091e2:	f001 f97d 	bl	800a4e0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80091e6:	f000 fb85 	bl	80098f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80091ea:	f000 fbcf 	bl	800998c <MX_TIM4_Init>
  MX_TIM2_Init();
 80091ee:	f000 fb0b 	bl	8009808 <MX_TIM2_Init>
  MX_TIM1_Init();
 80091f2:	f000 fa5b 	bl	80096ac <MX_TIM1_Init>
  MX_ADC1_Init();
 80091f6:	f000 f955 	bl	80094a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80091fa:	485f      	ldr	r0, [pc, #380]	; (8009378 <main+0x1b8>)
 80091fc:	f7fc f811 	bl	8005222 <HAL_TIM_Base_Start_IT>
	uint8_t Reverse = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	uint8_t Stop = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	uint8_t turn_right = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t Straight = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	steer_pwm_setvalue(225);
 8009218:	20e1      	movs	r0, #225	; 0xe1
 800921a:	f7ff fe39 	bl	8008e90 <steer_pwm_setvalue>
	uint8_t k = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t t = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  if(!k)
 800922a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <main+0x7e>
	  {
	  drive_forward(25);
 8009232:	2019      	movs	r0, #25
 8009234:	f7ff fe50 	bl	8008ed8 <drive_forward>
	  k=1;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  }
	  uint8_t Msg[] = "hello hello hello hello hello hello hello hell hello hello hello hello hello hello hello \r\n";
 800923e:	4a4f      	ldr	r2, [pc, #316]	; (800937c <main+0x1bc>)
 8009240:	1d3b      	adds	r3, r7, #4
 8009242:	4611      	mov	r1, r2
 8009244:	225c      	movs	r2, #92	; 0x5c
 8009246:	4618      	mov	r0, r3
 8009248:	f001 fec2 	bl	800afd0 <memcpy>
	 //Start ADC_DMA
	 if((status = HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_ADCBuffer, 2) != HAL_OK)){
 800924c:	2202      	movs	r2, #2
 800924e:	494c      	ldr	r1, [pc, #304]	; (8009380 <main+0x1c0>)
 8009250:	484c      	ldr	r0, [pc, #304]	; (8009384 <main+0x1c4>)
 8009252:	f7f8 f891 	bl	8001378 <HAL_ADC_Start_DMA>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8009266:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800926a:	2b00      	cmp	r3, #0
 800926c:	d008      	beq.n	8009280 <main+0xc0>
		 printf("Error: Status = %d", status);
 800926e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8009272:	4619      	mov	r1, r3
 8009274:	4844      	ldr	r0, [pc, #272]	; (8009388 <main+0x1c8>)
 8009276:	f002 fbc3 	bl	800ba00 <iprintf>
		 return status;
 800927a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800927e:	e070      	b.n	8009362 <main+0x1a2>
	 }
	 t++;
 8009280:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8009284:	3301      	adds	r3, #1
 8009286:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	 //Battery Voltage Measurement
	 float BatteryVoltage = Battery_Voltage(g_ADC1);
 800928a:	4b40      	ldr	r3, [pc, #256]	; (800938c <main+0x1cc>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff fe3e 	bl	8008f10 <Battery_Voltage>
 8009294:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64

	//Current Measurement - Will only get a proper reading after 10 calls (due to filter)
	 float MotorCurrent = Motor_Current(g_ADC2);
 8009298:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <main+0x1d0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff fe73 	bl	8008f88 <Motor_Current>
 80092a2:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	 if(t == 10){
 80092a6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80092aa:	2b0a      	cmp	r3, #10
 80092ac:	d1bd      	bne.n	800922a <main+0x6a>
	 if(BatteryVoltage > 7.1){
 80092ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092b0:	f7f7 f94a 	bl	8000548 <__aeabi_f2d>
 80092b4:	a32e      	add	r3, pc, #184	; (adr r3, 8009370 <main+0x1b0>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f7 fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d012      	beq.n	80092ea <main+0x12a>
		 sprintf(Msg, "Battery Voltage = %5.2f, Motor Current = %5.2f\n", BatteryVoltage, MotorCurrent);
 80092c4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092c6:	f7f7 f93f 	bl	8000548 <__aeabi_f2d>
 80092ca:	4605      	mov	r5, r0
 80092cc:	460e      	mov	r6, r1
 80092ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80092d0:	f7f7 f93a 	bl	8000548 <__aeabi_f2d>
 80092d4:	4603      	mov	r3, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	1d38      	adds	r0, r7, #4
 80092da:	e9cd 3400 	strd	r3, r4, [sp]
 80092de:	462a      	mov	r2, r5
 80092e0:	4633      	mov	r3, r6
 80092e2:	492c      	ldr	r1, [pc, #176]	; (8009394 <main+0x1d4>)
 80092e4:	f002 fbb4 	bl	800ba50 <siprintf>
 80092e8:	e02d      	b.n	8009346 <main+0x186>
	 }
	 else if(BatteryVoltage >= 8.0){
 80092ea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80092ee:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80092f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fa:	db12      	blt.n	8009322 <main+0x162>
	 		 sprintf(Msg, "Battery is Full: Voltage = %5f+ V, Motor Current = %5.2f A \n", BatteryVoltage, MotorCurrent);
 80092fc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80092fe:	f7f7 f923 	bl	8000548 <__aeabi_f2d>
 8009302:	4605      	mov	r5, r0
 8009304:	460e      	mov	r6, r1
 8009306:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009308:	f7f7 f91e 	bl	8000548 <__aeabi_f2d>
 800930c:	4603      	mov	r3, r0
 800930e:	460c      	mov	r4, r1
 8009310:	1d38      	adds	r0, r7, #4
 8009312:	e9cd 3400 	strd	r3, r4, [sp]
 8009316:	462a      	mov	r2, r5
 8009318:	4633      	mov	r3, r6
 800931a:	491f      	ldr	r1, [pc, #124]	; (8009398 <main+0x1d8>)
 800931c:	f002 fb98 	bl	800ba50 <siprintf>
 8009320:	e011      	b.n	8009346 <main+0x186>
	 	 }
	 else{
		 sprintf(Msg, "**Warning Low Battery Voltage*** = %5.2f, Motor Current = %5.2f\n", BatteryVoltage, MotorCurrent);
 8009322:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009324:	f7f7 f910 	bl	8000548 <__aeabi_f2d>
 8009328:	4605      	mov	r5, r0
 800932a:	460e      	mov	r6, r1
 800932c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800932e:	f7f7 f90b 	bl	8000548 <__aeabi_f2d>
 8009332:	4603      	mov	r3, r0
 8009334:	460c      	mov	r4, r1
 8009336:	1d38      	adds	r0, r7, #4
 8009338:	e9cd 3400 	strd	r3, r4, [sp]
 800933c:	462a      	mov	r2, r5
 800933e:	4633      	mov	r3, r6
 8009340:	4916      	ldr	r1, [pc, #88]	; (800939c <main+0x1dc>)
 8009342:	f002 fb85 	bl	800ba50 <siprintf>
	 }
	 CDC_Transmit_FS(Msg, strlen(Msg));
 8009346:	1d3b      	adds	r3, r7, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7f6 ff41 	bl	80001d0 <strlen>
 800934e:	4602      	mov	r2, r0
 8009350:	1d3b      	adds	r3, r7, #4
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f001 f995 	bl	800a684 <CDC_Transmit_FS>
	 t = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  {
 8009360:	e763      	b.n	800922a <main+0x6a>
	 }

  }
  /* USER CODE END 3 */
}
 8009362:	4618      	mov	r0, r3
 8009364:	3774      	adds	r7, #116	; 0x74
 8009366:	46bd      	mov	sp, r7
 8009368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	66666666 	.word	0x66666666
 8009374:	401c6666 	.word	0x401c6666
 8009378:	20000430 	.word	0x20000430
 800937c:	0800da78 	.word	0x0800da78
 8009380:	20000374 	.word	0x20000374
 8009384:	20000470 	.word	0x20000470
 8009388:	0800d9b0 	.word	0x0800d9b0
 800938c:	20000dec 	.word	0x20000dec
 8009390:	20000518 	.word	0x20000518
 8009394:	0800d9c4 	.word	0x0800d9c4
 8009398:	0800d9f4 	.word	0x0800d9f4
 800939c:	0800da34 	.word	0x0800da34

080093a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b098      	sub	sp, #96	; 0x60
 80093a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80093a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093aa:	2230      	movs	r2, #48	; 0x30
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 fe19 	bl	800afe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80093b4:	f107 031c 	add.w	r3, r7, #28
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	609a      	str	r2, [r3, #8]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80093c4:	f107 030c 	add.w	r3, r7, #12
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	609a      	str	r2, [r3, #8]
 80093d0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80093d2:	2300      	movs	r3, #0
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	4b31      	ldr	r3, [pc, #196]	; (800949c <SystemClock_Config+0xfc>)
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	4a30      	ldr	r2, [pc, #192]	; (800949c <SystemClock_Config+0xfc>)
 80093dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093e0:	6413      	str	r3, [r2, #64]	; 0x40
 80093e2:	4b2e      	ldr	r3, [pc, #184]	; (800949c <SystemClock_Config+0xfc>)
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ea:	60bb      	str	r3, [r7, #8]
 80093ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]
 80093f2:	4b2b      	ldr	r3, [pc, #172]	; (80094a0 <SystemClock_Config+0x100>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <SystemClock_Config+0x100>)
 80093f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	4b28      	ldr	r3, [pc, #160]	; (80094a0 <SystemClock_Config+0x100>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009406:	607b      	str	r3, [r7, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800940a:	2301      	movs	r3, #1
 800940c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800940e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009414:	2302      	movs	r3, #2
 8009416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009418:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800941c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800941e:	2308      	movs	r3, #8
 8009420:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8009422:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8009426:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009428:	2302      	movs	r3, #2
 800942a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800942c:	2307      	movs	r3, #7
 800942e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009434:	4618      	mov	r0, r3
 8009436:	f7fb f90b 	bl	8004650 <HAL_RCC_OscConfig>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8009440:	f000 fc66 	bl	8009d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009444:	230f      	movs	r3, #15
 8009446:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009448:	2302      	movs	r3, #2
 800944a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800944c:	2300      	movs	r3, #0
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009450:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009454:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800945c:	f107 031c 	add.w	r3, r7, #28
 8009460:	2105      	movs	r1, #5
 8009462:	4618      	mov	r0, r3
 8009464:	f7fb fb36 	bl	8004ad4 <HAL_RCC_ClockConfig>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800946e:	f000 fc4f 	bl	8009d10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8009472:	2301      	movs	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8009476:	23c0      	movs	r3, #192	; 0xc0
 8009478:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800947a:	2302      	movs	r3, #2
 800947c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800947e:	f107 030c 	add.w	r3, r7, #12
 8009482:	4618      	mov	r0, r3
 8009484:	f7fb fd00 	bl	8004e88 <HAL_RCCEx_PeriphCLKConfig>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800948e:	f000 fc3f 	bl	8009d10 <Error_Handler>
  }
}
 8009492:	bf00      	nop
 8009494:	3760      	adds	r7, #96	; 0x60
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	40023800 	.word	0x40023800
 80094a0:	40007000 	.word	0x40007000

080094a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80094aa:	463b      	mov	r3, r7
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	605a      	str	r2, [r3, #4]
 80094b2:	609a      	str	r2, [r3, #8]
 80094b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80094b6:	4b30      	ldr	r3, [pc, #192]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094b8:	4a30      	ldr	r2, [pc, #192]	; (800957c <MX_ADC1_Init+0xd8>)
 80094ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80094bc:	4b2e      	ldr	r3, [pc, #184]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80094c4:	4b2c      	ldr	r3, [pc, #176]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80094ca:	4b2b      	ldr	r3, [pc, #172]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80094d0:	4b29      	ldr	r3, [pc, #164]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094d2:	2201      	movs	r2, #1
 80094d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80094d6:	4b28      	ldr	r3, [pc, #160]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80094de:	4b26      	ldr	r3, [pc, #152]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80094e4:	4b24      	ldr	r3, [pc, #144]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094e6:	4a26      	ldr	r2, [pc, #152]	; (8009580 <MX_ADC1_Init+0xdc>)
 80094e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80094ea:	4b23      	ldr	r3, [pc, #140]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80094f0:	4b21      	ldr	r3, [pc, #132]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094f2:	2202      	movs	r2, #2
 80094f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80094f6:	4b20      	ldr	r3, [pc, #128]	; (8009578 <MX_ADC1_Init+0xd4>)
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80094fe:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <MX_ADC1_Init+0xd4>)
 8009500:	2201      	movs	r2, #1
 8009502:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009504:	481c      	ldr	r0, [pc, #112]	; (8009578 <MX_ADC1_Init+0xd4>)
 8009506:	f7f7 fdb3 	bl	8001070 <HAL_ADC_Init>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009510:	f000 fbfe 	bl	8009d10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  	  sConfig.Channel = ADC_CHANNEL_1;
 8009514:	2301      	movs	r3, #1
 8009516:	603b      	str	r3, [r7, #0]
  	sConfig.Rank = 1;
 8009518:	2301      	movs	r3, #1
 800951a:	607b      	str	r3, [r7, #4]
  	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800951c:	2307      	movs	r3, #7
 800951e:	60bb      	str	r3, [r7, #8]
  	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009520:	463b      	mov	r3, r7
 8009522:	4619      	mov	r1, r3
 8009524:	4814      	ldr	r0, [pc, #80]	; (8009578 <MX_ADC1_Init+0xd4>)
 8009526:	f7f8 f837 	bl	8001598 <HAL_ADC_ConfigChannel>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <MX_ADC1_Init+0x90>
  	{
  		Error_Handler();
 8009530:	f000 fbee 	bl	8009d10 <Error_Handler>
  	}
  	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	 */
  	sConfig.Rank = 2;
 8009534:	2302      	movs	r3, #2
 8009536:	607b      	str	r3, [r7, #4]
  	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009538:	2300      	movs	r3, #0
 800953a:	60bb      	str	r3, [r7, #8]
  	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800953c:	463b      	mov	r3, r7
 800953e:	4619      	mov	r1, r3
 8009540:	480d      	ldr	r0, [pc, #52]	; (8009578 <MX_ADC1_Init+0xd4>)
 8009542:	f7f8 f829 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <MX_ADC1_Init+0xac>
  	{
  		Error_Handler();
 800954c:	f000 fbe0 	bl	8009d10 <Error_Handler>
  	}
  	/* USER CODE BEGIN ADC1_Init 2 */
  	sConfig.Channel = ADC_CHANNEL_2;
 8009550:	2302      	movs	r3, #2
 8009552:	603b      	str	r3, [r7, #0]
  	sConfig.Rank = 2;
 8009554:	2302      	movs	r3, #2
 8009556:	607b      	str	r3, [r7, #4]
  	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8009558:	2307      	movs	r3, #7
 800955a:	60bb      	str	r3, [r7, #8]
  	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800955c:	463b      	mov	r3, r7
 800955e:	4619      	mov	r1, r3
 8009560:	4805      	ldr	r0, [pc, #20]	; (8009578 <MX_ADC1_Init+0xd4>)
 8009562:	f7f8 f819 	bl	8001598 <HAL_ADC_ConfigChannel>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <MX_ADC1_Init+0xcc>
  	{
  		Error_Handler();
 800956c:	f000 fbd0 	bl	8009d10 <Error_Handler>
  	}
  	/* USER CODE END ADC1_Init 2 */

}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20000470 	.word	0x20000470
 800957c:	40012000 	.word	0x40012000
 8009580:	0f000001 	.word	0x0f000001

08009584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009588:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <MX_I2C1_Init+0x50>)
 800958a:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <MX_I2C1_Init+0x54>)
 800958c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800958e:	4b11      	ldr	r3, [pc, #68]	; (80095d4 <MX_I2C1_Init+0x50>)
 8009590:	4a12      	ldr	r2, [pc, #72]	; (80095dc <MX_I2C1_Init+0x58>)
 8009592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <MX_I2C1_Init+0x50>)
 8009596:	2200      	movs	r2, #0
 8009598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800959a:	4b0e      	ldr	r3, [pc, #56]	; (80095d4 <MX_I2C1_Init+0x50>)
 800959c:	2200      	movs	r2, #0
 800959e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095a0:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <MX_I2C1_Init+0x50>)
 80095a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80095a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <MX_I2C1_Init+0x50>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <MX_I2C1_Init+0x50>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095b4:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <MX_I2C1_Init+0x50>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095ba:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <MX_I2C1_Init+0x50>)
 80095bc:	2200      	movs	r2, #0
 80095be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80095c0:	4804      	ldr	r0, [pc, #16]	; (80095d4 <MX_I2C1_Init+0x50>)
 80095c2:	f7f9 f8f3 	bl	80027ac <HAL_I2C_Init>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80095cc:	f000 fba0 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80095d0:	bf00      	nop
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200003dc 	.word	0x200003dc
 80095d8:	40005400 	.word	0x40005400
 80095dc:	000186a0 	.word	0x000186a0

080095e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80095e4:	4b13      	ldr	r3, [pc, #76]	; (8009634 <MX_I2S3_Init+0x54>)
 80095e6:	4a14      	ldr	r2, [pc, #80]	; (8009638 <MX_I2S3_Init+0x58>)
 80095e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80095ea:	4b12      	ldr	r3, [pc, #72]	; (8009634 <MX_I2S3_Init+0x54>)
 80095ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80095f2:	4b10      	ldr	r3, [pc, #64]	; (8009634 <MX_I2S3_Init+0x54>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80095f8:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <MX_I2S3_Init+0x54>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80095fe:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <MX_I2S3_Init+0x54>)
 8009600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009604:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8009606:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <MX_I2S3_Init+0x54>)
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <MX_I2S3_Init+0x5c>)
 800960a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800960c:	4b09      	ldr	r3, [pc, #36]	; (8009634 <MX_I2S3_Init+0x54>)
 800960e:	2200      	movs	r2, #0
 8009610:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8009612:	4b08      	ldr	r3, [pc, #32]	; (8009634 <MX_I2S3_Init+0x54>)
 8009614:	2200      	movs	r2, #0
 8009616:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <MX_I2S3_Init+0x54>)
 800961a:	2200      	movs	r2, #0
 800961c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800961e:	4805      	ldr	r0, [pc, #20]	; (8009634 <MX_I2S3_Init+0x54>)
 8009620:	f7f9 f9ec 	bl	80029fc <HAL_I2S_Init>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800962a:	f000 fb71 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000df0 	.word	0x20000df0
 8009638:	40003c00 	.word	0x40003c00
 800963c:	00017700 	.word	0x00017700

08009640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009644:	4b17      	ldr	r3, [pc, #92]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009646:	4a18      	ldr	r2, [pc, #96]	; (80096a8 <MX_SPI1_Init+0x68>)
 8009648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800964a:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <MX_SPI1_Init+0x64>)
 800964c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009654:	2200      	movs	r2, #0
 8009656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009658:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <MX_SPI1_Init+0x64>)
 800965a:	2200      	movs	r2, #0
 800965c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800965e:	4b11      	ldr	r3, [pc, #68]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009660:	2200      	movs	r2, #0
 8009662:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009664:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009666:	2200      	movs	r2, #0
 8009668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800966a:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <MX_SPI1_Init+0x64>)
 800966c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009674:	2200      	movs	r2, #0
 8009676:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009678:	4b0a      	ldr	r3, [pc, #40]	; (80096a4 <MX_SPI1_Init+0x64>)
 800967a:	2200      	movs	r2, #0
 800967c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009680:	2200      	movs	r2, #0
 8009682:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009684:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009686:	2200      	movs	r2, #0
 8009688:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800968a:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <MX_SPI1_Init+0x64>)
 800968c:	220a      	movs	r2, #10
 800968e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009690:	4804      	ldr	r0, [pc, #16]	; (80096a4 <MX_SPI1_Init+0x64>)
 8009692:	f7fb fd37 	bl	8005104 <HAL_SPI_Init>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800969c:	f000 fb38 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80096a0:	bf00      	nop
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20000d54 	.word	0x20000d54
 80096a8:	40013000 	.word	0x40013000

080096ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b096      	sub	sp, #88	; 0x58
 80096b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80096b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	609a      	str	r2, [r3, #8]
 80096be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80096ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	605a      	str	r2, [r3, #4]
 80096d4:	609a      	str	r2, [r3, #8]
 80096d6:	60da      	str	r2, [r3, #12]
 80096d8:	611a      	str	r2, [r3, #16]
 80096da:	615a      	str	r2, [r3, #20]
 80096dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80096de:	1d3b      	adds	r3, r7, #4
 80096e0:	2220      	movs	r2, #32
 80096e2:	2100      	movs	r1, #0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fc7e 	bl	800afe6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80096ea:	4b45      	ldr	r3, [pc, #276]	; (8009800 <MX_TIM1_Init+0x154>)
 80096ec:	4a45      	ldr	r2, [pc, #276]	; (8009804 <MX_TIM1_Init+0x158>)
 80096ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80096f0:	4b43      	ldr	r3, [pc, #268]	; (8009800 <MX_TIM1_Init+0x154>)
 80096f2:	22a7      	movs	r2, #167	; 0xa7
 80096f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096f6:	4b42      	ldr	r3, [pc, #264]	; (8009800 <MX_TIM1_Init+0x154>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80096fc:	4b40      	ldr	r3, [pc, #256]	; (8009800 <MX_TIM1_Init+0x154>)
 80096fe:	2263      	movs	r2, #99	; 0x63
 8009700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009702:	4b3f      	ldr	r3, [pc, #252]	; (8009800 <MX_TIM1_Init+0x154>)
 8009704:	2200      	movs	r2, #0
 8009706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009708:	4b3d      	ldr	r3, [pc, #244]	; (8009800 <MX_TIM1_Init+0x154>)
 800970a:	2200      	movs	r2, #0
 800970c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800970e:	4b3c      	ldr	r3, [pc, #240]	; (8009800 <MX_TIM1_Init+0x154>)
 8009710:	2200      	movs	r2, #0
 8009712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009714:	483a      	ldr	r0, [pc, #232]	; (8009800 <MX_TIM1_Init+0x154>)
 8009716:	f7fb fd59 	bl	80051cc <HAL_TIM_Base_Init>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8009720:	f000 faf6 	bl	8009d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009728:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800972a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800972e:	4619      	mov	r1, r3
 8009730:	4833      	ldr	r0, [pc, #204]	; (8009800 <MX_TIM1_Init+0x154>)
 8009732:	f7fb ffdb 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800973c:	f000 fae8 	bl	8009d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009740:	482f      	ldr	r0, [pc, #188]	; (8009800 <MX_TIM1_Init+0x154>)
 8009742:	f7fb fd92 	bl	800526a <HAL_TIM_PWM_Init>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800974c:	f000 fae0 	bl	8009d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009750:	2300      	movs	r3, #0
 8009752:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009754:	2300      	movs	r3, #0
 8009756:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009758:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800975c:	4619      	mov	r1, r3
 800975e:	4828      	ldr	r0, [pc, #160]	; (8009800 <MX_TIM1_Init+0x154>)
 8009760:	f7fc fbbd 	bl	8005ede <HAL_TIMEx_MasterConfigSynchronization>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800976a:	f000 fad1 	bl	8009d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800976e:	2360      	movs	r3, #96	; 0x60
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 30;
 8009772:	231e      	movs	r3, #30
 8009774:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009776:	2300      	movs	r3, #0
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800977a:	2300      	movs	r3, #0
 800977c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800977e:	2300      	movs	r3, #0
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009782:	2300      	movs	r3, #0
 8009784:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009786:	2300      	movs	r3, #0
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800978a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800978e:	2200      	movs	r2, #0
 8009790:	4619      	mov	r1, r3
 8009792:	481b      	ldr	r0, [pc, #108]	; (8009800 <MX_TIM1_Init+0x154>)
 8009794:	f7fb fee4 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800979e:	f000 fab7 	bl	8009d10 <Error_Handler>
  }
  sConfigOC.Pulse = 90;
 80097a2:	235a      	movs	r3, #90	; 0x5a
 80097a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80097a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097aa:	2204      	movs	r2, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4814      	ldr	r0, [pc, #80]	; (8009800 <MX_TIM1_Init+0x154>)
 80097b0:	f7fb fed6 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80097ba:	f000 faa9 	bl	8009d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80097be:	2300      	movs	r3, #0
 80097c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80097d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80097d8:	2300      	movs	r3, #0
 80097da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80097dc:	1d3b      	adds	r3, r7, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	4807      	ldr	r0, [pc, #28]	; (8009800 <MX_TIM1_Init+0x154>)
 80097e2:	f7fc fbc1 	bl	8005f68 <HAL_TIMEx_ConfigBreakDeadTime>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80097ec:	f000 fa90 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80097f0:	4803      	ldr	r0, [pc, #12]	; (8009800 <MX_TIM1_Init+0x154>)
 80097f2:	f000 fc9d 	bl	800a130 <HAL_TIM_MspPostInit>

}
 80097f6:	bf00      	nop
 80097f8:	3758      	adds	r7, #88	; 0x58
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	2000051c 	.word	0x2000051c
 8009804:	40010000 	.word	0x40010000

08009808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08e      	sub	sp, #56	; 0x38
 800980c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800980e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	605a      	str	r2, [r3, #4]
 8009818:	609a      	str	r2, [r3, #8]
 800981a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800981c:	f107 0320 	add.w	r3, r7, #32
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009826:	1d3b      	adds	r3, r7, #4
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	605a      	str	r2, [r3, #4]
 800982e:	609a      	str	r2, [r3, #8]
 8009830:	60da      	str	r2, [r3, #12]
 8009832:	611a      	str	r2, [r3, #16]
 8009834:	615a      	str	r2, [r3, #20]
 8009836:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009838:	4b2d      	ldr	r3, [pc, #180]	; (80098f0 <MX_TIM2_Init+0xe8>)
 800983a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800983e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 540;
 8009840:	4b2b      	ldr	r3, [pc, #172]	; (80098f0 <MX_TIM2_Init+0xe8>)
 8009842:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009848:	4b29      	ldr	r3, [pc, #164]	; (80098f0 <MX_TIM2_Init+0xe8>)
 800984a:	2200      	movs	r2, #0
 800984c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 800984e:	4b28      	ldr	r3, [pc, #160]	; (80098f0 <MX_TIM2_Init+0xe8>)
 8009850:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009856:	4b26      	ldr	r3, [pc, #152]	; (80098f0 <MX_TIM2_Init+0xe8>)
 8009858:	2200      	movs	r2, #0
 800985a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800985c:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <MX_TIM2_Init+0xe8>)
 800985e:	2200      	movs	r2, #0
 8009860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009862:	4823      	ldr	r0, [pc, #140]	; (80098f0 <MX_TIM2_Init+0xe8>)
 8009864:	f7fb fcb2 	bl	80051cc <HAL_TIM_Base_Init>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800986e:	f000 fa4f 	bl	8009d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800987c:	4619      	mov	r1, r3
 800987e:	481c      	ldr	r0, [pc, #112]	; (80098f0 <MX_TIM2_Init+0xe8>)
 8009880:	f7fb ff34 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800988a:	f000 fa41 	bl	8009d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800988e:	4818      	ldr	r0, [pc, #96]	; (80098f0 <MX_TIM2_Init+0xe8>)
 8009890:	f7fb fceb 	bl	800526a <HAL_TIM_PWM_Init>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800989a:	f000 fa39 	bl	8009d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800989e:	2300      	movs	r3, #0
 80098a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80098a6:	f107 0320 	add.w	r3, r7, #32
 80098aa:	4619      	mov	r1, r3
 80098ac:	4810      	ldr	r0, [pc, #64]	; (80098f0 <MX_TIM2_Init+0xe8>)
 80098ae:	f7fc fb16 	bl	8005ede <HAL_TIMEx_MasterConfigSynchronization>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80098b8:	f000 fa2a 	bl	8009d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098bc:	2360      	movs	r3, #96	; 0x60
 80098be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098cc:	1d3b      	adds	r3, r7, #4
 80098ce:	2200      	movs	r2, #0
 80098d0:	4619      	mov	r1, r3
 80098d2:	4807      	ldr	r0, [pc, #28]	; (80098f0 <MX_TIM2_Init+0xe8>)
 80098d4:	f7fb fe44 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80098de:	f000 fa17 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80098e2:	4803      	ldr	r0, [pc, #12]	; (80098f0 <MX_TIM2_Init+0xe8>)
 80098e4:	f000 fc24 	bl	800a130 <HAL_TIM_MspPostInit>

}
 80098e8:	bf00      	nop
 80098ea:	3738      	adds	r7, #56	; 0x38
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000dac 	.word	0x20000dac

080098f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098fa:	f107 0308 	add.w	r3, r7, #8
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	605a      	str	r2, [r3, #4]
 8009904:	609a      	str	r2, [r3, #8]
 8009906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009908:	463b      	mov	r3, r7
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009910:	4b1c      	ldr	r3, [pc, #112]	; (8009984 <MX_TIM3_Init+0x90>)
 8009912:	4a1d      	ldr	r2, [pc, #116]	; (8009988 <MX_TIM3_Init+0x94>)
 8009914:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009916:	4b1b      	ldr	r3, [pc, #108]	; (8009984 <MX_TIM3_Init+0x90>)
 8009918:	2200      	movs	r2, #0
 800991a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800991c:	4b19      	ldr	r3, [pc, #100]	; (8009984 <MX_TIM3_Init+0x90>)
 800991e:	2200      	movs	r2, #0
 8009920:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009922:	4b18      	ldr	r3, [pc, #96]	; (8009984 <MX_TIM3_Init+0x90>)
 8009924:	2200      	movs	r2, #0
 8009926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009928:	4b16      	ldr	r3, [pc, #88]	; (8009984 <MX_TIM3_Init+0x90>)
 800992a:	2200      	movs	r2, #0
 800992c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800992e:	4b15      	ldr	r3, [pc, #84]	; (8009984 <MX_TIM3_Init+0x90>)
 8009930:	2200      	movs	r2, #0
 8009932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009934:	4813      	ldr	r0, [pc, #76]	; (8009984 <MX_TIM3_Init+0x90>)
 8009936:	f7fb fc49 	bl	80051cc <HAL_TIM_Base_Init>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8009940:	f000 f9e6 	bl	8009d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800994a:	f107 0308 	add.w	r3, r7, #8
 800994e:	4619      	mov	r1, r3
 8009950:	480c      	ldr	r0, [pc, #48]	; (8009984 <MX_TIM3_Init+0x90>)
 8009952:	f7fb fecb 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800995c:	f000 f9d8 	bl	8009d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009960:	2300      	movs	r3, #0
 8009962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009964:	2300      	movs	r3, #0
 8009966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009968:	463b      	mov	r3, r7
 800996a:	4619      	mov	r1, r3
 800996c:	4805      	ldr	r0, [pc, #20]	; (8009984 <MX_TIM3_Init+0x90>)
 800996e:	f7fc fab6 	bl	8005ede <HAL_TIMEx_MasterConfigSynchronization>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8009978:	f000 f9ca 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800997c:	bf00      	nop
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20000430 	.word	0x20000430
 8009988:	40000400 	.word	0x40000400

0800998c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08e      	sub	sp, #56	; 0x38
 8009990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	605a      	str	r2, [r3, #4]
 800999c:	609a      	str	r2, [r3, #8]
 800999e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099a0:	f107 0320 	add.w	r3, r7, #32
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099aa:	1d3b      	adds	r3, r7, #4
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	605a      	str	r2, [r3, #4]
 80099b2:	609a      	str	r2, [r3, #8]
 80099b4:	60da      	str	r2, [r3, #12]
 80099b6:	611a      	str	r2, [r3, #16]
 80099b8:	615a      	str	r2, [r3, #20]
 80099ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80099bc:	4b32      	ldr	r3, [pc, #200]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099be:	4a33      	ldr	r2, [pc, #204]	; (8009a8c <MX_TIM4_Init+0x100>)
 80099c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 80099c2:	4b31      	ldr	r3, [pc, #196]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099c4:	22a7      	movs	r2, #167	; 0xa7
 80099c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099c8:	4b2f      	ldr	r3, [pc, #188]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80099ce:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099d0:	2263      	movs	r2, #99	; 0x63
 80099d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099d4:	4b2c      	ldr	r3, [pc, #176]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099da:	4b2b      	ldr	r3, [pc, #172]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099dc:	2200      	movs	r2, #0
 80099de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80099e0:	4829      	ldr	r0, [pc, #164]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099e2:	f7fb fbf3 	bl	80051cc <HAL_TIM_Base_Init>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80099ec:	f000 f990 	bl	8009d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80099f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099fa:	4619      	mov	r1, r3
 80099fc:	4822      	ldr	r0, [pc, #136]	; (8009a88 <MX_TIM4_Init+0xfc>)
 80099fe:	f7fb fe75 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8009a08:	f000 f982 	bl	8009d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009a0c:	481e      	ldr	r0, [pc, #120]	; (8009a88 <MX_TIM4_Init+0xfc>)
 8009a0e:	f7fb fc2c 	bl	800526a <HAL_TIM_PWM_Init>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8009a18:	f000 f97a 	bl	8009d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a20:	2300      	movs	r3, #0
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009a24:	f107 0320 	add.w	r3, r7, #32
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4817      	ldr	r0, [pc, #92]	; (8009a88 <MX_TIM4_Init+0xfc>)
 8009a2c:	f7fc fa57 	bl	8005ede <HAL_TIMEx_MasterConfigSynchronization>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8009a36:	f000 f96b 	bl	8009d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a3a:	2360      	movs	r3, #96	; 0x60
 8009a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30;
 8009a3e:	231e      	movs	r3, #30
 8009a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a4a:	1d3b      	adds	r3, r7, #4
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4619      	mov	r1, r3
 8009a50:	480d      	ldr	r0, [pc, #52]	; (8009a88 <MX_TIM4_Init+0xfc>)
 8009a52:	f7fb fd85 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8009a5c:	f000 f958 	bl	8009d10 <Error_Handler>
  }
  sConfigOC.Pulse = 90;
 8009a60:	235a      	movs	r3, #90	; 0x5a
 8009a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a64:	1d3b      	adds	r3, r7, #4
 8009a66:	2204      	movs	r2, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4807      	ldr	r0, [pc, #28]	; (8009a88 <MX_TIM4_Init+0xfc>)
 8009a6c:	f7fb fd78 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8009a76:	f000 f94b 	bl	8009d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009a7a:	4803      	ldr	r0, [pc, #12]	; (8009a88 <MX_TIM4_Init+0xfc>)
 8009a7c:	f000 fb58 	bl	800a130 <HAL_TIM_MspPostInit>

}
 8009a80:	bf00      	nop
 8009a82:	3738      	adds	r7, #56	; 0x38
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	2000039c 	.word	0x2000039c
 8009a8c:	40000800 	.word	0x40000800

08009a90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <MX_DMA_Init+0x3c>)
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9e:	4a0b      	ldr	r2, [pc, #44]	; (8009acc <MX_DMA_Init+0x3c>)
 8009aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <MX_DMA_Init+0x3c>)
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	2038      	movs	r0, #56	; 0x38
 8009ab8:	f7f8 f8f3 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009abc:	2038      	movs	r0, #56	; 0x38
 8009abe:	f7f8 f90c 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	40023800 	.word	0x40023800

08009ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08c      	sub	sp, #48	; 0x30
 8009ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ad6:	f107 031c 	add.w	r3, r7, #28
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	605a      	str	r2, [r3, #4]
 8009ae0:	609a      	str	r2, [r3, #8]
 8009ae2:	60da      	str	r2, [r3, #12]
 8009ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	4b81      	ldr	r3, [pc, #516]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aee:	4a80      	ldr	r2, [pc, #512]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009af0:	f043 0310 	orr.w	r3, r3, #16
 8009af4:	6313      	str	r3, [r2, #48]	; 0x30
 8009af6:	4b7e      	ldr	r3, [pc, #504]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afa:	f003 0310 	and.w	r3, r3, #16
 8009afe:	61bb      	str	r3, [r7, #24]
 8009b00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	4b7a      	ldr	r3, [pc, #488]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0a:	4a79      	ldr	r2, [pc, #484]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b0c:	f043 0304 	orr.w	r3, r3, #4
 8009b10:	6313      	str	r3, [r2, #48]	; 0x30
 8009b12:	4b77      	ldr	r3, [pc, #476]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b16:	f003 0304 	and.w	r3, r3, #4
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009b1e:	2300      	movs	r3, #0
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	4b73      	ldr	r3, [pc, #460]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	4a72      	ldr	r2, [pc, #456]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b2e:	4b70      	ldr	r3, [pc, #448]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b36:	613b      	str	r3, [r7, #16]
 8009b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	4b6c      	ldr	r3, [pc, #432]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	4a6b      	ldr	r2, [pc, #428]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b44:	f043 0301 	orr.w	r3, r3, #1
 8009b48:	6313      	str	r3, [r2, #48]	; 0x30
 8009b4a:	4b69      	ldr	r3, [pc, #420]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]
 8009b5a:	4b65      	ldr	r3, [pc, #404]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	4a64      	ldr	r2, [pc, #400]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	6313      	str	r3, [r2, #48]	; 0x30
 8009b66:	4b62      	ldr	r3, [pc, #392]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	60bb      	str	r3, [r7, #8]
 8009b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b72:	2300      	movs	r3, #0
 8009b74:	607b      	str	r3, [r7, #4]
 8009b76:	4b5e      	ldr	r3, [pc, #376]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	4a5d      	ldr	r2, [pc, #372]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b7c:	f043 0308 	orr.w	r3, r3, #8
 8009b80:	6313      	str	r3, [r2, #48]	; 0x30
 8009b82:	4b5b      	ldr	r3, [pc, #364]	; (8009cf0 <MX_GPIO_Init+0x220>)
 8009b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b86:	f003 0308 	and.w	r3, r3, #8
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2108      	movs	r1, #8
 8009b92:	4858      	ldr	r0, [pc, #352]	; (8009cf4 <MX_GPIO_Init+0x224>)
 8009b94:	f7f8 fdcc 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009b98:	2201      	movs	r2, #1
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	4856      	ldr	r0, [pc, #344]	; (8009cf8 <MX_GPIO_Init+0x228>)
 8009b9e:	f7f8 fdc7 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|APIN_Pin|BPIN_Pin|LD3_Pin 
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f64e 6110 	movw	r1, #60944	; 0xee10
 8009ba8:	4854      	ldr	r0, [pc, #336]	; (8009cfc <MX_GPIO_Init+0x22c>)
 8009baa:	f7f8 fdc1 	bl	8002730 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8009bae:	2308      	movs	r3, #8
 8009bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8009bbe:	f107 031c 	add.w	r3, r7, #28
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	484b      	ldr	r0, [pc, #300]	; (8009cf4 <MX_GPIO_Init+0x224>)
 8009bc6:	f7f8 fc19 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Straight_Pin Right_Pin Left_Pin */
  GPIO_InitStruct.Pin = Straight_Pin|Right_Pin|Left_Pin;
 8009bca:	2370      	movs	r3, #112	; 0x70
 8009bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009bd6:	f107 031c 	add.w	r3, r7, #28
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4845      	ldr	r0, [pc, #276]	; (8009cf4 <MX_GPIO_Init+0x224>)
 8009bde:	f7f8 fc0d 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8009be2:	2301      	movs	r3, #1
 8009be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009be6:	2301      	movs	r3, #1
 8009be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009bf2:	f107 031c 	add.w	r3, r7, #28
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	483f      	ldr	r0, [pc, #252]	; (8009cf8 <MX_GPIO_Init+0x228>)
 8009bfa:	f7f8 fbff 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8009bfe:	2308      	movs	r3, #8
 8009c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c02:	2302      	movs	r3, #2
 8009c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009c0e:	2305      	movs	r3, #5
 8009c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8009c12:	f107 031c 	add.w	r3, r7, #28
 8009c16:	4619      	mov	r1, r3
 8009c18:	4837      	ldr	r0, [pc, #220]	; (8009cf8 <MX_GPIO_Init+0x228>)
 8009c1a:	f7f8 fbef 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009c22:	4b37      	ldr	r3, [pc, #220]	; (8009d00 <MX_GPIO_Init+0x230>)
 8009c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009c2a:	f107 031c 	add.w	r3, r7, #28
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4834      	ldr	r0, [pc, #208]	; (8009d04 <MX_GPIO_Init+0x234>)
 8009c32:	f7f8 fbe3 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8009c36:	2304      	movs	r3, #4
 8009c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8009c42:	f107 031c 	add.w	r3, r7, #28
 8009c46:	4619      	mov	r1, r3
 8009c48:	482f      	ldr	r0, [pc, #188]	; (8009d08 <MX_GPIO_Init+0x238>)
 8009c4a:	f7f8 fbd7 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8009c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c54:	2302      	movs	r3, #2
 8009c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009c60:	2305      	movs	r3, #5
 8009c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8009c64:	f107 031c 	add.w	r3, r7, #28
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4827      	ldr	r0, [pc, #156]	; (8009d08 <MX_GPIO_Init+0x238>)
 8009c6c:	f7f8 fbc6 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 APIN_Pin BPIN_Pin LD3_Pin 
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|APIN_Pin|BPIN_Pin|LD3_Pin 
 8009c70:	f64e 6310 	movw	r3, #60944	; 0xee10
 8009c74:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c76:	2301      	movs	r3, #1
 8009c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c82:	f107 031c 	add.w	r3, r7, #28
 8009c86:	4619      	mov	r1, r3
 8009c88:	481c      	ldr	r0, [pc, #112]	; (8009cfc <MX_GPIO_Init+0x22c>)
 8009c8a:	f7f8 fbb7 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009c8e:	2320      	movs	r3, #32
 8009c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c92:	2300      	movs	r3, #0
 8009c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009c9a:	f107 031c 	add.w	r3, r7, #28
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4816      	ldr	r0, [pc, #88]	; (8009cfc <MX_GPIO_Init+0x22c>)
 8009ca2:	f7f8 fbab 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reverse_Pin Stop_Pin */
  GPIO_InitStruct.Pin = Reverse_Pin|Stop_Pin;
 8009ca6:	2330      	movs	r3, #48	; 0x30
 8009ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009caa:	2300      	movs	r3, #0
 8009cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009cae:	2302      	movs	r3, #2
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cb2:	f107 031c 	add.w	r3, r7, #28
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4813      	ldr	r0, [pc, #76]	; (8009d08 <MX_GPIO_Init+0x238>)
 8009cba:	f7f8 fb9f 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009cc2:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <MX_GPIO_Init+0x23c>)
 8009cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8009cca:	f107 031c 	add.w	r3, r7, #28
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4808      	ldr	r0, [pc, #32]	; (8009cf4 <MX_GPIO_Init+0x224>)
 8009cd2:	f7f8 fb93 	bl	80023fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	2006      	movs	r0, #6
 8009cdc:	f7f7 ffe1 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009ce0:	2006      	movs	r0, #6
 8009ce2:	f7f7 fffa 	bl	8001cda <HAL_NVIC_EnableIRQ>

}
 8009ce6:	bf00      	nop
 8009ce8:	3730      	adds	r7, #48	; 0x30
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40023800 	.word	0x40023800
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	40020800 	.word	0x40020800
 8009cfc:	40020c00 	.word	0x40020c00
 8009d00:	10110000 	.word	0x10110000
 8009d04:	40020000 	.word	0x40020000
 8009d08:	40020400 	.word	0x40020400
 8009d0c:	10120000 	.word	0x10120000

08009d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d10:	b480      	push	{r7}
 8009d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009d14:	bf00      	nop
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
	...

08009d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d26:	2300      	movs	r3, #0
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	4b10      	ldr	r3, [pc, #64]	; (8009d6c <HAL_MspInit+0x4c>)
 8009d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d2e:	4a0f      	ldr	r2, [pc, #60]	; (8009d6c <HAL_MspInit+0x4c>)
 8009d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d34:	6453      	str	r3, [r2, #68]	; 0x44
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <HAL_MspInit+0x4c>)
 8009d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d42:	2300      	movs	r3, #0
 8009d44:	603b      	str	r3, [r7, #0]
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <HAL_MspInit+0x4c>)
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <HAL_MspInit+0x4c>)
 8009d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d50:	6413      	str	r3, [r2, #64]	; 0x40
 8009d52:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <HAL_MspInit+0x4c>)
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8009d5e:	2007      	movs	r0, #7
 8009d60:	f7f7 ff94 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	40023800 	.word	0x40023800

08009d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	; 0x28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d78:	f107 0314 	add.w	r3, r7, #20
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	605a      	str	r2, [r3, #4]
 8009d82:	609a      	str	r2, [r3, #8]
 8009d84:	60da      	str	r2, [r3, #12]
 8009d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a33      	ldr	r2, [pc, #204]	; (8009e5c <HAL_ADC_MspInit+0xec>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d15f      	bne.n	8009e52 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009d92:	2300      	movs	r3, #0
 8009d94:	613b      	str	r3, [r7, #16]
 8009d96:	4b32      	ldr	r3, [pc, #200]	; (8009e60 <HAL_ADC_MspInit+0xf0>)
 8009d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d9a:	4a31      	ldr	r2, [pc, #196]	; (8009e60 <HAL_ADC_MspInit+0xf0>)
 8009d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009da0:	6453      	str	r3, [r2, #68]	; 0x44
 8009da2:	4b2f      	ldr	r3, [pc, #188]	; (8009e60 <HAL_ADC_MspInit+0xf0>)
 8009da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009daa:	613b      	str	r3, [r7, #16]
 8009dac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dae:	2300      	movs	r3, #0
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <HAL_ADC_MspInit+0xf0>)
 8009db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db6:	4a2a      	ldr	r2, [pc, #168]	; (8009e60 <HAL_ADC_MspInit+0xf0>)
 8009db8:	f043 0301 	orr.w	r3, r3, #1
 8009dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8009dbe:	4b28      	ldr	r3, [pc, #160]	; (8009e60 <HAL_ADC_MspInit+0xf0>)
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8009dca:	2306      	movs	r3, #6
 8009dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dd6:	f107 0314 	add.w	r3, r7, #20
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4821      	ldr	r0, [pc, #132]	; (8009e64 <HAL_ADC_MspInit+0xf4>)
 8009dde:	f7f8 fb0d 	bl	80023fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8009de2:	4b21      	ldr	r3, [pc, #132]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009de4:	4a21      	ldr	r2, [pc, #132]	; (8009e6c <HAL_ADC_MspInit+0xfc>)
 8009de6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009de8:	4b1f      	ldr	r3, [pc, #124]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009dee:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009df4:	4b1c      	ldr	r3, [pc, #112]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009dfa:	4b1b      	ldr	r3, [pc, #108]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009e02:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8009e0a:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009e20:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009e26:	4810      	ldr	r0, [pc, #64]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e28:	f7f7 ff72 	bl	8001d10 <HAL_DMA_Init>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8009e32:	f7ff ff6d 	bl	8009d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a0b      	ldr	r2, [pc, #44]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8009e3c:	4a0a      	ldr	r2, [pc, #40]	; (8009e68 <HAL_ADC_MspInit+0xf8>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	2012      	movs	r0, #18
 8009e48:	f7f7 ff2b 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009e4c:	2012      	movs	r0, #18
 8009e4e:	f7f7 ff44 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009e52:	bf00      	nop
 8009e54:	3728      	adds	r7, #40	; 0x28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40012000 	.word	0x40012000
 8009e60:	40023800 	.word	0x40023800
 8009e64:	40020000 	.word	0x40020000
 8009e68:	200004b8 	.word	0x200004b8
 8009e6c:	40026410 	.word	0x40026410

08009e70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08a      	sub	sp, #40	; 0x28
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e78:	f107 0314 	add.w	r3, r7, #20
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	605a      	str	r2, [r3, #4]
 8009e82:	609a      	str	r2, [r3, #8]
 8009e84:	60da      	str	r2, [r3, #12]
 8009e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a19      	ldr	r2, [pc, #100]	; (8009ef4 <HAL_I2C_MspInit+0x84>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d12c      	bne.n	8009eec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e92:	2300      	movs	r3, #0
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	4b18      	ldr	r3, [pc, #96]	; (8009ef8 <HAL_I2C_MspInit+0x88>)
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <HAL_I2C_MspInit+0x88>)
 8009e9c:	f043 0302 	orr.w	r3, r3, #2
 8009ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <HAL_I2C_MspInit+0x88>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	613b      	str	r3, [r7, #16]
 8009eac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8009eae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009eb4:	2312      	movs	r3, #18
 8009eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009ec0:	2304      	movs	r3, #4
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ec4:	f107 0314 	add.w	r3, r7, #20
 8009ec8:	4619      	mov	r1, r3
 8009eca:	480c      	ldr	r0, [pc, #48]	; (8009efc <HAL_I2C_MspInit+0x8c>)
 8009ecc:	f7f8 fa96 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	4b08      	ldr	r3, [pc, #32]	; (8009ef8 <HAL_I2C_MspInit+0x88>)
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	4a07      	ldr	r2, [pc, #28]	; (8009ef8 <HAL_I2C_MspInit+0x88>)
 8009eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ede:	6413      	str	r3, [r2, #64]	; 0x40
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <HAL_I2C_MspInit+0x88>)
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009eec:	bf00      	nop
 8009eee:	3728      	adds	r7, #40	; 0x28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40005400 	.word	0x40005400
 8009ef8:	40023800 	.word	0x40023800
 8009efc:	40020400 	.word	0x40020400

08009f00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f08:	f107 0314 	add.w	r3, r7, #20
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	605a      	str	r2, [r3, #4]
 8009f12:	609a      	str	r2, [r3, #8]
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a28      	ldr	r2, [pc, #160]	; (8009fc0 <HAL_I2S_MspInit+0xc0>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d14a      	bne.n	8009fb8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009f22:	2300      	movs	r3, #0
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	4a26      	ldr	r2, [pc, #152]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f30:	6413      	str	r3, [r2, #64]	; 0x40
 8009f32:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f3a:	613b      	str	r3, [r7, #16]
 8009f3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	4b20      	ldr	r3, [pc, #128]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	4a1f      	ldr	r2, [pc, #124]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f4e:	4b1d      	ldr	r3, [pc, #116]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60bb      	str	r3, [r7, #8]
 8009f5e:	4b19      	ldr	r3, [pc, #100]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	4a18      	ldr	r2, [pc, #96]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f64:	f043 0304 	orr.w	r3, r3, #4
 8009f68:	6313      	str	r3, [r2, #48]	; 0x30
 8009f6a:	4b16      	ldr	r3, [pc, #88]	; (8009fc4 <HAL_I2S_MspInit+0xc4>)
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	60bb      	str	r3, [r7, #8]
 8009f74:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8009f76:	2310      	movs	r3, #16
 8009f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f82:	2300      	movs	r3, #0
 8009f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009f86:	2306      	movs	r3, #6
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8009f8a:	f107 0314 	add.w	r3, r7, #20
 8009f8e:	4619      	mov	r1, r3
 8009f90:	480d      	ldr	r0, [pc, #52]	; (8009fc8 <HAL_I2S_MspInit+0xc8>)
 8009f92:	f7f8 fa33 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8009f96:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8009f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009fa8:	2306      	movs	r3, #6
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fac:	f107 0314 	add.w	r3, r7, #20
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4806      	ldr	r0, [pc, #24]	; (8009fcc <HAL_I2S_MspInit+0xcc>)
 8009fb4:	f7f8 fa22 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8009fb8:	bf00      	nop
 8009fba:	3728      	adds	r7, #40	; 0x28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	40003c00 	.word	0x40003c00
 8009fc4:	40023800 	.word	0x40023800
 8009fc8:	40020000 	.word	0x40020000
 8009fcc:	40020800 	.word	0x40020800

08009fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08a      	sub	sp, #40	; 0x28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fd8:	f107 0314 	add.w	r3, r7, #20
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	609a      	str	r2, [r3, #8]
 8009fe4:	60da      	str	r2, [r3, #12]
 8009fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a19      	ldr	r2, [pc, #100]	; (800a054 <HAL_SPI_MspInit+0x84>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d12b      	bne.n	800a04a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	613b      	str	r3, [r7, #16]
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <HAL_SPI_MspInit+0x88>)
 8009ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffa:	4a17      	ldr	r2, [pc, #92]	; (800a058 <HAL_SPI_MspInit+0x88>)
 8009ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a000:	6453      	str	r3, [r2, #68]	; 0x44
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <HAL_SPI_MspInit+0x88>)
 800a004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	4b11      	ldr	r3, [pc, #68]	; (800a058 <HAL_SPI_MspInit+0x88>)
 800a014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a016:	4a10      	ldr	r2, [pc, #64]	; (800a058 <HAL_SPI_MspInit+0x88>)
 800a018:	f043 0301 	orr.w	r3, r3, #1
 800a01c:	6313      	str	r3, [r2, #48]	; 0x30
 800a01e:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <HAL_SPI_MspInit+0x88>)
 800a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800a02a:	23e0      	movs	r3, #224	; 0xe0
 800a02c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a02e:	2302      	movs	r3, #2
 800a030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a032:	2300      	movs	r3, #0
 800a034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a036:	2300      	movs	r3, #0
 800a038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a03a:	2305      	movs	r3, #5
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a03e:	f107 0314 	add.w	r3, r7, #20
 800a042:	4619      	mov	r1, r3
 800a044:	4805      	ldr	r0, [pc, #20]	; (800a05c <HAL_SPI_MspInit+0x8c>)
 800a046:	f7f8 f9d9 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a04a:	bf00      	nop
 800a04c:	3728      	adds	r7, #40	; 0x28
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	40013000 	.word	0x40013000
 800a058:	40023800 	.word	0x40023800
 800a05c:	40020000 	.word	0x40020000

0800a060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a2c      	ldr	r2, [pc, #176]	; (800a120 <HAL_TIM_Base_MspInit+0xc0>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d10e      	bne.n	800a090 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	4b2b      	ldr	r3, [pc, #172]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07a:	4a2a      	ldr	r2, [pc, #168]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a07c:	f043 0301 	orr.w	r3, r3, #1
 800a080:	6453      	str	r3, [r2, #68]	; 0x44
 800a082:	4b28      	ldr	r3, [pc, #160]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a08e:	e042      	b.n	800a116 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a098:	d10e      	bne.n	800a0b8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a09a:	2300      	movs	r3, #0
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	4b21      	ldr	r3, [pc, #132]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	4a20      	ldr	r2, [pc, #128]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a0aa:	4b1e      	ldr	r3, [pc, #120]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	693b      	ldr	r3, [r7, #16]
}
 800a0b6:	e02e      	b.n	800a116 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1a      	ldr	r2, [pc, #104]	; (800a128 <HAL_TIM_Base_MspInit+0xc8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d116      	bne.n	800a0f0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	4b17      	ldr	r3, [pc, #92]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	4a16      	ldr	r2, [pc, #88]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	6413      	str	r3, [r2, #64]	; 0x40
 800a0d2:	4b14      	ldr	r3, [pc, #80]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	f003 0302 	and.w	r3, r3, #2
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	201d      	movs	r0, #29
 800a0e4:	f7f7 fddd 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a0e8:	201d      	movs	r0, #29
 800a0ea:	f7f7 fdf6 	bl	8001cda <HAL_NVIC_EnableIRQ>
}
 800a0ee:	e012      	b.n	800a116 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a0d      	ldr	r2, [pc, #52]	; (800a12c <HAL_TIM_Base_MspInit+0xcc>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d10d      	bne.n	800a116 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60bb      	str	r3, [r7, #8]
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	4a08      	ldr	r2, [pc, #32]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a104:	f043 0304 	orr.w	r3, r3, #4
 800a108:	6413      	str	r3, [r2, #64]	; 0x40
 800a10a:	4b06      	ldr	r3, [pc, #24]	; (800a124 <HAL_TIM_Base_MspInit+0xc4>)
 800a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	60bb      	str	r3, [r7, #8]
 800a114:	68bb      	ldr	r3, [r7, #8]
}
 800a116:	bf00      	nop
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	40010000 	.word	0x40010000
 800a124:	40023800 	.word	0x40023800
 800a128:	40000400 	.word	0x40000400
 800a12c:	40000800 	.word	0x40000800

0800a130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08c      	sub	sp, #48	; 0x30
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a138:	f107 031c 	add.w	r3, r7, #28
 800a13c:	2200      	movs	r2, #0
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	609a      	str	r2, [r3, #8]
 800a144:	60da      	str	r2, [r3, #12]
 800a146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a46      	ldr	r2, [pc, #280]	; (800a268 <HAL_TIM_MspPostInit+0x138>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d11f      	bne.n	800a192 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a152:	2300      	movs	r3, #0
 800a154:	61bb      	str	r3, [r7, #24]
 800a156:	4b45      	ldr	r3, [pc, #276]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	4a44      	ldr	r2, [pc, #272]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a15c:	f043 0310 	orr.w	r3, r3, #16
 800a160:	6313      	str	r3, [r2, #48]	; 0x30
 800a162:	4b42      	ldr	r3, [pc, #264]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	f003 0310 	and.w	r3, r3, #16
 800a16a:	61bb      	str	r3, [r7, #24]
 800a16c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800a16e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a174:	2302      	movs	r3, #2
 800a176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a180:	2301      	movs	r3, #1
 800a182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a184:	f107 031c 	add.w	r3, r7, #28
 800a188:	4619      	mov	r1, r3
 800a18a:	4839      	ldr	r0, [pc, #228]	; (800a270 <HAL_TIM_MspPostInit+0x140>)
 800a18c:	f7f8 f936 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800a190:	e066      	b.n	800a260 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19a:	d11f      	bne.n	800a1dc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	4b32      	ldr	r3, [pc, #200]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a4:	4a31      	ldr	r2, [pc, #196]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ac:	4b2f      	ldr	r3, [pc, #188]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a1b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1be:	2302      	movs	r3, #2
 800a1c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1ce:	f107 031c 	add.w	r3, r7, #28
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4827      	ldr	r0, [pc, #156]	; (800a274 <HAL_TIM_MspPostInit+0x144>)
 800a1d6:	f7f8 f911 	bl	80023fc <HAL_GPIO_Init>
}
 800a1da:	e041      	b.n	800a260 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM4)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a25      	ldr	r2, [pc, #148]	; (800a278 <HAL_TIM_MspPostInit+0x148>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d13c      	bne.n	800a260 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	613b      	str	r3, [r7, #16]
 800a1ea:	4b20      	ldr	r3, [pc, #128]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ee:	4a1f      	ldr	r2, [pc, #124]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a1f0:	f043 0308 	orr.w	r3, r3, #8
 800a1f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a1f6:	4b1d      	ldr	r3, [pc, #116]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	613b      	str	r3, [r7, #16]
 800a200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	4b19      	ldr	r3, [pc, #100]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	4a18      	ldr	r2, [pc, #96]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a20c:	f043 0302 	orr.w	r3, r3, #2
 800a210:	6313      	str	r3, [r2, #48]	; 0x30
 800a212:	4b16      	ldr	r3, [pc, #88]	; (800a26c <HAL_TIM_MspPostInit+0x13c>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a21e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a224:	2302      	movs	r3, #2
 800a226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a22c:	2300      	movs	r3, #0
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a230:	2302      	movs	r3, #2
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a234:	f107 031c 	add.w	r3, r7, #28
 800a238:	4619      	mov	r1, r3
 800a23a:	4810      	ldr	r0, [pc, #64]	; (800a27c <HAL_TIM_MspPostInit+0x14c>)
 800a23c:	f7f8 f8de 	bl	80023fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a240:	2380      	movs	r3, #128	; 0x80
 800a242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a244:	2302      	movs	r3, #2
 800a246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a24c:	2300      	movs	r3, #0
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a250:	2302      	movs	r3, #2
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a254:	f107 031c 	add.w	r3, r7, #28
 800a258:	4619      	mov	r1, r3
 800a25a:	4809      	ldr	r0, [pc, #36]	; (800a280 <HAL_TIM_MspPostInit+0x150>)
 800a25c:	f7f8 f8ce 	bl	80023fc <HAL_GPIO_Init>
}
 800a260:	bf00      	nop
 800a262:	3730      	adds	r7, #48	; 0x30
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	40010000 	.word	0x40010000
 800a26c:	40023800 	.word	0x40023800
 800a270:	40021000 	.word	0x40021000
 800a274:	40020000 	.word	0x40020000
 800a278:	40000800 	.word	0x40000800
 800a27c:	40020c00 	.word	0x40020c00
 800a280:	40020400 	.word	0x40020400

0800a284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a288:	bf00      	nop
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a292:	b480      	push	{r7}
 800a294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a296:	e7fe      	b.n	800a296 <HardFault_Handler+0x4>

0800a298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a29c:	e7fe      	b.n	800a29c <MemManage_Handler+0x4>

0800a29e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a2a2:	e7fe      	b.n	800a2a2 <BusFault_Handler+0x4>

0800a2a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a2a8:	e7fe      	b.n	800a2a8 <UsageFault_Handler+0x4>

0800a2aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a2ae:	bf00      	nop
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a2bc:	bf00      	nop
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a2ca:	bf00      	nop
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a2d8:	f7f6 fe88 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a2dc:	bf00      	nop
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	f7f8 fa3d 	bl	8002764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a2f4:	4802      	ldr	r0, [pc, #8]	; (800a300 <ADC_IRQHandler+0x10>)
 800a2f6:	f7f6 fefe 	bl	80010f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800a2fa:	bf00      	nop
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000470 	.word	0x20000470

0800a304 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a308:	4802      	ldr	r0, [pc, #8]	; (800a314 <TIM3_IRQHandler+0x10>)
 800a30a:	f7fb f821 	bl	8005350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a30e:	bf00      	nop
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000430 	.word	0x20000430

0800a318 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a31c:	4802      	ldr	r0, [pc, #8]	; (800a328 <DMA2_Stream0_IRQHandler+0x10>)
 800a31e:	f7f7 fe05 	bl	8001f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800a322:	bf00      	nop
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	200004b8 	.word	0x200004b8

0800a32c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a330:	4802      	ldr	r0, [pc, #8]	; (800a33c <OTG_FS_IRQHandler+0x10>)
 800a332:	f7f9 f953 	bl	80035dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	200020d4 	.word	0x200020d4

0800a340 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a34c:	2300      	movs	r3, #0
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	e00a      	b.n	800a368 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a352:	f3af 8000 	nop.w
 800a356:	4601      	mov	r1, r0
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	60ba      	str	r2, [r7, #8]
 800a35e:	b2ca      	uxtb	r2, r1
 800a360:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	3301      	adds	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	dbf0      	blt.n	800a352 <_read+0x12>
	}

return len;
 800a370:	687b      	ldr	r3, [r7, #4]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	e009      	b.n	800a3a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	1c5a      	adds	r2, r3, #1
 800a390:	60ba      	str	r2, [r7, #8]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	3301      	adds	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	dbf1      	blt.n	800a38c <_write+0x12>
	}
	return len;
 800a3a8:	687b      	ldr	r3, [r7, #4]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <_close>:

int _close(int file)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
	return -1;
 800a3ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a3da:	605a      	str	r2, [r3, #4]
	return 0;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <_isatty>:

int _isatty(int file)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
	return 1;
 800a3f2:	2301      	movs	r3, #1
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
	return 0;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
	...

0800a41c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <_sbrk+0x50>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <_sbrk+0x16>
		heap_end = &end;
 800a42c:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <_sbrk+0x50>)
 800a42e:	4a10      	ldr	r2, [pc, #64]	; (800a470 <_sbrk+0x54>)
 800a430:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a432:	4b0e      	ldr	r3, [pc, #56]	; (800a46c <_sbrk+0x50>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <_sbrk+0x50>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4413      	add	r3, r2
 800a440:	466a      	mov	r2, sp
 800a442:	4293      	cmp	r3, r2
 800a444:	d907      	bls.n	800a456 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a446:	f000 fd89 	bl	800af5c <__errno>
 800a44a:	4602      	mov	r2, r0
 800a44c:	230c      	movs	r3, #12
 800a44e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
 800a454:	e006      	b.n	800a464 <_sbrk+0x48>
	}

	heap_end += incr;
 800a456:	4b05      	ldr	r3, [pc, #20]	; (800a46c <_sbrk+0x50>)
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	4a03      	ldr	r2, [pc, #12]	; (800a46c <_sbrk+0x50>)
 800a460:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	2000038c 	.word	0x2000038c
 800a470:	200026e0 	.word	0x200026e0

0800a474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a478:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <SystemInit+0x60>)
 800a47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47e:	4a15      	ldr	r2, [pc, #84]	; (800a4d4 <SystemInit+0x60>)
 800a480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a488:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <SystemInit+0x64>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a12      	ldr	r2, [pc, #72]	; (800a4d8 <SystemInit+0x64>)
 800a48e:	f043 0301 	orr.w	r3, r3, #1
 800a492:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a494:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <SystemInit+0x64>)
 800a496:	2200      	movs	r2, #0
 800a498:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a49a:	4b0f      	ldr	r3, [pc, #60]	; (800a4d8 <SystemInit+0x64>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a0e      	ldr	r2, [pc, #56]	; (800a4d8 <SystemInit+0x64>)
 800a4a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a4a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <SystemInit+0x64>)
 800a4ac:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <SystemInit+0x68>)
 800a4ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a4b0:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <SystemInit+0x64>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <SystemInit+0x64>)
 800a4b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a4bc:	4b06      	ldr	r3, [pc, #24]	; (800a4d8 <SystemInit+0x64>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a4c2:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <SystemInit+0x60>)
 800a4c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a4c8:	609a      	str	r2, [r3, #8]
#endif
}
 800a4ca:	bf00      	nop
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	e000ed00 	.word	0xe000ed00
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	24003010 	.word	0x24003010

0800a4e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4912      	ldr	r1, [pc, #72]	; (800a530 <MX_USB_DEVICE_Init+0x50>)
 800a4e8:	4812      	ldr	r0, [pc, #72]	; (800a534 <MX_USB_DEVICE_Init+0x54>)
 800a4ea:	f7fd fb55 	bl	8007b98 <USBD_Init>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a4f4:	f7ff fc0c 	bl	8009d10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a4f8:	490f      	ldr	r1, [pc, #60]	; (800a538 <MX_USB_DEVICE_Init+0x58>)
 800a4fa:	480e      	ldr	r0, [pc, #56]	; (800a534 <MX_USB_DEVICE_Init+0x54>)
 800a4fc:	f7fd fb77 	bl	8007bee <USBD_RegisterClass>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a506:	f7ff fc03 	bl	8009d10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a50a:	490c      	ldr	r1, [pc, #48]	; (800a53c <MX_USB_DEVICE_Init+0x5c>)
 800a50c:	4809      	ldr	r0, [pc, #36]	; (800a534 <MX_USB_DEVICE_Init+0x54>)
 800a50e:	f7fd faa5 	bl	8007a5c <USBD_CDC_RegisterInterface>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a518:	f7ff fbfa 	bl	8009d10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a51c:	4805      	ldr	r0, [pc, #20]	; (800a534 <MX_USB_DEVICE_Init+0x54>)
 800a51e:	f7fd fb80 	bl	8007c22 <USBD_Start>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a528:	f7ff fbf2 	bl	8009d10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a52c:	bf00      	nop
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	20000134 	.word	0x20000134
 800a534:	20000e38 	.word	0x20000e38
 800a538:	20000014 	.word	0x20000014
 800a53c:	20000124 	.word	0x20000124

0800a540 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a544:	2200      	movs	r2, #0
 800a546:	4905      	ldr	r1, [pc, #20]	; (800a55c <CDC_Init_FS+0x1c>)
 800a548:	4805      	ldr	r0, [pc, #20]	; (800a560 <CDC_Init_FS+0x20>)
 800a54a:	f7fd fa9e 	bl	8007a8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a54e:	4905      	ldr	r1, [pc, #20]	; (800a564 <CDC_Init_FS+0x24>)
 800a550:	4803      	ldr	r0, [pc, #12]	; (800a560 <CDC_Init_FS+0x20>)
 800a552:	f7fd fab4 	bl	8007abe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a556:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a558:	4618      	mov	r0, r3
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	200018d4 	.word	0x200018d4
 800a560:	20000e38 	.word	0x20000e38
 800a564:	200010d4 	.word	0x200010d4

0800a568 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a568:	b480      	push	{r7}
 800a56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a56c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a56e:	4618      	mov	r0, r3
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	6039      	str	r1, [r7, #0]
 800a582:	71fb      	strb	r3, [r7, #7]
 800a584:	4613      	mov	r3, r2
 800a586:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a588:	79fb      	ldrb	r3, [r7, #7]
 800a58a:	2b23      	cmp	r3, #35	; 0x23
 800a58c:	d85c      	bhi.n	800a648 <CDC_Control_FS+0xd0>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <CDC_Control_FS+0x1c>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a649 	.word	0x0800a649
 800a598:	0800a649 	.word	0x0800a649
 800a59c:	0800a649 	.word	0x0800a649
 800a5a0:	0800a649 	.word	0x0800a649
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a649 	.word	0x0800a649
 800a5ac:	0800a649 	.word	0x0800a649
 800a5b0:	0800a649 	.word	0x0800a649
 800a5b4:	0800a649 	.word	0x0800a649
 800a5b8:	0800a649 	.word	0x0800a649
 800a5bc:	0800a649 	.word	0x0800a649
 800a5c0:	0800a649 	.word	0x0800a649
 800a5c4:	0800a649 	.word	0x0800a649
 800a5c8:	0800a649 	.word	0x0800a649
 800a5cc:	0800a649 	.word	0x0800a649
 800a5d0:	0800a649 	.word	0x0800a649
 800a5d4:	0800a649 	.word	0x0800a649
 800a5d8:	0800a649 	.word	0x0800a649
 800a5dc:	0800a649 	.word	0x0800a649
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a649 	.word	0x0800a649
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	0800a649 	.word	0x0800a649
 800a600:	0800a649 	.word	0x0800a649
 800a604:	0800a649 	.word	0x0800a649
 800a608:	0800a649 	.word	0x0800a649
 800a60c:	0800a649 	.word	0x0800a649
 800a610:	0800a649 	.word	0x0800a649
 800a614:	0800a625 	.word	0x0800a625
 800a618:	0800a637 	.word	0x0800a637
 800a61c:	0800a649 	.word	0x0800a649
 800a620:	0800a649 	.word	0x0800a649
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a624:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <CDC_Control_FS+0xe0>)
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	6810      	ldr	r0, [r2, #0]
 800a62a:	6018      	str	r0, [r3, #0]
 800a62c:	8891      	ldrh	r1, [r2, #4]
 800a62e:	7992      	ldrb	r2, [r2, #6]
 800a630:	8099      	strh	r1, [r3, #4]
 800a632:	719a      	strb	r2, [r3, #6]

    break;
 800a634:	e009      	b.n	800a64a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	4a07      	ldr	r2, [pc, #28]	; (800a658 <CDC_Control_FS+0xe0>)
 800a63a:	6810      	ldr	r0, [r2, #0]
 800a63c:	6018      	str	r0, [r3, #0]
 800a63e:	8891      	ldrh	r1, [r2, #4]
 800a640:	7992      	ldrb	r2, [r2, #6]
 800a642:	8099      	strh	r1, [r3, #4]
 800a644:	719a      	strb	r2, [r3, #6]

    break;
 800a646:	e000      	b.n	800a64a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a648:	bf00      	nop
  }

  return (USBD_OK);
 800a64a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	2000011c 	.word	0x2000011c

0800a65c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	4805      	ldr	r0, [pc, #20]	; (800a680 <CDC_Receive_FS+0x24>)
 800a66a:	f7fd fa28 	bl	8007abe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a66e:	4804      	ldr	r0, [pc, #16]	; (800a680 <CDC_Receive_FS+0x24>)
 800a670:	f7fd fa68 	bl	8007b44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a674:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000e38 	.word	0x20000e38

0800a684 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a694:	4b0d      	ldr	r3, [pc, #52]	; (800a6cc <CDC_Transmit_FS+0x48>)
 800a696:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a69a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e00b      	b.n	800a6c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6aa:	887b      	ldrh	r3, [r7, #2]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	6879      	ldr	r1, [r7, #4]
 800a6b0:	4806      	ldr	r0, [pc, #24]	; (800a6cc <CDC_Transmit_FS+0x48>)
 800a6b2:	f7fd f9ea 	bl	8007a8a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6b6:	4805      	ldr	r0, [pc, #20]	; (800a6cc <CDC_Transmit_FS+0x48>)
 800a6b8:	f7fd fa15 	bl	8007ae6 <USBD_CDC_TransmitPacket>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20000e38 	.word	0x20000e38

0800a6d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	2200      	movs	r2, #0
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	609a      	str	r2, [r3, #8]
 800a6e4:	60da      	str	r2, [r3, #12]
 800a6e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6f0:	d147      	bne.n	800a782 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	4b25      	ldr	r3, [pc, #148]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fa:	4a24      	ldr	r2, [pc, #144]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a6fc:	f043 0301 	orr.w	r3, r3, #1
 800a700:	6313      	str	r3, [r2, #48]	; 0x30
 800a702:	4b22      	ldr	r3, [pc, #136]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	613b      	str	r3, [r7, #16]
 800a70c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a70e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a714:	2300      	movs	r3, #0
 800a716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a71c:	f107 0314 	add.w	r3, r7, #20
 800a720:	4619      	mov	r1, r3
 800a722:	481b      	ldr	r0, [pc, #108]	; (800a790 <HAL_PCD_MspInit+0xc0>)
 800a724:	f7f7 fe6a 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a728:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a72c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a72e:	2302      	movs	r3, #2
 800a730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a732:	2300      	movs	r3, #0
 800a734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a736:	2300      	movs	r3, #0
 800a738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a73a:	230a      	movs	r3, #10
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a73e:	f107 0314 	add.w	r3, r7, #20
 800a742:	4619      	mov	r1, r3
 800a744:	4812      	ldr	r0, [pc, #72]	; (800a790 <HAL_PCD_MspInit+0xc0>)
 800a746:	f7f7 fe59 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a74a:	4b10      	ldr	r3, [pc, #64]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	4a0f      	ldr	r2, [pc, #60]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a754:	6353      	str	r3, [r2, #52]	; 0x34
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75e:	4a0b      	ldr	r2, [pc, #44]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a764:	6453      	str	r3, [r2, #68]	; 0x44
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <HAL_PCD_MspInit+0xbc>)
 800a768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a772:	2200      	movs	r2, #0
 800a774:	2100      	movs	r1, #0
 800a776:	2043      	movs	r0, #67	; 0x43
 800a778:	f7f7 fa93 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a77c:	2043      	movs	r0, #67	; 0x43
 800a77e:	f7f7 faac 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a782:	bf00      	nop
 800a784:	3728      	adds	r7, #40	; 0x28
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40023800 	.word	0x40023800
 800a790:	40020000 	.word	0x40020000

0800a794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f7fd fa82 	bl	8007cb4 <USBD_LL_SetupStage>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	1a9b      	subs	r3, r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	f7fd fab2 	bl	8007d4a <USBD_LL_DataOutStage>
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a800:	78fa      	ldrb	r2, [r7, #3]
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	4613      	mov	r3, r2
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	1a9b      	subs	r3, r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	3348      	adds	r3, #72	; 0x48
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	78fb      	ldrb	r3, [r7, #3]
 800a814:	4619      	mov	r1, r3
 800a816:	f7fd fb09 	bl	8007e2c <USBD_LL_DataInStage>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd fc17 	bl	8008064 <USBD_LL_SOF>
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a846:	2301      	movs	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
 800a856:	e008      	b.n	800a86a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d102      	bne.n	800a866 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a860:	2301      	movs	r3, #1
 800a862:	73fb      	strb	r3, [r7, #15]
 800a864:	e001      	b.n	800a86a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a866:	f7ff fa53 	bl	8009d10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a870:	7bfa      	ldrb	r2, [r7, #15]
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f7fd fbbf 	bl	8007ff8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a880:	4618      	mov	r0, r3
 800a882:	f7fd fb78 	bl	8007f76 <USBD_LL_Reset>
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fbba 	bl	8008018 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <HAL_PCD_SuspendCallback+0x48>)
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	4a03      	ldr	r2, [pc, #12]	; (800a8d8 <HAL_PCD_SuspendCallback+0x48>)
 800a8ca:	f043 0306 	orr.w	r3, r3, #6
 800a8ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	e000ed00 	.word	0xe000ed00

0800a8dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fd fba9 	bl	8008042 <USBD_LL_Resume>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fd fbcf 	bl	80080b2 <USBD_LL_IsoOUTIncomplete>
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a92e:	78fa      	ldrb	r2, [r7, #3]
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd fbb0 	bl	8008098 <USBD_LL_IsoINIncomplete>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd fbbc 	bl	80080cc <USBD_LL_DevConnected>
}
 800a954:	bf00      	nop
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fd fbb9 	bl	80080e2 <USBD_LL_DevDisconnected>
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d13c      	bne.n	800aa02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a988:	4a20      	ldr	r2, [pc, #128]	; (800aa0c <USBD_LL_Init+0x94>)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a1e      	ldr	r2, [pc, #120]	; (800aa0c <USBD_LL_Init+0x94>)
 800a994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a998:	4b1c      	ldr	r3, [pc, #112]	; (800aa0c <USBD_LL_Init+0x94>)
 800a99a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a99e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a9a0:	4b1a      	ldr	r3, [pc, #104]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a9a6:	4b19      	ldr	r3, [pc, #100]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9ac:	4b17      	ldr	r3, [pc, #92]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a9b2:	4b16      	ldr	r3, [pc, #88]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9b8:	4b14      	ldr	r3, [pc, #80]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a9be:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a9c4:	4b11      	ldr	r3, [pc, #68]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a9ca:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a9d0:	4b0e      	ldr	r3, [pc, #56]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a9d6:	480d      	ldr	r0, [pc, #52]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9d8:	f7f8 fcb0 	bl	800333c <HAL_PCD_Init>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a9e2:	f7ff f995 	bl	8009d10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a9e6:	2180      	movs	r1, #128	; 0x80
 800a9e8:	4808      	ldr	r0, [pc, #32]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9ea:	f7f9 fe14 	bl	8004616 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a9ee:	2240      	movs	r2, #64	; 0x40
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	4806      	ldr	r0, [pc, #24]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9f4:	f7f9 fdc8 	bl	8004588 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9f8:	2280      	movs	r2, #128	; 0x80
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	4803      	ldr	r0, [pc, #12]	; (800aa0c <USBD_LL_Init+0x94>)
 800a9fe:	f7f9 fdc3 	bl	8004588 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	200020d4 	.word	0x200020d4

0800aa10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f8 fda5 	bl	8003576 <HAL_PCD_Start>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 f92e 	bl	800ac94 <USBD_Get_USB_Status>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	4608      	mov	r0, r1
 800aa50:	4611      	mov	r1, r2
 800aa52:	461a      	mov	r2, r3
 800aa54:	4603      	mov	r3, r0
 800aa56:	70fb      	strb	r3, [r7, #3]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70bb      	strb	r3, [r7, #2]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800aa6e:	78bb      	ldrb	r3, [r7, #2]
 800aa70:	883a      	ldrh	r2, [r7, #0]
 800aa72:	78f9      	ldrb	r1, [r7, #3]
 800aa74:	f7f9 f97a 	bl	8003d6c <HAL_PCD_EP_Open>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 f908 	bl	800ac94 <USBD_Get_USB_Status>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aa88:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	4611      	mov	r1, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f9 f9c3 	bl	8003e3c <HAL_PCD_EP_Close>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f8e9 	bl	800ac94 <USBD_Get_USB_Status>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800aaea:	78fa      	ldrb	r2, [r7, #3]
 800aaec:	4611      	mov	r1, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7f9 fa9b 	bl	800402a <HAL_PCD_EP_SetStall>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f8ca 	bl	800ac94 <USBD_Get_USB_Status>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7f9 fae0 	bl	80040f2 <HAL_PCD_EP_ClrStall>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f8ab 	bl	800ac94 <USBD_Get_USB_Status>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ab5e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ab60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da0b      	bge.n	800ab80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	4613      	mov	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	1a9b      	subs	r3, r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	333e      	adds	r3, #62	; 0x3e
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	e00b      	b.n	800ab98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	00db      	lsls	r3, r3, #3
 800ab8c:	1a9b      	subs	r3, r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800abbe:	78fa      	ldrb	r2, [r7, #3]
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f9 f8ad 	bl	8003d22 <HAL_PCD_SetAddress>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f860 	bl	800ac94 <USBD_Get_USB_Status>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b086      	sub	sp, #24
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	607a      	str	r2, [r7, #4]
 800abec:	461a      	mov	r2, r3
 800abee:	460b      	mov	r3, r1
 800abf0:	72fb      	strb	r3, [r7, #11]
 800abf2:	4613      	mov	r3, r2
 800abf4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ac04:	893b      	ldrh	r3, [r7, #8]
 800ac06:	7af9      	ldrb	r1, [r7, #11]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	f7f9 f9c4 	bl	8003f96 <HAL_PCD_EP_Transmit>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 f83d 	bl	800ac94 <USBD_Get_USB_Status>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ac1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	607a      	str	r2, [r7, #4]
 800ac32:	461a      	mov	r2, r3
 800ac34:	460b      	mov	r3, r1
 800ac36:	72fb      	strb	r3, [r7, #11]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ac4a:	893b      	ldrh	r3, [r7, #8]
 800ac4c:	7af9      	ldrb	r1, [r7, #11]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	f7f9 f93e 	bl	8003ed0 <HAL_PCD_EP_Receive>
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f81a 	bl	800ac94 <USBD_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800ac64:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ac80:	78fa      	ldrb	r2, [r7, #3]
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7f9 f96e 	bl	8003f66 <HAL_PCD_EP_GetRxCount>
 800ac8a:	4603      	mov	r3, r0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d817      	bhi.n	800acd8 <USBD_Get_USB_Status+0x44>
 800aca8:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <USBD_Get_USB_Status+0x1c>)
 800acaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acae:	bf00      	nop
 800acb0:	0800acc1 	.word	0x0800acc1
 800acb4:	0800acc7 	.word	0x0800acc7
 800acb8:	0800accd 	.word	0x0800accd
 800acbc:	0800acd3 	.word	0x0800acd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
    break;
 800acc4:	e00b      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acc6:	2302      	movs	r3, #2
 800acc8:	73fb      	strb	r3, [r7, #15]
    break;
 800acca:	e008      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800accc:	2301      	movs	r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
    break;
 800acd0:	e005      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acd2:	2302      	movs	r3, #2
 800acd4:	73fb      	strb	r3, [r7, #15]
    break;
 800acd6:	e002      	b.n	800acde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acd8:	2302      	movs	r3, #2
 800acda:	73fb      	strb	r3, [r7, #15]
    break;
 800acdc:	bf00      	nop
  }
  return usb_status;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	6039      	str	r1, [r7, #0]
 800acf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2212      	movs	r2, #18
 800acfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800acfe:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20000150 	.word	0x20000150

0800ad10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2204      	movs	r2, #4
 800ad20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad22:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20000164 	.word	0x20000164

0800ad34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	4907      	ldr	r1, [pc, #28]	; (800ad68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad4a:	4808      	ldr	r0, [pc, #32]	; (800ad6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ad4c:	f7fd fea0 	bl	8008a90 <USBD_GetString>
 800ad50:	e004      	b.n	800ad5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad56:	4805      	ldr	r0, [pc, #20]	; (800ad6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ad58:	f7fd fe9a 	bl	8008a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad5c:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	200024dc 	.word	0x200024dc
 800ad6c:	0800dad4 	.word	0x0800dad4

0800ad70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	4904      	ldr	r1, [pc, #16]	; (800ad90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad80:	4804      	ldr	r0, [pc, #16]	; (800ad94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad82:	f7fd fe85 	bl	8008a90 <USBD_GetString>
  return USBD_StrDesc;
 800ad86:	4b02      	ldr	r3, [pc, #8]	; (800ad90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	200024dc 	.word	0x200024dc
 800ad94:	0800daec 	.word	0x0800daec

0800ad98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	221a      	movs	r2, #26
 800ada8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800adaa:	f000 f843 	bl	800ae34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800adae:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20000168 	.word	0x20000168

0800adbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	6039      	str	r1, [r7, #0]
 800adc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800adc8:	79fb      	ldrb	r3, [r7, #7]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d105      	bne.n	800adda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	4907      	ldr	r1, [pc, #28]	; (800adf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800add2:	4808      	ldr	r0, [pc, #32]	; (800adf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800add4:	f7fd fe5c 	bl	8008a90 <USBD_GetString>
 800add8:	e004      	b.n	800ade4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	4904      	ldr	r1, [pc, #16]	; (800adf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800adde:	4805      	ldr	r0, [pc, #20]	; (800adf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ade0:	f7fd fe56 	bl	8008a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	200024dc 	.word	0x200024dc
 800adf4:	0800db00 	.word	0x0800db00

0800adf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	4907      	ldr	r1, [pc, #28]	; (800ae2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae0e:	4808      	ldr	r0, [pc, #32]	; (800ae30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae10:	f7fd fe3e 	bl	8008a90 <USBD_GetString>
 800ae14:	e004      	b.n	800ae20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	4904      	ldr	r1, [pc, #16]	; (800ae2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae1a:	4805      	ldr	r0, [pc, #20]	; (800ae30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae1c:	f7fd fe38 	bl	8008a90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200024dc 	.word	0x200024dc
 800ae30:	0800db0c 	.word	0x0800db0c

0800ae34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae3a:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <Get_SerialNum+0x44>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae40:	4b0e      	ldr	r3, [pc, #56]	; (800ae7c <Get_SerialNum+0x48>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae46:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <Get_SerialNum+0x4c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4413      	add	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	4909      	ldr	r1, [pc, #36]	; (800ae84 <Get_SerialNum+0x50>)
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f814 	bl	800ae8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae64:	2204      	movs	r2, #4
 800ae66:	4908      	ldr	r1, [pc, #32]	; (800ae88 <Get_SerialNum+0x54>)
 800ae68:	68b8      	ldr	r0, [r7, #8]
 800ae6a:	f000 f80f 	bl	800ae8c <IntToUnicode>
  }
}
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	1fff7a10 	.word	0x1fff7a10
 800ae7c:	1fff7a14 	.word	0x1fff7a14
 800ae80:	1fff7a18 	.word	0x1fff7a18
 800ae84:	2000016a 	.word	0x2000016a
 800ae88:	2000017a 	.word	0x2000017a

0800ae8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	4613      	mov	r3, r2
 800ae98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae9e:	2300      	movs	r3, #0
 800aea0:	75fb      	strb	r3, [r7, #23]
 800aea2:	e027      	b.n	800aef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	0f1b      	lsrs	r3, r3, #28
 800aea8:	2b09      	cmp	r3, #9
 800aeaa:	d80b      	bhi.n	800aec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	0f1b      	lsrs	r3, r3, #28
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	7dfb      	ldrb	r3, [r7, #23]
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	440b      	add	r3, r1
 800aebc:	3230      	adds	r2, #48	; 0x30
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	e00a      	b.n	800aeda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	0f1b      	lsrs	r3, r3, #28
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	4619      	mov	r1, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	440b      	add	r3, r1
 800aed4:	3237      	adds	r2, #55	; 0x37
 800aed6:	b2d2      	uxtb	r2, r2
 800aed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	3301      	adds	r3, #1
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	3301      	adds	r3, #1
 800aef2:	75fb      	strb	r3, [r7, #23]
 800aef4:	7dfa      	ldrb	r2, [r7, #23]
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d3d3      	bcc.n	800aea4 <IntToUnicode+0x18>
  }
}
 800aefc:	bf00      	nop
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800af08:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800af0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800af0e:	e003      	b.n	800af18 <LoopCopyDataInit>

0800af10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800af10:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800af12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800af14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800af16:	3104      	adds	r1, #4

0800af18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800af18:	480b      	ldr	r0, [pc, #44]	; (800af48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800af1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800af1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800af20:	d3f6      	bcc.n	800af10 <CopyDataInit>
  ldr  r2, =_sbss
 800af22:	4a0b      	ldr	r2, [pc, #44]	; (800af50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800af24:	e002      	b.n	800af2c <LoopFillZerobss>

0800af26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800af26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800af28:	f842 3b04 	str.w	r3, [r2], #4

0800af2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800af2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800af30:	d3f9      	bcc.n	800af26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800af32:	f7ff fa9f 	bl	800a474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af36:	f000 f817 	bl	800af68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af3a:	f7fe f941 	bl	80091c0 <main>
  bx  lr    
 800af3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800af40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800af44:	0800de10 	.word	0x0800de10
  ldr  r0, =_sdata
 800af48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800af4c:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 800af50:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 800af54:	200026e0 	.word	0x200026e0

0800af58 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af58:	e7fe      	b.n	800af58 <CAN1_RX0_IRQHandler>
	...

0800af5c <__errno>:
 800af5c:	4b01      	ldr	r3, [pc, #4]	; (800af64 <__errno+0x8>)
 800af5e:	6818      	ldr	r0, [r3, #0]
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000184 	.word	0x20000184

0800af68 <__libc_init_array>:
 800af68:	b570      	push	{r4, r5, r6, lr}
 800af6a:	4e0d      	ldr	r6, [pc, #52]	; (800afa0 <__libc_init_array+0x38>)
 800af6c:	4c0d      	ldr	r4, [pc, #52]	; (800afa4 <__libc_init_array+0x3c>)
 800af6e:	1ba4      	subs	r4, r4, r6
 800af70:	10a4      	asrs	r4, r4, #2
 800af72:	2500      	movs	r5, #0
 800af74:	42a5      	cmp	r5, r4
 800af76:	d109      	bne.n	800af8c <__libc_init_array+0x24>
 800af78:	4e0b      	ldr	r6, [pc, #44]	; (800afa8 <__libc_init_array+0x40>)
 800af7a:	4c0c      	ldr	r4, [pc, #48]	; (800afac <__libc_init_array+0x44>)
 800af7c:	f002 fd0a 	bl	800d994 <_init>
 800af80:	1ba4      	subs	r4, r4, r6
 800af82:	10a4      	asrs	r4, r4, #2
 800af84:	2500      	movs	r5, #0
 800af86:	42a5      	cmp	r5, r4
 800af88:	d105      	bne.n	800af96 <__libc_init_array+0x2e>
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af90:	4798      	blx	r3
 800af92:	3501      	adds	r5, #1
 800af94:	e7ee      	b.n	800af74 <__libc_init_array+0xc>
 800af96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af9a:	4798      	blx	r3
 800af9c:	3501      	adds	r5, #1
 800af9e:	e7f2      	b.n	800af86 <__libc_init_array+0x1e>
 800afa0:	0800de08 	.word	0x0800de08
 800afa4:	0800de08 	.word	0x0800de08
 800afa8:	0800de08 	.word	0x0800de08
 800afac:	0800de0c 	.word	0x0800de0c

0800afb0 <malloc>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <malloc+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f000 b86d 	b.w	800b094 <_malloc_r>
 800afba:	bf00      	nop
 800afbc:	20000184 	.word	0x20000184

0800afc0 <free>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	; (800afcc <free+0xc>)
 800afc2:	4601      	mov	r1, r0
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	f000 b817 	b.w	800aff8 <_free_r>
 800afca:	bf00      	nop
 800afcc:	20000184 	.word	0x20000184

0800afd0 <memcpy>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	1e43      	subs	r3, r0, #1
 800afd4:	440a      	add	r2, r1
 800afd6:	4291      	cmp	r1, r2
 800afd8:	d100      	bne.n	800afdc <memcpy+0xc>
 800afda:	bd10      	pop	{r4, pc}
 800afdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe4:	e7f7      	b.n	800afd6 <memcpy+0x6>

0800afe6 <memset>:
 800afe6:	4402      	add	r2, r0
 800afe8:	4603      	mov	r3, r0
 800afea:	4293      	cmp	r3, r2
 800afec:	d100      	bne.n	800aff0 <memset+0xa>
 800afee:	4770      	bx	lr
 800aff0:	f803 1b01 	strb.w	r1, [r3], #1
 800aff4:	e7f9      	b.n	800afea <memset+0x4>
	...

0800aff8 <_free_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4605      	mov	r5, r0
 800affc:	2900      	cmp	r1, #0
 800affe:	d045      	beq.n	800b08c <_free_r+0x94>
 800b000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b004:	1f0c      	subs	r4, r1, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfb8      	it	lt
 800b00a:	18e4      	addlt	r4, r4, r3
 800b00c:	f001 fc5c 	bl	800c8c8 <__malloc_lock>
 800b010:	4a1f      	ldr	r2, [pc, #124]	; (800b090 <_free_r+0x98>)
 800b012:	6813      	ldr	r3, [r2, #0]
 800b014:	4610      	mov	r0, r2
 800b016:	b933      	cbnz	r3, 800b026 <_free_r+0x2e>
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	6014      	str	r4, [r2, #0]
 800b01c:	4628      	mov	r0, r5
 800b01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b022:	f001 bc52 	b.w	800c8ca <__malloc_unlock>
 800b026:	42a3      	cmp	r3, r4
 800b028:	d90c      	bls.n	800b044 <_free_r+0x4c>
 800b02a:	6821      	ldr	r1, [r4, #0]
 800b02c:	1862      	adds	r2, r4, r1
 800b02e:	4293      	cmp	r3, r2
 800b030:	bf04      	itt	eq
 800b032:	681a      	ldreq	r2, [r3, #0]
 800b034:	685b      	ldreq	r3, [r3, #4]
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	bf04      	itt	eq
 800b03a:	1852      	addeq	r2, r2, r1
 800b03c:	6022      	streq	r2, [r4, #0]
 800b03e:	6004      	str	r4, [r0, #0]
 800b040:	e7ec      	b.n	800b01c <_free_r+0x24>
 800b042:	4613      	mov	r3, r2
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	b10a      	cbz	r2, 800b04c <_free_r+0x54>
 800b048:	42a2      	cmp	r2, r4
 800b04a:	d9fa      	bls.n	800b042 <_free_r+0x4a>
 800b04c:	6819      	ldr	r1, [r3, #0]
 800b04e:	1858      	adds	r0, r3, r1
 800b050:	42a0      	cmp	r0, r4
 800b052:	d10b      	bne.n	800b06c <_free_r+0x74>
 800b054:	6820      	ldr	r0, [r4, #0]
 800b056:	4401      	add	r1, r0
 800b058:	1858      	adds	r0, r3, r1
 800b05a:	4282      	cmp	r2, r0
 800b05c:	6019      	str	r1, [r3, #0]
 800b05e:	d1dd      	bne.n	800b01c <_free_r+0x24>
 800b060:	6810      	ldr	r0, [r2, #0]
 800b062:	6852      	ldr	r2, [r2, #4]
 800b064:	605a      	str	r2, [r3, #4]
 800b066:	4401      	add	r1, r0
 800b068:	6019      	str	r1, [r3, #0]
 800b06a:	e7d7      	b.n	800b01c <_free_r+0x24>
 800b06c:	d902      	bls.n	800b074 <_free_r+0x7c>
 800b06e:	230c      	movs	r3, #12
 800b070:	602b      	str	r3, [r5, #0]
 800b072:	e7d3      	b.n	800b01c <_free_r+0x24>
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	1821      	adds	r1, r4, r0
 800b078:	428a      	cmp	r2, r1
 800b07a:	bf04      	itt	eq
 800b07c:	6811      	ldreq	r1, [r2, #0]
 800b07e:	6852      	ldreq	r2, [r2, #4]
 800b080:	6062      	str	r2, [r4, #4]
 800b082:	bf04      	itt	eq
 800b084:	1809      	addeq	r1, r1, r0
 800b086:	6021      	streq	r1, [r4, #0]
 800b088:	605c      	str	r4, [r3, #4]
 800b08a:	e7c7      	b.n	800b01c <_free_r+0x24>
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	20000390 	.word	0x20000390

0800b094 <_malloc_r>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	1ccd      	adds	r5, r1, #3
 800b098:	f025 0503 	bic.w	r5, r5, #3
 800b09c:	3508      	adds	r5, #8
 800b09e:	2d0c      	cmp	r5, #12
 800b0a0:	bf38      	it	cc
 800b0a2:	250c      	movcc	r5, #12
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	db01      	blt.n	800b0ae <_malloc_r+0x1a>
 800b0aa:	42a9      	cmp	r1, r5
 800b0ac:	d903      	bls.n	800b0b6 <_malloc_r+0x22>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
 800b0b6:	f001 fc07 	bl	800c8c8 <__malloc_lock>
 800b0ba:	4a21      	ldr	r2, [pc, #132]	; (800b140 <_malloc_r+0xac>)
 800b0bc:	6814      	ldr	r4, [r2, #0]
 800b0be:	4621      	mov	r1, r4
 800b0c0:	b991      	cbnz	r1, 800b0e8 <_malloc_r+0x54>
 800b0c2:	4c20      	ldr	r4, [pc, #128]	; (800b144 <_malloc_r+0xb0>)
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	b91b      	cbnz	r3, 800b0d0 <_malloc_r+0x3c>
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 fcb1 	bl	800ba30 <_sbrk_r>
 800b0ce:	6020      	str	r0, [r4, #0]
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f000 fcac 	bl	800ba30 <_sbrk_r>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d124      	bne.n	800b126 <_malloc_r+0x92>
 800b0dc:	230c      	movs	r3, #12
 800b0de:	6033      	str	r3, [r6, #0]
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f001 fbf2 	bl	800c8ca <__malloc_unlock>
 800b0e6:	e7e4      	b.n	800b0b2 <_malloc_r+0x1e>
 800b0e8:	680b      	ldr	r3, [r1, #0]
 800b0ea:	1b5b      	subs	r3, r3, r5
 800b0ec:	d418      	bmi.n	800b120 <_malloc_r+0x8c>
 800b0ee:	2b0b      	cmp	r3, #11
 800b0f0:	d90f      	bls.n	800b112 <_malloc_r+0x7e>
 800b0f2:	600b      	str	r3, [r1, #0]
 800b0f4:	50cd      	str	r5, [r1, r3]
 800b0f6:	18cc      	adds	r4, r1, r3
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f001 fbe6 	bl	800c8ca <__malloc_unlock>
 800b0fe:	f104 000b 	add.w	r0, r4, #11
 800b102:	1d23      	adds	r3, r4, #4
 800b104:	f020 0007 	bic.w	r0, r0, #7
 800b108:	1ac3      	subs	r3, r0, r3
 800b10a:	d0d3      	beq.n	800b0b4 <_malloc_r+0x20>
 800b10c:	425a      	negs	r2, r3
 800b10e:	50e2      	str	r2, [r4, r3]
 800b110:	e7d0      	b.n	800b0b4 <_malloc_r+0x20>
 800b112:	428c      	cmp	r4, r1
 800b114:	684b      	ldr	r3, [r1, #4]
 800b116:	bf16      	itet	ne
 800b118:	6063      	strne	r3, [r4, #4]
 800b11a:	6013      	streq	r3, [r2, #0]
 800b11c:	460c      	movne	r4, r1
 800b11e:	e7eb      	b.n	800b0f8 <_malloc_r+0x64>
 800b120:	460c      	mov	r4, r1
 800b122:	6849      	ldr	r1, [r1, #4]
 800b124:	e7cc      	b.n	800b0c0 <_malloc_r+0x2c>
 800b126:	1cc4      	adds	r4, r0, #3
 800b128:	f024 0403 	bic.w	r4, r4, #3
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	d005      	beq.n	800b13c <_malloc_r+0xa8>
 800b130:	1a21      	subs	r1, r4, r0
 800b132:	4630      	mov	r0, r6
 800b134:	f000 fc7c 	bl	800ba30 <_sbrk_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	d0cf      	beq.n	800b0dc <_malloc_r+0x48>
 800b13c:	6025      	str	r5, [r4, #0]
 800b13e:	e7db      	b.n	800b0f8 <_malloc_r+0x64>
 800b140:	20000390 	.word	0x20000390
 800b144:	20000394 	.word	0x20000394

0800b148 <__cvt>:
 800b148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	ec55 4b10 	vmov	r4, r5, d0
 800b150:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b152:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b156:	2d00      	cmp	r5, #0
 800b158:	460e      	mov	r6, r1
 800b15a:	4691      	mov	r9, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	bfb8      	it	lt
 800b160:	4622      	movlt	r2, r4
 800b162:	462b      	mov	r3, r5
 800b164:	f027 0720 	bic.w	r7, r7, #32
 800b168:	bfbb      	ittet	lt
 800b16a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b16e:	461d      	movlt	r5, r3
 800b170:	2300      	movge	r3, #0
 800b172:	232d      	movlt	r3, #45	; 0x2d
 800b174:	bfb8      	it	lt
 800b176:	4614      	movlt	r4, r2
 800b178:	2f46      	cmp	r7, #70	; 0x46
 800b17a:	700b      	strb	r3, [r1, #0]
 800b17c:	d004      	beq.n	800b188 <__cvt+0x40>
 800b17e:	2f45      	cmp	r7, #69	; 0x45
 800b180:	d100      	bne.n	800b184 <__cvt+0x3c>
 800b182:	3601      	adds	r6, #1
 800b184:	2102      	movs	r1, #2
 800b186:	e000      	b.n	800b18a <__cvt+0x42>
 800b188:	2103      	movs	r1, #3
 800b18a:	ab03      	add	r3, sp, #12
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	ab02      	add	r3, sp, #8
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	4632      	mov	r2, r6
 800b194:	4653      	mov	r3, sl
 800b196:	ec45 4b10 	vmov	d0, r4, r5
 800b19a:	f000 fd05 	bl	800bba8 <_dtoa_r>
 800b19e:	2f47      	cmp	r7, #71	; 0x47
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	d102      	bne.n	800b1aa <__cvt+0x62>
 800b1a4:	f019 0f01 	tst.w	r9, #1
 800b1a8:	d026      	beq.n	800b1f8 <__cvt+0xb0>
 800b1aa:	2f46      	cmp	r7, #70	; 0x46
 800b1ac:	eb08 0906 	add.w	r9, r8, r6
 800b1b0:	d111      	bne.n	800b1d6 <__cvt+0x8e>
 800b1b2:	f898 3000 	ldrb.w	r3, [r8]
 800b1b6:	2b30      	cmp	r3, #48	; 0x30
 800b1b8:	d10a      	bne.n	800b1d0 <__cvt+0x88>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4620      	mov	r0, r4
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7f5 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c6:	b918      	cbnz	r0, 800b1d0 <__cvt+0x88>
 800b1c8:	f1c6 0601 	rsb	r6, r6, #1
 800b1cc:	f8ca 6000 	str.w	r6, [sl]
 800b1d0:	f8da 3000 	ldr.w	r3, [sl]
 800b1d4:	4499      	add	r9, r3
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4620      	mov	r0, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	f7f5 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e2:	b938      	cbnz	r0, 800b1f4 <__cvt+0xac>
 800b1e4:	2230      	movs	r2, #48	; 0x30
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	454b      	cmp	r3, r9
 800b1ea:	d205      	bcs.n	800b1f8 <__cvt+0xb0>
 800b1ec:	1c59      	adds	r1, r3, #1
 800b1ee:	9103      	str	r1, [sp, #12]
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	e7f8      	b.n	800b1e6 <__cvt+0x9e>
 800b1f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1f8:	9b03      	ldr	r3, [sp, #12]
 800b1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1fc:	eba3 0308 	sub.w	r3, r3, r8
 800b200:	4640      	mov	r0, r8
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	b004      	add	sp, #16
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b20a <__exponent>:
 800b20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b20c:	2900      	cmp	r1, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	bfba      	itte	lt
 800b212:	4249      	neglt	r1, r1
 800b214:	232d      	movlt	r3, #45	; 0x2d
 800b216:	232b      	movge	r3, #43	; 0x2b
 800b218:	2909      	cmp	r1, #9
 800b21a:	f804 2b02 	strb.w	r2, [r4], #2
 800b21e:	7043      	strb	r3, [r0, #1]
 800b220:	dd20      	ble.n	800b264 <__exponent+0x5a>
 800b222:	f10d 0307 	add.w	r3, sp, #7
 800b226:	461f      	mov	r7, r3
 800b228:	260a      	movs	r6, #10
 800b22a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b22e:	fb06 1115 	mls	r1, r6, r5, r1
 800b232:	3130      	adds	r1, #48	; 0x30
 800b234:	2d09      	cmp	r5, #9
 800b236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b23a:	f103 32ff 	add.w	r2, r3, #4294967295
 800b23e:	4629      	mov	r1, r5
 800b240:	dc09      	bgt.n	800b256 <__exponent+0x4c>
 800b242:	3130      	adds	r1, #48	; 0x30
 800b244:	3b02      	subs	r3, #2
 800b246:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b24a:	42bb      	cmp	r3, r7
 800b24c:	4622      	mov	r2, r4
 800b24e:	d304      	bcc.n	800b25a <__exponent+0x50>
 800b250:	1a10      	subs	r0, r2, r0
 800b252:	b003      	add	sp, #12
 800b254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b256:	4613      	mov	r3, r2
 800b258:	e7e7      	b.n	800b22a <__exponent+0x20>
 800b25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25e:	f804 2b01 	strb.w	r2, [r4], #1
 800b262:	e7f2      	b.n	800b24a <__exponent+0x40>
 800b264:	2330      	movs	r3, #48	; 0x30
 800b266:	4419      	add	r1, r3
 800b268:	7083      	strb	r3, [r0, #2]
 800b26a:	1d02      	adds	r2, r0, #4
 800b26c:	70c1      	strb	r1, [r0, #3]
 800b26e:	e7ef      	b.n	800b250 <__exponent+0x46>

0800b270 <_printf_float>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b08d      	sub	sp, #52	; 0x34
 800b276:	460c      	mov	r4, r1
 800b278:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b27c:	4616      	mov	r6, r2
 800b27e:	461f      	mov	r7, r3
 800b280:	4605      	mov	r5, r0
 800b282:	f001 fb13 	bl	800c8ac <_localeconv_r>
 800b286:	6803      	ldr	r3, [r0, #0]
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f4 ffa0 	bl	80001d0 <strlen>
 800b290:	2300      	movs	r3, #0
 800b292:	930a      	str	r3, [sp, #40]	; 0x28
 800b294:	f8d8 3000 	ldr.w	r3, [r8]
 800b298:	9005      	str	r0, [sp, #20]
 800b29a:	3307      	adds	r3, #7
 800b29c:	f023 0307 	bic.w	r3, r3, #7
 800b2a0:	f103 0208 	add.w	r2, r3, #8
 800b2a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2a8:	f8d4 b000 	ldr.w	fp, [r4]
 800b2ac:	f8c8 2000 	str.w	r2, [r8]
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b2b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b2bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2c0:	9307      	str	r3, [sp, #28]
 800b2c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ca:	4ba7      	ldr	r3, [pc, #668]	; (800b568 <_printf_float+0x2f8>)
 800b2cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2d0:	f7f5 fc2c 	bl	8000b2c <__aeabi_dcmpun>
 800b2d4:	bb70      	cbnz	r0, 800b334 <_printf_float+0xc4>
 800b2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2da:	4ba3      	ldr	r3, [pc, #652]	; (800b568 <_printf_float+0x2f8>)
 800b2dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2e0:	f7f5 fc06 	bl	8000af0 <__aeabi_dcmple>
 800b2e4:	bb30      	cbnz	r0, 800b334 <_printf_float+0xc4>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f5 fbf5 	bl	8000adc <__aeabi_dcmplt>
 800b2f2:	b110      	cbz	r0, 800b2fa <_printf_float+0x8a>
 800b2f4:	232d      	movs	r3, #45	; 0x2d
 800b2f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fa:	4a9c      	ldr	r2, [pc, #624]	; (800b56c <_printf_float+0x2fc>)
 800b2fc:	4b9c      	ldr	r3, [pc, #624]	; (800b570 <_printf_float+0x300>)
 800b2fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b302:	bf8c      	ite	hi
 800b304:	4690      	movhi	r8, r2
 800b306:	4698      	movls	r8, r3
 800b308:	2303      	movs	r3, #3
 800b30a:	f02b 0204 	bic.w	r2, fp, #4
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	6022      	str	r2, [r4, #0]
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	9700      	str	r7, [sp, #0]
 800b318:	4633      	mov	r3, r6
 800b31a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b31c:	4621      	mov	r1, r4
 800b31e:	4628      	mov	r0, r5
 800b320:	f000 f9e6 	bl	800b6f0 <_printf_common>
 800b324:	3001      	adds	r0, #1
 800b326:	f040 808d 	bne.w	800b444 <_printf_float+0x1d4>
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295
 800b32e:	b00d      	add	sp, #52	; 0x34
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	4642      	mov	r2, r8
 800b336:	464b      	mov	r3, r9
 800b338:	4640      	mov	r0, r8
 800b33a:	4649      	mov	r1, r9
 800b33c:	f7f5 fbf6 	bl	8000b2c <__aeabi_dcmpun>
 800b340:	b110      	cbz	r0, 800b348 <_printf_float+0xd8>
 800b342:	4a8c      	ldr	r2, [pc, #560]	; (800b574 <_printf_float+0x304>)
 800b344:	4b8c      	ldr	r3, [pc, #560]	; (800b578 <_printf_float+0x308>)
 800b346:	e7da      	b.n	800b2fe <_printf_float+0x8e>
 800b348:	6861      	ldr	r1, [r4, #4]
 800b34a:	1c4b      	adds	r3, r1, #1
 800b34c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b350:	a80a      	add	r0, sp, #40	; 0x28
 800b352:	d13e      	bne.n	800b3d2 <_printf_float+0x162>
 800b354:	2306      	movs	r3, #6
 800b356:	6063      	str	r3, [r4, #4]
 800b358:	2300      	movs	r3, #0
 800b35a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b35e:	ab09      	add	r3, sp, #36	; 0x24
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	ec49 8b10 	vmov	d0, r8, r9
 800b366:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b36a:	6022      	str	r2, [r4, #0]
 800b36c:	f8cd a004 	str.w	sl, [sp, #4]
 800b370:	6861      	ldr	r1, [r4, #4]
 800b372:	4628      	mov	r0, r5
 800b374:	f7ff fee8 	bl	800b148 <__cvt>
 800b378:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b37c:	2b47      	cmp	r3, #71	; 0x47
 800b37e:	4680      	mov	r8, r0
 800b380:	d109      	bne.n	800b396 <_printf_float+0x126>
 800b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b384:	1cd8      	adds	r0, r3, #3
 800b386:	db02      	blt.n	800b38e <_printf_float+0x11e>
 800b388:	6862      	ldr	r2, [r4, #4]
 800b38a:	4293      	cmp	r3, r2
 800b38c:	dd47      	ble.n	800b41e <_printf_float+0x1ae>
 800b38e:	f1aa 0a02 	sub.w	sl, sl, #2
 800b392:	fa5f fa8a 	uxtb.w	sl, sl
 800b396:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b39a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b39c:	d824      	bhi.n	800b3e8 <_printf_float+0x178>
 800b39e:	3901      	subs	r1, #1
 800b3a0:	4652      	mov	r2, sl
 800b3a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3a6:	9109      	str	r1, [sp, #36]	; 0x24
 800b3a8:	f7ff ff2f 	bl	800b20a <__exponent>
 800b3ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ae:	1813      	adds	r3, r2, r0
 800b3b0:	2a01      	cmp	r2, #1
 800b3b2:	4681      	mov	r9, r0
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	dc02      	bgt.n	800b3be <_printf_float+0x14e>
 800b3b8:	6822      	ldr	r2, [r4, #0]
 800b3ba:	07d1      	lsls	r1, r2, #31
 800b3bc:	d501      	bpl.n	800b3c2 <_printf_float+0x152>
 800b3be:	3301      	adds	r3, #1
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0a5      	beq.n	800b316 <_printf_float+0xa6>
 800b3ca:	232d      	movs	r3, #45	; 0x2d
 800b3cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3d0:	e7a1      	b.n	800b316 <_printf_float+0xa6>
 800b3d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b3d6:	f000 8177 	beq.w	800b6c8 <_printf_float+0x458>
 800b3da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b3de:	d1bb      	bne.n	800b358 <_printf_float+0xe8>
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d1b9      	bne.n	800b358 <_printf_float+0xe8>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e7b6      	b.n	800b356 <_printf_float+0xe6>
 800b3e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b3ec:	d119      	bne.n	800b422 <_printf_float+0x1b2>
 800b3ee:	2900      	cmp	r1, #0
 800b3f0:	6863      	ldr	r3, [r4, #4]
 800b3f2:	dd0c      	ble.n	800b40e <_printf_float+0x19e>
 800b3f4:	6121      	str	r1, [r4, #16]
 800b3f6:	b913      	cbnz	r3, 800b3fe <_printf_float+0x18e>
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	07d2      	lsls	r2, r2, #31
 800b3fc:	d502      	bpl.n	800b404 <_printf_float+0x194>
 800b3fe:	3301      	adds	r3, #1
 800b400:	440b      	add	r3, r1
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b406:	65a3      	str	r3, [r4, #88]	; 0x58
 800b408:	f04f 0900 	mov.w	r9, #0
 800b40c:	e7d9      	b.n	800b3c2 <_printf_float+0x152>
 800b40e:	b913      	cbnz	r3, 800b416 <_printf_float+0x1a6>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	07d0      	lsls	r0, r2, #31
 800b414:	d501      	bpl.n	800b41a <_printf_float+0x1aa>
 800b416:	3302      	adds	r3, #2
 800b418:	e7f3      	b.n	800b402 <_printf_float+0x192>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e7f1      	b.n	800b402 <_printf_float+0x192>
 800b41e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b422:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b426:	4293      	cmp	r3, r2
 800b428:	db05      	blt.n	800b436 <_printf_float+0x1c6>
 800b42a:	6822      	ldr	r2, [r4, #0]
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	07d1      	lsls	r1, r2, #31
 800b430:	d5e8      	bpl.n	800b404 <_printf_float+0x194>
 800b432:	3301      	adds	r3, #1
 800b434:	e7e5      	b.n	800b402 <_printf_float+0x192>
 800b436:	2b00      	cmp	r3, #0
 800b438:	bfd4      	ite	le
 800b43a:	f1c3 0302 	rsble	r3, r3, #2
 800b43e:	2301      	movgt	r3, #1
 800b440:	4413      	add	r3, r2
 800b442:	e7de      	b.n	800b402 <_printf_float+0x192>
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	055a      	lsls	r2, r3, #21
 800b448:	d407      	bmi.n	800b45a <_printf_float+0x1ea>
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	4642      	mov	r2, r8
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	d12b      	bne.n	800b4b0 <_printf_float+0x240>
 800b458:	e767      	b.n	800b32a <_printf_float+0xba>
 800b45a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b45e:	f240 80dc 	bls.w	800b61a <_printf_float+0x3aa>
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b46a:	f7f5 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d033      	beq.n	800b4da <_printf_float+0x26a>
 800b472:	2301      	movs	r3, #1
 800b474:	4a41      	ldr	r2, [pc, #260]	; (800b57c <_printf_float+0x30c>)
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f af54 	beq.w	800b32a <_printf_float+0xba>
 800b482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b486:	429a      	cmp	r2, r3
 800b488:	db02      	blt.n	800b490 <_printf_float+0x220>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	07d8      	lsls	r0, r3, #31
 800b48e:	d50f      	bpl.n	800b4b0 <_printf_float+0x240>
 800b490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	47b8      	blx	r7
 800b49a:	3001      	adds	r0, #1
 800b49c:	f43f af45 	beq.w	800b32a <_printf_float+0xba>
 800b4a0:	f04f 0800 	mov.w	r8, #0
 800b4a4:	f104 091a 	add.w	r9, r4, #26
 800b4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4543      	cmp	r3, r8
 800b4ae:	dc09      	bgt.n	800b4c4 <_printf_float+0x254>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	079b      	lsls	r3, r3, #30
 800b4b4:	f100 8103 	bmi.w	800b6be <_printf_float+0x44e>
 800b4b8:	68e0      	ldr	r0, [r4, #12]
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4bc:	4298      	cmp	r0, r3
 800b4be:	bfb8      	it	lt
 800b4c0:	4618      	movlt	r0, r3
 800b4c2:	e734      	b.n	800b32e <_printf_float+0xbe>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	464a      	mov	r2, r9
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f af2b 	beq.w	800b32a <_printf_float+0xba>
 800b4d4:	f108 0801 	add.w	r8, r8, #1
 800b4d8:	e7e6      	b.n	800b4a8 <_printf_float+0x238>
 800b4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc2b      	bgt.n	800b538 <_printf_float+0x2c8>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	4a26      	ldr	r2, [pc, #152]	; (800b57c <_printf_float+0x30c>)
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	47b8      	blx	r7
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	f43f af1d 	beq.w	800b32a <_printf_float+0xba>
 800b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f2:	b923      	cbnz	r3, 800b4fe <_printf_float+0x28e>
 800b4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f6:	b913      	cbnz	r3, 800b4fe <_printf_float+0x28e>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	d5d8      	bpl.n	800b4b0 <_printf_float+0x240>
 800b4fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f af0e 	beq.w	800b32a <_printf_float+0xba>
 800b50e:	f04f 0900 	mov.w	r9, #0
 800b512:	f104 0a1a 	add.w	sl, r4, #26
 800b516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b518:	425b      	negs	r3, r3
 800b51a:	454b      	cmp	r3, r9
 800b51c:	dc01      	bgt.n	800b522 <_printf_float+0x2b2>
 800b51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b520:	e794      	b.n	800b44c <_printf_float+0x1dc>
 800b522:	2301      	movs	r3, #1
 800b524:	4652      	mov	r2, sl
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	f43f aefc 	beq.w	800b32a <_printf_float+0xba>
 800b532:	f109 0901 	add.w	r9, r9, #1
 800b536:	e7ee      	b.n	800b516 <_printf_float+0x2a6>
 800b538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b53a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b53c:	429a      	cmp	r2, r3
 800b53e:	bfa8      	it	ge
 800b540:	461a      	movge	r2, r3
 800b542:	2a00      	cmp	r2, #0
 800b544:	4691      	mov	r9, r2
 800b546:	dd07      	ble.n	800b558 <_printf_float+0x2e8>
 800b548:	4613      	mov	r3, r2
 800b54a:	4631      	mov	r1, r6
 800b54c:	4642      	mov	r2, r8
 800b54e:	4628      	mov	r0, r5
 800b550:	47b8      	blx	r7
 800b552:	3001      	adds	r0, #1
 800b554:	f43f aee9 	beq.w	800b32a <_printf_float+0xba>
 800b558:	f104 031a 	add.w	r3, r4, #26
 800b55c:	f04f 0b00 	mov.w	fp, #0
 800b560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b564:	9306      	str	r3, [sp, #24]
 800b566:	e015      	b.n	800b594 <_printf_float+0x324>
 800b568:	7fefffff 	.word	0x7fefffff
 800b56c:	0800db44 	.word	0x0800db44
 800b570:	0800db40 	.word	0x0800db40
 800b574:	0800db4c 	.word	0x0800db4c
 800b578:	0800db48 	.word	0x0800db48
 800b57c:	0800db50 	.word	0x0800db50
 800b580:	2301      	movs	r3, #1
 800b582:	9a06      	ldr	r2, [sp, #24]
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f aecd 	beq.w	800b32a <_printf_float+0xba>
 800b590:	f10b 0b01 	add.w	fp, fp, #1
 800b594:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b598:	ebaa 0309 	sub.w	r3, sl, r9
 800b59c:	455b      	cmp	r3, fp
 800b59e:	dcef      	bgt.n	800b580 <_printf_float+0x310>
 800b5a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	44d0      	add	r8, sl
 800b5a8:	db15      	blt.n	800b5d6 <_printf_float+0x366>
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	07da      	lsls	r2, r3, #31
 800b5ae:	d412      	bmi.n	800b5d6 <_printf_float+0x366>
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5b4:	eba3 020a 	sub.w	r2, r3, sl
 800b5b8:	eba3 0a01 	sub.w	sl, r3, r1
 800b5bc:	4592      	cmp	sl, r2
 800b5be:	bfa8      	it	ge
 800b5c0:	4692      	movge	sl, r2
 800b5c2:	f1ba 0f00 	cmp.w	sl, #0
 800b5c6:	dc0e      	bgt.n	800b5e6 <_printf_float+0x376>
 800b5c8:	f04f 0800 	mov.w	r8, #0
 800b5cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5d0:	f104 091a 	add.w	r9, r4, #26
 800b5d4:	e019      	b.n	800b60a <_printf_float+0x39a>
 800b5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d1e5      	bne.n	800b5b0 <_printf_float+0x340>
 800b5e4:	e6a1      	b.n	800b32a <_printf_float+0xba>
 800b5e6:	4653      	mov	r3, sl
 800b5e8:	4642      	mov	r2, r8
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d1e9      	bne.n	800b5c8 <_printf_float+0x358>
 800b5f4:	e699      	b.n	800b32a <_printf_float+0xba>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	464a      	mov	r2, r9
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	47b8      	blx	r7
 800b600:	3001      	adds	r0, #1
 800b602:	f43f ae92 	beq.w	800b32a <_printf_float+0xba>
 800b606:	f108 0801 	add.w	r8, r8, #1
 800b60a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	eba3 030a 	sub.w	r3, r3, sl
 800b614:	4543      	cmp	r3, r8
 800b616:	dcee      	bgt.n	800b5f6 <_printf_float+0x386>
 800b618:	e74a      	b.n	800b4b0 <_printf_float+0x240>
 800b61a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b61c:	2a01      	cmp	r2, #1
 800b61e:	dc01      	bgt.n	800b624 <_printf_float+0x3b4>
 800b620:	07db      	lsls	r3, r3, #31
 800b622:	d53a      	bpl.n	800b69a <_printf_float+0x42a>
 800b624:	2301      	movs	r3, #1
 800b626:	4642      	mov	r2, r8
 800b628:	4631      	mov	r1, r6
 800b62a:	4628      	mov	r0, r5
 800b62c:	47b8      	blx	r7
 800b62e:	3001      	adds	r0, #1
 800b630:	f43f ae7b 	beq.w	800b32a <_printf_float+0xba>
 800b634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b638:	4631      	mov	r1, r6
 800b63a:	4628      	mov	r0, r5
 800b63c:	47b8      	blx	r7
 800b63e:	3001      	adds	r0, #1
 800b640:	f108 0801 	add.w	r8, r8, #1
 800b644:	f43f ae71 	beq.w	800b32a <_printf_float+0xba>
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	2200      	movs	r2, #0
 800b64c:	f103 3aff 	add.w	sl, r3, #4294967295
 800b650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b654:	2300      	movs	r3, #0
 800b656:	f7f5 fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 800b65a:	b9c8      	cbnz	r0, 800b690 <_printf_float+0x420>
 800b65c:	4653      	mov	r3, sl
 800b65e:	4642      	mov	r2, r8
 800b660:	4631      	mov	r1, r6
 800b662:	4628      	mov	r0, r5
 800b664:	47b8      	blx	r7
 800b666:	3001      	adds	r0, #1
 800b668:	d10e      	bne.n	800b688 <_printf_float+0x418>
 800b66a:	e65e      	b.n	800b32a <_printf_float+0xba>
 800b66c:	2301      	movs	r3, #1
 800b66e:	4652      	mov	r2, sl
 800b670:	4631      	mov	r1, r6
 800b672:	4628      	mov	r0, r5
 800b674:	47b8      	blx	r7
 800b676:	3001      	adds	r0, #1
 800b678:	f43f ae57 	beq.w	800b32a <_printf_float+0xba>
 800b67c:	f108 0801 	add.w	r8, r8, #1
 800b680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b682:	3b01      	subs	r3, #1
 800b684:	4543      	cmp	r3, r8
 800b686:	dcf1      	bgt.n	800b66c <_printf_float+0x3fc>
 800b688:	464b      	mov	r3, r9
 800b68a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b68e:	e6de      	b.n	800b44e <_printf_float+0x1de>
 800b690:	f04f 0800 	mov.w	r8, #0
 800b694:	f104 0a1a 	add.w	sl, r4, #26
 800b698:	e7f2      	b.n	800b680 <_printf_float+0x410>
 800b69a:	2301      	movs	r3, #1
 800b69c:	e7df      	b.n	800b65e <_printf_float+0x3ee>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	464a      	mov	r2, r9
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f43f ae3e 	beq.w	800b32a <_printf_float+0xba>
 800b6ae:	f108 0801 	add.w	r8, r8, #1
 800b6b2:	68e3      	ldr	r3, [r4, #12]
 800b6b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6b6:	1a9b      	subs	r3, r3, r2
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	dcf0      	bgt.n	800b69e <_printf_float+0x42e>
 800b6bc:	e6fc      	b.n	800b4b8 <_printf_float+0x248>
 800b6be:	f04f 0800 	mov.w	r8, #0
 800b6c2:	f104 0919 	add.w	r9, r4, #25
 800b6c6:	e7f4      	b.n	800b6b2 <_printf_float+0x442>
 800b6c8:	2900      	cmp	r1, #0
 800b6ca:	f43f ae8b 	beq.w	800b3e4 <_printf_float+0x174>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b6d4:	ab09      	add	r3, sp, #36	; 0x24
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	ec49 8b10 	vmov	d0, r8, r9
 800b6dc:	6022      	str	r2, [r4, #0]
 800b6de:	f8cd a004 	str.w	sl, [sp, #4]
 800b6e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f7ff fd2e 	bl	800b148 <__cvt>
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	e648      	b.n	800b382 <_printf_float+0x112>

0800b6f0 <_printf_common>:
 800b6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f4:	4691      	mov	r9, r2
 800b6f6:	461f      	mov	r7, r3
 800b6f8:	688a      	ldr	r2, [r1, #8]
 800b6fa:	690b      	ldr	r3, [r1, #16]
 800b6fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b700:	4293      	cmp	r3, r2
 800b702:	bfb8      	it	lt
 800b704:	4613      	movlt	r3, r2
 800b706:	f8c9 3000 	str.w	r3, [r9]
 800b70a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b70e:	4606      	mov	r6, r0
 800b710:	460c      	mov	r4, r1
 800b712:	b112      	cbz	r2, 800b71a <_printf_common+0x2a>
 800b714:	3301      	adds	r3, #1
 800b716:	f8c9 3000 	str.w	r3, [r9]
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	0699      	lsls	r1, r3, #26
 800b71e:	bf42      	ittt	mi
 800b720:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b724:	3302      	addmi	r3, #2
 800b726:	f8c9 3000 	strmi.w	r3, [r9]
 800b72a:	6825      	ldr	r5, [r4, #0]
 800b72c:	f015 0506 	ands.w	r5, r5, #6
 800b730:	d107      	bne.n	800b742 <_printf_common+0x52>
 800b732:	f104 0a19 	add.w	sl, r4, #25
 800b736:	68e3      	ldr	r3, [r4, #12]
 800b738:	f8d9 2000 	ldr.w	r2, [r9]
 800b73c:	1a9b      	subs	r3, r3, r2
 800b73e:	42ab      	cmp	r3, r5
 800b740:	dc28      	bgt.n	800b794 <_printf_common+0xa4>
 800b742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b746:	6822      	ldr	r2, [r4, #0]
 800b748:	3300      	adds	r3, #0
 800b74a:	bf18      	it	ne
 800b74c:	2301      	movne	r3, #1
 800b74e:	0692      	lsls	r2, r2, #26
 800b750:	d42d      	bmi.n	800b7ae <_printf_common+0xbe>
 800b752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b756:	4639      	mov	r1, r7
 800b758:	4630      	mov	r0, r6
 800b75a:	47c0      	blx	r8
 800b75c:	3001      	adds	r0, #1
 800b75e:	d020      	beq.n	800b7a2 <_printf_common+0xb2>
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	68e5      	ldr	r5, [r4, #12]
 800b764:	f8d9 2000 	ldr.w	r2, [r9]
 800b768:	f003 0306 	and.w	r3, r3, #6
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	bf08      	it	eq
 800b770:	1aad      	subeq	r5, r5, r2
 800b772:	68a3      	ldr	r3, [r4, #8]
 800b774:	6922      	ldr	r2, [r4, #16]
 800b776:	bf0c      	ite	eq
 800b778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b77c:	2500      	movne	r5, #0
 800b77e:	4293      	cmp	r3, r2
 800b780:	bfc4      	itt	gt
 800b782:	1a9b      	subgt	r3, r3, r2
 800b784:	18ed      	addgt	r5, r5, r3
 800b786:	f04f 0900 	mov.w	r9, #0
 800b78a:	341a      	adds	r4, #26
 800b78c:	454d      	cmp	r5, r9
 800b78e:	d11a      	bne.n	800b7c6 <_printf_common+0xd6>
 800b790:	2000      	movs	r0, #0
 800b792:	e008      	b.n	800b7a6 <_printf_common+0xb6>
 800b794:	2301      	movs	r3, #1
 800b796:	4652      	mov	r2, sl
 800b798:	4639      	mov	r1, r7
 800b79a:	4630      	mov	r0, r6
 800b79c:	47c0      	blx	r8
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d103      	bne.n	800b7aa <_printf_common+0xba>
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7aa:	3501      	adds	r5, #1
 800b7ac:	e7c3      	b.n	800b736 <_printf_common+0x46>
 800b7ae:	18e1      	adds	r1, r4, r3
 800b7b0:	1c5a      	adds	r2, r3, #1
 800b7b2:	2030      	movs	r0, #48	; 0x30
 800b7b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7b8:	4422      	add	r2, r4
 800b7ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	e7c5      	b.n	800b752 <_printf_common+0x62>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	47c0      	blx	r8
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d0e6      	beq.n	800b7a2 <_printf_common+0xb2>
 800b7d4:	f109 0901 	add.w	r9, r9, #1
 800b7d8:	e7d8      	b.n	800b78c <_printf_common+0x9c>
	...

0800b7dc <_printf_i>:
 800b7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	7e09      	ldrb	r1, [r1, #24]
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	296e      	cmp	r1, #110	; 0x6e
 800b7ec:	4617      	mov	r7, r2
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	4698      	mov	r8, r3
 800b7f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7f4:	f000 80b3 	beq.w	800b95e <_printf_i+0x182>
 800b7f8:	d822      	bhi.n	800b840 <_printf_i+0x64>
 800b7fa:	2963      	cmp	r1, #99	; 0x63
 800b7fc:	d036      	beq.n	800b86c <_printf_i+0x90>
 800b7fe:	d80a      	bhi.n	800b816 <_printf_i+0x3a>
 800b800:	2900      	cmp	r1, #0
 800b802:	f000 80b9 	beq.w	800b978 <_printf_i+0x19c>
 800b806:	2958      	cmp	r1, #88	; 0x58
 800b808:	f000 8083 	beq.w	800b912 <_printf_i+0x136>
 800b80c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b814:	e032      	b.n	800b87c <_printf_i+0xa0>
 800b816:	2964      	cmp	r1, #100	; 0x64
 800b818:	d001      	beq.n	800b81e <_printf_i+0x42>
 800b81a:	2969      	cmp	r1, #105	; 0x69
 800b81c:	d1f6      	bne.n	800b80c <_printf_i+0x30>
 800b81e:	6820      	ldr	r0, [r4, #0]
 800b820:	6813      	ldr	r3, [r2, #0]
 800b822:	0605      	lsls	r5, r0, #24
 800b824:	f103 0104 	add.w	r1, r3, #4
 800b828:	d52a      	bpl.n	800b880 <_printf_i+0xa4>
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6011      	str	r1, [r2, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	da03      	bge.n	800b83a <_printf_i+0x5e>
 800b832:	222d      	movs	r2, #45	; 0x2d
 800b834:	425b      	negs	r3, r3
 800b836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b83a:	486f      	ldr	r0, [pc, #444]	; (800b9f8 <_printf_i+0x21c>)
 800b83c:	220a      	movs	r2, #10
 800b83e:	e039      	b.n	800b8b4 <_printf_i+0xd8>
 800b840:	2973      	cmp	r1, #115	; 0x73
 800b842:	f000 809d 	beq.w	800b980 <_printf_i+0x1a4>
 800b846:	d808      	bhi.n	800b85a <_printf_i+0x7e>
 800b848:	296f      	cmp	r1, #111	; 0x6f
 800b84a:	d020      	beq.n	800b88e <_printf_i+0xb2>
 800b84c:	2970      	cmp	r1, #112	; 0x70
 800b84e:	d1dd      	bne.n	800b80c <_printf_i+0x30>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	f043 0320 	orr.w	r3, r3, #32
 800b856:	6023      	str	r3, [r4, #0]
 800b858:	e003      	b.n	800b862 <_printf_i+0x86>
 800b85a:	2975      	cmp	r1, #117	; 0x75
 800b85c:	d017      	beq.n	800b88e <_printf_i+0xb2>
 800b85e:	2978      	cmp	r1, #120	; 0x78
 800b860:	d1d4      	bne.n	800b80c <_printf_i+0x30>
 800b862:	2378      	movs	r3, #120	; 0x78
 800b864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b868:	4864      	ldr	r0, [pc, #400]	; (800b9fc <_printf_i+0x220>)
 800b86a:	e055      	b.n	800b918 <_printf_i+0x13c>
 800b86c:	6813      	ldr	r3, [r2, #0]
 800b86e:	1d19      	adds	r1, r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6011      	str	r1, [r2, #0]
 800b874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b87c:	2301      	movs	r3, #1
 800b87e:	e08c      	b.n	800b99a <_printf_i+0x1be>
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6011      	str	r1, [r2, #0]
 800b884:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b888:	bf18      	it	ne
 800b88a:	b21b      	sxthne	r3, r3
 800b88c:	e7cf      	b.n	800b82e <_printf_i+0x52>
 800b88e:	6813      	ldr	r3, [r2, #0]
 800b890:	6825      	ldr	r5, [r4, #0]
 800b892:	1d18      	adds	r0, r3, #4
 800b894:	6010      	str	r0, [r2, #0]
 800b896:	0628      	lsls	r0, r5, #24
 800b898:	d501      	bpl.n	800b89e <_printf_i+0xc2>
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	e002      	b.n	800b8a4 <_printf_i+0xc8>
 800b89e:	0668      	lsls	r0, r5, #25
 800b8a0:	d5fb      	bpl.n	800b89a <_printf_i+0xbe>
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	4854      	ldr	r0, [pc, #336]	; (800b9f8 <_printf_i+0x21c>)
 800b8a6:	296f      	cmp	r1, #111	; 0x6f
 800b8a8:	bf14      	ite	ne
 800b8aa:	220a      	movne	r2, #10
 800b8ac:	2208      	moveq	r2, #8
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8b4:	6865      	ldr	r5, [r4, #4]
 800b8b6:	60a5      	str	r5, [r4, #8]
 800b8b8:	2d00      	cmp	r5, #0
 800b8ba:	f2c0 8095 	blt.w	800b9e8 <_printf_i+0x20c>
 800b8be:	6821      	ldr	r1, [r4, #0]
 800b8c0:	f021 0104 	bic.w	r1, r1, #4
 800b8c4:	6021      	str	r1, [r4, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d13d      	bne.n	800b946 <_printf_i+0x16a>
 800b8ca:	2d00      	cmp	r5, #0
 800b8cc:	f040 808e 	bne.w	800b9ec <_printf_i+0x210>
 800b8d0:	4665      	mov	r5, ip
 800b8d2:	2a08      	cmp	r2, #8
 800b8d4:	d10b      	bne.n	800b8ee <_printf_i+0x112>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	07db      	lsls	r3, r3, #31
 800b8da:	d508      	bpl.n	800b8ee <_printf_i+0x112>
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	6862      	ldr	r2, [r4, #4]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	bfde      	ittt	le
 800b8e4:	2330      	movle	r3, #48	; 0x30
 800b8e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8ee:	ebac 0305 	sub.w	r3, ip, r5
 800b8f2:	6123      	str	r3, [r4, #16]
 800b8f4:	f8cd 8000 	str.w	r8, [sp]
 800b8f8:	463b      	mov	r3, r7
 800b8fa:	aa03      	add	r2, sp, #12
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4630      	mov	r0, r6
 800b900:	f7ff fef6 	bl	800b6f0 <_printf_common>
 800b904:	3001      	adds	r0, #1
 800b906:	d14d      	bne.n	800b9a4 <_printf_i+0x1c8>
 800b908:	f04f 30ff 	mov.w	r0, #4294967295
 800b90c:	b005      	add	sp, #20
 800b90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b912:	4839      	ldr	r0, [pc, #228]	; (800b9f8 <_printf_i+0x21c>)
 800b914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b918:	6813      	ldr	r3, [r2, #0]
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	1d1d      	adds	r5, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6015      	str	r5, [r2, #0]
 800b922:	060a      	lsls	r2, r1, #24
 800b924:	d50b      	bpl.n	800b93e <_printf_i+0x162>
 800b926:	07ca      	lsls	r2, r1, #31
 800b928:	bf44      	itt	mi
 800b92a:	f041 0120 	orrmi.w	r1, r1, #32
 800b92e:	6021      	strmi	r1, [r4, #0]
 800b930:	b91b      	cbnz	r3, 800b93a <_printf_i+0x15e>
 800b932:	6822      	ldr	r2, [r4, #0]
 800b934:	f022 0220 	bic.w	r2, r2, #32
 800b938:	6022      	str	r2, [r4, #0]
 800b93a:	2210      	movs	r2, #16
 800b93c:	e7b7      	b.n	800b8ae <_printf_i+0xd2>
 800b93e:	064d      	lsls	r5, r1, #25
 800b940:	bf48      	it	mi
 800b942:	b29b      	uxthmi	r3, r3
 800b944:	e7ef      	b.n	800b926 <_printf_i+0x14a>
 800b946:	4665      	mov	r5, ip
 800b948:	fbb3 f1f2 	udiv	r1, r3, r2
 800b94c:	fb02 3311 	mls	r3, r2, r1, r3
 800b950:	5cc3      	ldrb	r3, [r0, r3]
 800b952:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b956:	460b      	mov	r3, r1
 800b958:	2900      	cmp	r1, #0
 800b95a:	d1f5      	bne.n	800b948 <_printf_i+0x16c>
 800b95c:	e7b9      	b.n	800b8d2 <_printf_i+0xf6>
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	6825      	ldr	r5, [r4, #0]
 800b962:	6961      	ldr	r1, [r4, #20]
 800b964:	1d18      	adds	r0, r3, #4
 800b966:	6010      	str	r0, [r2, #0]
 800b968:	0628      	lsls	r0, r5, #24
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	d501      	bpl.n	800b972 <_printf_i+0x196>
 800b96e:	6019      	str	r1, [r3, #0]
 800b970:	e002      	b.n	800b978 <_printf_i+0x19c>
 800b972:	066a      	lsls	r2, r5, #25
 800b974:	d5fb      	bpl.n	800b96e <_printf_i+0x192>
 800b976:	8019      	strh	r1, [r3, #0]
 800b978:	2300      	movs	r3, #0
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	4665      	mov	r5, ip
 800b97e:	e7b9      	b.n	800b8f4 <_printf_i+0x118>
 800b980:	6813      	ldr	r3, [r2, #0]
 800b982:	1d19      	adds	r1, r3, #4
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	681d      	ldr	r5, [r3, #0]
 800b988:	6862      	ldr	r2, [r4, #4]
 800b98a:	2100      	movs	r1, #0
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7f4 fc27 	bl	80001e0 <memchr>
 800b992:	b108      	cbz	r0, 800b998 <_printf_i+0x1bc>
 800b994:	1b40      	subs	r0, r0, r5
 800b996:	6060      	str	r0, [r4, #4]
 800b998:	6863      	ldr	r3, [r4, #4]
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	2300      	movs	r3, #0
 800b99e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a2:	e7a7      	b.n	800b8f4 <_printf_i+0x118>
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	47c0      	blx	r8
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d0aa      	beq.n	800b908 <_printf_i+0x12c>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	079b      	lsls	r3, r3, #30
 800b9b6:	d413      	bmi.n	800b9e0 <_printf_i+0x204>
 800b9b8:	68e0      	ldr	r0, [r4, #12]
 800b9ba:	9b03      	ldr	r3, [sp, #12]
 800b9bc:	4298      	cmp	r0, r3
 800b9be:	bfb8      	it	lt
 800b9c0:	4618      	movlt	r0, r3
 800b9c2:	e7a3      	b.n	800b90c <_printf_i+0x130>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	464a      	mov	r2, r9
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	47c0      	blx	r8
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	d09a      	beq.n	800b908 <_printf_i+0x12c>
 800b9d2:	3501      	adds	r5, #1
 800b9d4:	68e3      	ldr	r3, [r4, #12]
 800b9d6:	9a03      	ldr	r2, [sp, #12]
 800b9d8:	1a9b      	subs	r3, r3, r2
 800b9da:	42ab      	cmp	r3, r5
 800b9dc:	dcf2      	bgt.n	800b9c4 <_printf_i+0x1e8>
 800b9de:	e7eb      	b.n	800b9b8 <_printf_i+0x1dc>
 800b9e0:	2500      	movs	r5, #0
 800b9e2:	f104 0919 	add.w	r9, r4, #25
 800b9e6:	e7f5      	b.n	800b9d4 <_printf_i+0x1f8>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1ac      	bne.n	800b946 <_printf_i+0x16a>
 800b9ec:	7803      	ldrb	r3, [r0, #0]
 800b9ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9f6:	e76c      	b.n	800b8d2 <_printf_i+0xf6>
 800b9f8:	0800db52 	.word	0x0800db52
 800b9fc:	0800db63 	.word	0x0800db63

0800ba00 <iprintf>:
 800ba00:	b40f      	push	{r0, r1, r2, r3}
 800ba02:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <iprintf+0x2c>)
 800ba04:	b513      	push	{r0, r1, r4, lr}
 800ba06:	681c      	ldr	r4, [r3, #0]
 800ba08:	b124      	cbz	r4, 800ba14 <iprintf+0x14>
 800ba0a:	69a3      	ldr	r3, [r4, #24]
 800ba0c:	b913      	cbnz	r3, 800ba14 <iprintf+0x14>
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 fec2 	bl	800c798 <__sinit>
 800ba14:	ab05      	add	r3, sp, #20
 800ba16:	9a04      	ldr	r2, [sp, #16]
 800ba18:	68a1      	ldr	r1, [r4, #8]
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f001 fbbb 	bl	800d198 <_vfiprintf_r>
 800ba22:	b002      	add	sp, #8
 800ba24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba28:	b004      	add	sp, #16
 800ba2a:	4770      	bx	lr
 800ba2c:	20000184 	.word	0x20000184

0800ba30 <_sbrk_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4c06      	ldr	r4, [pc, #24]	; (800ba4c <_sbrk_r+0x1c>)
 800ba34:	2300      	movs	r3, #0
 800ba36:	4605      	mov	r5, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	f7fe fcee 	bl	800a41c <_sbrk>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_sbrk_r+0x1a>
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_sbrk_r+0x1a>
 800ba48:	602b      	str	r3, [r5, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	200026dc 	.word	0x200026dc

0800ba50 <siprintf>:
 800ba50:	b40e      	push	{r1, r2, r3}
 800ba52:	b500      	push	{lr}
 800ba54:	b09c      	sub	sp, #112	; 0x70
 800ba56:	ab1d      	add	r3, sp, #116	; 0x74
 800ba58:	9002      	str	r0, [sp, #8]
 800ba5a:	9006      	str	r0, [sp, #24]
 800ba5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba60:	4809      	ldr	r0, [pc, #36]	; (800ba88 <siprintf+0x38>)
 800ba62:	9107      	str	r1, [sp, #28]
 800ba64:	9104      	str	r1, [sp, #16]
 800ba66:	4909      	ldr	r1, [pc, #36]	; (800ba8c <siprintf+0x3c>)
 800ba68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6c:	9105      	str	r1, [sp, #20]
 800ba6e:	6800      	ldr	r0, [r0, #0]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	a902      	add	r1, sp, #8
 800ba74:	f001 fa6e 	bl	800cf54 <_svfiprintf_r>
 800ba78:	9b02      	ldr	r3, [sp, #8]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	b01c      	add	sp, #112	; 0x70
 800ba80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba84:	b003      	add	sp, #12
 800ba86:	4770      	bx	lr
 800ba88:	20000184 	.word	0x20000184
 800ba8c:	ffff0208 	.word	0xffff0208

0800ba90 <quorem>:
 800ba90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	6903      	ldr	r3, [r0, #16]
 800ba96:	690c      	ldr	r4, [r1, #16]
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	f2c0 8082 	blt.w	800bba4 <quorem+0x114>
 800baa0:	3c01      	subs	r4, #1
 800baa2:	f101 0714 	add.w	r7, r1, #20
 800baa6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800baaa:	f100 0614 	add.w	r6, r0, #20
 800baae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bab2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bab6:	eb06 030c 	add.w	r3, r6, ip
 800baba:	3501      	adds	r5, #1
 800babc:	eb07 090c 	add.w	r9, r7, ip
 800bac0:	9301      	str	r3, [sp, #4]
 800bac2:	fbb0 f5f5 	udiv	r5, r0, r5
 800bac6:	b395      	cbz	r5, 800bb2e <quorem+0x9e>
 800bac8:	f04f 0a00 	mov.w	sl, #0
 800bacc:	4638      	mov	r0, r7
 800bace:	46b6      	mov	lr, r6
 800bad0:	46d3      	mov	fp, sl
 800bad2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bad6:	b293      	uxth	r3, r2
 800bad8:	fb05 a303 	mla	r3, r5, r3, sl
 800badc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	ebab 0303 	sub.w	r3, fp, r3
 800bae6:	0c12      	lsrs	r2, r2, #16
 800bae8:	f8de b000 	ldr.w	fp, [lr]
 800baec:	fb05 a202 	mla	r2, r5, r2, sl
 800baf0:	fa13 f38b 	uxtah	r3, r3, fp
 800baf4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800baf8:	fa1f fb82 	uxth.w	fp, r2
 800bafc:	f8de 2000 	ldr.w	r2, [lr]
 800bb00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bb04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb0e:	4581      	cmp	r9, r0
 800bb10:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bb14:	f84e 3b04 	str.w	r3, [lr], #4
 800bb18:	d2db      	bcs.n	800bad2 <quorem+0x42>
 800bb1a:	f856 300c 	ldr.w	r3, [r6, ip]
 800bb1e:	b933      	cbnz	r3, 800bb2e <quorem+0x9e>
 800bb20:	9b01      	ldr	r3, [sp, #4]
 800bb22:	3b04      	subs	r3, #4
 800bb24:	429e      	cmp	r6, r3
 800bb26:	461a      	mov	r2, r3
 800bb28:	d330      	bcc.n	800bb8c <quorem+0xfc>
 800bb2a:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f001 f8e2 	bl	800ccf8 <__mcmp>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	db25      	blt.n	800bb84 <quorem+0xf4>
 800bb38:	3501      	adds	r5, #1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f04f 0c00 	mov.w	ip, #0
 800bb40:	f857 2b04 	ldr.w	r2, [r7], #4
 800bb44:	f8d0 e000 	ldr.w	lr, [r0]
 800bb48:	b293      	uxth	r3, r2
 800bb4a:	ebac 0303 	sub.w	r3, ip, r3
 800bb4e:	0c12      	lsrs	r2, r2, #16
 800bb50:	fa13 f38e 	uxtah	r3, r3, lr
 800bb54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb62:	45b9      	cmp	r9, r7
 800bb64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb68:	f840 3b04 	str.w	r3, [r0], #4
 800bb6c:	d2e8      	bcs.n	800bb40 <quorem+0xb0>
 800bb6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bb72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bb76:	b92a      	cbnz	r2, 800bb84 <quorem+0xf4>
 800bb78:	3b04      	subs	r3, #4
 800bb7a:	429e      	cmp	r6, r3
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	d30b      	bcc.n	800bb98 <quorem+0x108>
 800bb80:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb84:	4628      	mov	r0, r5
 800bb86:	b003      	add	sp, #12
 800bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8c:	6812      	ldr	r2, [r2, #0]
 800bb8e:	3b04      	subs	r3, #4
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	d1ca      	bne.n	800bb2a <quorem+0x9a>
 800bb94:	3c01      	subs	r4, #1
 800bb96:	e7c5      	b.n	800bb24 <quorem+0x94>
 800bb98:	6812      	ldr	r2, [r2, #0]
 800bb9a:	3b04      	subs	r3, #4
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	d1ef      	bne.n	800bb80 <quorem+0xf0>
 800bba0:	3c01      	subs	r4, #1
 800bba2:	e7ea      	b.n	800bb7a <quorem+0xea>
 800bba4:	2000      	movs	r0, #0
 800bba6:	e7ee      	b.n	800bb86 <quorem+0xf6>

0800bba8 <_dtoa_r>:
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbac:	ec57 6b10 	vmov	r6, r7, d0
 800bbb0:	b097      	sub	sp, #92	; 0x5c
 800bbb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bbb4:	9106      	str	r1, [sp, #24]
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbba:	9312      	str	r3, [sp, #72]	; 0x48
 800bbbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bbc0:	e9cd 6700 	strd	r6, r7, [sp]
 800bbc4:	b93d      	cbnz	r5, 800bbd6 <_dtoa_r+0x2e>
 800bbc6:	2010      	movs	r0, #16
 800bbc8:	f7ff f9f2 	bl	800afb0 <malloc>
 800bbcc:	6260      	str	r0, [r4, #36]	; 0x24
 800bbce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbd2:	6005      	str	r5, [r0, #0]
 800bbd4:	60c5      	str	r5, [r0, #12]
 800bbd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbd8:	6819      	ldr	r1, [r3, #0]
 800bbda:	b151      	cbz	r1, 800bbf2 <_dtoa_r+0x4a>
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	604a      	str	r2, [r1, #4]
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	4093      	lsls	r3, r2
 800bbe4:	608b      	str	r3, [r1, #8]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 fea4 	bl	800c934 <_Bfree>
 800bbec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbee:	2200      	movs	r2, #0
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	1e3b      	subs	r3, r7, #0
 800bbf4:	bfbb      	ittet	lt
 800bbf6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbfa:	9301      	strlt	r3, [sp, #4]
 800bbfc:	2300      	movge	r3, #0
 800bbfe:	2201      	movlt	r2, #1
 800bc00:	bfac      	ite	ge
 800bc02:	f8c8 3000 	strge.w	r3, [r8]
 800bc06:	f8c8 2000 	strlt.w	r2, [r8]
 800bc0a:	4baf      	ldr	r3, [pc, #700]	; (800bec8 <_dtoa_r+0x320>)
 800bc0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc10:	ea33 0308 	bics.w	r3, r3, r8
 800bc14:	d114      	bne.n	800bc40 <_dtoa_r+0x98>
 800bc16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc18:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	9b00      	ldr	r3, [sp, #0]
 800bc20:	b923      	cbnz	r3, 800bc2c <_dtoa_r+0x84>
 800bc22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f000 8542 	beq.w	800c6b0 <_dtoa_r+0xb08>
 800bc2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bedc <_dtoa_r+0x334>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8544 	beq.w	800c6c0 <_dtoa_r+0xb18>
 800bc38:	f10b 0303 	add.w	r3, fp, #3
 800bc3c:	f000 bd3e 	b.w	800c6bc <_dtoa_r+0xb14>
 800bc40:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc44:	2200      	movs	r2, #0
 800bc46:	2300      	movs	r3, #0
 800bc48:	4630      	mov	r0, r6
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc50:	4681      	mov	r9, r0
 800bc52:	b168      	cbz	r0, 800bc70 <_dtoa_r+0xc8>
 800bc54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc56:	2301      	movs	r3, #1
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 8524 	beq.w	800c6aa <_dtoa_r+0xb02>
 800bc62:	4b9a      	ldr	r3, [pc, #616]	; (800becc <_dtoa_r+0x324>)
 800bc64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc66:	f103 3bff 	add.w	fp, r3, #4294967295
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	f000 bd28 	b.w	800c6c0 <_dtoa_r+0xb18>
 800bc70:	aa14      	add	r2, sp, #80	; 0x50
 800bc72:	a915      	add	r1, sp, #84	; 0x54
 800bc74:	ec47 6b10 	vmov	d0, r6, r7
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f001 f8b4 	bl	800cde6 <__d2b>
 800bc7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc82:	9004      	str	r0, [sp, #16]
 800bc84:	2d00      	cmp	r5, #0
 800bc86:	d07c      	beq.n	800bd82 <_dtoa_r+0x1da>
 800bc88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bc90:	46b2      	mov	sl, r6
 800bc92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bc96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4b8b      	ldr	r3, [pc, #556]	; (800bed0 <_dtoa_r+0x328>)
 800bca2:	4650      	mov	r0, sl
 800bca4:	4659      	mov	r1, fp
 800bca6:	f7f4 faef 	bl	8000288 <__aeabi_dsub>
 800bcaa:	a381      	add	r3, pc, #516	; (adr r3, 800beb0 <_dtoa_r+0x308>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f7f4 fca2 	bl	80005f8 <__aeabi_dmul>
 800bcb4:	a380      	add	r3, pc, #512	; (adr r3, 800beb8 <_dtoa_r+0x310>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 fae7 	bl	800028c <__adddf3>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	460f      	mov	r7, r1
 800bcc4:	f7f4 fc2e 	bl	8000524 <__aeabi_i2d>
 800bcc8:	a37d      	add	r3, pc, #500	; (adr r3, 800bec0 <_dtoa_r+0x318>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fc93 	bl	80005f8 <__aeabi_dmul>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4639      	mov	r1, r7
 800bcda:	f7f4 fad7 	bl	800028c <__adddf3>
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	f7f4 ff39 	bl	8000b58 <__aeabi_d2iz>
 800bce6:	2200      	movs	r2, #0
 800bce8:	4682      	mov	sl, r0
 800bcea:	2300      	movs	r3, #0
 800bcec:	4630      	mov	r0, r6
 800bcee:	4639      	mov	r1, r7
 800bcf0:	f7f4 fef4 	bl	8000adc <__aeabi_dcmplt>
 800bcf4:	b148      	cbz	r0, 800bd0a <_dtoa_r+0x162>
 800bcf6:	4650      	mov	r0, sl
 800bcf8:	f7f4 fc14 	bl	8000524 <__aeabi_i2d>
 800bcfc:	4632      	mov	r2, r6
 800bcfe:	463b      	mov	r3, r7
 800bd00:	f7f4 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd04:	b908      	cbnz	r0, 800bd0a <_dtoa_r+0x162>
 800bd06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd0a:	f1ba 0f16 	cmp.w	sl, #22
 800bd0e:	d859      	bhi.n	800bdc4 <_dtoa_r+0x21c>
 800bd10:	4970      	ldr	r1, [pc, #448]	; (800bed4 <_dtoa_r+0x32c>)
 800bd12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bd16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd1e:	f7f4 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d050      	beq.n	800bdc8 <_dtoa_r+0x220>
 800bd26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd30:	1b5d      	subs	r5, r3, r5
 800bd32:	f1b5 0801 	subs.w	r8, r5, #1
 800bd36:	bf49      	itett	mi
 800bd38:	f1c5 0301 	rsbmi	r3, r5, #1
 800bd3c:	2300      	movpl	r3, #0
 800bd3e:	9305      	strmi	r3, [sp, #20]
 800bd40:	f04f 0800 	movmi.w	r8, #0
 800bd44:	bf58      	it	pl
 800bd46:	9305      	strpl	r3, [sp, #20]
 800bd48:	f1ba 0f00 	cmp.w	sl, #0
 800bd4c:	db3e      	blt.n	800bdcc <_dtoa_r+0x224>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	44d0      	add	r8, sl
 800bd52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bd56:	9307      	str	r3, [sp, #28]
 800bd58:	9b06      	ldr	r3, [sp, #24]
 800bd5a:	2b09      	cmp	r3, #9
 800bd5c:	f200 8090 	bhi.w	800be80 <_dtoa_r+0x2d8>
 800bd60:	2b05      	cmp	r3, #5
 800bd62:	bfc4      	itt	gt
 800bd64:	3b04      	subgt	r3, #4
 800bd66:	9306      	strgt	r3, [sp, #24]
 800bd68:	9b06      	ldr	r3, [sp, #24]
 800bd6a:	f1a3 0302 	sub.w	r3, r3, #2
 800bd6e:	bfcc      	ite	gt
 800bd70:	2500      	movgt	r5, #0
 800bd72:	2501      	movle	r5, #1
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	f200 808f 	bhi.w	800be98 <_dtoa_r+0x2f0>
 800bd7a:	e8df f003 	tbb	[pc, r3]
 800bd7e:	7f7d      	.short	0x7f7d
 800bd80:	7131      	.short	0x7131
 800bd82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bd86:	441d      	add	r5, r3
 800bd88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bd8c:	2820      	cmp	r0, #32
 800bd8e:	dd13      	ble.n	800bdb8 <_dtoa_r+0x210>
 800bd90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	fa08 f800 	lsl.w	r8, r8, r0
 800bd9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bd9e:	fa23 f000 	lsr.w	r0, r3, r0
 800bda2:	ea48 0000 	orr.w	r0, r8, r0
 800bda6:	f7f4 fbad 	bl	8000504 <__aeabi_ui2d>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	4682      	mov	sl, r0
 800bdae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bdb2:	3d01      	subs	r5, #1
 800bdb4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdb6:	e772      	b.n	800bc9e <_dtoa_r+0xf6>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	f1c0 0020 	rsb	r0, r0, #32
 800bdbe:	fa03 f000 	lsl.w	r0, r3, r0
 800bdc2:	e7f0      	b.n	800bda6 <_dtoa_r+0x1fe>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e7b1      	b.n	800bd2c <_dtoa_r+0x184>
 800bdc8:	900f      	str	r0, [sp, #60]	; 0x3c
 800bdca:	e7b0      	b.n	800bd2e <_dtoa_r+0x186>
 800bdcc:	9b05      	ldr	r3, [sp, #20]
 800bdce:	eba3 030a 	sub.w	r3, r3, sl
 800bdd2:	9305      	str	r3, [sp, #20]
 800bdd4:	f1ca 0300 	rsb	r3, sl, #0
 800bdd8:	9307      	str	r3, [sp, #28]
 800bdda:	2300      	movs	r3, #0
 800bddc:	930e      	str	r3, [sp, #56]	; 0x38
 800bdde:	e7bb      	b.n	800bd58 <_dtoa_r+0x1b0>
 800bde0:	2301      	movs	r3, #1
 800bde2:	930a      	str	r3, [sp, #40]	; 0x28
 800bde4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd59      	ble.n	800be9e <_dtoa_r+0x2f6>
 800bdea:	9302      	str	r3, [sp, #8]
 800bdec:	4699      	mov	r9, r3
 800bdee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	6072      	str	r2, [r6, #4]
 800bdf4:	2204      	movs	r2, #4
 800bdf6:	f102 0014 	add.w	r0, r2, #20
 800bdfa:	4298      	cmp	r0, r3
 800bdfc:	6871      	ldr	r1, [r6, #4]
 800bdfe:	d953      	bls.n	800bea8 <_dtoa_r+0x300>
 800be00:	4620      	mov	r0, r4
 800be02:	f000 fd63 	bl	800c8cc <_Balloc>
 800be06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be08:	6030      	str	r0, [r6, #0]
 800be0a:	f1b9 0f0e 	cmp.w	r9, #14
 800be0e:	f8d3 b000 	ldr.w	fp, [r3]
 800be12:	f200 80e6 	bhi.w	800bfe2 <_dtoa_r+0x43a>
 800be16:	2d00      	cmp	r5, #0
 800be18:	f000 80e3 	beq.w	800bfe2 <_dtoa_r+0x43a>
 800be1c:	ed9d 7b00 	vldr	d7, [sp]
 800be20:	f1ba 0f00 	cmp.w	sl, #0
 800be24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800be28:	dd74      	ble.n	800bf14 <_dtoa_r+0x36c>
 800be2a:	4a2a      	ldr	r2, [pc, #168]	; (800bed4 <_dtoa_r+0x32c>)
 800be2c:	f00a 030f 	and.w	r3, sl, #15
 800be30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be34:	ed93 7b00 	vldr	d7, [r3]
 800be38:	ea4f 162a 	mov.w	r6, sl, asr #4
 800be3c:	06f0      	lsls	r0, r6, #27
 800be3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800be42:	d565      	bpl.n	800bf10 <_dtoa_r+0x368>
 800be44:	4b24      	ldr	r3, [pc, #144]	; (800bed8 <_dtoa_r+0x330>)
 800be46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be4e:	f7f4 fcfd 	bl	800084c <__aeabi_ddiv>
 800be52:	e9cd 0100 	strd	r0, r1, [sp]
 800be56:	f006 060f 	and.w	r6, r6, #15
 800be5a:	2503      	movs	r5, #3
 800be5c:	4f1e      	ldr	r7, [pc, #120]	; (800bed8 <_dtoa_r+0x330>)
 800be5e:	e04c      	b.n	800befa <_dtoa_r+0x352>
 800be60:	2301      	movs	r3, #1
 800be62:	930a      	str	r3, [sp, #40]	; 0x28
 800be64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be66:	4453      	add	r3, sl
 800be68:	f103 0901 	add.w	r9, r3, #1
 800be6c:	9302      	str	r3, [sp, #8]
 800be6e:	464b      	mov	r3, r9
 800be70:	2b01      	cmp	r3, #1
 800be72:	bfb8      	it	lt
 800be74:	2301      	movlt	r3, #1
 800be76:	e7ba      	b.n	800bdee <_dtoa_r+0x246>
 800be78:	2300      	movs	r3, #0
 800be7a:	e7b2      	b.n	800bde2 <_dtoa_r+0x23a>
 800be7c:	2300      	movs	r3, #0
 800be7e:	e7f0      	b.n	800be62 <_dtoa_r+0x2ba>
 800be80:	2501      	movs	r5, #1
 800be82:	2300      	movs	r3, #0
 800be84:	9306      	str	r3, [sp, #24]
 800be86:	950a      	str	r5, [sp, #40]	; 0x28
 800be88:	f04f 33ff 	mov.w	r3, #4294967295
 800be8c:	9302      	str	r3, [sp, #8]
 800be8e:	4699      	mov	r9, r3
 800be90:	2200      	movs	r2, #0
 800be92:	2312      	movs	r3, #18
 800be94:	920b      	str	r2, [sp, #44]	; 0x2c
 800be96:	e7aa      	b.n	800bdee <_dtoa_r+0x246>
 800be98:	2301      	movs	r3, #1
 800be9a:	930a      	str	r3, [sp, #40]	; 0x28
 800be9c:	e7f4      	b.n	800be88 <_dtoa_r+0x2e0>
 800be9e:	2301      	movs	r3, #1
 800bea0:	9302      	str	r3, [sp, #8]
 800bea2:	4699      	mov	r9, r3
 800bea4:	461a      	mov	r2, r3
 800bea6:	e7f5      	b.n	800be94 <_dtoa_r+0x2ec>
 800bea8:	3101      	adds	r1, #1
 800beaa:	6071      	str	r1, [r6, #4]
 800beac:	0052      	lsls	r2, r2, #1
 800beae:	e7a2      	b.n	800bdf6 <_dtoa_r+0x24e>
 800beb0:	636f4361 	.word	0x636f4361
 800beb4:	3fd287a7 	.word	0x3fd287a7
 800beb8:	8b60c8b3 	.word	0x8b60c8b3
 800bebc:	3fc68a28 	.word	0x3fc68a28
 800bec0:	509f79fb 	.word	0x509f79fb
 800bec4:	3fd34413 	.word	0x3fd34413
 800bec8:	7ff00000 	.word	0x7ff00000
 800becc:	0800db51 	.word	0x0800db51
 800bed0:	3ff80000 	.word	0x3ff80000
 800bed4:	0800dc10 	.word	0x0800dc10
 800bed8:	0800dbe8 	.word	0x0800dbe8
 800bedc:	0800db7d 	.word	0x0800db7d
 800bee0:	07f1      	lsls	r1, r6, #31
 800bee2:	d508      	bpl.n	800bef6 <_dtoa_r+0x34e>
 800bee4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beec:	f7f4 fb84 	bl	80005f8 <__aeabi_dmul>
 800bef0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bef4:	3501      	adds	r5, #1
 800bef6:	1076      	asrs	r6, r6, #1
 800bef8:	3708      	adds	r7, #8
 800befa:	2e00      	cmp	r6, #0
 800befc:	d1f0      	bne.n	800bee0 <_dtoa_r+0x338>
 800befe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf06:	f7f4 fca1 	bl	800084c <__aeabi_ddiv>
 800bf0a:	e9cd 0100 	strd	r0, r1, [sp]
 800bf0e:	e01a      	b.n	800bf46 <_dtoa_r+0x39e>
 800bf10:	2502      	movs	r5, #2
 800bf12:	e7a3      	b.n	800be5c <_dtoa_r+0x2b4>
 800bf14:	f000 80a0 	beq.w	800c058 <_dtoa_r+0x4b0>
 800bf18:	f1ca 0600 	rsb	r6, sl, #0
 800bf1c:	4b9f      	ldr	r3, [pc, #636]	; (800c19c <_dtoa_r+0x5f4>)
 800bf1e:	4fa0      	ldr	r7, [pc, #640]	; (800c1a0 <_dtoa_r+0x5f8>)
 800bf20:	f006 020f 	and.w	r2, r6, #15
 800bf24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	e9cd 0100 	strd	r0, r1, [sp]
 800bf38:	1136      	asrs	r6, r6, #4
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2502      	movs	r5, #2
 800bf3e:	2e00      	cmp	r6, #0
 800bf40:	d17f      	bne.n	800c042 <_dtoa_r+0x49a>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e1      	bne.n	800bf0a <_dtoa_r+0x362>
 800bf46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 8087 	beq.w	800c05c <_dtoa_r+0x4b4>
 800bf4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf52:	2200      	movs	r2, #0
 800bf54:	4b93      	ldr	r3, [pc, #588]	; (800c1a4 <_dtoa_r+0x5fc>)
 800bf56:	4630      	mov	r0, r6
 800bf58:	4639      	mov	r1, r7
 800bf5a:	f7f4 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d07c      	beq.n	800c05c <_dtoa_r+0x4b4>
 800bf62:	f1b9 0f00 	cmp.w	r9, #0
 800bf66:	d079      	beq.n	800c05c <_dtoa_r+0x4b4>
 800bf68:	9b02      	ldr	r3, [sp, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	dd35      	ble.n	800bfda <_dtoa_r+0x432>
 800bf6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bf72:	9308      	str	r3, [sp, #32]
 800bf74:	4639      	mov	r1, r7
 800bf76:	2200      	movs	r2, #0
 800bf78:	4b8b      	ldr	r3, [pc, #556]	; (800c1a8 <_dtoa_r+0x600>)
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	e9cd 0100 	strd	r0, r1, [sp]
 800bf84:	9f02      	ldr	r7, [sp, #8]
 800bf86:	3501      	adds	r5, #1
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f7f4 facb 	bl	8000524 <__aeabi_i2d>
 800bf8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf92:	f7f4 fb31 	bl	80005f8 <__aeabi_dmul>
 800bf96:	2200      	movs	r2, #0
 800bf98:	4b84      	ldr	r3, [pc, #528]	; (800c1ac <_dtoa_r+0x604>)
 800bf9a:	f7f4 f977 	bl	800028c <__adddf3>
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bfa4:	2f00      	cmp	r7, #0
 800bfa6:	d15d      	bne.n	800c064 <_dtoa_r+0x4bc>
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4b81      	ldr	r3, [pc, #516]	; (800c1b0 <_dtoa_r+0x608>)
 800bfac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfb0:	f7f4 f96a 	bl	8000288 <__aeabi_dsub>
 800bfb4:	462a      	mov	r2, r5
 800bfb6:	4633      	mov	r3, r6
 800bfb8:	e9cd 0100 	strd	r0, r1, [sp]
 800bfbc:	f7f4 fdac 	bl	8000b18 <__aeabi_dcmpgt>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	f040 8288 	bne.w	800c4d6 <_dtoa_r+0x92e>
 800bfc6:	462a      	mov	r2, r5
 800bfc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd0:	f7f4 fd84 	bl	8000adc <__aeabi_dcmplt>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	f040 827c 	bne.w	800c4d2 <_dtoa_r+0x92a>
 800bfda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfde:	e9cd 2300 	strd	r2, r3, [sp]
 800bfe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f2c0 8150 	blt.w	800c28a <_dtoa_r+0x6e2>
 800bfea:	f1ba 0f0e 	cmp.w	sl, #14
 800bfee:	f300 814c 	bgt.w	800c28a <_dtoa_r+0x6e2>
 800bff2:	4b6a      	ldr	r3, [pc, #424]	; (800c19c <_dtoa_r+0x5f4>)
 800bff4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bff8:	ed93 7b00 	vldr	d7, [r3]
 800bffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c004:	f280 80d8 	bge.w	800c1b8 <_dtoa_r+0x610>
 800c008:	f1b9 0f00 	cmp.w	r9, #0
 800c00c:	f300 80d4 	bgt.w	800c1b8 <_dtoa_r+0x610>
 800c010:	f040 825e 	bne.w	800c4d0 <_dtoa_r+0x928>
 800c014:	2200      	movs	r2, #0
 800c016:	4b66      	ldr	r3, [pc, #408]	; (800c1b0 <_dtoa_r+0x608>)
 800c018:	ec51 0b17 	vmov	r0, r1, d7
 800c01c:	f7f4 faec 	bl	80005f8 <__aeabi_dmul>
 800c020:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c024:	f7f4 fd6e 	bl	8000b04 <__aeabi_dcmpge>
 800c028:	464f      	mov	r7, r9
 800c02a:	464e      	mov	r6, r9
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f040 8234 	bne.w	800c49a <_dtoa_r+0x8f2>
 800c032:	2331      	movs	r3, #49	; 0x31
 800c034:	f10b 0501 	add.w	r5, fp, #1
 800c038:	f88b 3000 	strb.w	r3, [fp]
 800c03c:	f10a 0a01 	add.w	sl, sl, #1
 800c040:	e22f      	b.n	800c4a2 <_dtoa_r+0x8fa>
 800c042:	07f2      	lsls	r2, r6, #31
 800c044:	d505      	bpl.n	800c052 <_dtoa_r+0x4aa>
 800c046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04a:	f7f4 fad5 	bl	80005f8 <__aeabi_dmul>
 800c04e:	3501      	adds	r5, #1
 800c050:	2301      	movs	r3, #1
 800c052:	1076      	asrs	r6, r6, #1
 800c054:	3708      	adds	r7, #8
 800c056:	e772      	b.n	800bf3e <_dtoa_r+0x396>
 800c058:	2502      	movs	r5, #2
 800c05a:	e774      	b.n	800bf46 <_dtoa_r+0x39e>
 800c05c:	f8cd a020 	str.w	sl, [sp, #32]
 800c060:	464f      	mov	r7, r9
 800c062:	e791      	b.n	800bf88 <_dtoa_r+0x3e0>
 800c064:	4b4d      	ldr	r3, [pc, #308]	; (800c19c <_dtoa_r+0x5f4>)
 800c066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c06a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	2b00      	cmp	r3, #0
 800c072:	d047      	beq.n	800c104 <_dtoa_r+0x55c>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	2000      	movs	r0, #0
 800c07a:	494e      	ldr	r1, [pc, #312]	; (800c1b4 <_dtoa_r+0x60c>)
 800c07c:	f7f4 fbe6 	bl	800084c <__aeabi_ddiv>
 800c080:	462a      	mov	r2, r5
 800c082:	4633      	mov	r3, r6
 800c084:	f7f4 f900 	bl	8000288 <__aeabi_dsub>
 800c088:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c08c:	465d      	mov	r5, fp
 800c08e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c092:	f7f4 fd61 	bl	8000b58 <__aeabi_d2iz>
 800c096:	4606      	mov	r6, r0
 800c098:	f7f4 fa44 	bl	8000524 <__aeabi_i2d>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0a4:	f7f4 f8f0 	bl	8000288 <__aeabi_dsub>
 800c0a8:	3630      	adds	r6, #48	; 0x30
 800c0aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c0ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c0b2:	e9cd 0100 	strd	r0, r1, [sp]
 800c0b6:	f7f4 fd11 	bl	8000adc <__aeabi_dcmplt>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d163      	bne.n	800c186 <_dtoa_r+0x5de>
 800c0be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	4937      	ldr	r1, [pc, #220]	; (800c1a4 <_dtoa_r+0x5fc>)
 800c0c6:	f7f4 f8df 	bl	8000288 <__aeabi_dsub>
 800c0ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c0ce:	f7f4 fd05 	bl	8000adc <__aeabi_dcmplt>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f040 80b7 	bne.w	800c246 <_dtoa_r+0x69e>
 800c0d8:	eba5 030b 	sub.w	r3, r5, fp
 800c0dc:	429f      	cmp	r7, r3
 800c0de:	f77f af7c 	ble.w	800bfda <_dtoa_r+0x432>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	4b30      	ldr	r3, [pc, #192]	; (800c1a8 <_dtoa_r+0x600>)
 800c0e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0ea:	f7f4 fa85 	bl	80005f8 <__aeabi_dmul>
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c0f4:	4b2c      	ldr	r3, [pc, #176]	; (800c1a8 <_dtoa_r+0x600>)
 800c0f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0fa:	f7f4 fa7d 	bl	80005f8 <__aeabi_dmul>
 800c0fe:	e9cd 0100 	strd	r0, r1, [sp]
 800c102:	e7c4      	b.n	800c08e <_dtoa_r+0x4e6>
 800c104:	462a      	mov	r2, r5
 800c106:	4633      	mov	r3, r6
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c110:	eb0b 0507 	add.w	r5, fp, r7
 800c114:	465e      	mov	r6, fp
 800c116:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c11a:	f7f4 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800c11e:	4607      	mov	r7, r0
 800c120:	f7f4 fa00 	bl	8000524 <__aeabi_i2d>
 800c124:	3730      	adds	r7, #48	; 0x30
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c12e:	f7f4 f8ab 	bl	8000288 <__aeabi_dsub>
 800c132:	f806 7b01 	strb.w	r7, [r6], #1
 800c136:	42ae      	cmp	r6, r5
 800c138:	e9cd 0100 	strd	r0, r1, [sp]
 800c13c:	f04f 0200 	mov.w	r2, #0
 800c140:	d126      	bne.n	800c190 <_dtoa_r+0x5e8>
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <_dtoa_r+0x60c>)
 800c144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c148:	f7f4 f8a0 	bl	800028c <__adddf3>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c154:	f7f4 fce0 	bl	8000b18 <__aeabi_dcmpgt>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d174      	bne.n	800c246 <_dtoa_r+0x69e>
 800c15c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c160:	2000      	movs	r0, #0
 800c162:	4914      	ldr	r1, [pc, #80]	; (800c1b4 <_dtoa_r+0x60c>)
 800c164:	f7f4 f890 	bl	8000288 <__aeabi_dsub>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c170:	f7f4 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800c174:	2800      	cmp	r0, #0
 800c176:	f43f af30 	beq.w	800bfda <_dtoa_r+0x432>
 800c17a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c17e:	2b30      	cmp	r3, #48	; 0x30
 800c180:	f105 32ff 	add.w	r2, r5, #4294967295
 800c184:	d002      	beq.n	800c18c <_dtoa_r+0x5e4>
 800c186:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c18a:	e04a      	b.n	800c222 <_dtoa_r+0x67a>
 800c18c:	4615      	mov	r5, r2
 800c18e:	e7f4      	b.n	800c17a <_dtoa_r+0x5d2>
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <_dtoa_r+0x600>)
 800c192:	f7f4 fa31 	bl	80005f8 <__aeabi_dmul>
 800c196:	e9cd 0100 	strd	r0, r1, [sp]
 800c19a:	e7bc      	b.n	800c116 <_dtoa_r+0x56e>
 800c19c:	0800dc10 	.word	0x0800dc10
 800c1a0:	0800dbe8 	.word	0x0800dbe8
 800c1a4:	3ff00000 	.word	0x3ff00000
 800c1a8:	40240000 	.word	0x40240000
 800c1ac:	401c0000 	.word	0x401c0000
 800c1b0:	40140000 	.word	0x40140000
 800c1b4:	3fe00000 	.word	0x3fe00000
 800c1b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c1bc:	465d      	mov	r5, fp
 800c1be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 fb41 	bl	800084c <__aeabi_ddiv>
 800c1ca:	f7f4 fcc5 	bl	8000b58 <__aeabi_d2iz>
 800c1ce:	4680      	mov	r8, r0
 800c1d0:	f7f4 f9a8 	bl	8000524 <__aeabi_i2d>
 800c1d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1d8:	f7f4 fa0e 	bl	80005f8 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c1e8:	f7f4 f84e 	bl	8000288 <__aeabi_dsub>
 800c1ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c1f0:	eba5 060b 	sub.w	r6, r5, fp
 800c1f4:	45b1      	cmp	r9, r6
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	d139      	bne.n	800c270 <_dtoa_r+0x6c8>
 800c1fc:	f7f4 f846 	bl	800028c <__adddf3>
 800c200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c204:	4606      	mov	r6, r0
 800c206:	460f      	mov	r7, r1
 800c208:	f7f4 fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800c20c:	b9c8      	cbnz	r0, 800c242 <_dtoa_r+0x69a>
 800c20e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c212:	4630      	mov	r0, r6
 800c214:	4639      	mov	r1, r7
 800c216:	f7f4 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800c21a:	b110      	cbz	r0, 800c222 <_dtoa_r+0x67a>
 800c21c:	f018 0f01 	tst.w	r8, #1
 800c220:	d10f      	bne.n	800c242 <_dtoa_r+0x69a>
 800c222:	9904      	ldr	r1, [sp, #16]
 800c224:	4620      	mov	r0, r4
 800c226:	f000 fb85 	bl	800c934 <_Bfree>
 800c22a:	2300      	movs	r3, #0
 800c22c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c22e:	702b      	strb	r3, [r5, #0]
 800c230:	f10a 0301 	add.w	r3, sl, #1
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f000 8241 	beq.w	800c6c0 <_dtoa_r+0xb18>
 800c23e:	601d      	str	r5, [r3, #0]
 800c240:	e23e      	b.n	800c6c0 <_dtoa_r+0xb18>
 800c242:	f8cd a020 	str.w	sl, [sp, #32]
 800c246:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c24a:	2a39      	cmp	r2, #57	; 0x39
 800c24c:	f105 33ff 	add.w	r3, r5, #4294967295
 800c250:	d108      	bne.n	800c264 <_dtoa_r+0x6bc>
 800c252:	459b      	cmp	fp, r3
 800c254:	d10a      	bne.n	800c26c <_dtoa_r+0x6c4>
 800c256:	9b08      	ldr	r3, [sp, #32]
 800c258:	3301      	adds	r3, #1
 800c25a:	9308      	str	r3, [sp, #32]
 800c25c:	2330      	movs	r3, #48	; 0x30
 800c25e:	f88b 3000 	strb.w	r3, [fp]
 800c262:	465b      	mov	r3, fp
 800c264:	781a      	ldrb	r2, [r3, #0]
 800c266:	3201      	adds	r2, #1
 800c268:	701a      	strb	r2, [r3, #0]
 800c26a:	e78c      	b.n	800c186 <_dtoa_r+0x5de>
 800c26c:	461d      	mov	r5, r3
 800c26e:	e7ea      	b.n	800c246 <_dtoa_r+0x69e>
 800c270:	2200      	movs	r2, #0
 800c272:	4b9b      	ldr	r3, [pc, #620]	; (800c4e0 <_dtoa_r+0x938>)
 800c274:	f7f4 f9c0 	bl	80005f8 <__aeabi_dmul>
 800c278:	2200      	movs	r2, #0
 800c27a:	2300      	movs	r3, #0
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	f7f4 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800c284:	2800      	cmp	r0, #0
 800c286:	d09a      	beq.n	800c1be <_dtoa_r+0x616>
 800c288:	e7cb      	b.n	800c222 <_dtoa_r+0x67a>
 800c28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	f000 808b 	beq.w	800c3a8 <_dtoa_r+0x800>
 800c292:	9a06      	ldr	r2, [sp, #24]
 800c294:	2a01      	cmp	r2, #1
 800c296:	dc6e      	bgt.n	800c376 <_dtoa_r+0x7ce>
 800c298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	d067      	beq.n	800c36e <_dtoa_r+0x7c6>
 800c29e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2a2:	9f07      	ldr	r7, [sp, #28]
 800c2a4:	9d05      	ldr	r5, [sp, #20]
 800c2a6:	9a05      	ldr	r2, [sp, #20]
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	441a      	add	r2, r3
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	9205      	str	r2, [sp, #20]
 800c2b0:	4498      	add	r8, r3
 800c2b2:	f000 fbdf 	bl	800ca74 <__i2b>
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	dd0c      	ble.n	800c2d6 <_dtoa_r+0x72e>
 800c2bc:	f1b8 0f00 	cmp.w	r8, #0
 800c2c0:	dd09      	ble.n	800c2d6 <_dtoa_r+0x72e>
 800c2c2:	4545      	cmp	r5, r8
 800c2c4:	9a05      	ldr	r2, [sp, #20]
 800c2c6:	462b      	mov	r3, r5
 800c2c8:	bfa8      	it	ge
 800c2ca:	4643      	movge	r3, r8
 800c2cc:	1ad2      	subs	r2, r2, r3
 800c2ce:	9205      	str	r2, [sp, #20]
 800c2d0:	1aed      	subs	r5, r5, r3
 800c2d2:	eba8 0803 	sub.w	r8, r8, r3
 800c2d6:	9b07      	ldr	r3, [sp, #28]
 800c2d8:	b1eb      	cbz	r3, 800c316 <_dtoa_r+0x76e>
 800c2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d067      	beq.n	800c3b0 <_dtoa_r+0x808>
 800c2e0:	b18f      	cbz	r7, 800c306 <_dtoa_r+0x75e>
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	463a      	mov	r2, r7
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f000 fc64 	bl	800cbb4 <__pow5mult>
 800c2ec:	9a04      	ldr	r2, [sp, #16]
 800c2ee:	4601      	mov	r1, r0
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 fbc7 	bl	800ca86 <__multiply>
 800c2f8:	9904      	ldr	r1, [sp, #16]
 800c2fa:	9008      	str	r0, [sp, #32]
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 fb19 	bl	800c934 <_Bfree>
 800c302:	9b08      	ldr	r3, [sp, #32]
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	9b07      	ldr	r3, [sp, #28]
 800c308:	1bda      	subs	r2, r3, r7
 800c30a:	d004      	beq.n	800c316 <_dtoa_r+0x76e>
 800c30c:	9904      	ldr	r1, [sp, #16]
 800c30e:	4620      	mov	r0, r4
 800c310:	f000 fc50 	bl	800cbb4 <__pow5mult>
 800c314:	9004      	str	r0, [sp, #16]
 800c316:	2101      	movs	r1, #1
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 fbab 	bl	800ca74 <__i2b>
 800c31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c320:	4607      	mov	r7, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 81d0 	beq.w	800c6c8 <_dtoa_r+0xb20>
 800c328:	461a      	mov	r2, r3
 800c32a:	4601      	mov	r1, r0
 800c32c:	4620      	mov	r0, r4
 800c32e:	f000 fc41 	bl	800cbb4 <__pow5mult>
 800c332:	9b06      	ldr	r3, [sp, #24]
 800c334:	2b01      	cmp	r3, #1
 800c336:	4607      	mov	r7, r0
 800c338:	dc40      	bgt.n	800c3bc <_dtoa_r+0x814>
 800c33a:	9b00      	ldr	r3, [sp, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d139      	bne.n	800c3b4 <_dtoa_r+0x80c>
 800c340:	9b01      	ldr	r3, [sp, #4]
 800c342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c346:	2b00      	cmp	r3, #0
 800c348:	d136      	bne.n	800c3b8 <_dtoa_r+0x810>
 800c34a:	9b01      	ldr	r3, [sp, #4]
 800c34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c350:	0d1b      	lsrs	r3, r3, #20
 800c352:	051b      	lsls	r3, r3, #20
 800c354:	b12b      	cbz	r3, 800c362 <_dtoa_r+0x7ba>
 800c356:	9b05      	ldr	r3, [sp, #20]
 800c358:	3301      	adds	r3, #1
 800c35a:	9305      	str	r3, [sp, #20]
 800c35c:	f108 0801 	add.w	r8, r8, #1
 800c360:	2301      	movs	r3, #1
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c366:	2b00      	cmp	r3, #0
 800c368:	d12a      	bne.n	800c3c0 <_dtoa_r+0x818>
 800c36a:	2001      	movs	r0, #1
 800c36c:	e030      	b.n	800c3d0 <_dtoa_r+0x828>
 800c36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c370:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c374:	e795      	b.n	800c2a2 <_dtoa_r+0x6fa>
 800c376:	9b07      	ldr	r3, [sp, #28]
 800c378:	f109 37ff 	add.w	r7, r9, #4294967295
 800c37c:	42bb      	cmp	r3, r7
 800c37e:	bfbf      	itttt	lt
 800c380:	9b07      	ldrlt	r3, [sp, #28]
 800c382:	9707      	strlt	r7, [sp, #28]
 800c384:	1afa      	sublt	r2, r7, r3
 800c386:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c388:	bfbb      	ittet	lt
 800c38a:	189b      	addlt	r3, r3, r2
 800c38c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c38e:	1bdf      	subge	r7, r3, r7
 800c390:	2700      	movlt	r7, #0
 800c392:	f1b9 0f00 	cmp.w	r9, #0
 800c396:	bfb5      	itete	lt
 800c398:	9b05      	ldrlt	r3, [sp, #20]
 800c39a:	9d05      	ldrge	r5, [sp, #20]
 800c39c:	eba3 0509 	sublt.w	r5, r3, r9
 800c3a0:	464b      	movge	r3, r9
 800c3a2:	bfb8      	it	lt
 800c3a4:	2300      	movlt	r3, #0
 800c3a6:	e77e      	b.n	800c2a6 <_dtoa_r+0x6fe>
 800c3a8:	9f07      	ldr	r7, [sp, #28]
 800c3aa:	9d05      	ldr	r5, [sp, #20]
 800c3ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c3ae:	e783      	b.n	800c2b8 <_dtoa_r+0x710>
 800c3b0:	9a07      	ldr	r2, [sp, #28]
 800c3b2:	e7ab      	b.n	800c30c <_dtoa_r+0x764>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e7d4      	b.n	800c362 <_dtoa_r+0x7ba>
 800c3b8:	9b00      	ldr	r3, [sp, #0]
 800c3ba:	e7d2      	b.n	800c362 <_dtoa_r+0x7ba>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9307      	str	r3, [sp, #28]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c3c6:	6918      	ldr	r0, [r3, #16]
 800c3c8:	f000 fb06 	bl	800c9d8 <__hi0bits>
 800c3cc:	f1c0 0020 	rsb	r0, r0, #32
 800c3d0:	4440      	add	r0, r8
 800c3d2:	f010 001f 	ands.w	r0, r0, #31
 800c3d6:	d047      	beq.n	800c468 <_dtoa_r+0x8c0>
 800c3d8:	f1c0 0320 	rsb	r3, r0, #32
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	dd3b      	ble.n	800c458 <_dtoa_r+0x8b0>
 800c3e0:	9b05      	ldr	r3, [sp, #20]
 800c3e2:	f1c0 001c 	rsb	r0, r0, #28
 800c3e6:	4403      	add	r3, r0
 800c3e8:	9305      	str	r3, [sp, #20]
 800c3ea:	4405      	add	r5, r0
 800c3ec:	4480      	add	r8, r0
 800c3ee:	9b05      	ldr	r3, [sp, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dd05      	ble.n	800c400 <_dtoa_r+0x858>
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	9904      	ldr	r1, [sp, #16]
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fc29 	bl	800cc50 <__lshift>
 800c3fe:	9004      	str	r0, [sp, #16]
 800c400:	f1b8 0f00 	cmp.w	r8, #0
 800c404:	dd05      	ble.n	800c412 <_dtoa_r+0x86a>
 800c406:	4639      	mov	r1, r7
 800c408:	4642      	mov	r2, r8
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 fc20 	bl	800cc50 <__lshift>
 800c410:	4607      	mov	r7, r0
 800c412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c414:	b353      	cbz	r3, 800c46c <_dtoa_r+0x8c4>
 800c416:	4639      	mov	r1, r7
 800c418:	9804      	ldr	r0, [sp, #16]
 800c41a:	f000 fc6d 	bl	800ccf8 <__mcmp>
 800c41e:	2800      	cmp	r0, #0
 800c420:	da24      	bge.n	800c46c <_dtoa_r+0x8c4>
 800c422:	2300      	movs	r3, #0
 800c424:	220a      	movs	r2, #10
 800c426:	9904      	ldr	r1, [sp, #16]
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fa9a 	bl	800c962 <__multadd>
 800c42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c430:	9004      	str	r0, [sp, #16]
 800c432:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 814d 	beq.w	800c6d6 <_dtoa_r+0xb2e>
 800c43c:	2300      	movs	r3, #0
 800c43e:	4631      	mov	r1, r6
 800c440:	220a      	movs	r2, #10
 800c442:	4620      	mov	r0, r4
 800c444:	f000 fa8d 	bl	800c962 <__multadd>
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	4606      	mov	r6, r0
 800c44e:	dc4f      	bgt.n	800c4f0 <_dtoa_r+0x948>
 800c450:	9b06      	ldr	r3, [sp, #24]
 800c452:	2b02      	cmp	r3, #2
 800c454:	dd4c      	ble.n	800c4f0 <_dtoa_r+0x948>
 800c456:	e011      	b.n	800c47c <_dtoa_r+0x8d4>
 800c458:	d0c9      	beq.n	800c3ee <_dtoa_r+0x846>
 800c45a:	9a05      	ldr	r2, [sp, #20]
 800c45c:	331c      	adds	r3, #28
 800c45e:	441a      	add	r2, r3
 800c460:	9205      	str	r2, [sp, #20]
 800c462:	441d      	add	r5, r3
 800c464:	4498      	add	r8, r3
 800c466:	e7c2      	b.n	800c3ee <_dtoa_r+0x846>
 800c468:	4603      	mov	r3, r0
 800c46a:	e7f6      	b.n	800c45a <_dtoa_r+0x8b2>
 800c46c:	f1b9 0f00 	cmp.w	r9, #0
 800c470:	dc38      	bgt.n	800c4e4 <_dtoa_r+0x93c>
 800c472:	9b06      	ldr	r3, [sp, #24]
 800c474:	2b02      	cmp	r3, #2
 800c476:	dd35      	ble.n	800c4e4 <_dtoa_r+0x93c>
 800c478:	f8cd 9008 	str.w	r9, [sp, #8]
 800c47c:	9b02      	ldr	r3, [sp, #8]
 800c47e:	b963      	cbnz	r3, 800c49a <_dtoa_r+0x8f2>
 800c480:	4639      	mov	r1, r7
 800c482:	2205      	movs	r2, #5
 800c484:	4620      	mov	r0, r4
 800c486:	f000 fa6c 	bl	800c962 <__multadd>
 800c48a:	4601      	mov	r1, r0
 800c48c:	4607      	mov	r7, r0
 800c48e:	9804      	ldr	r0, [sp, #16]
 800c490:	f000 fc32 	bl	800ccf8 <__mcmp>
 800c494:	2800      	cmp	r0, #0
 800c496:	f73f adcc 	bgt.w	800c032 <_dtoa_r+0x48a>
 800c49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49c:	465d      	mov	r5, fp
 800c49e:	ea6f 0a03 	mvn.w	sl, r3
 800c4a2:	f04f 0900 	mov.w	r9, #0
 800c4a6:	4639      	mov	r1, r7
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fa43 	bl	800c934 <_Bfree>
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	f43f aeb7 	beq.w	800c222 <_dtoa_r+0x67a>
 800c4b4:	f1b9 0f00 	cmp.w	r9, #0
 800c4b8:	d005      	beq.n	800c4c6 <_dtoa_r+0x91e>
 800c4ba:	45b1      	cmp	r9, r6
 800c4bc:	d003      	beq.n	800c4c6 <_dtoa_r+0x91e>
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 fa37 	bl	800c934 <_Bfree>
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f000 fa33 	bl	800c934 <_Bfree>
 800c4ce:	e6a8      	b.n	800c222 <_dtoa_r+0x67a>
 800c4d0:	2700      	movs	r7, #0
 800c4d2:	463e      	mov	r6, r7
 800c4d4:	e7e1      	b.n	800c49a <_dtoa_r+0x8f2>
 800c4d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c4da:	463e      	mov	r6, r7
 800c4dc:	e5a9      	b.n	800c032 <_dtoa_r+0x48a>
 800c4de:	bf00      	nop
 800c4e0:	40240000 	.word	0x40240000
 800c4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 80fa 	beq.w	800c6e4 <_dtoa_r+0xb3c>
 800c4f0:	2d00      	cmp	r5, #0
 800c4f2:	dd05      	ble.n	800c500 <_dtoa_r+0x958>
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f000 fba9 	bl	800cc50 <__lshift>
 800c4fe:	4606      	mov	r6, r0
 800c500:	9b07      	ldr	r3, [sp, #28]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d04c      	beq.n	800c5a0 <_dtoa_r+0x9f8>
 800c506:	6871      	ldr	r1, [r6, #4]
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 f9df 	bl	800c8cc <_Balloc>
 800c50e:	6932      	ldr	r2, [r6, #16]
 800c510:	3202      	adds	r2, #2
 800c512:	4605      	mov	r5, r0
 800c514:	0092      	lsls	r2, r2, #2
 800c516:	f106 010c 	add.w	r1, r6, #12
 800c51a:	300c      	adds	r0, #12
 800c51c:	f7fe fd58 	bl	800afd0 <memcpy>
 800c520:	2201      	movs	r2, #1
 800c522:	4629      	mov	r1, r5
 800c524:	4620      	mov	r0, r4
 800c526:	f000 fb93 	bl	800cc50 <__lshift>
 800c52a:	9b00      	ldr	r3, [sp, #0]
 800c52c:	f8cd b014 	str.w	fp, [sp, #20]
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	46b1      	mov	r9, r6
 800c536:	9307      	str	r3, [sp, #28]
 800c538:	4606      	mov	r6, r0
 800c53a:	4639      	mov	r1, r7
 800c53c:	9804      	ldr	r0, [sp, #16]
 800c53e:	f7ff faa7 	bl	800ba90 <quorem>
 800c542:	4649      	mov	r1, r9
 800c544:	4605      	mov	r5, r0
 800c546:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c54a:	9804      	ldr	r0, [sp, #16]
 800c54c:	f000 fbd4 	bl	800ccf8 <__mcmp>
 800c550:	4632      	mov	r2, r6
 800c552:	9000      	str	r0, [sp, #0]
 800c554:	4639      	mov	r1, r7
 800c556:	4620      	mov	r0, r4
 800c558:	f000 fbe8 	bl	800cd2c <__mdiff>
 800c55c:	68c3      	ldr	r3, [r0, #12]
 800c55e:	4602      	mov	r2, r0
 800c560:	bb03      	cbnz	r3, 800c5a4 <_dtoa_r+0x9fc>
 800c562:	4601      	mov	r1, r0
 800c564:	9008      	str	r0, [sp, #32]
 800c566:	9804      	ldr	r0, [sp, #16]
 800c568:	f000 fbc6 	bl	800ccf8 <__mcmp>
 800c56c:	9a08      	ldr	r2, [sp, #32]
 800c56e:	4603      	mov	r3, r0
 800c570:	4611      	mov	r1, r2
 800c572:	4620      	mov	r0, r4
 800c574:	9308      	str	r3, [sp, #32]
 800c576:	f000 f9dd 	bl	800c934 <_Bfree>
 800c57a:	9b08      	ldr	r3, [sp, #32]
 800c57c:	b9a3      	cbnz	r3, 800c5a8 <_dtoa_r+0xa00>
 800c57e:	9a06      	ldr	r2, [sp, #24]
 800c580:	b992      	cbnz	r2, 800c5a8 <_dtoa_r+0xa00>
 800c582:	9a07      	ldr	r2, [sp, #28]
 800c584:	b982      	cbnz	r2, 800c5a8 <_dtoa_r+0xa00>
 800c586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c58a:	d029      	beq.n	800c5e0 <_dtoa_r+0xa38>
 800c58c:	9b00      	ldr	r3, [sp, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	dd01      	ble.n	800c596 <_dtoa_r+0x9ee>
 800c592:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c596:	9b05      	ldr	r3, [sp, #20]
 800c598:	1c5d      	adds	r5, r3, #1
 800c59a:	f883 8000 	strb.w	r8, [r3]
 800c59e:	e782      	b.n	800c4a6 <_dtoa_r+0x8fe>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	e7c2      	b.n	800c52a <_dtoa_r+0x982>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e7e3      	b.n	800c570 <_dtoa_r+0x9c8>
 800c5a8:	9a00      	ldr	r2, [sp, #0]
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	db04      	blt.n	800c5b8 <_dtoa_r+0xa10>
 800c5ae:	d125      	bne.n	800c5fc <_dtoa_r+0xa54>
 800c5b0:	9a06      	ldr	r2, [sp, #24]
 800c5b2:	bb1a      	cbnz	r2, 800c5fc <_dtoa_r+0xa54>
 800c5b4:	9a07      	ldr	r2, [sp, #28]
 800c5b6:	bb0a      	cbnz	r2, 800c5fc <_dtoa_r+0xa54>
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	ddec      	ble.n	800c596 <_dtoa_r+0x9ee>
 800c5bc:	2201      	movs	r2, #1
 800c5be:	9904      	ldr	r1, [sp, #16]
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 fb45 	bl	800cc50 <__lshift>
 800c5c6:	4639      	mov	r1, r7
 800c5c8:	9004      	str	r0, [sp, #16]
 800c5ca:	f000 fb95 	bl	800ccf8 <__mcmp>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	dc03      	bgt.n	800c5da <_dtoa_r+0xa32>
 800c5d2:	d1e0      	bne.n	800c596 <_dtoa_r+0x9ee>
 800c5d4:	f018 0f01 	tst.w	r8, #1
 800c5d8:	d0dd      	beq.n	800c596 <_dtoa_r+0x9ee>
 800c5da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5de:	d1d8      	bne.n	800c592 <_dtoa_r+0x9ea>
 800c5e0:	9b05      	ldr	r3, [sp, #20]
 800c5e2:	9a05      	ldr	r2, [sp, #20]
 800c5e4:	1c5d      	adds	r5, r3, #1
 800c5e6:	2339      	movs	r3, #57	; 0x39
 800c5e8:	7013      	strb	r3, [r2, #0]
 800c5ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5ee:	2b39      	cmp	r3, #57	; 0x39
 800c5f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c5f4:	d04f      	beq.n	800c696 <_dtoa_r+0xaee>
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	7013      	strb	r3, [r2, #0]
 800c5fa:	e754      	b.n	800c4a6 <_dtoa_r+0x8fe>
 800c5fc:	9a05      	ldr	r2, [sp, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f102 0501 	add.w	r5, r2, #1
 800c604:	dd06      	ble.n	800c614 <_dtoa_r+0xa6c>
 800c606:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c60a:	d0e9      	beq.n	800c5e0 <_dtoa_r+0xa38>
 800c60c:	f108 0801 	add.w	r8, r8, #1
 800c610:	9b05      	ldr	r3, [sp, #20]
 800c612:	e7c2      	b.n	800c59a <_dtoa_r+0x9f2>
 800c614:	9a02      	ldr	r2, [sp, #8]
 800c616:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c61a:	eba5 030b 	sub.w	r3, r5, fp
 800c61e:	4293      	cmp	r3, r2
 800c620:	d021      	beq.n	800c666 <_dtoa_r+0xabe>
 800c622:	2300      	movs	r3, #0
 800c624:	220a      	movs	r2, #10
 800c626:	9904      	ldr	r1, [sp, #16]
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 f99a 	bl	800c962 <__multadd>
 800c62e:	45b1      	cmp	r9, r6
 800c630:	9004      	str	r0, [sp, #16]
 800c632:	f04f 0300 	mov.w	r3, #0
 800c636:	f04f 020a 	mov.w	r2, #10
 800c63a:	4649      	mov	r1, r9
 800c63c:	4620      	mov	r0, r4
 800c63e:	d105      	bne.n	800c64c <_dtoa_r+0xaa4>
 800c640:	f000 f98f 	bl	800c962 <__multadd>
 800c644:	4681      	mov	r9, r0
 800c646:	4606      	mov	r6, r0
 800c648:	9505      	str	r5, [sp, #20]
 800c64a:	e776      	b.n	800c53a <_dtoa_r+0x992>
 800c64c:	f000 f989 	bl	800c962 <__multadd>
 800c650:	4631      	mov	r1, r6
 800c652:	4681      	mov	r9, r0
 800c654:	2300      	movs	r3, #0
 800c656:	220a      	movs	r2, #10
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 f982 	bl	800c962 <__multadd>
 800c65e:	4606      	mov	r6, r0
 800c660:	e7f2      	b.n	800c648 <_dtoa_r+0xaa0>
 800c662:	f04f 0900 	mov.w	r9, #0
 800c666:	2201      	movs	r2, #1
 800c668:	9904      	ldr	r1, [sp, #16]
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 faf0 	bl	800cc50 <__lshift>
 800c670:	4639      	mov	r1, r7
 800c672:	9004      	str	r0, [sp, #16]
 800c674:	f000 fb40 	bl	800ccf8 <__mcmp>
 800c678:	2800      	cmp	r0, #0
 800c67a:	dcb6      	bgt.n	800c5ea <_dtoa_r+0xa42>
 800c67c:	d102      	bne.n	800c684 <_dtoa_r+0xadc>
 800c67e:	f018 0f01 	tst.w	r8, #1
 800c682:	d1b2      	bne.n	800c5ea <_dtoa_r+0xa42>
 800c684:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c688:	2b30      	cmp	r3, #48	; 0x30
 800c68a:	f105 32ff 	add.w	r2, r5, #4294967295
 800c68e:	f47f af0a 	bne.w	800c4a6 <_dtoa_r+0x8fe>
 800c692:	4615      	mov	r5, r2
 800c694:	e7f6      	b.n	800c684 <_dtoa_r+0xadc>
 800c696:	4593      	cmp	fp, r2
 800c698:	d105      	bne.n	800c6a6 <_dtoa_r+0xafe>
 800c69a:	2331      	movs	r3, #49	; 0x31
 800c69c:	f10a 0a01 	add.w	sl, sl, #1
 800c6a0:	f88b 3000 	strb.w	r3, [fp]
 800c6a4:	e6ff      	b.n	800c4a6 <_dtoa_r+0x8fe>
 800c6a6:	4615      	mov	r5, r2
 800c6a8:	e79f      	b.n	800c5ea <_dtoa_r+0xa42>
 800c6aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c710 <_dtoa_r+0xb68>
 800c6ae:	e007      	b.n	800c6c0 <_dtoa_r+0xb18>
 800c6b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c714 <_dtoa_r+0xb6c>
 800c6b6:	b11b      	cbz	r3, 800c6c0 <_dtoa_r+0xb18>
 800c6b8:	f10b 0308 	add.w	r3, fp, #8
 800c6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	4658      	mov	r0, fp
 800c6c2:	b017      	add	sp, #92	; 0x5c
 800c6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	f77f ae35 	ble.w	800c33a <_dtoa_r+0x792>
 800c6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6d2:	9307      	str	r3, [sp, #28]
 800c6d4:	e649      	b.n	800c36a <_dtoa_r+0x7c2>
 800c6d6:	9b02      	ldr	r3, [sp, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dc03      	bgt.n	800c6e4 <_dtoa_r+0xb3c>
 800c6dc:	9b06      	ldr	r3, [sp, #24]
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	f73f aecc 	bgt.w	800c47c <_dtoa_r+0x8d4>
 800c6e4:	465d      	mov	r5, fp
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	9804      	ldr	r0, [sp, #16]
 800c6ea:	f7ff f9d1 	bl	800ba90 <quorem>
 800c6ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c6f2:	f805 8b01 	strb.w	r8, [r5], #1
 800c6f6:	9a02      	ldr	r2, [sp, #8]
 800c6f8:	eba5 030b 	sub.w	r3, r5, fp
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	ddb0      	ble.n	800c662 <_dtoa_r+0xaba>
 800c700:	2300      	movs	r3, #0
 800c702:	220a      	movs	r2, #10
 800c704:	9904      	ldr	r1, [sp, #16]
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f92b 	bl	800c962 <__multadd>
 800c70c:	9004      	str	r0, [sp, #16]
 800c70e:	e7ea      	b.n	800c6e6 <_dtoa_r+0xb3e>
 800c710:	0800db50 	.word	0x0800db50
 800c714:	0800db74 	.word	0x0800db74

0800c718 <std>:
 800c718:	2300      	movs	r3, #0
 800c71a:	b510      	push	{r4, lr}
 800c71c:	4604      	mov	r4, r0
 800c71e:	e9c0 3300 	strd	r3, r3, [r0]
 800c722:	6083      	str	r3, [r0, #8]
 800c724:	8181      	strh	r1, [r0, #12]
 800c726:	6643      	str	r3, [r0, #100]	; 0x64
 800c728:	81c2      	strh	r2, [r0, #14]
 800c72a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c72e:	6183      	str	r3, [r0, #24]
 800c730:	4619      	mov	r1, r3
 800c732:	2208      	movs	r2, #8
 800c734:	305c      	adds	r0, #92	; 0x5c
 800c736:	f7fe fc56 	bl	800afe6 <memset>
 800c73a:	4b05      	ldr	r3, [pc, #20]	; (800c750 <std+0x38>)
 800c73c:	6263      	str	r3, [r4, #36]	; 0x24
 800c73e:	4b05      	ldr	r3, [pc, #20]	; (800c754 <std+0x3c>)
 800c740:	62a3      	str	r3, [r4, #40]	; 0x28
 800c742:	4b05      	ldr	r3, [pc, #20]	; (800c758 <std+0x40>)
 800c744:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c746:	4b05      	ldr	r3, [pc, #20]	; (800c75c <std+0x44>)
 800c748:	6224      	str	r4, [r4, #32]
 800c74a:	6323      	str	r3, [r4, #48]	; 0x30
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	bf00      	nop
 800c750:	0800d3c5 	.word	0x0800d3c5
 800c754:	0800d3e7 	.word	0x0800d3e7
 800c758:	0800d41f 	.word	0x0800d41f
 800c75c:	0800d443 	.word	0x0800d443

0800c760 <_cleanup_r>:
 800c760:	4901      	ldr	r1, [pc, #4]	; (800c768 <_cleanup_r+0x8>)
 800c762:	f000 b885 	b.w	800c870 <_fwalk_reent>
 800c766:	bf00      	nop
 800c768:	0800d71d 	.word	0x0800d71d

0800c76c <__sfmoreglue>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	1e4a      	subs	r2, r1, #1
 800c770:	2568      	movs	r5, #104	; 0x68
 800c772:	4355      	muls	r5, r2
 800c774:	460e      	mov	r6, r1
 800c776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c77a:	f7fe fc8b 	bl	800b094 <_malloc_r>
 800c77e:	4604      	mov	r4, r0
 800c780:	b140      	cbz	r0, 800c794 <__sfmoreglue+0x28>
 800c782:	2100      	movs	r1, #0
 800c784:	e9c0 1600 	strd	r1, r6, [r0]
 800c788:	300c      	adds	r0, #12
 800c78a:	60a0      	str	r0, [r4, #8]
 800c78c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c790:	f7fe fc29 	bl	800afe6 <memset>
 800c794:	4620      	mov	r0, r4
 800c796:	bd70      	pop	{r4, r5, r6, pc}

0800c798 <__sinit>:
 800c798:	6983      	ldr	r3, [r0, #24]
 800c79a:	b510      	push	{r4, lr}
 800c79c:	4604      	mov	r4, r0
 800c79e:	bb33      	cbnz	r3, 800c7ee <__sinit+0x56>
 800c7a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c7a4:	6503      	str	r3, [r0, #80]	; 0x50
 800c7a6:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <__sinit+0x58>)
 800c7a8:	4a12      	ldr	r2, [pc, #72]	; (800c7f4 <__sinit+0x5c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6282      	str	r2, [r0, #40]	; 0x28
 800c7ae:	4298      	cmp	r0, r3
 800c7b0:	bf04      	itt	eq
 800c7b2:	2301      	moveq	r3, #1
 800c7b4:	6183      	streq	r3, [r0, #24]
 800c7b6:	f000 f81f 	bl	800c7f8 <__sfp>
 800c7ba:	6060      	str	r0, [r4, #4]
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 f81b 	bl	800c7f8 <__sfp>
 800c7c2:	60a0      	str	r0, [r4, #8]
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f000 f817 	bl	800c7f8 <__sfp>
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	60e0      	str	r0, [r4, #12]
 800c7ce:	2104      	movs	r1, #4
 800c7d0:	6860      	ldr	r0, [r4, #4]
 800c7d2:	f7ff ffa1 	bl	800c718 <std>
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	2109      	movs	r1, #9
 800c7da:	68a0      	ldr	r0, [r4, #8]
 800c7dc:	f7ff ff9c 	bl	800c718 <std>
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	2112      	movs	r1, #18
 800c7e4:	68e0      	ldr	r0, [r4, #12]
 800c7e6:	f7ff ff97 	bl	800c718 <std>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	61a3      	str	r3, [r4, #24]
 800c7ee:	bd10      	pop	{r4, pc}
 800c7f0:	0800db3c 	.word	0x0800db3c
 800c7f4:	0800c761 	.word	0x0800c761

0800c7f8 <__sfp>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	4b1b      	ldr	r3, [pc, #108]	; (800c868 <__sfp+0x70>)
 800c7fc:	681e      	ldr	r6, [r3, #0]
 800c7fe:	69b3      	ldr	r3, [r6, #24]
 800c800:	4607      	mov	r7, r0
 800c802:	b913      	cbnz	r3, 800c80a <__sfp+0x12>
 800c804:	4630      	mov	r0, r6
 800c806:	f7ff ffc7 	bl	800c798 <__sinit>
 800c80a:	3648      	adds	r6, #72	; 0x48
 800c80c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c810:	3b01      	subs	r3, #1
 800c812:	d503      	bpl.n	800c81c <__sfp+0x24>
 800c814:	6833      	ldr	r3, [r6, #0]
 800c816:	b133      	cbz	r3, 800c826 <__sfp+0x2e>
 800c818:	6836      	ldr	r6, [r6, #0]
 800c81a:	e7f7      	b.n	800c80c <__sfp+0x14>
 800c81c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c820:	b16d      	cbz	r5, 800c83e <__sfp+0x46>
 800c822:	3468      	adds	r4, #104	; 0x68
 800c824:	e7f4      	b.n	800c810 <__sfp+0x18>
 800c826:	2104      	movs	r1, #4
 800c828:	4638      	mov	r0, r7
 800c82a:	f7ff ff9f 	bl	800c76c <__sfmoreglue>
 800c82e:	6030      	str	r0, [r6, #0]
 800c830:	2800      	cmp	r0, #0
 800c832:	d1f1      	bne.n	800c818 <__sfp+0x20>
 800c834:	230c      	movs	r3, #12
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	4604      	mov	r4, r0
 800c83a:	4620      	mov	r0, r4
 800c83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c83e:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <__sfp+0x74>)
 800c840:	6665      	str	r5, [r4, #100]	; 0x64
 800c842:	e9c4 5500 	strd	r5, r5, [r4]
 800c846:	60a5      	str	r5, [r4, #8]
 800c848:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c84c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c850:	2208      	movs	r2, #8
 800c852:	4629      	mov	r1, r5
 800c854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c858:	f7fe fbc5 	bl	800afe6 <memset>
 800c85c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c864:	e7e9      	b.n	800c83a <__sfp+0x42>
 800c866:	bf00      	nop
 800c868:	0800db3c 	.word	0x0800db3c
 800c86c:	ffff0001 	.word	0xffff0001

0800c870 <_fwalk_reent>:
 800c870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c874:	4680      	mov	r8, r0
 800c876:	4689      	mov	r9, r1
 800c878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c87c:	2600      	movs	r6, #0
 800c87e:	b914      	cbnz	r4, 800c886 <_fwalk_reent+0x16>
 800c880:	4630      	mov	r0, r6
 800c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c886:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c88a:	3f01      	subs	r7, #1
 800c88c:	d501      	bpl.n	800c892 <_fwalk_reent+0x22>
 800c88e:	6824      	ldr	r4, [r4, #0]
 800c890:	e7f5      	b.n	800c87e <_fwalk_reent+0xe>
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d907      	bls.n	800c8a8 <_fwalk_reent+0x38>
 800c898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c89c:	3301      	adds	r3, #1
 800c89e:	d003      	beq.n	800c8a8 <_fwalk_reent+0x38>
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	47c8      	blx	r9
 800c8a6:	4306      	orrs	r6, r0
 800c8a8:	3568      	adds	r5, #104	; 0x68
 800c8aa:	e7ee      	b.n	800c88a <_fwalk_reent+0x1a>

0800c8ac <_localeconv_r>:
 800c8ac:	4b04      	ldr	r3, [pc, #16]	; (800c8c0 <_localeconv_r+0x14>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6a18      	ldr	r0, [r3, #32]
 800c8b2:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <_localeconv_r+0x18>)
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	bf08      	it	eq
 800c8b8:	4618      	moveq	r0, r3
 800c8ba:	30f0      	adds	r0, #240	; 0xf0
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	20000184 	.word	0x20000184
 800c8c4:	200001e8 	.word	0x200001e8

0800c8c8 <__malloc_lock>:
 800c8c8:	4770      	bx	lr

0800c8ca <__malloc_unlock>:
 800c8ca:	4770      	bx	lr

0800c8cc <_Balloc>:
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	460e      	mov	r6, r1
 800c8d4:	b93d      	cbnz	r5, 800c8e6 <_Balloc+0x1a>
 800c8d6:	2010      	movs	r0, #16
 800c8d8:	f7fe fb6a 	bl	800afb0 <malloc>
 800c8dc:	6260      	str	r0, [r4, #36]	; 0x24
 800c8de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c8e2:	6005      	str	r5, [r0, #0]
 800c8e4:	60c5      	str	r5, [r0, #12]
 800c8e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c8e8:	68eb      	ldr	r3, [r5, #12]
 800c8ea:	b183      	cbz	r3, 800c90e <_Balloc+0x42>
 800c8ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c8f4:	b9b8      	cbnz	r0, 800c926 <_Balloc+0x5a>
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	fa01 f506 	lsl.w	r5, r1, r6
 800c8fc:	1d6a      	adds	r2, r5, #5
 800c8fe:	0092      	lsls	r2, r2, #2
 800c900:	4620      	mov	r0, r4
 800c902:	f000 fabf 	bl	800ce84 <_calloc_r>
 800c906:	b160      	cbz	r0, 800c922 <_Balloc+0x56>
 800c908:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c90c:	e00e      	b.n	800c92c <_Balloc+0x60>
 800c90e:	2221      	movs	r2, #33	; 0x21
 800c910:	2104      	movs	r1, #4
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fab6 	bl	800ce84 <_calloc_r>
 800c918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c91a:	60e8      	str	r0, [r5, #12]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e4      	bne.n	800c8ec <_Balloc+0x20>
 800c922:	2000      	movs	r0, #0
 800c924:	bd70      	pop	{r4, r5, r6, pc}
 800c926:	6802      	ldr	r2, [r0, #0]
 800c928:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c92c:	2300      	movs	r3, #0
 800c92e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c932:	e7f7      	b.n	800c924 <_Balloc+0x58>

0800c934 <_Bfree>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c938:	4606      	mov	r6, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	b93c      	cbnz	r4, 800c94e <_Bfree+0x1a>
 800c93e:	2010      	movs	r0, #16
 800c940:	f7fe fb36 	bl	800afb0 <malloc>
 800c944:	6270      	str	r0, [r6, #36]	; 0x24
 800c946:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c94a:	6004      	str	r4, [r0, #0]
 800c94c:	60c4      	str	r4, [r0, #12]
 800c94e:	b13d      	cbz	r5, 800c960 <_Bfree+0x2c>
 800c950:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c952:	686a      	ldr	r2, [r5, #4]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c95a:	6029      	str	r1, [r5, #0]
 800c95c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c960:	bd70      	pop	{r4, r5, r6, pc}

0800c962 <__multadd>:
 800c962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c966:	690d      	ldr	r5, [r1, #16]
 800c968:	461f      	mov	r7, r3
 800c96a:	4606      	mov	r6, r0
 800c96c:	460c      	mov	r4, r1
 800c96e:	f101 0c14 	add.w	ip, r1, #20
 800c972:	2300      	movs	r3, #0
 800c974:	f8dc 0000 	ldr.w	r0, [ip]
 800c978:	b281      	uxth	r1, r0
 800c97a:	fb02 7101 	mla	r1, r2, r1, r7
 800c97e:	0c0f      	lsrs	r7, r1, #16
 800c980:	0c00      	lsrs	r0, r0, #16
 800c982:	fb02 7000 	mla	r0, r2, r0, r7
 800c986:	b289      	uxth	r1, r1
 800c988:	3301      	adds	r3, #1
 800c98a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c98e:	429d      	cmp	r5, r3
 800c990:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c994:	f84c 1b04 	str.w	r1, [ip], #4
 800c998:	dcec      	bgt.n	800c974 <__multadd+0x12>
 800c99a:	b1d7      	cbz	r7, 800c9d2 <__multadd+0x70>
 800c99c:	68a3      	ldr	r3, [r4, #8]
 800c99e:	42ab      	cmp	r3, r5
 800c9a0:	dc12      	bgt.n	800c9c8 <__multadd+0x66>
 800c9a2:	6861      	ldr	r1, [r4, #4]
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	3101      	adds	r1, #1
 800c9a8:	f7ff ff90 	bl	800c8cc <_Balloc>
 800c9ac:	6922      	ldr	r2, [r4, #16]
 800c9ae:	3202      	adds	r2, #2
 800c9b0:	f104 010c 	add.w	r1, r4, #12
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	0092      	lsls	r2, r2, #2
 800c9b8:	300c      	adds	r0, #12
 800c9ba:	f7fe fb09 	bl	800afd0 <memcpy>
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7ff ffb7 	bl	800c934 <_Bfree>
 800c9c6:	4644      	mov	r4, r8
 800c9c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9cc:	3501      	adds	r5, #1
 800c9ce:	615f      	str	r7, [r3, #20]
 800c9d0:	6125      	str	r5, [r4, #16]
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c9d8 <__hi0bits>:
 800c9d8:	0c02      	lsrs	r2, r0, #16
 800c9da:	0412      	lsls	r2, r2, #16
 800c9dc:	4603      	mov	r3, r0
 800c9de:	b9b2      	cbnz	r2, 800ca0e <__hi0bits+0x36>
 800c9e0:	0403      	lsls	r3, r0, #16
 800c9e2:	2010      	movs	r0, #16
 800c9e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c9e8:	bf04      	itt	eq
 800c9ea:	021b      	lsleq	r3, r3, #8
 800c9ec:	3008      	addeq	r0, #8
 800c9ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c9f2:	bf04      	itt	eq
 800c9f4:	011b      	lsleq	r3, r3, #4
 800c9f6:	3004      	addeq	r0, #4
 800c9f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c9fc:	bf04      	itt	eq
 800c9fe:	009b      	lsleq	r3, r3, #2
 800ca00:	3002      	addeq	r0, #2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	db06      	blt.n	800ca14 <__hi0bits+0x3c>
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	d503      	bpl.n	800ca12 <__hi0bits+0x3a>
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	4770      	bx	lr
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e7e8      	b.n	800c9e4 <__hi0bits+0xc>
 800ca12:	2020      	movs	r0, #32
 800ca14:	4770      	bx	lr

0800ca16 <__lo0bits>:
 800ca16:	6803      	ldr	r3, [r0, #0]
 800ca18:	f013 0207 	ands.w	r2, r3, #7
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	d00b      	beq.n	800ca38 <__lo0bits+0x22>
 800ca20:	07da      	lsls	r2, r3, #31
 800ca22:	d423      	bmi.n	800ca6c <__lo0bits+0x56>
 800ca24:	0798      	lsls	r0, r3, #30
 800ca26:	bf49      	itett	mi
 800ca28:	085b      	lsrmi	r3, r3, #1
 800ca2a:	089b      	lsrpl	r3, r3, #2
 800ca2c:	2001      	movmi	r0, #1
 800ca2e:	600b      	strmi	r3, [r1, #0]
 800ca30:	bf5c      	itt	pl
 800ca32:	600b      	strpl	r3, [r1, #0]
 800ca34:	2002      	movpl	r0, #2
 800ca36:	4770      	bx	lr
 800ca38:	b298      	uxth	r0, r3
 800ca3a:	b9a8      	cbnz	r0, 800ca68 <__lo0bits+0x52>
 800ca3c:	0c1b      	lsrs	r3, r3, #16
 800ca3e:	2010      	movs	r0, #16
 800ca40:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca44:	bf04      	itt	eq
 800ca46:	0a1b      	lsreq	r3, r3, #8
 800ca48:	3008      	addeq	r0, #8
 800ca4a:	071a      	lsls	r2, r3, #28
 800ca4c:	bf04      	itt	eq
 800ca4e:	091b      	lsreq	r3, r3, #4
 800ca50:	3004      	addeq	r0, #4
 800ca52:	079a      	lsls	r2, r3, #30
 800ca54:	bf04      	itt	eq
 800ca56:	089b      	lsreq	r3, r3, #2
 800ca58:	3002      	addeq	r0, #2
 800ca5a:	07da      	lsls	r2, r3, #31
 800ca5c:	d402      	bmi.n	800ca64 <__lo0bits+0x4e>
 800ca5e:	085b      	lsrs	r3, r3, #1
 800ca60:	d006      	beq.n	800ca70 <__lo0bits+0x5a>
 800ca62:	3001      	adds	r0, #1
 800ca64:	600b      	str	r3, [r1, #0]
 800ca66:	4770      	bx	lr
 800ca68:	4610      	mov	r0, r2
 800ca6a:	e7e9      	b.n	800ca40 <__lo0bits+0x2a>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	4770      	bx	lr
 800ca70:	2020      	movs	r0, #32
 800ca72:	4770      	bx	lr

0800ca74 <__i2b>:
 800ca74:	b510      	push	{r4, lr}
 800ca76:	460c      	mov	r4, r1
 800ca78:	2101      	movs	r1, #1
 800ca7a:	f7ff ff27 	bl	800c8cc <_Balloc>
 800ca7e:	2201      	movs	r2, #1
 800ca80:	6144      	str	r4, [r0, #20]
 800ca82:	6102      	str	r2, [r0, #16]
 800ca84:	bd10      	pop	{r4, pc}

0800ca86 <__multiply>:
 800ca86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8a:	4614      	mov	r4, r2
 800ca8c:	690a      	ldr	r2, [r1, #16]
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	bfb8      	it	lt
 800ca94:	460b      	movlt	r3, r1
 800ca96:	4688      	mov	r8, r1
 800ca98:	bfbc      	itt	lt
 800ca9a:	46a0      	movlt	r8, r4
 800ca9c:	461c      	movlt	r4, r3
 800ca9e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800caa2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800caa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caaa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800caae:	eb07 0609 	add.w	r6, r7, r9
 800cab2:	42b3      	cmp	r3, r6
 800cab4:	bfb8      	it	lt
 800cab6:	3101      	addlt	r1, #1
 800cab8:	f7ff ff08 	bl	800c8cc <_Balloc>
 800cabc:	f100 0514 	add.w	r5, r0, #20
 800cac0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cac4:	462b      	mov	r3, r5
 800cac6:	2200      	movs	r2, #0
 800cac8:	4573      	cmp	r3, lr
 800caca:	d316      	bcc.n	800cafa <__multiply+0x74>
 800cacc:	f104 0214 	add.w	r2, r4, #20
 800cad0:	f108 0114 	add.w	r1, r8, #20
 800cad4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cad8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	9b00      	ldr	r3, [sp, #0]
 800cae0:	9201      	str	r2, [sp, #4]
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d80c      	bhi.n	800cb00 <__multiply+0x7a>
 800cae6:	2e00      	cmp	r6, #0
 800cae8:	dd03      	ble.n	800caf2 <__multiply+0x6c>
 800caea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d05d      	beq.n	800cbae <__multiply+0x128>
 800caf2:	6106      	str	r6, [r0, #16]
 800caf4:	b003      	add	sp, #12
 800caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafa:	f843 2b04 	str.w	r2, [r3], #4
 800cafe:	e7e3      	b.n	800cac8 <__multiply+0x42>
 800cb00:	f8b2 b000 	ldrh.w	fp, [r2]
 800cb04:	f1bb 0f00 	cmp.w	fp, #0
 800cb08:	d023      	beq.n	800cb52 <__multiply+0xcc>
 800cb0a:	4689      	mov	r9, r1
 800cb0c:	46ac      	mov	ip, r5
 800cb0e:	f04f 0800 	mov.w	r8, #0
 800cb12:	f859 4b04 	ldr.w	r4, [r9], #4
 800cb16:	f8dc a000 	ldr.w	sl, [ip]
 800cb1a:	b2a3      	uxth	r3, r4
 800cb1c:	fa1f fa8a 	uxth.w	sl, sl
 800cb20:	fb0b a303 	mla	r3, fp, r3, sl
 800cb24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cb28:	f8dc 4000 	ldr.w	r4, [ip]
 800cb2c:	4443      	add	r3, r8
 800cb2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cb32:	fb0b 840a 	mla	r4, fp, sl, r8
 800cb36:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cb3a:	46e2      	mov	sl, ip
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cb42:	454f      	cmp	r7, r9
 800cb44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cb48:	f84a 3b04 	str.w	r3, [sl], #4
 800cb4c:	d82b      	bhi.n	800cba6 <__multiply+0x120>
 800cb4e:	f8cc 8004 	str.w	r8, [ip, #4]
 800cb52:	9b01      	ldr	r3, [sp, #4]
 800cb54:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cb58:	3204      	adds	r2, #4
 800cb5a:	f1ba 0f00 	cmp.w	sl, #0
 800cb5e:	d020      	beq.n	800cba2 <__multiply+0x11c>
 800cb60:	682b      	ldr	r3, [r5, #0]
 800cb62:	4689      	mov	r9, r1
 800cb64:	46a8      	mov	r8, r5
 800cb66:	f04f 0b00 	mov.w	fp, #0
 800cb6a:	f8b9 c000 	ldrh.w	ip, [r9]
 800cb6e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cb72:	fb0a 440c 	mla	r4, sl, ip, r4
 800cb76:	445c      	add	r4, fp
 800cb78:	46c4      	mov	ip, r8
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cb80:	f84c 3b04 	str.w	r3, [ip], #4
 800cb84:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb88:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cb8c:	0c1b      	lsrs	r3, r3, #16
 800cb8e:	fb0a b303 	mla	r3, sl, r3, fp
 800cb92:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cb96:	454f      	cmp	r7, r9
 800cb98:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cb9c:	d805      	bhi.n	800cbaa <__multiply+0x124>
 800cb9e:	f8c8 3004 	str.w	r3, [r8, #4]
 800cba2:	3504      	adds	r5, #4
 800cba4:	e79b      	b.n	800cade <__multiply+0x58>
 800cba6:	46d4      	mov	ip, sl
 800cba8:	e7b3      	b.n	800cb12 <__multiply+0x8c>
 800cbaa:	46e0      	mov	r8, ip
 800cbac:	e7dd      	b.n	800cb6a <__multiply+0xe4>
 800cbae:	3e01      	subs	r6, #1
 800cbb0:	e799      	b.n	800cae6 <__multiply+0x60>
	...

0800cbb4 <__pow5mult>:
 800cbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb8:	4615      	mov	r5, r2
 800cbba:	f012 0203 	ands.w	r2, r2, #3
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	d007      	beq.n	800cbd4 <__pow5mult+0x20>
 800cbc4:	3a01      	subs	r2, #1
 800cbc6:	4c21      	ldr	r4, [pc, #132]	; (800cc4c <__pow5mult+0x98>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbce:	f7ff fec8 	bl	800c962 <__multadd>
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	10ad      	asrs	r5, r5, #2
 800cbd6:	d035      	beq.n	800cc44 <__pow5mult+0x90>
 800cbd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cbda:	b93c      	cbnz	r4, 800cbec <__pow5mult+0x38>
 800cbdc:	2010      	movs	r0, #16
 800cbde:	f7fe f9e7 	bl	800afb0 <malloc>
 800cbe2:	6270      	str	r0, [r6, #36]	; 0x24
 800cbe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbe8:	6004      	str	r4, [r0, #0]
 800cbea:	60c4      	str	r4, [r0, #12]
 800cbec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cbf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbf4:	b94c      	cbnz	r4, 800cc0a <__pow5mult+0x56>
 800cbf6:	f240 2171 	movw	r1, #625	; 0x271
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7ff ff3a 	bl	800ca74 <__i2b>
 800cc00:	2300      	movs	r3, #0
 800cc02:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc06:	4604      	mov	r4, r0
 800cc08:	6003      	str	r3, [r0, #0]
 800cc0a:	f04f 0800 	mov.w	r8, #0
 800cc0e:	07eb      	lsls	r3, r5, #31
 800cc10:	d50a      	bpl.n	800cc28 <__pow5mult+0x74>
 800cc12:	4639      	mov	r1, r7
 800cc14:	4622      	mov	r2, r4
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7ff ff35 	bl	800ca86 <__multiply>
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	4681      	mov	r9, r0
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7ff fe87 	bl	800c934 <_Bfree>
 800cc26:	464f      	mov	r7, r9
 800cc28:	106d      	asrs	r5, r5, #1
 800cc2a:	d00b      	beq.n	800cc44 <__pow5mult+0x90>
 800cc2c:	6820      	ldr	r0, [r4, #0]
 800cc2e:	b938      	cbnz	r0, 800cc40 <__pow5mult+0x8c>
 800cc30:	4622      	mov	r2, r4
 800cc32:	4621      	mov	r1, r4
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff ff26 	bl	800ca86 <__multiply>
 800cc3a:	6020      	str	r0, [r4, #0]
 800cc3c:	f8c0 8000 	str.w	r8, [r0]
 800cc40:	4604      	mov	r4, r0
 800cc42:	e7e4      	b.n	800cc0e <__pow5mult+0x5a>
 800cc44:	4638      	mov	r0, r7
 800cc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800dcd8 	.word	0x0800dcd8

0800cc50 <__lshift>:
 800cc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc54:	460c      	mov	r4, r1
 800cc56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	6849      	ldr	r1, [r1, #4]
 800cc5e:	eb0a 0903 	add.w	r9, sl, r3
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	4607      	mov	r7, r0
 800cc66:	4616      	mov	r6, r2
 800cc68:	f109 0501 	add.w	r5, r9, #1
 800cc6c:	42ab      	cmp	r3, r5
 800cc6e:	db32      	blt.n	800ccd6 <__lshift+0x86>
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7ff fe2b 	bl	800c8cc <_Balloc>
 800cc76:	2300      	movs	r3, #0
 800cc78:	4680      	mov	r8, r0
 800cc7a:	f100 0114 	add.w	r1, r0, #20
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4553      	cmp	r3, sl
 800cc82:	db2b      	blt.n	800ccdc <__lshift+0x8c>
 800cc84:	6920      	ldr	r0, [r4, #16]
 800cc86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc8a:	f104 0314 	add.w	r3, r4, #20
 800cc8e:	f016 021f 	ands.w	r2, r6, #31
 800cc92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc9a:	d025      	beq.n	800cce8 <__lshift+0x98>
 800cc9c:	f1c2 0e20 	rsb	lr, r2, #32
 800cca0:	2000      	movs	r0, #0
 800cca2:	681e      	ldr	r6, [r3, #0]
 800cca4:	468a      	mov	sl, r1
 800cca6:	4096      	lsls	r6, r2
 800cca8:	4330      	orrs	r0, r6
 800ccaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ccae:	f853 0b04 	ldr.w	r0, [r3], #4
 800ccb2:	459c      	cmp	ip, r3
 800ccb4:	fa20 f00e 	lsr.w	r0, r0, lr
 800ccb8:	d814      	bhi.n	800cce4 <__lshift+0x94>
 800ccba:	6048      	str	r0, [r1, #4]
 800ccbc:	b108      	cbz	r0, 800ccc2 <__lshift+0x72>
 800ccbe:	f109 0502 	add.w	r5, r9, #2
 800ccc2:	3d01      	subs	r5, #1
 800ccc4:	4638      	mov	r0, r7
 800ccc6:	f8c8 5010 	str.w	r5, [r8, #16]
 800ccca:	4621      	mov	r1, r4
 800cccc:	f7ff fe32 	bl	800c934 <_Bfree>
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd6:	3101      	adds	r1, #1
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	e7c7      	b.n	800cc6c <__lshift+0x1c>
 800ccdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cce0:	3301      	adds	r3, #1
 800cce2:	e7cd      	b.n	800cc80 <__lshift+0x30>
 800cce4:	4651      	mov	r1, sl
 800cce6:	e7dc      	b.n	800cca2 <__lshift+0x52>
 800cce8:	3904      	subs	r1, #4
 800ccea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccee:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccf2:	459c      	cmp	ip, r3
 800ccf4:	d8f9      	bhi.n	800ccea <__lshift+0x9a>
 800ccf6:	e7e4      	b.n	800ccc2 <__lshift+0x72>

0800ccf8 <__mcmp>:
 800ccf8:	6903      	ldr	r3, [r0, #16]
 800ccfa:	690a      	ldr	r2, [r1, #16]
 800ccfc:	1a9b      	subs	r3, r3, r2
 800ccfe:	b530      	push	{r4, r5, lr}
 800cd00:	d10c      	bne.n	800cd1c <__mcmp+0x24>
 800cd02:	0092      	lsls	r2, r2, #2
 800cd04:	3014      	adds	r0, #20
 800cd06:	3114      	adds	r1, #20
 800cd08:	1884      	adds	r4, r0, r2
 800cd0a:	4411      	add	r1, r2
 800cd0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd14:	4295      	cmp	r5, r2
 800cd16:	d003      	beq.n	800cd20 <__mcmp+0x28>
 800cd18:	d305      	bcc.n	800cd26 <__mcmp+0x2e>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	bd30      	pop	{r4, r5, pc}
 800cd20:	42a0      	cmp	r0, r4
 800cd22:	d3f3      	bcc.n	800cd0c <__mcmp+0x14>
 800cd24:	e7fa      	b.n	800cd1c <__mcmp+0x24>
 800cd26:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2a:	e7f7      	b.n	800cd1c <__mcmp+0x24>

0800cd2c <__mdiff>:
 800cd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd30:	460d      	mov	r5, r1
 800cd32:	4607      	mov	r7, r0
 800cd34:	4611      	mov	r1, r2
 800cd36:	4628      	mov	r0, r5
 800cd38:	4614      	mov	r4, r2
 800cd3a:	f7ff ffdd 	bl	800ccf8 <__mcmp>
 800cd3e:	1e06      	subs	r6, r0, #0
 800cd40:	d108      	bne.n	800cd54 <__mdiff+0x28>
 800cd42:	4631      	mov	r1, r6
 800cd44:	4638      	mov	r0, r7
 800cd46:	f7ff fdc1 	bl	800c8cc <_Balloc>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd54:	bfa4      	itt	ge
 800cd56:	4623      	movge	r3, r4
 800cd58:	462c      	movge	r4, r5
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	6861      	ldr	r1, [r4, #4]
 800cd5e:	bfa6      	itte	ge
 800cd60:	461d      	movge	r5, r3
 800cd62:	2600      	movge	r6, #0
 800cd64:	2601      	movlt	r6, #1
 800cd66:	f7ff fdb1 	bl	800c8cc <_Balloc>
 800cd6a:	692b      	ldr	r3, [r5, #16]
 800cd6c:	60c6      	str	r6, [r0, #12]
 800cd6e:	6926      	ldr	r6, [r4, #16]
 800cd70:	f105 0914 	add.w	r9, r5, #20
 800cd74:	f104 0214 	add.w	r2, r4, #20
 800cd78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cd7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cd80:	f100 0514 	add.w	r5, r0, #20
 800cd84:	f04f 0e00 	mov.w	lr, #0
 800cd88:	f852 ab04 	ldr.w	sl, [r2], #4
 800cd8c:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd90:	fa1e f18a 	uxtah	r1, lr, sl
 800cd94:	b2a3      	uxth	r3, r4
 800cd96:	1ac9      	subs	r1, r1, r3
 800cd98:	0c23      	lsrs	r3, r4, #16
 800cd9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cd9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cda2:	b289      	uxth	r1, r1
 800cda4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cda8:	45c8      	cmp	r8, r9
 800cdaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cdae:	4694      	mov	ip, r2
 800cdb0:	f845 3b04 	str.w	r3, [r5], #4
 800cdb4:	d8e8      	bhi.n	800cd88 <__mdiff+0x5c>
 800cdb6:	45bc      	cmp	ip, r7
 800cdb8:	d304      	bcc.n	800cdc4 <__mdiff+0x98>
 800cdba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cdbe:	b183      	cbz	r3, 800cde2 <__mdiff+0xb6>
 800cdc0:	6106      	str	r6, [r0, #16]
 800cdc2:	e7c5      	b.n	800cd50 <__mdiff+0x24>
 800cdc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cdc8:	fa1e f381 	uxtah	r3, lr, r1
 800cdcc:	141a      	asrs	r2, r3, #16
 800cdce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdd8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cddc:	f845 3b04 	str.w	r3, [r5], #4
 800cde0:	e7e9      	b.n	800cdb6 <__mdiff+0x8a>
 800cde2:	3e01      	subs	r6, #1
 800cde4:	e7e9      	b.n	800cdba <__mdiff+0x8e>

0800cde6 <__d2b>:
 800cde6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdea:	460e      	mov	r6, r1
 800cdec:	2101      	movs	r1, #1
 800cdee:	ec59 8b10 	vmov	r8, r9, d0
 800cdf2:	4615      	mov	r5, r2
 800cdf4:	f7ff fd6a 	bl	800c8cc <_Balloc>
 800cdf8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce02:	bb34      	cbnz	r4, 800ce52 <__d2b+0x6c>
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	f1b8 0300 	subs.w	r3, r8, #0
 800ce0a:	d027      	beq.n	800ce5c <__d2b+0x76>
 800ce0c:	a802      	add	r0, sp, #8
 800ce0e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ce12:	f7ff fe00 	bl	800ca16 <__lo0bits>
 800ce16:	9900      	ldr	r1, [sp, #0]
 800ce18:	b1f0      	cbz	r0, 800ce58 <__d2b+0x72>
 800ce1a:	9a01      	ldr	r2, [sp, #4]
 800ce1c:	f1c0 0320 	rsb	r3, r0, #32
 800ce20:	fa02 f303 	lsl.w	r3, r2, r3
 800ce24:	430b      	orrs	r3, r1
 800ce26:	40c2      	lsrs	r2, r0
 800ce28:	617b      	str	r3, [r7, #20]
 800ce2a:	9201      	str	r2, [sp, #4]
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	61bb      	str	r3, [r7, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bf14      	ite	ne
 800ce34:	2102      	movne	r1, #2
 800ce36:	2101      	moveq	r1, #1
 800ce38:	6139      	str	r1, [r7, #16]
 800ce3a:	b1c4      	cbz	r4, 800ce6e <__d2b+0x88>
 800ce3c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ce40:	4404      	add	r4, r0
 800ce42:	6034      	str	r4, [r6, #0]
 800ce44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce48:	6028      	str	r0, [r5, #0]
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	b003      	add	sp, #12
 800ce4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce56:	e7d5      	b.n	800ce04 <__d2b+0x1e>
 800ce58:	6179      	str	r1, [r7, #20]
 800ce5a:	e7e7      	b.n	800ce2c <__d2b+0x46>
 800ce5c:	a801      	add	r0, sp, #4
 800ce5e:	f7ff fdda 	bl	800ca16 <__lo0bits>
 800ce62:	9b01      	ldr	r3, [sp, #4]
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	2101      	movs	r1, #1
 800ce68:	6139      	str	r1, [r7, #16]
 800ce6a:	3020      	adds	r0, #32
 800ce6c:	e7e5      	b.n	800ce3a <__d2b+0x54>
 800ce6e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ce72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce76:	6030      	str	r0, [r6, #0]
 800ce78:	6918      	ldr	r0, [r3, #16]
 800ce7a:	f7ff fdad 	bl	800c9d8 <__hi0bits>
 800ce7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ce82:	e7e1      	b.n	800ce48 <__d2b+0x62>

0800ce84 <_calloc_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	fb02 f401 	mul.w	r4, r2, r1
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	f7fe f902 	bl	800b094 <_malloc_r>
 800ce90:	4605      	mov	r5, r0
 800ce92:	b118      	cbz	r0, 800ce9c <_calloc_r+0x18>
 800ce94:	4622      	mov	r2, r4
 800ce96:	2100      	movs	r1, #0
 800ce98:	f7fe f8a5 	bl	800afe6 <memset>
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}

0800cea0 <__ssputs_r>:
 800cea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea4:	688e      	ldr	r6, [r1, #8]
 800cea6:	429e      	cmp	r6, r3
 800cea8:	4682      	mov	sl, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	4690      	mov	r8, r2
 800ceae:	4699      	mov	r9, r3
 800ceb0:	d837      	bhi.n	800cf22 <__ssputs_r+0x82>
 800ceb2:	898a      	ldrh	r2, [r1, #12]
 800ceb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ceb8:	d031      	beq.n	800cf1e <__ssputs_r+0x7e>
 800ceba:	6825      	ldr	r5, [r4, #0]
 800cebc:	6909      	ldr	r1, [r1, #16]
 800cebe:	1a6f      	subs	r7, r5, r1
 800cec0:	6965      	ldr	r5, [r4, #20]
 800cec2:	2302      	movs	r3, #2
 800cec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cec8:	fb95 f5f3 	sdiv	r5, r5, r3
 800cecc:	f109 0301 	add.w	r3, r9, #1
 800ced0:	443b      	add	r3, r7
 800ced2:	429d      	cmp	r5, r3
 800ced4:	bf38      	it	cc
 800ced6:	461d      	movcc	r5, r3
 800ced8:	0553      	lsls	r3, r2, #21
 800ceda:	d530      	bpl.n	800cf3e <__ssputs_r+0x9e>
 800cedc:	4629      	mov	r1, r5
 800cede:	f7fe f8d9 	bl	800b094 <_malloc_r>
 800cee2:	4606      	mov	r6, r0
 800cee4:	b950      	cbnz	r0, 800cefc <__ssputs_r+0x5c>
 800cee6:	230c      	movs	r3, #12
 800cee8:	f8ca 3000 	str.w	r3, [sl]
 800ceec:	89a3      	ldrh	r3, [r4, #12]
 800ceee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	f04f 30ff 	mov.w	r0, #4294967295
 800cef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cefc:	463a      	mov	r2, r7
 800cefe:	6921      	ldr	r1, [r4, #16]
 800cf00:	f7fe f866 	bl	800afd0 <memcpy>
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf0e:	81a3      	strh	r3, [r4, #12]
 800cf10:	6126      	str	r6, [r4, #16]
 800cf12:	6165      	str	r5, [r4, #20]
 800cf14:	443e      	add	r6, r7
 800cf16:	1bed      	subs	r5, r5, r7
 800cf18:	6026      	str	r6, [r4, #0]
 800cf1a:	60a5      	str	r5, [r4, #8]
 800cf1c:	464e      	mov	r6, r9
 800cf1e:	454e      	cmp	r6, r9
 800cf20:	d900      	bls.n	800cf24 <__ssputs_r+0x84>
 800cf22:	464e      	mov	r6, r9
 800cf24:	4632      	mov	r2, r6
 800cf26:	4641      	mov	r1, r8
 800cf28:	6820      	ldr	r0, [r4, #0]
 800cf2a:	f000 fca9 	bl	800d880 <memmove>
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	1b9b      	subs	r3, r3, r6
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	441e      	add	r6, r3
 800cf38:	6026      	str	r6, [r4, #0]
 800cf3a:	2000      	movs	r0, #0
 800cf3c:	e7dc      	b.n	800cef8 <__ssputs_r+0x58>
 800cf3e:	462a      	mov	r2, r5
 800cf40:	f000 fcb7 	bl	800d8b2 <_realloc_r>
 800cf44:	4606      	mov	r6, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d1e2      	bne.n	800cf10 <__ssputs_r+0x70>
 800cf4a:	6921      	ldr	r1, [r4, #16]
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	f7fe f853 	bl	800aff8 <_free_r>
 800cf52:	e7c8      	b.n	800cee6 <__ssputs_r+0x46>

0800cf54 <_svfiprintf_r>:
 800cf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	461d      	mov	r5, r3
 800cf5a:	898b      	ldrh	r3, [r1, #12]
 800cf5c:	061f      	lsls	r7, r3, #24
 800cf5e:	b09d      	sub	sp, #116	; 0x74
 800cf60:	4680      	mov	r8, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	4616      	mov	r6, r2
 800cf66:	d50f      	bpl.n	800cf88 <_svfiprintf_r+0x34>
 800cf68:	690b      	ldr	r3, [r1, #16]
 800cf6a:	b96b      	cbnz	r3, 800cf88 <_svfiprintf_r+0x34>
 800cf6c:	2140      	movs	r1, #64	; 0x40
 800cf6e:	f7fe f891 	bl	800b094 <_malloc_r>
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	6120      	str	r0, [r4, #16]
 800cf76:	b928      	cbnz	r0, 800cf84 <_svfiprintf_r+0x30>
 800cf78:	230c      	movs	r3, #12
 800cf7a:	f8c8 3000 	str.w	r3, [r8]
 800cf7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf82:	e0c8      	b.n	800d116 <_svfiprintf_r+0x1c2>
 800cf84:	2340      	movs	r3, #64	; 0x40
 800cf86:	6163      	str	r3, [r4, #20]
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8c:	2320      	movs	r3, #32
 800cf8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf92:	2330      	movs	r3, #48	; 0x30
 800cf94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf98:	9503      	str	r5, [sp, #12]
 800cf9a:	f04f 0b01 	mov.w	fp, #1
 800cf9e:	4637      	mov	r7, r6
 800cfa0:	463d      	mov	r5, r7
 800cfa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cfa6:	b10b      	cbz	r3, 800cfac <_svfiprintf_r+0x58>
 800cfa8:	2b25      	cmp	r3, #37	; 0x25
 800cfaa:	d13e      	bne.n	800d02a <_svfiprintf_r+0xd6>
 800cfac:	ebb7 0a06 	subs.w	sl, r7, r6
 800cfb0:	d00b      	beq.n	800cfca <_svfiprintf_r+0x76>
 800cfb2:	4653      	mov	r3, sl
 800cfb4:	4632      	mov	r2, r6
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4640      	mov	r0, r8
 800cfba:	f7ff ff71 	bl	800cea0 <__ssputs_r>
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	f000 80a4 	beq.w	800d10c <_svfiprintf_r+0x1b8>
 800cfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc6:	4453      	add	r3, sl
 800cfc8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfca:	783b      	ldrb	r3, [r7, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f000 809d 	beq.w	800d10c <_svfiprintf_r+0x1b8>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	9307      	str	r3, [sp, #28]
 800cfe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfe4:	931a      	str	r3, [sp, #104]	; 0x68
 800cfe6:	462f      	mov	r7, r5
 800cfe8:	2205      	movs	r2, #5
 800cfea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cfee:	4850      	ldr	r0, [pc, #320]	; (800d130 <_svfiprintf_r+0x1dc>)
 800cff0:	f7f3 f8f6 	bl	80001e0 <memchr>
 800cff4:	9b04      	ldr	r3, [sp, #16]
 800cff6:	b9d0      	cbnz	r0, 800d02e <_svfiprintf_r+0xda>
 800cff8:	06d9      	lsls	r1, r3, #27
 800cffa:	bf44      	itt	mi
 800cffc:	2220      	movmi	r2, #32
 800cffe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d002:	071a      	lsls	r2, r3, #28
 800d004:	bf44      	itt	mi
 800d006:	222b      	movmi	r2, #43	; 0x2b
 800d008:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d00c:	782a      	ldrb	r2, [r5, #0]
 800d00e:	2a2a      	cmp	r2, #42	; 0x2a
 800d010:	d015      	beq.n	800d03e <_svfiprintf_r+0xea>
 800d012:	9a07      	ldr	r2, [sp, #28]
 800d014:	462f      	mov	r7, r5
 800d016:	2000      	movs	r0, #0
 800d018:	250a      	movs	r5, #10
 800d01a:	4639      	mov	r1, r7
 800d01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d020:	3b30      	subs	r3, #48	; 0x30
 800d022:	2b09      	cmp	r3, #9
 800d024:	d94d      	bls.n	800d0c2 <_svfiprintf_r+0x16e>
 800d026:	b1b8      	cbz	r0, 800d058 <_svfiprintf_r+0x104>
 800d028:	e00f      	b.n	800d04a <_svfiprintf_r+0xf6>
 800d02a:	462f      	mov	r7, r5
 800d02c:	e7b8      	b.n	800cfa0 <_svfiprintf_r+0x4c>
 800d02e:	4a40      	ldr	r2, [pc, #256]	; (800d130 <_svfiprintf_r+0x1dc>)
 800d030:	1a80      	subs	r0, r0, r2
 800d032:	fa0b f000 	lsl.w	r0, fp, r0
 800d036:	4318      	orrs	r0, r3
 800d038:	9004      	str	r0, [sp, #16]
 800d03a:	463d      	mov	r5, r7
 800d03c:	e7d3      	b.n	800cfe6 <_svfiprintf_r+0x92>
 800d03e:	9a03      	ldr	r2, [sp, #12]
 800d040:	1d11      	adds	r1, r2, #4
 800d042:	6812      	ldr	r2, [r2, #0]
 800d044:	9103      	str	r1, [sp, #12]
 800d046:	2a00      	cmp	r2, #0
 800d048:	db01      	blt.n	800d04e <_svfiprintf_r+0xfa>
 800d04a:	9207      	str	r2, [sp, #28]
 800d04c:	e004      	b.n	800d058 <_svfiprintf_r+0x104>
 800d04e:	4252      	negs	r2, r2
 800d050:	f043 0302 	orr.w	r3, r3, #2
 800d054:	9207      	str	r2, [sp, #28]
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	783b      	ldrb	r3, [r7, #0]
 800d05a:	2b2e      	cmp	r3, #46	; 0x2e
 800d05c:	d10c      	bne.n	800d078 <_svfiprintf_r+0x124>
 800d05e:	787b      	ldrb	r3, [r7, #1]
 800d060:	2b2a      	cmp	r3, #42	; 0x2a
 800d062:	d133      	bne.n	800d0cc <_svfiprintf_r+0x178>
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	1d1a      	adds	r2, r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	9203      	str	r2, [sp, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	bfb8      	it	lt
 800d070:	f04f 33ff 	movlt.w	r3, #4294967295
 800d074:	3702      	adds	r7, #2
 800d076:	9305      	str	r3, [sp, #20]
 800d078:	4d2e      	ldr	r5, [pc, #184]	; (800d134 <_svfiprintf_r+0x1e0>)
 800d07a:	7839      	ldrb	r1, [r7, #0]
 800d07c:	2203      	movs	r2, #3
 800d07e:	4628      	mov	r0, r5
 800d080:	f7f3 f8ae 	bl	80001e0 <memchr>
 800d084:	b138      	cbz	r0, 800d096 <_svfiprintf_r+0x142>
 800d086:	2340      	movs	r3, #64	; 0x40
 800d088:	1b40      	subs	r0, r0, r5
 800d08a:	fa03 f000 	lsl.w	r0, r3, r0
 800d08e:	9b04      	ldr	r3, [sp, #16]
 800d090:	4303      	orrs	r3, r0
 800d092:	3701      	adds	r7, #1
 800d094:	9304      	str	r3, [sp, #16]
 800d096:	7839      	ldrb	r1, [r7, #0]
 800d098:	4827      	ldr	r0, [pc, #156]	; (800d138 <_svfiprintf_r+0x1e4>)
 800d09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d09e:	2206      	movs	r2, #6
 800d0a0:	1c7e      	adds	r6, r7, #1
 800d0a2:	f7f3 f89d 	bl	80001e0 <memchr>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d038      	beq.n	800d11c <_svfiprintf_r+0x1c8>
 800d0aa:	4b24      	ldr	r3, [pc, #144]	; (800d13c <_svfiprintf_r+0x1e8>)
 800d0ac:	bb13      	cbnz	r3, 800d0f4 <_svfiprintf_r+0x1a0>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	3307      	adds	r3, #7
 800d0b2:	f023 0307 	bic.w	r3, r3, #7
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	9303      	str	r3, [sp, #12]
 800d0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0bc:	444b      	add	r3, r9
 800d0be:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c0:	e76d      	b.n	800cf9e <_svfiprintf_r+0x4a>
 800d0c2:	fb05 3202 	mla	r2, r5, r2, r3
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	460f      	mov	r7, r1
 800d0ca:	e7a6      	b.n	800d01a <_svfiprintf_r+0xc6>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	3701      	adds	r7, #1
 800d0d0:	9305      	str	r3, [sp, #20]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	250a      	movs	r5, #10
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0dc:	3a30      	subs	r2, #48	; 0x30
 800d0de:	2a09      	cmp	r2, #9
 800d0e0:	d903      	bls.n	800d0ea <_svfiprintf_r+0x196>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0c8      	beq.n	800d078 <_svfiprintf_r+0x124>
 800d0e6:	9105      	str	r1, [sp, #20]
 800d0e8:	e7c6      	b.n	800d078 <_svfiprintf_r+0x124>
 800d0ea:	fb05 2101 	mla	r1, r5, r1, r2
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	e7f0      	b.n	800d0d6 <_svfiprintf_r+0x182>
 800d0f4:	ab03      	add	r3, sp, #12
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4b11      	ldr	r3, [pc, #68]	; (800d140 <_svfiprintf_r+0x1ec>)
 800d0fc:	a904      	add	r1, sp, #16
 800d0fe:	4640      	mov	r0, r8
 800d100:	f7fe f8b6 	bl	800b270 <_printf_float>
 800d104:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d108:	4681      	mov	r9, r0
 800d10a:	d1d6      	bne.n	800d0ba <_svfiprintf_r+0x166>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	065b      	lsls	r3, r3, #25
 800d110:	f53f af35 	bmi.w	800cf7e <_svfiprintf_r+0x2a>
 800d114:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d116:	b01d      	add	sp, #116	; 0x74
 800d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11c:	ab03      	add	r3, sp, #12
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	4622      	mov	r2, r4
 800d122:	4b07      	ldr	r3, [pc, #28]	; (800d140 <_svfiprintf_r+0x1ec>)
 800d124:	a904      	add	r1, sp, #16
 800d126:	4640      	mov	r0, r8
 800d128:	f7fe fb58 	bl	800b7dc <_printf_i>
 800d12c:	e7ea      	b.n	800d104 <_svfiprintf_r+0x1b0>
 800d12e:	bf00      	nop
 800d130:	0800dce4 	.word	0x0800dce4
 800d134:	0800dcea 	.word	0x0800dcea
 800d138:	0800dcee 	.word	0x0800dcee
 800d13c:	0800b271 	.word	0x0800b271
 800d140:	0800cea1 	.word	0x0800cea1

0800d144 <__sfputc_r>:
 800d144:	6893      	ldr	r3, [r2, #8]
 800d146:	3b01      	subs	r3, #1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	b410      	push	{r4}
 800d14c:	6093      	str	r3, [r2, #8]
 800d14e:	da08      	bge.n	800d162 <__sfputc_r+0x1e>
 800d150:	6994      	ldr	r4, [r2, #24]
 800d152:	42a3      	cmp	r3, r4
 800d154:	db01      	blt.n	800d15a <__sfputc_r+0x16>
 800d156:	290a      	cmp	r1, #10
 800d158:	d103      	bne.n	800d162 <__sfputc_r+0x1e>
 800d15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d15e:	f000 b975 	b.w	800d44c <__swbuf_r>
 800d162:	6813      	ldr	r3, [r2, #0]
 800d164:	1c58      	adds	r0, r3, #1
 800d166:	6010      	str	r0, [r2, #0]
 800d168:	7019      	strb	r1, [r3, #0]
 800d16a:	4608      	mov	r0, r1
 800d16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <__sfputs_r>:
 800d172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d174:	4606      	mov	r6, r0
 800d176:	460f      	mov	r7, r1
 800d178:	4614      	mov	r4, r2
 800d17a:	18d5      	adds	r5, r2, r3
 800d17c:	42ac      	cmp	r4, r5
 800d17e:	d101      	bne.n	800d184 <__sfputs_r+0x12>
 800d180:	2000      	movs	r0, #0
 800d182:	e007      	b.n	800d194 <__sfputs_r+0x22>
 800d184:	463a      	mov	r2, r7
 800d186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff ffda 	bl	800d144 <__sfputc_r>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d1f3      	bne.n	800d17c <__sfputs_r+0xa>
 800d194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d198 <_vfiprintf_r>:
 800d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	460c      	mov	r4, r1
 800d19e:	b09d      	sub	sp, #116	; 0x74
 800d1a0:	4617      	mov	r7, r2
 800d1a2:	461d      	mov	r5, r3
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	b118      	cbz	r0, 800d1b0 <_vfiprintf_r+0x18>
 800d1a8:	6983      	ldr	r3, [r0, #24]
 800d1aa:	b90b      	cbnz	r3, 800d1b0 <_vfiprintf_r+0x18>
 800d1ac:	f7ff faf4 	bl	800c798 <__sinit>
 800d1b0:	4b7c      	ldr	r3, [pc, #496]	; (800d3a4 <_vfiprintf_r+0x20c>)
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d158      	bne.n	800d268 <_vfiprintf_r+0xd0>
 800d1b6:	6874      	ldr	r4, [r6, #4]
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	0718      	lsls	r0, r3, #28
 800d1bc:	d55e      	bpl.n	800d27c <_vfiprintf_r+0xe4>
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d05b      	beq.n	800d27c <_vfiprintf_r+0xe4>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c8:	2320      	movs	r3, #32
 800d1ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1ce:	2330      	movs	r3, #48	; 0x30
 800d1d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1d4:	9503      	str	r5, [sp, #12]
 800d1d6:	f04f 0b01 	mov.w	fp, #1
 800d1da:	46b8      	mov	r8, r7
 800d1dc:	4645      	mov	r5, r8
 800d1de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d1e2:	b10b      	cbz	r3, 800d1e8 <_vfiprintf_r+0x50>
 800d1e4:	2b25      	cmp	r3, #37	; 0x25
 800d1e6:	d154      	bne.n	800d292 <_vfiprintf_r+0xfa>
 800d1e8:	ebb8 0a07 	subs.w	sl, r8, r7
 800d1ec:	d00b      	beq.n	800d206 <_vfiprintf_r+0x6e>
 800d1ee:	4653      	mov	r3, sl
 800d1f0:	463a      	mov	r2, r7
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7ff ffbc 	bl	800d172 <__sfputs_r>
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	f000 80c2 	beq.w	800d384 <_vfiprintf_r+0x1ec>
 800d200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d202:	4453      	add	r3, sl
 800d204:	9309      	str	r3, [sp, #36]	; 0x24
 800d206:	f898 3000 	ldrb.w	r3, [r8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 80ba 	beq.w	800d384 <_vfiprintf_r+0x1ec>
 800d210:	2300      	movs	r3, #0
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	9307      	str	r3, [sp, #28]
 800d21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d222:	931a      	str	r3, [sp, #104]	; 0x68
 800d224:	46a8      	mov	r8, r5
 800d226:	2205      	movs	r2, #5
 800d228:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d22c:	485e      	ldr	r0, [pc, #376]	; (800d3a8 <_vfiprintf_r+0x210>)
 800d22e:	f7f2 ffd7 	bl	80001e0 <memchr>
 800d232:	9b04      	ldr	r3, [sp, #16]
 800d234:	bb78      	cbnz	r0, 800d296 <_vfiprintf_r+0xfe>
 800d236:	06d9      	lsls	r1, r3, #27
 800d238:	bf44      	itt	mi
 800d23a:	2220      	movmi	r2, #32
 800d23c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d240:	071a      	lsls	r2, r3, #28
 800d242:	bf44      	itt	mi
 800d244:	222b      	movmi	r2, #43	; 0x2b
 800d246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d24a:	782a      	ldrb	r2, [r5, #0]
 800d24c:	2a2a      	cmp	r2, #42	; 0x2a
 800d24e:	d02a      	beq.n	800d2a6 <_vfiprintf_r+0x10e>
 800d250:	9a07      	ldr	r2, [sp, #28]
 800d252:	46a8      	mov	r8, r5
 800d254:	2000      	movs	r0, #0
 800d256:	250a      	movs	r5, #10
 800d258:	4641      	mov	r1, r8
 800d25a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d25e:	3b30      	subs	r3, #48	; 0x30
 800d260:	2b09      	cmp	r3, #9
 800d262:	d969      	bls.n	800d338 <_vfiprintf_r+0x1a0>
 800d264:	b360      	cbz	r0, 800d2c0 <_vfiprintf_r+0x128>
 800d266:	e024      	b.n	800d2b2 <_vfiprintf_r+0x11a>
 800d268:	4b50      	ldr	r3, [pc, #320]	; (800d3ac <_vfiprintf_r+0x214>)
 800d26a:	429c      	cmp	r4, r3
 800d26c:	d101      	bne.n	800d272 <_vfiprintf_r+0xda>
 800d26e:	68b4      	ldr	r4, [r6, #8]
 800d270:	e7a2      	b.n	800d1b8 <_vfiprintf_r+0x20>
 800d272:	4b4f      	ldr	r3, [pc, #316]	; (800d3b0 <_vfiprintf_r+0x218>)
 800d274:	429c      	cmp	r4, r3
 800d276:	bf08      	it	eq
 800d278:	68f4      	ldreq	r4, [r6, #12]
 800d27a:	e79d      	b.n	800d1b8 <_vfiprintf_r+0x20>
 800d27c:	4621      	mov	r1, r4
 800d27e:	4630      	mov	r0, r6
 800d280:	f000 f948 	bl	800d514 <__swsetup_r>
 800d284:	2800      	cmp	r0, #0
 800d286:	d09d      	beq.n	800d1c4 <_vfiprintf_r+0x2c>
 800d288:	f04f 30ff 	mov.w	r0, #4294967295
 800d28c:	b01d      	add	sp, #116	; 0x74
 800d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d292:	46a8      	mov	r8, r5
 800d294:	e7a2      	b.n	800d1dc <_vfiprintf_r+0x44>
 800d296:	4a44      	ldr	r2, [pc, #272]	; (800d3a8 <_vfiprintf_r+0x210>)
 800d298:	1a80      	subs	r0, r0, r2
 800d29a:	fa0b f000 	lsl.w	r0, fp, r0
 800d29e:	4318      	orrs	r0, r3
 800d2a0:	9004      	str	r0, [sp, #16]
 800d2a2:	4645      	mov	r5, r8
 800d2a4:	e7be      	b.n	800d224 <_vfiprintf_r+0x8c>
 800d2a6:	9a03      	ldr	r2, [sp, #12]
 800d2a8:	1d11      	adds	r1, r2, #4
 800d2aa:	6812      	ldr	r2, [r2, #0]
 800d2ac:	9103      	str	r1, [sp, #12]
 800d2ae:	2a00      	cmp	r2, #0
 800d2b0:	db01      	blt.n	800d2b6 <_vfiprintf_r+0x11e>
 800d2b2:	9207      	str	r2, [sp, #28]
 800d2b4:	e004      	b.n	800d2c0 <_vfiprintf_r+0x128>
 800d2b6:	4252      	negs	r2, r2
 800d2b8:	f043 0302 	orr.w	r3, r3, #2
 800d2bc:	9207      	str	r2, [sp, #28]
 800d2be:	9304      	str	r3, [sp, #16]
 800d2c0:	f898 3000 	ldrb.w	r3, [r8]
 800d2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800d2c6:	d10e      	bne.n	800d2e6 <_vfiprintf_r+0x14e>
 800d2c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ce:	d138      	bne.n	800d342 <_vfiprintf_r+0x1aa>
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	9203      	str	r2, [sp, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	bfb8      	it	lt
 800d2dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2e0:	f108 0802 	add.w	r8, r8, #2
 800d2e4:	9305      	str	r3, [sp, #20]
 800d2e6:	4d33      	ldr	r5, [pc, #204]	; (800d3b4 <_vfiprintf_r+0x21c>)
 800d2e8:	f898 1000 	ldrb.w	r1, [r8]
 800d2ec:	2203      	movs	r2, #3
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f7f2 ff76 	bl	80001e0 <memchr>
 800d2f4:	b140      	cbz	r0, 800d308 <_vfiprintf_r+0x170>
 800d2f6:	2340      	movs	r3, #64	; 0x40
 800d2f8:	1b40      	subs	r0, r0, r5
 800d2fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	4303      	orrs	r3, r0
 800d302:	f108 0801 	add.w	r8, r8, #1
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	f898 1000 	ldrb.w	r1, [r8]
 800d30c:	482a      	ldr	r0, [pc, #168]	; (800d3b8 <_vfiprintf_r+0x220>)
 800d30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d312:	2206      	movs	r2, #6
 800d314:	f108 0701 	add.w	r7, r8, #1
 800d318:	f7f2 ff62 	bl	80001e0 <memchr>
 800d31c:	2800      	cmp	r0, #0
 800d31e:	d037      	beq.n	800d390 <_vfiprintf_r+0x1f8>
 800d320:	4b26      	ldr	r3, [pc, #152]	; (800d3bc <_vfiprintf_r+0x224>)
 800d322:	bb1b      	cbnz	r3, 800d36c <_vfiprintf_r+0x1d4>
 800d324:	9b03      	ldr	r3, [sp, #12]
 800d326:	3307      	adds	r3, #7
 800d328:	f023 0307 	bic.w	r3, r3, #7
 800d32c:	3308      	adds	r3, #8
 800d32e:	9303      	str	r3, [sp, #12]
 800d330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d332:	444b      	add	r3, r9
 800d334:	9309      	str	r3, [sp, #36]	; 0x24
 800d336:	e750      	b.n	800d1da <_vfiprintf_r+0x42>
 800d338:	fb05 3202 	mla	r2, r5, r2, r3
 800d33c:	2001      	movs	r0, #1
 800d33e:	4688      	mov	r8, r1
 800d340:	e78a      	b.n	800d258 <_vfiprintf_r+0xc0>
 800d342:	2300      	movs	r3, #0
 800d344:	f108 0801 	add.w	r8, r8, #1
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	4619      	mov	r1, r3
 800d34c:	250a      	movs	r5, #10
 800d34e:	4640      	mov	r0, r8
 800d350:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d354:	3a30      	subs	r2, #48	; 0x30
 800d356:	2a09      	cmp	r2, #9
 800d358:	d903      	bls.n	800d362 <_vfiprintf_r+0x1ca>
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d0c3      	beq.n	800d2e6 <_vfiprintf_r+0x14e>
 800d35e:	9105      	str	r1, [sp, #20]
 800d360:	e7c1      	b.n	800d2e6 <_vfiprintf_r+0x14e>
 800d362:	fb05 2101 	mla	r1, r5, r1, r2
 800d366:	2301      	movs	r3, #1
 800d368:	4680      	mov	r8, r0
 800d36a:	e7f0      	b.n	800d34e <_vfiprintf_r+0x1b6>
 800d36c:	ab03      	add	r3, sp, #12
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4622      	mov	r2, r4
 800d372:	4b13      	ldr	r3, [pc, #76]	; (800d3c0 <_vfiprintf_r+0x228>)
 800d374:	a904      	add	r1, sp, #16
 800d376:	4630      	mov	r0, r6
 800d378:	f7fd ff7a 	bl	800b270 <_printf_float>
 800d37c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d380:	4681      	mov	r9, r0
 800d382:	d1d5      	bne.n	800d330 <_vfiprintf_r+0x198>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	065b      	lsls	r3, r3, #25
 800d388:	f53f af7e 	bmi.w	800d288 <_vfiprintf_r+0xf0>
 800d38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d38e:	e77d      	b.n	800d28c <_vfiprintf_r+0xf4>
 800d390:	ab03      	add	r3, sp, #12
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	4622      	mov	r2, r4
 800d396:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <_vfiprintf_r+0x228>)
 800d398:	a904      	add	r1, sp, #16
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7fe fa1e 	bl	800b7dc <_printf_i>
 800d3a0:	e7ec      	b.n	800d37c <_vfiprintf_r+0x1e4>
 800d3a2:	bf00      	nop
 800d3a4:	0800dba4 	.word	0x0800dba4
 800d3a8:	0800dce4 	.word	0x0800dce4
 800d3ac:	0800dbc4 	.word	0x0800dbc4
 800d3b0:	0800db84 	.word	0x0800db84
 800d3b4:	0800dcea 	.word	0x0800dcea
 800d3b8:	0800dcee 	.word	0x0800dcee
 800d3bc:	0800b271 	.word	0x0800b271
 800d3c0:	0800d173 	.word	0x0800d173

0800d3c4 <__sread>:
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	460c      	mov	r4, r1
 800d3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3cc:	f000 fa98 	bl	800d900 <_read_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	bfab      	itete	ge
 800d3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d3d8:	181b      	addge	r3, r3, r0
 800d3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3de:	bfac      	ite	ge
 800d3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3e2:	81a3      	strhlt	r3, [r4, #12]
 800d3e4:	bd10      	pop	{r4, pc}

0800d3e6 <__swrite>:
 800d3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ea:	461f      	mov	r7, r3
 800d3ec:	898b      	ldrh	r3, [r1, #12]
 800d3ee:	05db      	lsls	r3, r3, #23
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	460c      	mov	r4, r1
 800d3f4:	4616      	mov	r6, r2
 800d3f6:	d505      	bpl.n	800d404 <__swrite+0x1e>
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d400:	f000 f9b6 	bl	800d770 <_lseek_r>
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d40e:	81a3      	strh	r3, [r4, #12]
 800d410:	4632      	mov	r2, r6
 800d412:	463b      	mov	r3, r7
 800d414:	4628      	mov	r0, r5
 800d416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d41a:	f000 b869 	b.w	800d4f0 <_write_r>

0800d41e <__sseek>:
 800d41e:	b510      	push	{r4, lr}
 800d420:	460c      	mov	r4, r1
 800d422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d426:	f000 f9a3 	bl	800d770 <_lseek_r>
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	89a3      	ldrh	r3, [r4, #12]
 800d42e:	bf15      	itete	ne
 800d430:	6560      	strne	r0, [r4, #84]	; 0x54
 800d432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d43a:	81a3      	strheq	r3, [r4, #12]
 800d43c:	bf18      	it	ne
 800d43e:	81a3      	strhne	r3, [r4, #12]
 800d440:	bd10      	pop	{r4, pc}

0800d442 <__sclose>:
 800d442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d446:	f000 b8d3 	b.w	800d5f0 <_close_r>
	...

0800d44c <__swbuf_r>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	460e      	mov	r6, r1
 800d450:	4614      	mov	r4, r2
 800d452:	4605      	mov	r5, r0
 800d454:	b118      	cbz	r0, 800d45e <__swbuf_r+0x12>
 800d456:	6983      	ldr	r3, [r0, #24]
 800d458:	b90b      	cbnz	r3, 800d45e <__swbuf_r+0x12>
 800d45a:	f7ff f99d 	bl	800c798 <__sinit>
 800d45e:	4b21      	ldr	r3, [pc, #132]	; (800d4e4 <__swbuf_r+0x98>)
 800d460:	429c      	cmp	r4, r3
 800d462:	d12a      	bne.n	800d4ba <__swbuf_r+0x6e>
 800d464:	686c      	ldr	r4, [r5, #4]
 800d466:	69a3      	ldr	r3, [r4, #24]
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	071a      	lsls	r2, r3, #28
 800d46e:	d52e      	bpl.n	800d4ce <__swbuf_r+0x82>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	b363      	cbz	r3, 800d4ce <__swbuf_r+0x82>
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	1ac0      	subs	r0, r0, r3
 800d47a:	6963      	ldr	r3, [r4, #20]
 800d47c:	b2f6      	uxtb	r6, r6
 800d47e:	4283      	cmp	r3, r0
 800d480:	4637      	mov	r7, r6
 800d482:	dc04      	bgt.n	800d48e <__swbuf_r+0x42>
 800d484:	4621      	mov	r1, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f948 	bl	800d71c <_fflush_r>
 800d48c:	bb28      	cbnz	r0, 800d4da <__swbuf_r+0x8e>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	3b01      	subs	r3, #1
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	6022      	str	r2, [r4, #0]
 800d49a:	701e      	strb	r6, [r3, #0]
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	3001      	adds	r0, #1
 800d4a0:	4283      	cmp	r3, r0
 800d4a2:	d004      	beq.n	800d4ae <__swbuf_r+0x62>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	07db      	lsls	r3, r3, #31
 800d4a8:	d519      	bpl.n	800d4de <__swbuf_r+0x92>
 800d4aa:	2e0a      	cmp	r6, #10
 800d4ac:	d117      	bne.n	800d4de <__swbuf_r+0x92>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f000 f933 	bl	800d71c <_fflush_r>
 800d4b6:	b190      	cbz	r0, 800d4de <__swbuf_r+0x92>
 800d4b8:	e00f      	b.n	800d4da <__swbuf_r+0x8e>
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <__swbuf_r+0x9c>)
 800d4bc:	429c      	cmp	r4, r3
 800d4be:	d101      	bne.n	800d4c4 <__swbuf_r+0x78>
 800d4c0:	68ac      	ldr	r4, [r5, #8]
 800d4c2:	e7d0      	b.n	800d466 <__swbuf_r+0x1a>
 800d4c4:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <__swbuf_r+0xa0>)
 800d4c6:	429c      	cmp	r4, r3
 800d4c8:	bf08      	it	eq
 800d4ca:	68ec      	ldreq	r4, [r5, #12]
 800d4cc:	e7cb      	b.n	800d466 <__swbuf_r+0x1a>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 f81f 	bl	800d514 <__swsetup_r>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d0cc      	beq.n	800d474 <__swbuf_r+0x28>
 800d4da:	f04f 37ff 	mov.w	r7, #4294967295
 800d4de:	4638      	mov	r0, r7
 800d4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0800dba4 	.word	0x0800dba4
 800d4e8:	0800dbc4 	.word	0x0800dbc4
 800d4ec:	0800db84 	.word	0x0800db84

0800d4f0 <_write_r>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	4c07      	ldr	r4, [pc, #28]	; (800d510 <_write_r+0x20>)
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	4608      	mov	r0, r1
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	6022      	str	r2, [r4, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	f7fc ff3b 	bl	800a37a <_write>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d102      	bne.n	800d50e <_write_r+0x1e>
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	b103      	cbz	r3, 800d50e <_write_r+0x1e>
 800d50c:	602b      	str	r3, [r5, #0]
 800d50e:	bd38      	pop	{r3, r4, r5, pc}
 800d510:	200026dc 	.word	0x200026dc

0800d514 <__swsetup_r>:
 800d514:	4b32      	ldr	r3, [pc, #200]	; (800d5e0 <__swsetup_r+0xcc>)
 800d516:	b570      	push	{r4, r5, r6, lr}
 800d518:	681d      	ldr	r5, [r3, #0]
 800d51a:	4606      	mov	r6, r0
 800d51c:	460c      	mov	r4, r1
 800d51e:	b125      	cbz	r5, 800d52a <__swsetup_r+0x16>
 800d520:	69ab      	ldr	r3, [r5, #24]
 800d522:	b913      	cbnz	r3, 800d52a <__swsetup_r+0x16>
 800d524:	4628      	mov	r0, r5
 800d526:	f7ff f937 	bl	800c798 <__sinit>
 800d52a:	4b2e      	ldr	r3, [pc, #184]	; (800d5e4 <__swsetup_r+0xd0>)
 800d52c:	429c      	cmp	r4, r3
 800d52e:	d10f      	bne.n	800d550 <__swsetup_r+0x3c>
 800d530:	686c      	ldr	r4, [r5, #4]
 800d532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d536:	b29a      	uxth	r2, r3
 800d538:	0715      	lsls	r5, r2, #28
 800d53a:	d42c      	bmi.n	800d596 <__swsetup_r+0x82>
 800d53c:	06d0      	lsls	r0, r2, #27
 800d53e:	d411      	bmi.n	800d564 <__swsetup_r+0x50>
 800d540:	2209      	movs	r2, #9
 800d542:	6032      	str	r2, [r6, #0]
 800d544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d548:	81a3      	strh	r3, [r4, #12]
 800d54a:	f04f 30ff 	mov.w	r0, #4294967295
 800d54e:	e03e      	b.n	800d5ce <__swsetup_r+0xba>
 800d550:	4b25      	ldr	r3, [pc, #148]	; (800d5e8 <__swsetup_r+0xd4>)
 800d552:	429c      	cmp	r4, r3
 800d554:	d101      	bne.n	800d55a <__swsetup_r+0x46>
 800d556:	68ac      	ldr	r4, [r5, #8]
 800d558:	e7eb      	b.n	800d532 <__swsetup_r+0x1e>
 800d55a:	4b24      	ldr	r3, [pc, #144]	; (800d5ec <__swsetup_r+0xd8>)
 800d55c:	429c      	cmp	r4, r3
 800d55e:	bf08      	it	eq
 800d560:	68ec      	ldreq	r4, [r5, #12]
 800d562:	e7e6      	b.n	800d532 <__swsetup_r+0x1e>
 800d564:	0751      	lsls	r1, r2, #29
 800d566:	d512      	bpl.n	800d58e <__swsetup_r+0x7a>
 800d568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d56a:	b141      	cbz	r1, 800d57e <__swsetup_r+0x6a>
 800d56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d570:	4299      	cmp	r1, r3
 800d572:	d002      	beq.n	800d57a <__swsetup_r+0x66>
 800d574:	4630      	mov	r0, r6
 800d576:	f7fd fd3f 	bl	800aff8 <_free_r>
 800d57a:	2300      	movs	r3, #0
 800d57c:	6363      	str	r3, [r4, #52]	; 0x34
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	2300      	movs	r3, #0
 800d588:	6063      	str	r3, [r4, #4]
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	f043 0308 	orr.w	r3, r3, #8
 800d594:	81a3      	strh	r3, [r4, #12]
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	b94b      	cbnz	r3, 800d5ae <__swsetup_r+0x9a>
 800d59a:	89a3      	ldrh	r3, [r4, #12]
 800d59c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5a4:	d003      	beq.n	800d5ae <__swsetup_r+0x9a>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f000 f917 	bl	800d7dc <__smakebuf_r>
 800d5ae:	89a2      	ldrh	r2, [r4, #12]
 800d5b0:	f012 0301 	ands.w	r3, r2, #1
 800d5b4:	d00c      	beq.n	800d5d0 <__swsetup_r+0xbc>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60a3      	str	r3, [r4, #8]
 800d5ba:	6963      	ldr	r3, [r4, #20]
 800d5bc:	425b      	negs	r3, r3
 800d5be:	61a3      	str	r3, [r4, #24]
 800d5c0:	6923      	ldr	r3, [r4, #16]
 800d5c2:	b953      	cbnz	r3, 800d5da <__swsetup_r+0xc6>
 800d5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d5cc:	d1ba      	bne.n	800d544 <__swsetup_r+0x30>
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	0792      	lsls	r2, r2, #30
 800d5d2:	bf58      	it	pl
 800d5d4:	6963      	ldrpl	r3, [r4, #20]
 800d5d6:	60a3      	str	r3, [r4, #8]
 800d5d8:	e7f2      	b.n	800d5c0 <__swsetup_r+0xac>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	e7f7      	b.n	800d5ce <__swsetup_r+0xba>
 800d5de:	bf00      	nop
 800d5e0:	20000184 	.word	0x20000184
 800d5e4:	0800dba4 	.word	0x0800dba4
 800d5e8:	0800dbc4 	.word	0x0800dbc4
 800d5ec:	0800db84 	.word	0x0800db84

0800d5f0 <_close_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4c06      	ldr	r4, [pc, #24]	; (800d60c <_close_r+0x1c>)
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	4608      	mov	r0, r1
 800d5fa:	6023      	str	r3, [r4, #0]
 800d5fc:	f7fc fed9 	bl	800a3b2 <_close>
 800d600:	1c43      	adds	r3, r0, #1
 800d602:	d102      	bne.n	800d60a <_close_r+0x1a>
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	b103      	cbz	r3, 800d60a <_close_r+0x1a>
 800d608:	602b      	str	r3, [r5, #0]
 800d60a:	bd38      	pop	{r3, r4, r5, pc}
 800d60c:	200026dc 	.word	0x200026dc

0800d610 <__sflush_r>:
 800d610:	898a      	ldrh	r2, [r1, #12]
 800d612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d616:	4605      	mov	r5, r0
 800d618:	0710      	lsls	r0, r2, #28
 800d61a:	460c      	mov	r4, r1
 800d61c:	d458      	bmi.n	800d6d0 <__sflush_r+0xc0>
 800d61e:	684b      	ldr	r3, [r1, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	dc05      	bgt.n	800d630 <__sflush_r+0x20>
 800d624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	dc02      	bgt.n	800d630 <__sflush_r+0x20>
 800d62a:	2000      	movs	r0, #0
 800d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d632:	2e00      	cmp	r6, #0
 800d634:	d0f9      	beq.n	800d62a <__sflush_r+0x1a>
 800d636:	2300      	movs	r3, #0
 800d638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d63c:	682f      	ldr	r7, [r5, #0]
 800d63e:	6a21      	ldr	r1, [r4, #32]
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	d032      	beq.n	800d6aa <__sflush_r+0x9a>
 800d644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	075a      	lsls	r2, r3, #29
 800d64a:	d505      	bpl.n	800d658 <__sflush_r+0x48>
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	1ac0      	subs	r0, r0, r3
 800d650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d652:	b10b      	cbz	r3, 800d658 <__sflush_r+0x48>
 800d654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d656:	1ac0      	subs	r0, r0, r3
 800d658:	2300      	movs	r3, #0
 800d65a:	4602      	mov	r2, r0
 800d65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d65e:	6a21      	ldr	r1, [r4, #32]
 800d660:	4628      	mov	r0, r5
 800d662:	47b0      	blx	r6
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	d106      	bne.n	800d678 <__sflush_r+0x68>
 800d66a:	6829      	ldr	r1, [r5, #0]
 800d66c:	291d      	cmp	r1, #29
 800d66e:	d848      	bhi.n	800d702 <__sflush_r+0xf2>
 800d670:	4a29      	ldr	r2, [pc, #164]	; (800d718 <__sflush_r+0x108>)
 800d672:	40ca      	lsrs	r2, r1
 800d674:	07d6      	lsls	r6, r2, #31
 800d676:	d544      	bpl.n	800d702 <__sflush_r+0xf2>
 800d678:	2200      	movs	r2, #0
 800d67a:	6062      	str	r2, [r4, #4]
 800d67c:	04d9      	lsls	r1, r3, #19
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	6022      	str	r2, [r4, #0]
 800d682:	d504      	bpl.n	800d68e <__sflush_r+0x7e>
 800d684:	1c42      	adds	r2, r0, #1
 800d686:	d101      	bne.n	800d68c <__sflush_r+0x7c>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b903      	cbnz	r3, 800d68e <__sflush_r+0x7e>
 800d68c:	6560      	str	r0, [r4, #84]	; 0x54
 800d68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d690:	602f      	str	r7, [r5, #0]
 800d692:	2900      	cmp	r1, #0
 800d694:	d0c9      	beq.n	800d62a <__sflush_r+0x1a>
 800d696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d69a:	4299      	cmp	r1, r3
 800d69c:	d002      	beq.n	800d6a4 <__sflush_r+0x94>
 800d69e:	4628      	mov	r0, r5
 800d6a0:	f7fd fcaa 	bl	800aff8 <_free_r>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	6360      	str	r0, [r4, #52]	; 0x34
 800d6a8:	e7c0      	b.n	800d62c <__sflush_r+0x1c>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	47b0      	blx	r6
 800d6b0:	1c41      	adds	r1, r0, #1
 800d6b2:	d1c8      	bne.n	800d646 <__sflush_r+0x36>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0c5      	beq.n	800d646 <__sflush_r+0x36>
 800d6ba:	2b1d      	cmp	r3, #29
 800d6bc:	d001      	beq.n	800d6c2 <__sflush_r+0xb2>
 800d6be:	2b16      	cmp	r3, #22
 800d6c0:	d101      	bne.n	800d6c6 <__sflush_r+0xb6>
 800d6c2:	602f      	str	r7, [r5, #0]
 800d6c4:	e7b1      	b.n	800d62a <__sflush_r+0x1a>
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	e7ad      	b.n	800d62c <__sflush_r+0x1c>
 800d6d0:	690f      	ldr	r7, [r1, #16]
 800d6d2:	2f00      	cmp	r7, #0
 800d6d4:	d0a9      	beq.n	800d62a <__sflush_r+0x1a>
 800d6d6:	0793      	lsls	r3, r2, #30
 800d6d8:	680e      	ldr	r6, [r1, #0]
 800d6da:	bf08      	it	eq
 800d6dc:	694b      	ldreq	r3, [r1, #20]
 800d6de:	600f      	str	r7, [r1, #0]
 800d6e0:	bf18      	it	ne
 800d6e2:	2300      	movne	r3, #0
 800d6e4:	eba6 0807 	sub.w	r8, r6, r7
 800d6e8:	608b      	str	r3, [r1, #8]
 800d6ea:	f1b8 0f00 	cmp.w	r8, #0
 800d6ee:	dd9c      	ble.n	800d62a <__sflush_r+0x1a>
 800d6f0:	4643      	mov	r3, r8
 800d6f2:	463a      	mov	r2, r7
 800d6f4:	6a21      	ldr	r1, [r4, #32]
 800d6f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	47b0      	blx	r6
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	dc06      	bgt.n	800d70e <__sflush_r+0xfe>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	e78e      	b.n	800d62c <__sflush_r+0x1c>
 800d70e:	4407      	add	r7, r0
 800d710:	eba8 0800 	sub.w	r8, r8, r0
 800d714:	e7e9      	b.n	800d6ea <__sflush_r+0xda>
 800d716:	bf00      	nop
 800d718:	20400001 	.word	0x20400001

0800d71c <_fflush_r>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	690b      	ldr	r3, [r1, #16]
 800d720:	4605      	mov	r5, r0
 800d722:	460c      	mov	r4, r1
 800d724:	b1db      	cbz	r3, 800d75e <_fflush_r+0x42>
 800d726:	b118      	cbz	r0, 800d730 <_fflush_r+0x14>
 800d728:	6983      	ldr	r3, [r0, #24]
 800d72a:	b90b      	cbnz	r3, 800d730 <_fflush_r+0x14>
 800d72c:	f7ff f834 	bl	800c798 <__sinit>
 800d730:	4b0c      	ldr	r3, [pc, #48]	; (800d764 <_fflush_r+0x48>)
 800d732:	429c      	cmp	r4, r3
 800d734:	d109      	bne.n	800d74a <_fflush_r+0x2e>
 800d736:	686c      	ldr	r4, [r5, #4]
 800d738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d73c:	b17b      	cbz	r3, 800d75e <_fflush_r+0x42>
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d746:	f7ff bf63 	b.w	800d610 <__sflush_r>
 800d74a:	4b07      	ldr	r3, [pc, #28]	; (800d768 <_fflush_r+0x4c>)
 800d74c:	429c      	cmp	r4, r3
 800d74e:	d101      	bne.n	800d754 <_fflush_r+0x38>
 800d750:	68ac      	ldr	r4, [r5, #8]
 800d752:	e7f1      	b.n	800d738 <_fflush_r+0x1c>
 800d754:	4b05      	ldr	r3, [pc, #20]	; (800d76c <_fflush_r+0x50>)
 800d756:	429c      	cmp	r4, r3
 800d758:	bf08      	it	eq
 800d75a:	68ec      	ldreq	r4, [r5, #12]
 800d75c:	e7ec      	b.n	800d738 <_fflush_r+0x1c>
 800d75e:	2000      	movs	r0, #0
 800d760:	bd38      	pop	{r3, r4, r5, pc}
 800d762:	bf00      	nop
 800d764:	0800dba4 	.word	0x0800dba4
 800d768:	0800dbc4 	.word	0x0800dbc4
 800d76c:	0800db84 	.word	0x0800db84

0800d770 <_lseek_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4c07      	ldr	r4, [pc, #28]	; (800d790 <_lseek_r+0x20>)
 800d774:	4605      	mov	r5, r0
 800d776:	4608      	mov	r0, r1
 800d778:	4611      	mov	r1, r2
 800d77a:	2200      	movs	r2, #0
 800d77c:	6022      	str	r2, [r4, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	f7fc fe3e 	bl	800a400 <_lseek>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_lseek_r+0x1e>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_lseek_r+0x1e>
 800d78c:	602b      	str	r3, [r5, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	200026dc 	.word	0x200026dc

0800d794 <__swhatbuf_r>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	460e      	mov	r6, r1
 800d798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d79c:	2900      	cmp	r1, #0
 800d79e:	b096      	sub	sp, #88	; 0x58
 800d7a0:	4614      	mov	r4, r2
 800d7a2:	461d      	mov	r5, r3
 800d7a4:	da07      	bge.n	800d7b6 <__swhatbuf_r+0x22>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	602b      	str	r3, [r5, #0]
 800d7aa:	89b3      	ldrh	r3, [r6, #12]
 800d7ac:	061a      	lsls	r2, r3, #24
 800d7ae:	d410      	bmi.n	800d7d2 <__swhatbuf_r+0x3e>
 800d7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7b4:	e00e      	b.n	800d7d4 <__swhatbuf_r+0x40>
 800d7b6:	466a      	mov	r2, sp
 800d7b8:	f000 f8c2 	bl	800d940 <_fstat_r>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	dbf2      	blt.n	800d7a6 <__swhatbuf_r+0x12>
 800d7c0:	9a01      	ldr	r2, [sp, #4]
 800d7c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d7c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d7ca:	425a      	negs	r2, r3
 800d7cc:	415a      	adcs	r2, r3
 800d7ce:	602a      	str	r2, [r5, #0]
 800d7d0:	e7ee      	b.n	800d7b0 <__swhatbuf_r+0x1c>
 800d7d2:	2340      	movs	r3, #64	; 0x40
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	b016      	add	sp, #88	; 0x58
 800d7da:	bd70      	pop	{r4, r5, r6, pc}

0800d7dc <__smakebuf_r>:
 800d7dc:	898b      	ldrh	r3, [r1, #12]
 800d7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7e0:	079d      	lsls	r5, r3, #30
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	d507      	bpl.n	800d7f8 <__smakebuf_r+0x1c>
 800d7e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	6123      	str	r3, [r4, #16]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	6163      	str	r3, [r4, #20]
 800d7f4:	b002      	add	sp, #8
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}
 800d7f8:	ab01      	add	r3, sp, #4
 800d7fa:	466a      	mov	r2, sp
 800d7fc:	f7ff ffca 	bl	800d794 <__swhatbuf_r>
 800d800:	9900      	ldr	r1, [sp, #0]
 800d802:	4605      	mov	r5, r0
 800d804:	4630      	mov	r0, r6
 800d806:	f7fd fc45 	bl	800b094 <_malloc_r>
 800d80a:	b948      	cbnz	r0, 800d820 <__smakebuf_r+0x44>
 800d80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d810:	059a      	lsls	r2, r3, #22
 800d812:	d4ef      	bmi.n	800d7f4 <__smakebuf_r+0x18>
 800d814:	f023 0303 	bic.w	r3, r3, #3
 800d818:	f043 0302 	orr.w	r3, r3, #2
 800d81c:	81a3      	strh	r3, [r4, #12]
 800d81e:	e7e3      	b.n	800d7e8 <__smakebuf_r+0xc>
 800d820:	4b0d      	ldr	r3, [pc, #52]	; (800d858 <__smakebuf_r+0x7c>)
 800d822:	62b3      	str	r3, [r6, #40]	; 0x28
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	6020      	str	r0, [r4, #0]
 800d828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d82c:	81a3      	strh	r3, [r4, #12]
 800d82e:	9b00      	ldr	r3, [sp, #0]
 800d830:	6163      	str	r3, [r4, #20]
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	6120      	str	r0, [r4, #16]
 800d836:	b15b      	cbz	r3, 800d850 <__smakebuf_r+0x74>
 800d838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d83c:	4630      	mov	r0, r6
 800d83e:	f000 f891 	bl	800d964 <_isatty_r>
 800d842:	b128      	cbz	r0, 800d850 <__smakebuf_r+0x74>
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	f023 0303 	bic.w	r3, r3, #3
 800d84a:	f043 0301 	orr.w	r3, r3, #1
 800d84e:	81a3      	strh	r3, [r4, #12]
 800d850:	89a3      	ldrh	r3, [r4, #12]
 800d852:	431d      	orrs	r5, r3
 800d854:	81a5      	strh	r5, [r4, #12]
 800d856:	e7cd      	b.n	800d7f4 <__smakebuf_r+0x18>
 800d858:	0800c761 	.word	0x0800c761

0800d85c <__ascii_mbtowc>:
 800d85c:	b082      	sub	sp, #8
 800d85e:	b901      	cbnz	r1, 800d862 <__ascii_mbtowc+0x6>
 800d860:	a901      	add	r1, sp, #4
 800d862:	b142      	cbz	r2, 800d876 <__ascii_mbtowc+0x1a>
 800d864:	b14b      	cbz	r3, 800d87a <__ascii_mbtowc+0x1e>
 800d866:	7813      	ldrb	r3, [r2, #0]
 800d868:	600b      	str	r3, [r1, #0]
 800d86a:	7812      	ldrb	r2, [r2, #0]
 800d86c:	1c10      	adds	r0, r2, #0
 800d86e:	bf18      	it	ne
 800d870:	2001      	movne	r0, #1
 800d872:	b002      	add	sp, #8
 800d874:	4770      	bx	lr
 800d876:	4610      	mov	r0, r2
 800d878:	e7fb      	b.n	800d872 <__ascii_mbtowc+0x16>
 800d87a:	f06f 0001 	mvn.w	r0, #1
 800d87e:	e7f8      	b.n	800d872 <__ascii_mbtowc+0x16>

0800d880 <memmove>:
 800d880:	4288      	cmp	r0, r1
 800d882:	b510      	push	{r4, lr}
 800d884:	eb01 0302 	add.w	r3, r1, r2
 800d888:	d807      	bhi.n	800d89a <memmove+0x1a>
 800d88a:	1e42      	subs	r2, r0, #1
 800d88c:	4299      	cmp	r1, r3
 800d88e:	d00a      	beq.n	800d8a6 <memmove+0x26>
 800d890:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d894:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d898:	e7f8      	b.n	800d88c <memmove+0xc>
 800d89a:	4283      	cmp	r3, r0
 800d89c:	d9f5      	bls.n	800d88a <memmove+0xa>
 800d89e:	1881      	adds	r1, r0, r2
 800d8a0:	1ad2      	subs	r2, r2, r3
 800d8a2:	42d3      	cmn	r3, r2
 800d8a4:	d100      	bne.n	800d8a8 <memmove+0x28>
 800d8a6:	bd10      	pop	{r4, pc}
 800d8a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d8b0:	e7f7      	b.n	800d8a2 <memmove+0x22>

0800d8b2 <_realloc_r>:
 800d8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	4614      	mov	r4, r2
 800d8b8:	460e      	mov	r6, r1
 800d8ba:	b921      	cbnz	r1, 800d8c6 <_realloc_r+0x14>
 800d8bc:	4611      	mov	r1, r2
 800d8be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8c2:	f7fd bbe7 	b.w	800b094 <_malloc_r>
 800d8c6:	b922      	cbnz	r2, 800d8d2 <_realloc_r+0x20>
 800d8c8:	f7fd fb96 	bl	800aff8 <_free_r>
 800d8cc:	4625      	mov	r5, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d2:	f000 f857 	bl	800d984 <_malloc_usable_size_r>
 800d8d6:	42a0      	cmp	r0, r4
 800d8d8:	d20f      	bcs.n	800d8fa <_realloc_r+0x48>
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f7fd fbd9 	bl	800b094 <_malloc_r>
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d0f2      	beq.n	800d8ce <_realloc_r+0x1c>
 800d8e8:	4631      	mov	r1, r6
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	f7fd fb70 	bl	800afd0 <memcpy>
 800d8f0:	4631      	mov	r1, r6
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f7fd fb80 	bl	800aff8 <_free_r>
 800d8f8:	e7e9      	b.n	800d8ce <_realloc_r+0x1c>
 800d8fa:	4635      	mov	r5, r6
 800d8fc:	e7e7      	b.n	800d8ce <_realloc_r+0x1c>
	...

0800d900 <_read_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	4c07      	ldr	r4, [pc, #28]	; (800d920 <_read_r+0x20>)
 800d904:	4605      	mov	r5, r0
 800d906:	4608      	mov	r0, r1
 800d908:	4611      	mov	r1, r2
 800d90a:	2200      	movs	r2, #0
 800d90c:	6022      	str	r2, [r4, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	f7fc fd16 	bl	800a340 <_read>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <_read_r+0x1e>
 800d918:	6823      	ldr	r3, [r4, #0]
 800d91a:	b103      	cbz	r3, 800d91e <_read_r+0x1e>
 800d91c:	602b      	str	r3, [r5, #0]
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	200026dc 	.word	0x200026dc

0800d924 <__ascii_wctomb>:
 800d924:	b149      	cbz	r1, 800d93a <__ascii_wctomb+0x16>
 800d926:	2aff      	cmp	r2, #255	; 0xff
 800d928:	bf85      	ittet	hi
 800d92a:	238a      	movhi	r3, #138	; 0x8a
 800d92c:	6003      	strhi	r3, [r0, #0]
 800d92e:	700a      	strbls	r2, [r1, #0]
 800d930:	f04f 30ff 	movhi.w	r0, #4294967295
 800d934:	bf98      	it	ls
 800d936:	2001      	movls	r0, #1
 800d938:	4770      	bx	lr
 800d93a:	4608      	mov	r0, r1
 800d93c:	4770      	bx	lr
	...

0800d940 <_fstat_r>:
 800d940:	b538      	push	{r3, r4, r5, lr}
 800d942:	4c07      	ldr	r4, [pc, #28]	; (800d960 <_fstat_r+0x20>)
 800d944:	2300      	movs	r3, #0
 800d946:	4605      	mov	r5, r0
 800d948:	4608      	mov	r0, r1
 800d94a:	4611      	mov	r1, r2
 800d94c:	6023      	str	r3, [r4, #0]
 800d94e:	f7fc fd3c 	bl	800a3ca <_fstat>
 800d952:	1c43      	adds	r3, r0, #1
 800d954:	d102      	bne.n	800d95c <_fstat_r+0x1c>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	b103      	cbz	r3, 800d95c <_fstat_r+0x1c>
 800d95a:	602b      	str	r3, [r5, #0]
 800d95c:	bd38      	pop	{r3, r4, r5, pc}
 800d95e:	bf00      	nop
 800d960:	200026dc 	.word	0x200026dc

0800d964 <_isatty_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4c06      	ldr	r4, [pc, #24]	; (800d980 <_isatty_r+0x1c>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4605      	mov	r5, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	6023      	str	r3, [r4, #0]
 800d970:	f7fc fd3b 	bl	800a3ea <_isatty>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_isatty_r+0x1a>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_isatty_r+0x1a>
 800d97c:	602b      	str	r3, [r5, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	200026dc 	.word	0x200026dc

0800d984 <_malloc_usable_size_r>:
 800d984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d988:	1f18      	subs	r0, r3, #4
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	bfbc      	itt	lt
 800d98e:	580b      	ldrlt	r3, [r1, r0]
 800d990:	18c0      	addlt	r0, r0, r3
 800d992:	4770      	bx	lr

0800d994 <_init>:
 800d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d996:	bf00      	nop
 800d998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d99a:	bc08      	pop	{r3}
 800d99c:	469e      	mov	lr, r3
 800d99e:	4770      	bx	lr

0800d9a0 <_fini>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	bf00      	nop
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr
